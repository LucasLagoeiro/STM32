
ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b380  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b618  0800b618  0000c618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b658  0800b658  0000d0d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b658  0800b658  0000c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b660  0800b660  0000d0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b660  0800b660  0000c660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b664  0800b664  0000c664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800b668  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800b678  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800b6d8  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000780  240000d0  0800b738  0000d0d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000850  0800b738  0000d850  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000d0d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f4f7  00000000  00000000  0000d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035af  00000000  00000000  0002c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ed  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d269  00000000  00000000  0003227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dde0  00000000  00000000  0006f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00196ac9  00000000  00000000  0008d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00223d8f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005eec  00000000  00000000  00223dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00229cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b600 	.word	0x0800b600

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800b600 	.word	0x0800b600

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <main+0xf0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fae3 	bl	8000ce8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fe17 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f867 	bl	80007f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <main+0xf0>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a2c      	ldr	r2, [pc, #176]	@ (80007e4 <main+0xf0>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <main+0xf0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f005 fc9d 	bl	8006088 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f005 fcb3 	bl	80060bc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <main+0xf0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fab5 	bl	8000ce8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa4d 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000782:	f000 fa2b 	bl	8000bdc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000786:	f000 f9ab 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078a:	f000 f9f5 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC1_Init();
 800078e:	f000 f929 	bl	80009e4 <MX_DAC1_Init>
  MX_ETH_Init();
 8000792:	f000 f959 	bl	8000a48 <MX_ETH_Init>
  MX_ADC1_Init();
 8000796:	f000 f8ab 	bl	80008f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 800079a:	2110      	movs	r1, #16
 800079c:	4812      	ldr	r0, [pc, #72]	@ (80007e8 <main+0xf4>)
 800079e:	f002 fbf4 	bl	8002f8a <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007a2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80007aa:	4810      	ldr	r0, [pc, #64]	@ (80007ec <main+0xf8>)
 80007ac:	f002 f97a 	bl	8002aa4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	490f      	ldr	r1, [pc, #60]	@ (80007f0 <main+0xfc>)
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <main+0xf8>)
 80007b6:	f001 fa53 	bl	8001c60 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <main+0x100>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <main+0xf4>)
 80007c4:	f002 fc38 	bl	8003038 <HAL_DAC_SetValue>
	value_dac++;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <main+0x100>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <main+0x100>)
 80007d0:	6013      	str	r3, [r2, #0]
	if(value_dac>4095) {
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <main+0x100>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007da:	d3ee      	bcc.n	80007ba <main+0xc6>
		value_dac=0;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <main+0x100>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value_dac);
 80007e2:	e7ea      	b.n	80007ba <main+0xc6>
 80007e4:	58024400 	.word	0x58024400
 80007e8:	24000200 	.word	0x24000200
 80007ec:	24000124 	.word	0x24000124
 80007f0:	2400083c 	.word	0x2400083c
 80007f4:	24000840 	.word	0x24000840

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09c      	sub	sp, #112	@ 0x70
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	224c      	movs	r2, #76	@ 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f00a fecd 	bl	800b5a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2220      	movs	r2, #32
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00a fec7 	bl	800b5a6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000818:	2004      	movs	r0, #4
 800081a:	f005 fd93 	bl	8006344 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <SystemClock_Config+0xf0>)
 8000824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000826:	4a30      	ldr	r2, [pc, #192]	@ (80008e8 <SystemClock_Config+0xf0>)
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800082e:	4b2e      	ldr	r3, [pc, #184]	@ (80008e8 <SystemClock_Config+0xf0>)
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <SystemClock_Config+0xf4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000840:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <SystemClock_Config+0xf4>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <SystemClock_Config+0xf4>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000854:	bf00      	nop
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <SystemClock_Config+0xf4>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000862:	d1f8      	bne.n	8000856 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800087a:	2314      	movs	r3, #20
 800087c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088a:	230c      	movs	r3, #12
 800088c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800088e:	2302      	movs	r3, #2
 8000890:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089a:	4618      	mov	r0, r3
 800089c:	f005 fdbc 	bl	8006418 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008a6:	f000 fa1f 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	@ 0x3f
 80008ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c8:	2340      	movs	r3, #64	@ 0x40
 80008ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2101      	movs	r1, #1
 80008d0:	4618      	mov	r0, r3
 80008d2:	f006 f9fb 	bl	8006ccc <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008dc:	f000 fa04 	bl	8000ce8 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	@ 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58000400 	.word	0x58000400
 80008ec:	58024800 	.word	0x58024800

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000914:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000916:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <MX_ADC1_Init+0xec>)
 8000918:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800091a:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800091c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000920:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000924:	2208      	movs	r2, #8
 8000926:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000930:	2204      	movs	r2, #4
 8000932:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800093a:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800093c:	2201      	movs	r2, #1
 800093e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000942:	2201      	movs	r2, #1
 8000944:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000948:	2200      	movs	r2, #0
 800094a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800095a:	2203      	movs	r2, #3
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000972:	4819      	ldr	r0, [pc, #100]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 8000974:	f000 ffd2 	bl	800191c <HAL_ADC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800097e:	f000 f9b3 	bl	8000ce8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 800098e:	f002 f8ed 	bl	8002b6c <HAL_ADCEx_MultiModeConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000998:	f000 f9a6 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_ADC1_Init+0xf0>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2306      	movs	r3, #6
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80009a4:	2306      	movs	r3, #6
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ae:	2304      	movs	r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_ADC1_Init+0xe8>)
 80009c0:	f001 fa30 	bl	8001e24 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009ca:	f000 f98d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000124 	.word	0x24000124
 80009dc:	40022000 	.word	0x40022000
 80009e0:	0c900008 	.word	0x0c900008

080009e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2224      	movs	r2, #36	@ 0x24
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00a fdd8 	bl	800b5a6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_DAC1_Init+0x5c>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_DAC1_Init+0x60>)
 80009fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009fc:	4810      	ldr	r0, [pc, #64]	@ (8000a40 <MX_DAC1_Init+0x5c>)
 80009fe:	f002 faa2 	bl	8002f46 <HAL_DAC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a08:	f000 f96e 	bl	8000ce8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2210      	movs	r2, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <MX_DAC1_Init+0x5c>)
 8000a28:	f002 fb30 	bl	800308c <HAL_DAC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f959 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000200 	.word	0x24000200
 8000a44:	40007400 	.word	0x40007400

08000a48 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <MX_ETH_Init+0x84>)
 8000a50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a60:	22e1      	movs	r2, #225	@ 0xe1
 8000a62:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a78:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <MX_ETH_Init+0x88>)
 8000a7a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a84:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <MX_ETH_Init+0x8c>)
 8000a86:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ad8 <MX_ETH_Init+0x90>)
 8000a8c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a90:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a94:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a96:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <MX_ETH_Init+0x80>)
 8000a98:	f004 fd12 	bl	80054c0 <HAL_ETH_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aa2:	f000 f921 	bl	8000ce8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aa6:	2238      	movs	r2, #56	@ 0x38
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_ETH_Init+0x94>)
 8000aac:	f00a fd7b 	bl	800b5a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <MX_ETH_Init+0x94>)
 8000ab2:	2221      	movs	r2, #33	@ 0x21
 8000ab4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_ETH_Init+0x94>)
 8000ab8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000abc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <MX_ETH_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000214 	.word	0x24000214
 8000acc:	40028000 	.word	0x40028000
 8000ad0:	24000844 	.word	0x24000844
 8000ad4:	24000070 	.word	0x24000070
 8000ad8:	24000010 	.word	0x24000010
 8000adc:	240000ec 	.word	0x240000ec

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	@ (8000b74 <MX_USART3_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b2a:	f009 f959 	bl	8009de0 <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f8d8 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b3c:	f00a f961 	bl	800ae02 <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f000 f8cf 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f00a f996 	bl	800ae7e <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f000 f8c6 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f00a f917 	bl	800ad90 <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f8be 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240002c4 	.word	0x240002c4
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7e:	4a16      	ldr	r2, [pc, #88]	@ (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b84:	2209      	movs	r2, #9
 8000b86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc0:	f005 fa90 	bl	80060e4 <HAL_PCD_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bca:	f000 f88d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	24000358 	.word	0x24000358
 8000bd8:	40080000 	.word	0x40080000

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <MX_DMA_Init+0x3c>)
 8000be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <MX_DMA_Init+0x3c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_DMA_Init+0x3c>)
 8000bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	200c      	movs	r0, #12
 8000c06:	f002 f96a 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c0a:	200c      	movs	r0, #12
 8000c0c:	f002 f981 	bl	8002f12 <HAL_NVIC_EnableIRQ>

}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58024400 	.word	0x58024400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c28:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c40:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a27      	ldr	r2, [pc, #156]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a09      	ldr	r2, [pc, #36]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_GPIO_Init+0xc8>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d00:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x30>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00a fc2c 	bl	800b5a6 <memset>
  if(hadc->Instance==ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a44      	ldr	r2, [pc, #272]	@ (8000e64 <HAL_ADC_MspInit+0x13c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 8081 	bne.w	8000e5c <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000d6a:	2312      	movs	r3, #18
 8000d6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d7a:	23c0      	movs	r3, #192	@ 0xc0
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000d82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 fb26 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000d9e:	f7ff ffa3 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000daa:	f043 0320 	orr.w	r3, r3, #32
 8000dae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000db2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a28      	ldr	r2, [pc, #160]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <HAL_ADC_MspInit+0x140>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dde:	2340      	movs	r3, #64	@ 0x40
 8000de0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <HAL_ADC_MspInit+0x144>)
 8000df8:	f004 ff96 	bl	8005d28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <HAL_ADC_MspInit+0x14c>)
 8000e00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e04:	2209      	movs	r2, #9
 8000e06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e40:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e42:	f002 fa65 	bl	8003310 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000e4c:	f7ff ff4c 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e56:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_ADC_MspInit+0x148>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	37e8      	adds	r7, #232	@ 0xe8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40022000 	.word	0x40022000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	24000188 	.word	0x24000188
 8000e74:	40020028 	.word	0x40020028

08000e78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d129      	bne.n	8000eee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea0:	4a16      	ldr	r2, [pc, #88]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000ea2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_DAC_MspInit+0x84>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_DAC_MspInit+0x88>)
 8000eea:	f004 ff1d 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40007400 	.word	0x40007400
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020000 	.word	0x58020000

08000f04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <HAL_ETH_MspInit+0x184>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80ab 	bne.w	800107e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f28:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f2e:	4a57      	ldr	r2, [pc, #348]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f38:	4b54      	ldr	r3, [pc, #336]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f64:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f6a:	4a48      	ldr	r2, [pc, #288]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f74:	4b45      	ldr	r3, [pc, #276]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b42      	ldr	r3, [pc, #264]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2332      	movs	r3, #50	@ 0x32
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	@ (8001090 <HAL_ETH_MspInit+0x18c>)
 8001016:	f004 fe87 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800101a:	2386      	movs	r3, #134	@ 0x86
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <HAL_ETH_MspInit+0x190>)
 8001036:	f004 fe77 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <HAL_ETH_MspInit+0x194>)
 8001058:	f004 fe66 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	@ (800109c <HAL_ETH_MspInit+0x198>)
 800107a:	f004 fe55 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	58021800 	.word	0x58021800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	@ 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	@ 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00a fa70 	bl	800b5a6 <memset>
  if(huart->Instance==USART3)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <HAL_UART_MspInit+0xc8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d0:	f04f 0202 	mov.w	r2, #2
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f97c 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f7ff fdf9 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <HAL_UART_MspInit+0xcc>)
 80010f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <HAL_UART_MspInit+0xcc>)
 80010fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001102:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_UART_MspInit+0xcc>)
 8001108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800110c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <HAL_UART_MspInit+0xcc>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a14      	ldr	r2, [pc, #80]	@ (800116c <HAL_UART_MspInit+0xcc>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_UART_MspInit+0xcc>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001132:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114c:	2307      	movs	r3, #7
 800114e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <HAL_UART_MspInit+0xd0>)
 800115a:	f004 fde5 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	@ 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004800 	.word	0x40004800
 800116c:	58024400 	.word	0x58024400
 8001170:	58020c00 	.word	0x58020c00

08001174 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0ba      	sub	sp, #232	@ 0xe8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	22c0      	movs	r2, #192	@ 0xc0
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00a fa06 	bl	800b5a6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <HAL_PCD_MspInit+0x10c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d169      	bne.n	8001278 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011b4:	2312      	movs	r3, #18
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011bc:	2303      	movs	r3, #3
 80011be:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011ce:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 f901 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80011e8:	f7ff fd7e 	bl	8000ce8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011ec:	f005 f904 	bl	80063f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f6:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800120e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001228:	230a      	movs	r3, #10
 800122a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001232:	4619      	mov	r1, r3
 8001234:	4814      	ldr	r0, [pc, #80]	@ (8001288 <HAL_PCD_MspInit+0x114>)
 8001236:	f004 fd77 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800123e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <HAL_PCD_MspInit+0x114>)
 8001256:	f004 fd67 	bl	8005d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 8001262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001266:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_PCD_MspInit+0x110>)
 800126c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	37e8      	adds	r7, #232	@ 0xe8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40080000 	.word	0x40080000
 8001284:	58024400 	.word	0x58024400
 8001288:	58020000 	.word	0x58020000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <NMI_Handler+0x4>

08001294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <MemManage_Handler+0x4>

080012a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f8a9 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA1_Stream1_IRQHandler+0x10>)
 80012f2:	f002 fdd3 	bl	8003e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000188 	.word	0x24000188

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001338 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001304:	f7ff f960 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	@ (8001340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	@ (800134c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f00a f943 	bl	800b5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff f9df 	bl	80006f4 <main>
  bx  lr
 8001336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800133c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001340:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001344:	0800b668 	.word	0x0800b668
  ldr r2, =_sbss
 8001348:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800134c:	24000850 	.word	0x24000850

08001350 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC3_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135a:	2003      	movs	r0, #3
 800135c:	f001 fdb4 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001360:	f005 fe6a 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4913      	ldr	r1, [pc, #76]	@ (80013c0 <HAL_Init+0x6c>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_Init+0x68>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_Init+0x6c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_Init+0x70>)
 8001396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_Init+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f814 	bl	80013cc <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e002      	b.n	80013b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff fca1 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58024400 	.word	0x58024400
 80013c0:	0800b618 	.word	0x0800b618
 80013c4:	24000004 	.word	0x24000004
 80013c8:	24000000 	.word	0x24000000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e021      	b.n	8001424 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <HAL_InitTick+0x64>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_InitTick+0x60>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fd99 	bl	8002f2e <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f001 fd63 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_InitTick+0x68>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2400000c 	.word	0x2400000c
 8001430:	24000000 	.word	0x24000000
 8001434:	24000008 	.word	0x24000008

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2400000c 	.word	0x2400000c
 800145c:	2400084c 	.word	0x2400084c

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2400084c 	.word	0x2400084c

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2400000c 	.word	0x2400000c

080014c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetREVID+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	5c001000 	.word	0x5c001000

080014d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	58000400 	.word	0x58000400

08001500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	609a      	str	r2, [r3, #8]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3360      	adds	r3, #96	@ 0x60
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	430b      	orrs	r3, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	431a      	orrs	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	611a      	str	r2, [r3, #16]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80015da:	b480      	push	{r7}
 80015dc:	b087      	sub	sp, #28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3360      	adds	r3, #96	@ 0x60
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	431a      	orrs	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]
  }
}
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3330      	adds	r3, #48	@ 0x30
 8001646:	461a      	mov	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	211f      	movs	r1, #31
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	401a      	ands	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	f003 011f 	and.w	r1, r3, #31
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001682:	bf00      	nop
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f023 0203 	bic.w	r2, r3, #3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	60da      	str	r2, [r3, #12]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3314      	adds	r3, #20
 80016c4:	461a      	mov	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	0e5b      	lsrs	r3, r3, #25
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	0d1b      	lsrs	r3, r3, #20
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2107      	movs	r1, #7
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	401a      	ands	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	0d1b      	lsrs	r3, r3, #20
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0318 	and.w	r3, r3, #24
 800172e:	4908      	ldr	r1, [pc, #32]	@ (8001750 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001730:	40d9      	lsrs	r1, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	400b      	ands	r3, r1
 8001736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800173a:	431a      	orrs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	000fffff 	.word	0x000fffff

08001754 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <LL_ADC_DisableDeepPowerDown+0x20>)
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6093      	str	r3, [r2, #8]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	5fffffc0 	.word	0x5fffffc0

08001794 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017a8:	d101      	bne.n	80017ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	6fffffc0 	.word	0x6fffffc0

080017e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017f8:	d101      	bne.n	80017fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <LL_ADC_Enable+0x24>)
 800181a:	4013      	ands	r3, r2
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	7fffffc0 	.word	0x7fffffc0

08001834 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <LL_ADC_Disable+0x24>)
 8001842:	4013      	ands	r3, r2
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	7fffffc0 	.word	0x7fffffc0

0800185c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <LL_ADC_IsEnabled+0x18>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <LL_ADC_IsEnabled+0x1a>
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b02      	cmp	r3, #2
 8001894:	d101      	bne.n	800189a <LL_ADC_IsDisableOngoing+0x18>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <LL_ADC_IsDisableOngoing+0x1a>
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <LL_ADC_REG_StartConversion+0x24>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	f043 0204 	orr.w	r2, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	7fffffc0 	.word	0x7fffffc0

080018d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b08      	cmp	r3, #8
 8001908:	d101      	bne.n	800190e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e18f      	b.n	8001c56 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff f9ef 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff19 	bl	8001794 <LL_ADC_IsDeepPowerDownEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff feff 	bl	8001770 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff34 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff18 	bl	80017bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800198c:	4b87      	ldr	r3, [pc, #540]	@ (8001bac <HAL_ADC_Init+0x290>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	4a87      	ldr	r2, [pc, #540]	@ (8001bb0 <HAL_ADC_Init+0x294>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	3301      	adds	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199e:	e002      	b.n	80019a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff17 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff77 	bl	80018d0 <LL_ADC_REG_IsConversionOngoing>
 80019e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 8129 	bne.w	8001c44 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 8125 	bne.w	8001c44 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a02:	f043 0202 	orr.w	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff24 	bl	800185c <LL_ADC_IsEnabled>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d136      	bne.n	8001a88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a65      	ldr	r2, [pc, #404]	@ (8001bb4 <HAL_ADC_Init+0x298>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_Init+0x112>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a63      	ldr	r2, [pc, #396]	@ (8001bb8 <HAL_ADC_Init+0x29c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <HAL_ADC_Init+0x130>
 8001a2e:	4861      	ldr	r0, [pc, #388]	@ (8001bb4 <HAL_ADC_Init+0x298>)
 8001a30:	f7ff ff14 	bl	800185c <LL_ADC_IsEnabled>
 8001a34:	4604      	mov	r4, r0
 8001a36:	4860      	ldr	r0, [pc, #384]	@ (8001bb8 <HAL_ADC_Init+0x29c>)
 8001a38:	f7ff ff10 	bl	800185c <LL_ADC_IsEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4323      	orrs	r3, r4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e008      	b.n	8001a5e <HAL_ADC_Init+0x142>
 8001a4c:	485b      	ldr	r0, [pc, #364]	@ (8001bbc <HAL_ADC_Init+0x2a0>)
 8001a4e:	f7ff ff05 	bl	800185c <LL_ADC_IsEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d012      	beq.n	8001a88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a53      	ldr	r2, [pc, #332]	@ (8001bb4 <HAL_ADC_Init+0x298>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_ADC_Init+0x15a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a51      	ldr	r2, [pc, #324]	@ (8001bb8 <HAL_ADC_Init+0x29c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x15e>
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_ADC_Init+0x2a4>)
 8001a78:	e000      	b.n	8001a7c <HAL_ADC_Init+0x160>
 8001a7a:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_ADC_Init+0x2a8>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f7ff fd3c 	bl	8001500 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a88:	f7ff fd1a 	bl	80014c0 <HAL_GetREVID>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d914      	bls.n	8001ac0 <HAL_ADC_Init+0x1a4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d110      	bne.n	8001ac0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7d5b      	ldrb	r3, [r3, #21]
 8001aa2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7f1b      	ldrb	r3, [r3, #28]
 8001ab4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ab6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab8:	f043 030c 	orr.w	r3, r3, #12
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e00d      	b.n	8001adc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7d5b      	ldrb	r3, [r3, #21]
 8001ac4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ad0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7f1b      	ldrb	r3, [r3, #28]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	045b      	lsls	r3, r3, #17
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc8 <HAL_ADC_Init+0x2ac>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	69b9      	ldr	r1, [r7, #24]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fed2 	bl	80018d0 <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fedf 	bl	80018f6 <LL_ADC_INJ_IsConversionOngoing>
 8001b38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d15f      	bne.n	8001c00 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d15c      	bne.n	8001c00 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7d1b      	ldrb	r3, [r3, #20]
 8001b4a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <HAL_ADC_Init+0x2b0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d130      	bne.n	8001bd4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_ADC_Init+0x2b4>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b86:	3a01      	subs	r2, #1
 8001b88:	0411      	lsls	r1, r2, #16
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	e01c      	b.n	8001be4 <HAL_ADC_Init+0x2c8>
 8001baa:	bf00      	nop
 8001bac:	24000000 	.word	0x24000000
 8001bb0:	053e2d63 	.word	0x053e2d63
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40022100 	.word	0x40022100
 8001bbc:	58026000 	.word	0x58026000
 8001bc0:	40022300 	.word	0x40022300
 8001bc4:	58026300 	.word	0x58026300
 8001bc8:	fff0c003 	.word	0xfff0c003
 8001bcc:	ffffbffc 	.word	0xffffbffc
 8001bd0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fdec 	bl	80027d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10c      	bne.n	8001c22 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f023 010f 	bic.w	r1, r3, #15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 020f 	bic.w	r2, r2, #15
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c42:	e007      	b.n	8001c54 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	bf00      	nop

08001c60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a55      	ldr	r2, [pc, #340]	@ (8001dc8 <HAL_ADC_Start_DMA+0x168>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_ADC_Start_DMA+0x20>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a54      	ldr	r2, [pc, #336]	@ (8001dcc <HAL_ADC_Start_DMA+0x16c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_Start_DMA+0x24>
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_ADC_Start_DMA+0x170>)
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Start_DMA+0x26>
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_ADC_Start_DMA+0x174>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fd64 	bl	8001754 <LL_ADC_GetMultimode>
 8001c8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe1c 	bl	80018d0 <LL_ADC_REG_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 808c 	bne.w	8001db8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Start_DMA+0x4e>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e087      	b.n	8001dbe <HAL_ADC_Start_DMA+0x15e>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d002      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d170      	bne.n	8001daa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fc07 	bl	80024dc <ADC_Enable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d163      	bne.n	8001da0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd8 <HAL_ADC_Start_DMA+0x178>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a37      	ldr	r2, [pc, #220]	@ (8001dcc <HAL_ADC_Start_DMA+0x16c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0x98>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_Start_DMA+0x9a>
 8001cf8:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <HAL_ADC_Start_DMA+0x168>)
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d002      	beq.n	8001d08 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f023 0206 	bic.w	r2, r3, #6
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d38:	4a28      	ldr	r2, [pc, #160]	@ (8001ddc <HAL_ADC_Start_DMA+0x17c>)
 8001d3a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a27      	ldr	r2, [pc, #156]	@ (8001de0 <HAL_ADC_Start_DMA+0x180>)
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d48:	4a26      	ldr	r2, [pc, #152]	@ (8001de4 <HAL_ADC_Start_DMA+0x184>)
 8001d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	221c      	movs	r2, #28
 8001d52:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0210 	orr.w	r2, r2, #16
 8001d6a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff fc89 	bl	800168e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3340      	adds	r3, #64	@ 0x40
 8001d86:	4619      	mov	r1, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f001 fe1c 	bl	80039c8 <HAL_DMA_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd85 	bl	80018a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d9e:	e00d      	b.n	8001dbc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001da8:	e008      	b.n	8001dbc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022100 	.word	0x40022100
 8001dd0:	40022300 	.word	0x40022300
 8001dd4:	58026300 	.word	0x58026300
 8001dd8:	fffff0fe 	.word	0xfffff0fe
 8001ddc:	080026af 	.word	0x080026af
 8001de0:	08002787 	.word	0x08002787
 8001de4:	080027a3 	.word	0x080027a3

08001de8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b0a1      	sub	sp, #132	@ 0x84
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a65      	ldr	r2, [pc, #404]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x2a>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e32e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x688>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fd38 	bl	80018d0 <LL_ADC_REG_IsConversionOngoing>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8313 	bne.w	800248e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db2c      	blt.n	8001eca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d108      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x6a>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2201      	movs	r2, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	e016      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x98>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ea0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	69d1      	ldr	r1, [r2, #28]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fbad 	bl	8001636 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fcf5 	bl	80018d0 <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fd02 	bl	80018f6 <LL_ADC_INJ_IsConversionOngoing>
 8001ef2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80b8 	bne.w	800206c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80b4 	bne.w	800206c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fbcf 	bl	80016b4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x118>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	e01d      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x154>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x13e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	e00a      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x154>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d02c      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f90:	f7ff faea 	bl	8001568 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6919      	ldr	r1, [r3, #16]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	7e5b      	ldrb	r3, [r3, #25]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x186>
 8001fa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001fa8:	e000      	b.n	8001fac <HAL_ADC_ConfigChannel+0x188>
 8001faa:	2300      	movs	r3, #0
 8001fac:	461a      	mov	r2, r3
 8001fae:	f7ff fb14 	bl	80015da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7e1b      	ldrb	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x1a4>
 8001fc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1a6>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7ff faec 	bl	80015a8 <LL_ADC_SetDataRightShift>
 8001fd0:	e04c      	b.n	800206c <HAL_ADC_ConfigChannel+0x248>
 8001fd2:	bf00      	nop
 8001fd4:	47ff0000 	.word	0x47ff0000
 8001fd8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ffe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	069b      	lsls	r3, r3, #26
 8002010:	429a      	cmp	r2, r3
 8002012:	d107      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002022:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800202a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	069b      	lsls	r3, r3, #26
 8002034:	429a      	cmp	r2, r3
 8002036:	d107      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002046:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	429a      	cmp	r2, r3
 800205a:	d107      	bne.n	800206c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800206a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fbf3 	bl	800185c <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8211 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	461a      	mov	r2, r3
 800208c:	f7ff fb3e 	bl	800170c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4aa1      	ldr	r2, [pc, #644]	@ (800231c <HAL_ADC_ConfigChannel+0x4f8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	f040 812e 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x2a0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e019      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x2d4>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80020d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e003      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80020e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	bf94      	ite	ls
 80020f2:	2301      	movls	r3, #1
 80020f4:	2300      	movhi	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d079      	beq.n	80021f0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x2f4>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002116:	e015      	b.n	8002144 <HAL_ADC_ConfigChannel+0x320>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002128:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800212a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	069b      	lsls	r3, r3, #26
 8002140:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x340>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	e017      	b.n	8002194 <HAL_ADC_ConfigChannel+0x370>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002174:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x396>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	051b      	lsls	r3, r3, #20
 80021b8:	e018      	b.n	80021ec <HAL_ADC_ConfigChannel+0x3c8>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80021cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80021d2:	2320      	movs	r3, #32
 80021d4:	e003      	b.n	80021de <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ec:	430b      	orrs	r3, r1
 80021ee:	e07e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x3e8>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	e015      	b.n	8002238 <HAL_ADC_ConfigChannel+0x414>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	069b      	lsls	r3, r3, #26
 8002234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x434>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	e017      	b.n	8002288 <HAL_ADC_ConfigChannel+0x464>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	61bb      	str	r3, [r7, #24]
  return result;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	ea42 0103 	orr.w	r1, r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10d      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x490>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	3b1e      	subs	r3, #30
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	e01b      	b.n	80022ec <HAL_ADC_ConfigChannel+0x4c8>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	60fb      	str	r3, [r7, #12]
  return result;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	051b      	lsls	r3, r3, #20
 80022e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ec:	430b      	orrs	r3, r1
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6892      	ldr	r2, [r2, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7ff f9de 	bl	80016b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f280 80cf 	bge.w	80024a0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a06      	ldr	r2, [pc, #24]	@ (8002320 <HAL_ADC_ConfigChannel+0x4fc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x4f2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_ADC_ConfigChannel+0x500>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10a      	bne.n	800232c <HAL_ADC_ConfigChannel+0x508>
 8002316:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <HAL_ADC_ConfigChannel+0x504>)
 8002318:	e009      	b.n	800232e <HAL_ADC_ConfigChannel+0x50a>
 800231a:	bf00      	nop
 800231c:	47ff0000 	.word	0x47ff0000
 8002320:	40022000 	.word	0x40022000
 8002324:	40022100 	.word	0x40022100
 8002328:	40022300 	.word	0x40022300
 800232c:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <HAL_ADC_ConfigChannel+0x690>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f90c 	bl	800154c <LL_ADC_GetCommonPathInternalCh>
 8002334:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5f      	ldr	r2, [pc, #380]	@ (80024b8 <HAL_ADC_ConfigChannel+0x694>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_ADC_ConfigChannel+0x526>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	@ (80024bc <HAL_ADC_ConfigChannel+0x698>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10e      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x544>
 800234a:	485b      	ldr	r0, [pc, #364]	@ (80024b8 <HAL_ADC_ConfigChannel+0x694>)
 800234c:	f7ff fa86 	bl	800185c <LL_ADC_IsEnabled>
 8002350:	4604      	mov	r4, r0
 8002352:	485a      	ldr	r0, [pc, #360]	@ (80024bc <HAL_ADC_ConfigChannel+0x698>)
 8002354:	f7ff fa82 	bl	800185c <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	4323      	orrs	r3, r4
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e008      	b.n	800237a <HAL_ADC_ConfigChannel+0x556>
 8002368:	4855      	ldr	r0, [pc, #340]	@ (80024c0 <HAL_ADC_ConfigChannel+0x69c>)
 800236a:	f7ff fa77 	bl	800185c <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d07d      	beq.n	800247a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a50      	ldr	r2, [pc, #320]	@ (80024c4 <HAL_ADC_ConfigChannel+0x6a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d130      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x5c6>
 8002388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d12b      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a4a      	ldr	r2, [pc, #296]	@ (80024c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	f040 8081 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <HAL_ADC_ConfigChannel+0x694>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x58e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a43      	ldr	r2, [pc, #268]	@ (80024bc <HAL_ADC_ConfigChannel+0x698>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x592>
 80023b2:	4a45      	ldr	r2, [pc, #276]	@ (80024c8 <HAL_ADC_ConfigChannel+0x6a4>)
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x594>
 80023b6:	4a3f      	ldr	r2, [pc, #252]	@ (80024b4 <HAL_ADC_ConfigChannel+0x690>)
 80023b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff f8b0 	bl	8001526 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c6:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_ADC_ConfigChannel+0x6a8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	4a40      	ldr	r2, [pc, #256]	@ (80024d0 <HAL_ADC_ConfigChannel+0x6ac>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	3301      	adds	r3, #1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023da:	e002      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e8:	e05a      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a39      	ldr	r2, [pc, #228]	@ (80024d4 <HAL_ADC_ConfigChannel+0x6b0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d11e      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x60e>
 80023f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2f      	ldr	r2, [pc, #188]	@ (80024c0 <HAL_ADC_ConfigChannel+0x69c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d14b      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2a      	ldr	r2, [pc, #168]	@ (80024b8 <HAL_ADC_ConfigChannel+0x694>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_ADC_ConfigChannel+0x5f8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <HAL_ADC_ConfigChannel+0x698>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x5fc>
 800241c:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_ADC_ConfigChannel+0x6a4>)
 800241e:	e000      	b.n	8002422 <HAL_ADC_ConfigChannel+0x5fe>
 8002420:	4a24      	ldr	r2, [pc, #144]	@ (80024b4 <HAL_ADC_ConfigChannel+0x690>)
 8002422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f7ff f87b 	bl	8001526 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002430:	e036      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d131      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d12c      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_ADC_ConfigChannel+0x69c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d127      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_ADC_ConfigChannel+0x694>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_ADC_ConfigChannel+0x640>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_ADC_ConfigChannel+0x698>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x644>
 8002464:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_ADC_ConfigChannel+0x6a4>)
 8002466:	e000      	b.n	800246a <HAL_ADC_ConfigChannel+0x646>
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_ADC_ConfigChannel+0x690>)
 800246a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f7ff f857 	bl	8001526 <LL_ADC_SetCommonPathInternalCh>
 8002478:	e012      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800248c:	e008      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3784      	adds	r7, #132	@ 0x84
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}
 80024b4:	58026300 	.word	0x58026300
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40022100 	.word	0x40022100
 80024c0:	58026000 	.word	0x58026000
 80024c4:	cb840000 	.word	0xcb840000
 80024c8:	40022300 	.word	0x40022300
 80024cc:	24000000 	.word	0x24000000
 80024d0:	053e2d63 	.word	0x053e2d63
 80024d4:	c7520000 	.word	0xc7520000
 80024d8:	cfb80000 	.word	0xcfb80000

080024dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f9b7 	bl	800185c <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d16e      	bne.n	80025d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <ADC_Enable+0x100>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e05a      	b.n	80025d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f972 	bl	800180c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002528:	f7fe ff9a 	bl	8001460 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <ADC_Enable+0x104>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d004      	beq.n	8002542 <ADC_Enable+0x66>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a29      	ldr	r2, [pc, #164]	@ (80025e4 <ADC_Enable+0x108>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <ADC_Enable+0x6a>
 8002542:	4b29      	ldr	r3, [pc, #164]	@ (80025e8 <ADC_Enable+0x10c>)
 8002544:	e000      	b.n	8002548 <ADC_Enable+0x6c>
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <ADC_Enable+0x110>)
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f903 	bl	8001754 <LL_ADC_GetMultimode>
 800254e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <ADC_Enable+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d002      	beq.n	8002560 <ADC_Enable+0x84>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e000      	b.n	8002562 <ADC_Enable+0x86>
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <ADC_Enable+0x104>)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d130      	bne.n	80025d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002570:	e028      	b.n	80025c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f970 	bl	800185c <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f940 	bl	800180c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258c:	f7fe ff68 	bl	8001460 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d914      	bls.n	80025c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d00d      	beq.n	80025c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0210 	orr.w	r2, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e007      	b.n	80025d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d1cf      	bne.n	8002572 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	8000003f 	.word	0x8000003f
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022100 	.word	0x40022100
 80025e8:	40022300 	.word	0x40022300
 80025ec:	58026300 	.word	0x58026300

080025f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f940 	bl	8001882 <LL_ADC_IsDisableOngoing>
 8002602:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f927 	bl	800185c <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d047      	beq.n	80026a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d144      	bne.n	80026a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030d 	and.w	r3, r3, #13
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10c      	bne.n	8002642 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f901 	bl	8001834 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2203      	movs	r2, #3
 8002638:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800263a:	f7fe ff11 	bl	8001460 <HAL_GetTick>
 800263e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002640:	e029      	b.n	8002696 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e023      	b.n	80026a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800265e:	f7fe feff 	bl	8001460 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d914      	bls.n	8002696 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1dc      	bne.n	800265e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d14b      	bne.n	8002760 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d021      	beq.n	8002726 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe ff92 	bl	8001610 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d032      	beq.n	8002758 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12b      	bne.n	8002758 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11f      	bne.n	8002758 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
 8002724:	e018      	b.n	8002758 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fb45 	bl	8001de8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800275e:	e00e      	b.n	800277e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fb4f 	bl	8001e10 <HAL_ADC_ErrorCallback>
}
 8002772:	e004      	b.n	800277e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fb31 	bl	8001dfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff fb21 	bl	8001e10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a7a      	ldr	r2, [pc, #488]	@ (80029d0 <ADC_ConfigureBoostMode+0x1f8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <ADC_ConfigureBoostMode+0x1c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a79      	ldr	r2, [pc, #484]	@ (80029d4 <ADC_ConfigureBoostMode+0x1fc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <ADC_ConfigureBoostMode+0x30>
 80027f4:	4b78      	ldr	r3, [pc, #480]	@ (80029d8 <ADC_ConfigureBoostMode+0x200>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e008      	b.n	800281a <ADC_ConfigureBoostMode+0x42>
 8002808:	4b74      	ldr	r3, [pc, #464]	@ (80029dc <ADC_ConfigureBoostMode+0x204>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01c      	beq.n	8002858 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800281e:	f004 fd85 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8002822:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800282c:	d010      	beq.n	8002850 <ADC_ConfigureBoostMode+0x78>
 800282e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002832:	d873      	bhi.n	800291c <ADC_ConfigureBoostMode+0x144>
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002838:	d002      	beq.n	8002840 <ADC_ConfigureBoostMode+0x68>
 800283a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800283e:	d16d      	bne.n	800291c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	60fb      	str	r3, [r7, #12]
        break;
 800284e:	e068      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	60fb      	str	r3, [r7, #12]
        break;
 8002856:	e064      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002858:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	f005 ffca 	bl	80087f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002864:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800286e:	d051      	beq.n	8002914 <ADC_ConfigureBoostMode+0x13c>
 8002870:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002874:	d854      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 8002876:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800287a:	d047      	beq.n	800290c <ADC_ConfigureBoostMode+0x134>
 800287c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002880:	d84e      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 8002882:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002886:	d03d      	beq.n	8002904 <ADC_ConfigureBoostMode+0x12c>
 8002888:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800288c:	d848      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 800288e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002892:	d033      	beq.n	80028fc <ADC_ConfigureBoostMode+0x124>
 8002894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002898:	d842      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 800289a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800289e:	d029      	beq.n	80028f4 <ADC_ConfigureBoostMode+0x11c>
 80028a0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80028a4:	d83c      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 80028a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028aa:	d01a      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x10a>
 80028ac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80028b0:	d836      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 80028b2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028b6:	d014      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x10a>
 80028b8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80028bc:	d830      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 80028be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028c2:	d00e      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x10a>
 80028c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028c8:	d82a      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 80028ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028ce:	d008      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x10a>
 80028d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028d4:	d824      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x148>
 80028d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028da:	d002      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x10a>
 80028dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028e0:	d11e      	bne.n	8002920 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	60fb      	str	r3, [r7, #12]
        break;
 80028f2:	e016      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
        break;
 80028fa:	e012      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	60fb      	str	r3, [r7, #12]
        break;
 8002902:	e00e      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	60fb      	str	r3, [r7, #12]
        break;
 800290a:	e00a      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	09db      	lsrs	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
        break;
 8002912:	e006      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	60fb      	str	r3, [r7, #12]
        break;
 800291a:	e002      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
        break;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002920:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002922:	f7fe fdcd 	bl	80014c0 <HAL_GetREVID>
 8002926:	4603      	mov	r3, r0
 8002928:	f241 0203 	movw	r2, #4099	@ 0x1003
 800292c:	4293      	cmp	r3, r2
 800292e:	d815      	bhi.n	800295c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <ADC_ConfigureBoostMode+0x208>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d908      	bls.n	800294a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002946:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002948:	e03e      	b.n	80029c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	e035      	b.n	80029c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <ADC_ConfigureBoostMode+0x20c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d808      	bhi.n	800297c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002978:	609a      	str	r2, [r3, #8]
}
 800297a:	e025      	b.n	80029c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a1a      	ldr	r2, [pc, #104]	@ (80029e8 <ADC_ConfigureBoostMode+0x210>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d80a      	bhi.n	800299a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	e016      	b.n	80029c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <ADC_ConfigureBoostMode+0x214>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d80a      	bhi.n	80029b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b4:	609a      	str	r2, [r3, #8]
}
 80029b6:	e007      	b.n	80029c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80029c6:	609a      	str	r2, [r3, #8]
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40022100 	.word	0x40022100
 80029d8:	40022300 	.word	0x40022300
 80029dc:	58026300 	.word	0x58026300
 80029e0:	01312d00 	.word	0x01312d00
 80029e4:	005f5e10 	.word	0x005f5e10
 80029e8:	00bebc20 	.word	0x00bebc20
 80029ec:	017d7840 	.word	0x017d7840

080029f0 <LL_ADC_IsEnabled>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <LL_ADC_IsEnabled+0x18>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <LL_ADC_IsEnabled+0x1a>
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <LL_ADC_StartCalibration>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <LL_ADC_StartCalibration+0x38>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	3ffeffc0 	.word	0x3ffeffc0

08002a54 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a68:	d101      	bne.n	8002a6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_ADC_REG_IsConversionOngoing>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d101      	bne.n	8002a94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e04c      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fd90 	bl	80025f0 <ADC_Disable>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d135      	bne.n	8002b46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff90 	bl	8002a18 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002af8:	e014      	b.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3301      	adds	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d30d      	bcc.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f023 0312 	bic.w	r3, r3, #18
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01b      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff93 	bl	8002a54 <LL_ADC_IsCalibrationOnGoing>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e2      	bne.n	8002afa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b44:	e005      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	ffffeefd 	.word	0xffffeefd
 8002b68:	25c3f800 	.word	0x25c3f800

08002b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b09f      	sub	sp, #124	@ 0x7c
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0be      	b.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	e001      	b.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e09d      	b.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff54 	bl	8002a7c <LL_ADC_REG_IsConversionOngoing>
 8002bd4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff4e 	bl	8002a7c <LL_ADC_REG_IsConversionOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d17f      	bne.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d17c      	bne.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a47      	ldr	r2, [pc, #284]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a46      	ldr	r2, [pc, #280]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c00:	4b45      	ldr	r3, [pc, #276]	@ (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c02:	e000      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c04:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d039      	beq.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a38      	ldr	r2, [pc, #224]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10e      	bne.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c36:	4836      	ldr	r0, [pc, #216]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c38:	f7ff feda 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	4835      	ldr	r0, [pc, #212]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c40:	f7ff fed6 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4323      	orrs	r3, r4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e008      	b.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c54:	4832      	ldr	r0, [pc, #200]	@ (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c56:	f7ff fecb 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d047      	beq.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c82:	e03a      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1e      	ldr	r2, [pc, #120]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ca4:	481a      	ldr	r0, [pc, #104]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ca6:	f7ff fea3 	bl	80029f0 <LL_ADC_IsEnabled>
 8002caa:	4604      	mov	r4, r0
 8002cac:	4819      	ldr	r0, [pc, #100]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cae:	f7ff fe9f 	bl	80029f0 <LL_ADC_IsEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4323      	orrs	r3, r4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e008      	b.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cc2:	4817      	ldr	r0, [pc, #92]	@ (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cc4:	f7ff fe94 	bl	80029f0 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ce2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce4:	e009      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002cf8:	e000      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d04:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	377c      	adds	r7, #124	@ 0x7c
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40022100 	.word	0x40022100
 8002d18:	40022300 	.word	0x40022300
 8002d1c:	58026300 	.word	0x58026300
 8002d20:	58026000 	.word	0x58026000
 8002d24:	fffff0e0 	.word	0xfffff0e0

08002d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x40>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x40>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00
 8002d6c:	05fa0000 	.word	0x05fa0000

08002d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <__NVIC_GetPriorityGrouping+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0307 	and.w	r3, r3, #7
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db0a      	blt.n	8002df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	490c      	ldr	r1, [pc, #48]	@ (8002e14 <__NVIC_SetPriority+0x4c>)
 8002de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df0:	e00a      	b.n	8002e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <__NVIC_SetPriority+0x50>)
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	761a      	strb	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e100 	.word	0xe000e100
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	@ 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf28      	it	cs
 8002e3a:	2304      	movcs	r3, #4
 8002e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d902      	bls.n	8002e4c <NVIC_EncodePriority+0x30>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b03      	subs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <NVIC_EncodePriority+0x32>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	4313      	orrs	r3, r2
         );
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff8e 	bl	8002dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff29 	bl	8002d28 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eec:	f7ff ff40 	bl	8002d70 <__NVIC_GetPriorityGrouping>
 8002ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6978      	ldr	r0, [r7, #20]
 8002ef8:	f7ff ff90 	bl	8002e1c <NVIC_EncodePriority>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff5f 	bl	8002dc8 <__NVIC_SetPriority>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff33 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffa4 	bl	8002e84 <SysTick_Config>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e014      	b.n	8002f82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	791b      	ldrb	r3, [r3, #4]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd ff85 	bl	8000e78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e046      	b.n	800302c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	795b      	ldrb	r3, [r3, #5]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_DAC_Start+0x20>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e040      	b.n	800302c <HAL_DAC_Start+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d11d      	bne.n	800301e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	e014      	b.n	800301e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2102      	movs	r1, #2
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	429a      	cmp	r2, r3
 800300c:	d107      	bne.n	800301e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0202 	orr.w	r2, r2, #2
 800301c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e015      	b.n	8003080 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3308      	adds	r3, #8
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e004      	b.n	8003076 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3314      	adds	r3, #20
 8003074:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	461a      	mov	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_DAC_ConfigChannel+0x1e>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e12a      	b.n	8003304 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_DAC_ConfigChannel+0x2e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e124      	b.n	8003304 <HAL_DAC_ConfigChannel+0x278>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2202      	movs	r2, #2
 80030c4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d17a      	bne.n	80031c4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80030ce:	f7fe f9c7 	bl	8001460 <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d13d      	bne.n	8003156 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030da:	e018      	b.n	800310e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030dc:	f7fe f9c0 	bl	8001460 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d911      	bls.n	800310e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f0:	4b86      	ldr	r3, [pc, #536]	@ (800330c <HAL_DAC_ConfigChannel+0x280>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f043 0208 	orr.w	r2, r3, #8
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2203      	movs	r2, #3
 8003108:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0fa      	b.n	8003304 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003114:	4b7d      	ldr	r3, [pc, #500]	@ (800330c <HAL_DAC_ConfigChannel+0x280>)
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1df      	bne.n	80030dc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	6992      	ldr	r2, [r2, #24]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
 8003126:	e020      	b.n	800316a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003128:	f7fe f99a 	bl	8001460 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d90f      	bls.n	8003156 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	da0a      	bge.n	8003156 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f043 0208 	orr.w	r2, r3, #8
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2203      	movs	r2, #3
 8003150:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0d6      	b.n	8003304 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	dbe3      	blt.n	8003128 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	6992      	ldr	r2, [r2, #24]
 8003168:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	ea02 0103 	and.w	r1, r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	21ff      	movs	r1, #255	@ 0xff
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	ea02 0103 	and.w	r1, r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d11d      	bne.n	8003208 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2207      	movs	r2, #7
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d102      	bne.n	8003232 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003230:	e00f      	b.n	8003252 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d102      	bne.n	8003240 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800323a:	2301      	movs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
 800323e:	e008      	b.n	8003252 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
 800324c:	e001      	b.n	8003252 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43da      	mvns	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	400a      	ands	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	22c0      	movs	r2, #192	@ 0xc0
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003300:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	@ 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20008000 	.word	0x20008000

08003310 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7fe f8a2 	bl	8001460 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e316      	b.n	8003956 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <HAL_DMA_Init+0x1b8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04a      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a65      	ldr	r2, [pc, #404]	@ (80034cc <HAL_DMA_Init+0x1bc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d045      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a63      	ldr	r2, [pc, #396]	@ (80034d0 <HAL_DMA_Init+0x1c0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d040      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a62      	ldr	r2, [pc, #392]	@ (80034d4 <HAL_DMA_Init+0x1c4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d03b      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_DMA_Init+0x1c8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d036      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5f      	ldr	r2, [pc, #380]	@ (80034dc <HAL_DMA_Init+0x1cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d031      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5d      	ldr	r2, [pc, #372]	@ (80034e0 <HAL_DMA_Init+0x1d0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02c      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5c      	ldr	r2, [pc, #368]	@ (80034e4 <HAL_DMA_Init+0x1d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d027      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_DMA_Init+0x1d8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a59      	ldr	r2, [pc, #356]	@ (80034ec <HAL_DMA_Init+0x1dc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d01d      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a57      	ldr	r2, [pc, #348]	@ (80034f0 <HAL_DMA_Init+0x1e0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a56      	ldr	r2, [pc, #344]	@ (80034f4 <HAL_DMA_Init+0x1e4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a54      	ldr	r2, [pc, #336]	@ (80034f8 <HAL_DMA_Init+0x1e8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a53      	ldr	r2, [pc, #332]	@ (80034fc <HAL_DMA_Init+0x1ec>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a51      	ldr	r2, [pc, #324]	@ (8003500 <HAL_DMA_Init+0x1f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_Init+0xb8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a50      	ldr	r2, [pc, #320]	@ (8003504 <HAL_DMA_Init+0x1f4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_DMA_Init+0xbc>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_DMA_Init+0xbe>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 813b 	beq.w	800364a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a37      	ldr	r2, [pc, #220]	@ (80034c8 <HAL_DMA_Init+0x1b8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_Init+0x174>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a36      	ldr	r2, [pc, #216]	@ (80034cc <HAL_DMA_Init+0x1bc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_Init+0x174>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a34      	ldr	r2, [pc, #208]	@ (80034d0 <HAL_DMA_Init+0x1c0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a33      	ldr	r2, [pc, #204]	@ (80034d4 <HAL_DMA_Init+0x1c4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_Init+0x174>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <HAL_DMA_Init+0x1c8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a30      	ldr	r2, [pc, #192]	@ (80034dc <HAL_DMA_Init+0x1cc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2e      	ldr	r2, [pc, #184]	@ (80034e0 <HAL_DMA_Init+0x1d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_Init+0x174>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_DMA_Init+0x1d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <HAL_DMA_Init+0x1d8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_Init+0x174>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2a      	ldr	r2, [pc, #168]	@ (80034ec <HAL_DMA_Init+0x1dc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a28      	ldr	r2, [pc, #160]	@ (80034f0 <HAL_DMA_Init+0x1e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <HAL_DMA_Init+0x1e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_Init+0x174>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a25      	ldr	r2, [pc, #148]	@ (80034f8 <HAL_DMA_Init+0x1e8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a24      	ldr	r2, [pc, #144]	@ (80034fc <HAL_DMA_Init+0x1ec>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_Init+0x174>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a22      	ldr	r2, [pc, #136]	@ (8003500 <HAL_DMA_Init+0x1f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_Init+0x174>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <HAL_DMA_Init+0x1f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <HAL_DMA_Init+0x186>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <HAL_DMA_Init+0x196>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034a6:	e02f      	b.n	8003508 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034a8:	f7fd ffda 	bl	8001460 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d928      	bls.n	8003508 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2203      	movs	r2, #3
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e246      	b.n	8003956 <HAL_DMA_Init+0x646>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1c8      	bne.n	80034a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4b83      	ldr	r3, [pc, #524]	@ (8003730 <HAL_DMA_Init+0x420>)
 8003522:	4013      	ands	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800352e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2b04      	cmp	r3, #4
 800355a:	d107      	bne.n	800356c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800356c:	4b71      	ldr	r3, [pc, #452]	@ (8003734 <HAL_DMA_Init+0x424>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b71      	ldr	r3, [pc, #452]	@ (8003738 <HAL_DMA_Init+0x428>)
 8003572:	4013      	ands	r3, r2
 8003574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003578:	d328      	bcc.n	80035cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b28      	cmp	r3, #40	@ 0x28
 8003580:	d903      	bls.n	800358a <HAL_DMA_Init+0x27a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b2e      	cmp	r3, #46	@ 0x2e
 8003588:	d917      	bls.n	80035ba <HAL_DMA_Init+0x2aa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003590:	d903      	bls.n	800359a <HAL_DMA_Init+0x28a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b42      	cmp	r3, #66	@ 0x42
 8003598:	d90f      	bls.n	80035ba <HAL_DMA_Init+0x2aa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b46      	cmp	r3, #70	@ 0x46
 80035a0:	d903      	bls.n	80035aa <HAL_DMA_Init+0x29a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b48      	cmp	r3, #72	@ 0x48
 80035a8:	d907      	bls.n	80035ba <HAL_DMA_Init+0x2aa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80035b0:	d905      	bls.n	80035be <HAL_DMA_Init+0x2ae>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b52      	cmp	r3, #82	@ 0x52
 80035b8:	d801      	bhi.n	80035be <HAL_DMA_Init+0x2ae>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_Init+0x2b0>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0307 	bic.w	r3, r3, #7
 80035e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d117      	bne.n	8003626 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f001 fdcf 	bl	80051ac <DMA_CheckFifoParam>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e197      	b.n	8003956 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f001 fd0a 	bl	8005048 <DMA_CalcBaseAndBitshift>
 8003634:	4603      	mov	r3, r0
 8003636:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	223f      	movs	r2, #63	@ 0x3f
 8003642:	409a      	lsls	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e0cd      	b.n	80037e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <HAL_DMA_Init+0x42c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_Init+0x38a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a39      	ldr	r2, [pc, #228]	@ (8003740 <HAL_DMA_Init+0x430>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_Init+0x38a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a38      	ldr	r2, [pc, #224]	@ (8003744 <HAL_DMA_Init+0x434>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_Init+0x38a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a36      	ldr	r2, [pc, #216]	@ (8003748 <HAL_DMA_Init+0x438>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_Init+0x38a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a35      	ldr	r2, [pc, #212]	@ (800374c <HAL_DMA_Init+0x43c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_Init+0x38a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <HAL_DMA_Init+0x440>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_Init+0x38a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_DMA_Init+0x444>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_Init+0x38a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a30      	ldr	r2, [pc, #192]	@ (8003758 <HAL_DMA_Init+0x448>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_DMA_Init+0x38e>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_DMA_Init+0x390>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8097 	beq.w	80037d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a24      	ldr	r2, [pc, #144]	@ (800373c <HAL_DMA_Init+0x42c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d021      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <HAL_DMA_Init+0x430>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01c      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <HAL_DMA_Init+0x434>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d017      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003748 <HAL_DMA_Init+0x438>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d012      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <HAL_DMA_Init+0x43c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003750 <HAL_DMA_Init+0x440>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d008      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <HAL_DMA_Init+0x444>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <HAL_DMA_Init+0x3e4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	@ (8003758 <HAL_DMA_Init+0x448>)
 80036f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4b13      	ldr	r3, [pc, #76]	@ (800375c <HAL_DMA_Init+0x44c>)
 8003710:	4013      	ands	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d021      	beq.n	8003760 <HAL_DMA_Init+0x450>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b80      	cmp	r3, #128	@ 0x80
 8003722:	d102      	bne.n	800372a <HAL_DMA_Init+0x41a>
 8003724:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003728:	e01b      	b.n	8003762 <HAL_DMA_Init+0x452>
 800372a:	2300      	movs	r3, #0
 800372c:	e019      	b.n	8003762 <HAL_DMA_Init+0x452>
 800372e:	bf00      	nop
 8003730:	fe10803f 	.word	0xfe10803f
 8003734:	5c001000 	.word	0x5c001000
 8003738:	ffff0000 	.word	0xffff0000
 800373c:	58025408 	.word	0x58025408
 8003740:	5802541c 	.word	0x5802541c
 8003744:	58025430 	.word	0x58025430
 8003748:	58025444 	.word	0x58025444
 800374c:	58025458 	.word	0x58025458
 8003750:	5802546c 	.word	0x5802546c
 8003754:	58025480 	.word	0x58025480
 8003758:	58025494 	.word	0x58025494
 800375c:	fffe000f 	.word	0xfffe000f
 8003760:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003790:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b6e      	ldr	r3, [pc, #440]	@ (8003960 <HAL_DMA_Init+0x650>)
 80037a8:	4413      	add	r3, r2
 80037aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003964 <HAL_DMA_Init+0x654>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f001 fc45 	bl	8005048 <DMA_CalcBaseAndBitshift>
 80037be:	4603      	mov	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2201      	movs	r2, #1
 80037cc:	409a      	lsls	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e008      	b.n	80037e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2240      	movs	r2, #64	@ 0x40
 80037d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0b7      	b.n	8003956 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003968 <HAL_DMA_Init+0x658>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d072      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5d      	ldr	r2, [pc, #372]	@ (800396c <HAL_DMA_Init+0x65c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d06d      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003970 <HAL_DMA_Init+0x660>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d068      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5a      	ldr	r2, [pc, #360]	@ (8003974 <HAL_DMA_Init+0x664>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d063      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a59      	ldr	r2, [pc, #356]	@ (8003978 <HAL_DMA_Init+0x668>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d05e      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a57      	ldr	r2, [pc, #348]	@ (800397c <HAL_DMA_Init+0x66c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d059      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a56      	ldr	r2, [pc, #344]	@ (8003980 <HAL_DMA_Init+0x670>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d054      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a54      	ldr	r2, [pc, #336]	@ (8003984 <HAL_DMA_Init+0x674>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04f      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a53      	ldr	r2, [pc, #332]	@ (8003988 <HAL_DMA_Init+0x678>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a51      	ldr	r2, [pc, #324]	@ (800398c <HAL_DMA_Init+0x67c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a50      	ldr	r2, [pc, #320]	@ (8003990 <HAL_DMA_Init+0x680>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4e      	ldr	r2, [pc, #312]	@ (8003994 <HAL_DMA_Init+0x684>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4d      	ldr	r2, [pc, #308]	@ (8003998 <HAL_DMA_Init+0x688>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <HAL_DMA_Init+0x68c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_DMA_Init+0x690>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a48      	ldr	r2, [pc, #288]	@ (80039a4 <HAL_DMA_Init+0x694>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a47      	ldr	r2, [pc, #284]	@ (80039a8 <HAL_DMA_Init+0x698>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a45      	ldr	r2, [pc, #276]	@ (80039ac <HAL_DMA_Init+0x69c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a44      	ldr	r2, [pc, #272]	@ (80039b0 <HAL_DMA_Init+0x6a0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a42      	ldr	r2, [pc, #264]	@ (80039b4 <HAL_DMA_Init+0x6a4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a41      	ldr	r2, [pc, #260]	@ (80039b8 <HAL_DMA_Init+0x6a8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3f      	ldr	r2, [pc, #252]	@ (80039bc <HAL_DMA_Init+0x6ac>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3e      	ldr	r2, [pc, #248]	@ (80039c0 <HAL_DMA_Init+0x6b0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_Init+0x5c6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3c      	ldr	r2, [pc, #240]	@ (80039c4 <HAL_DMA_Init+0x6b4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_DMA_Init+0x5ca>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_DMA_Init+0x5cc>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d032      	beq.n	8003946 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 fcdf 	bl	80052a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d102      	bne.n	80038f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003908:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_DMA_Init+0x624>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b08      	cmp	r3, #8
 8003918:	d80c      	bhi.n	8003934 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f001 fd5c 	bl	80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	e008      	b.n	8003946 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	a7fdabf8 	.word	0xa7fdabf8
 8003964:	cccccccd 	.word	0xcccccccd
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8
 80039a8:	58025408 	.word	0x58025408
 80039ac:	5802541c 	.word	0x5802541c
 80039b0:	58025430 	.word	0x58025430
 80039b4:	58025444 	.word	0x58025444
 80039b8:	58025458 	.word	0x58025458
 80039bc:	5802546c 	.word	0x5802546c
 80039c0:	58025480 	.word	0x58025480
 80039c4:	58025494 	.word	0x58025494

080039c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e226      	b.n	8003e32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_DMA_Start_IT+0x2a>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e21f      	b.n	8003e32 <HAL_DMA_Start_IT+0x46a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 820a 	bne.w	8003e1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a68      	ldr	r2, [pc, #416]	@ (8003bbc <HAL_DMA_Start_IT+0x1f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04a      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a66      	ldr	r2, [pc, #408]	@ (8003bc0 <HAL_DMA_Start_IT+0x1f8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d045      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a65      	ldr	r2, [pc, #404]	@ (8003bc4 <HAL_DMA_Start_IT+0x1fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d040      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_DMA_Start_IT+0x200>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d03b      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a62      	ldr	r2, [pc, #392]	@ (8003bcc <HAL_DMA_Start_IT+0x204>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d036      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a60      	ldr	r2, [pc, #384]	@ (8003bd0 <HAL_DMA_Start_IT+0x208>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d031      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd4 <HAL_DMA_Start_IT+0x20c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d02c      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd8 <HAL_DMA_Start_IT+0x210>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bdc <HAL_DMA_Start_IT+0x214>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5a      	ldr	r2, [pc, #360]	@ (8003be0 <HAL_DMA_Start_IT+0x218>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01d      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a59      	ldr	r2, [pc, #356]	@ (8003be4 <HAL_DMA_Start_IT+0x21c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a57      	ldr	r2, [pc, #348]	@ (8003be8 <HAL_DMA_Start_IT+0x220>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a56      	ldr	r2, [pc, #344]	@ (8003bec <HAL_DMA_Start_IT+0x224>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a54      	ldr	r2, [pc, #336]	@ (8003bf0 <HAL_DMA_Start_IT+0x228>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a53      	ldr	r2, [pc, #332]	@ (8003bf4 <HAL_DMA_Start_IT+0x22c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xee>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	@ (8003bf8 <HAL_DMA_Start_IT+0x230>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x100>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <HAL_DMA_Start_IT+0x110>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f001 f906 	bl	8004cf0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a34      	ldr	r2, [pc, #208]	@ (8003bbc <HAL_DMA_Start_IT+0x1f4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d04a      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a33      	ldr	r2, [pc, #204]	@ (8003bc0 <HAL_DMA_Start_IT+0x1f8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d045      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a31      	ldr	r2, [pc, #196]	@ (8003bc4 <HAL_DMA_Start_IT+0x1fc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d040      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <HAL_DMA_Start_IT+0x200>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d03b      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	@ (8003bcc <HAL_DMA_Start_IT+0x204>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d036      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd0 <HAL_DMA_Start_IT+0x208>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d031      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <HAL_DMA_Start_IT+0x20c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02c      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <HAL_DMA_Start_IT+0x210>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d027      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a28      	ldr	r2, [pc, #160]	@ (8003bdc <HAL_DMA_Start_IT+0x214>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a27      	ldr	r2, [pc, #156]	@ (8003be0 <HAL_DMA_Start_IT+0x218>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d01d      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <HAL_DMA_Start_IT+0x21c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <HAL_DMA_Start_IT+0x220>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_DMA_Start_IT+0x224>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <HAL_DMA_Start_IT+0x228>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_DMA_Start_IT+0x22c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_DMA_Start_IT+0x1bc>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <HAL_DMA_Start_IT+0x230>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_DMA_Start_IT+0x1c0>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_Start_IT+0x1c2>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d036      	beq.n	8003bfc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 021e 	bic.w	r2, r3, #30
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0216 	orr.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d03e      	beq.n	8003c28 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0208 	orr.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e035      	b.n	8003c28 <HAL_DMA_Start_IT+0x260>
 8003bbc:	40020010 	.word	0x40020010
 8003bc0:	40020028 	.word	0x40020028
 8003bc4:	40020040 	.word	0x40020040
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40020070 	.word	0x40020070
 8003bd0:	40020088 	.word	0x40020088
 8003bd4:	400200a0 	.word	0x400200a0
 8003bd8:	400200b8 	.word	0x400200b8
 8003bdc:	40020410 	.word	0x40020410
 8003be0:	40020428 	.word	0x40020428
 8003be4:	40020440 	.word	0x40020440
 8003be8:	40020458 	.word	0x40020458
 8003bec:	40020470 	.word	0x40020470
 8003bf0:	40020488 	.word	0x40020488
 8003bf4:	400204a0 	.word	0x400204a0
 8003bf8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 020e 	bic.w	r2, r3, #14
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 020a 	orr.w	r2, r2, #10
 8003c0e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0204 	orr.w	r2, r2, #4
 8003c26:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a83      	ldr	r2, [pc, #524]	@ (8003e3c <HAL_DMA_Start_IT+0x474>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d072      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a82      	ldr	r2, [pc, #520]	@ (8003e40 <HAL_DMA_Start_IT+0x478>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d06d      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a80      	ldr	r2, [pc, #512]	@ (8003e44 <HAL_DMA_Start_IT+0x47c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d068      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e48 <HAL_DMA_Start_IT+0x480>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d063      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7d      	ldr	r2, [pc, #500]	@ (8003e4c <HAL_DMA_Start_IT+0x484>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d05e      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e50 <HAL_DMA_Start_IT+0x488>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d059      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7a      	ldr	r2, [pc, #488]	@ (8003e54 <HAL_DMA_Start_IT+0x48c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d054      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a79      	ldr	r2, [pc, #484]	@ (8003e58 <HAL_DMA_Start_IT+0x490>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04f      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	@ (8003e5c <HAL_DMA_Start_IT+0x494>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d04a      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	@ (8003e60 <HAL_DMA_Start_IT+0x498>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d045      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a74      	ldr	r2, [pc, #464]	@ (8003e64 <HAL_DMA_Start_IT+0x49c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d040      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a73      	ldr	r2, [pc, #460]	@ (8003e68 <HAL_DMA_Start_IT+0x4a0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03b      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a71      	ldr	r2, [pc, #452]	@ (8003e6c <HAL_DMA_Start_IT+0x4a4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d036      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a70      	ldr	r2, [pc, #448]	@ (8003e70 <HAL_DMA_Start_IT+0x4a8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d031      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e74 <HAL_DMA_Start_IT+0x4ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02c      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e78 <HAL_DMA_Start_IT+0x4b0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d027      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e7c <HAL_DMA_Start_IT+0x4b4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	@ (8003e80 <HAL_DMA_Start_IT+0x4b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01d      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	@ (8003e84 <HAL_DMA_Start_IT+0x4bc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a67      	ldr	r2, [pc, #412]	@ (8003e88 <HAL_DMA_Start_IT+0x4c0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a65      	ldr	r2, [pc, #404]	@ (8003e8c <HAL_DMA_Start_IT+0x4c4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a64      	ldr	r2, [pc, #400]	@ (8003e90 <HAL_DMA_Start_IT+0x4c8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a62      	ldr	r2, [pc, #392]	@ (8003e94 <HAL_DMA_Start_IT+0x4cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_DMA_Start_IT+0x350>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a61      	ldr	r2, [pc, #388]	@ (8003e98 <HAL_DMA_Start_IT+0x4d0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d101      	bne.n	8003d1c <HAL_DMA_Start_IT+0x354>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_Start_IT+0x356>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01a      	beq.n	8003d58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a37      	ldr	r2, [pc, #220]	@ (8003e3c <HAL_DMA_Start_IT+0x474>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a36      	ldr	r2, [pc, #216]	@ (8003e40 <HAL_DMA_Start_IT+0x478>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a34      	ldr	r2, [pc, #208]	@ (8003e44 <HAL_DMA_Start_IT+0x47c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a33      	ldr	r2, [pc, #204]	@ (8003e48 <HAL_DMA_Start_IT+0x480>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a31      	ldr	r2, [pc, #196]	@ (8003e4c <HAL_DMA_Start_IT+0x484>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a30      	ldr	r2, [pc, #192]	@ (8003e50 <HAL_DMA_Start_IT+0x488>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2e      	ldr	r2, [pc, #184]	@ (8003e54 <HAL_DMA_Start_IT+0x48c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <HAL_DMA_Start_IT+0x490>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2b      	ldr	r2, [pc, #172]	@ (8003e5c <HAL_DMA_Start_IT+0x494>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e60 <HAL_DMA_Start_IT+0x498>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a28      	ldr	r2, [pc, #160]	@ (8003e64 <HAL_DMA_Start_IT+0x49c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <HAL_DMA_Start_IT+0x4a0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	@ (8003e6c <HAL_DMA_Start_IT+0x4a4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <HAL_DMA_Start_IT+0x4a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a22      	ldr	r2, [pc, #136]	@ (8003e74 <HAL_DMA_Start_IT+0x4ac>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_DMA_Start_IT+0x430>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <HAL_DMA_Start_IT+0x4b0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <HAL_DMA_Start_IT+0x442>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e012      	b.n	8003e30 <HAL_DMA_Start_IT+0x468>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e009      	b.n	8003e30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020010 	.word	0x40020010
 8003e40:	40020028 	.word	0x40020028
 8003e44:	40020040 	.word	0x40020040
 8003e48:	40020058 	.word	0x40020058
 8003e4c:	40020070 	.word	0x40020070
 8003e50:	40020088 	.word	0x40020088
 8003e54:	400200a0 	.word	0x400200a0
 8003e58:	400200b8 	.word	0x400200b8
 8003e5c:	40020410 	.word	0x40020410
 8003e60:	40020428 	.word	0x40020428
 8003e64:	40020440 	.word	0x40020440
 8003e68:	40020458 	.word	0x40020458
 8003e6c:	40020470 	.word	0x40020470
 8003e70:	40020488 	.word	0x40020488
 8003e74:	400204a0 	.word	0x400204a0
 8003e78:	400204b8 	.word	0x400204b8
 8003e7c:	58025408 	.word	0x58025408
 8003e80:	5802541c 	.word	0x5802541c
 8003e84:	58025430 	.word	0x58025430
 8003e88:	58025444 	.word	0x58025444
 8003e8c:	58025458 	.word	0x58025458
 8003e90:	5802546c 	.word	0x5802546c
 8003e94:	58025480 	.word	0x58025480
 8003e98:	58025494 	.word	0x58025494

08003e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	@ 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ea8:	4b67      	ldr	r3, [pc, #412]	@ (8004048 <HAL_DMA_IRQHandler+0x1ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a67      	ldr	r2, [pc, #412]	@ (800404c <HAL_DMA_IRQHandler+0x1b0>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a9b      	lsrs	r3, r3, #10
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8004050 <HAL_DMA_IRQHandler+0x1b4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	@ (8004054 <HAL_DMA_IRQHandler+0x1b8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8004058 <HAL_DMA_IRQHandler+0x1bc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <HAL_DMA_IRQHandler+0x1c0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a59      	ldr	r2, [pc, #356]	@ (8004060 <HAL_DMA_IRQHandler+0x1c4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <HAL_DMA_IRQHandler+0x1c8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a56      	ldr	r2, [pc, #344]	@ (8004068 <HAL_DMA_IRQHandler+0x1cc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_DMA_IRQHandler+0x1d0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <HAL_DMA_IRQHandler+0x1d4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <HAL_DMA_IRQHandler+0x1d8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a50      	ldr	r2, [pc, #320]	@ (8004078 <HAL_DMA_IRQHandler+0x1dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4e      	ldr	r2, [pc, #312]	@ (800407c <HAL_DMA_IRQHandler+0x1e0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8004080 <HAL_DMA_IRQHandler+0x1e4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a4b      	ldr	r2, [pc, #300]	@ (8004084 <HAL_DMA_IRQHandler+0x1e8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004088 <HAL_DMA_IRQHandler+0x1ec>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xd2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a48      	ldr	r2, [pc, #288]	@ (800408c <HAL_DMA_IRQHandler+0x1f0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_IRQHandler+0xd6>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_DMA_IRQHandler+0xd8>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 842b 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2208      	movs	r2, #8
 8003f84:	409a      	lsls	r2, r3
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a2 	beq.w	80040d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2e      	ldr	r2, [pc, #184]	@ (8004050 <HAL_DMA_IRQHandler+0x1b4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d04a      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004054 <HAL_DMA_IRQHandler+0x1b8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d045      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004058 <HAL_DMA_IRQHandler+0x1bc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d040      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <HAL_DMA_IRQHandler+0x1c0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d03b      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a28      	ldr	r2, [pc, #160]	@ (8004060 <HAL_DMA_IRQHandler+0x1c4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d036      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <HAL_DMA_IRQHandler+0x1c8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d031      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a25      	ldr	r2, [pc, #148]	@ (8004068 <HAL_DMA_IRQHandler+0x1cc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02c      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a24      	ldr	r2, [pc, #144]	@ (800406c <HAL_DMA_IRQHandler+0x1d0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d027      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	@ (8004070 <HAL_DMA_IRQHandler+0x1d4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <HAL_DMA_IRQHandler+0x1d8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01d      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8004078 <HAL_DMA_IRQHandler+0x1dc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <HAL_DMA_IRQHandler+0x1e0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <HAL_DMA_IRQHandler+0x1e4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1b      	ldr	r2, [pc, #108]	@ (8004084 <HAL_DMA_IRQHandler+0x1e8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_DMA_IRQHandler+0x1ec>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_DMA_IRQHandler+0x194>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_DMA_IRQHandler+0x1f0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d12f      	bne.n	8004090 <HAL_DMA_IRQHandler+0x1f4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e02e      	b.n	80040a4 <HAL_DMA_IRQHandler+0x208>
 8004046:	bf00      	nop
 8004048:	24000000 	.word	0x24000000
 800404c:	1b4e81b5 	.word	0x1b4e81b5
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2208      	movs	r2, #8
 80040c2:	409a      	lsls	r2, r3
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d06e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a69      	ldr	r2, [pc, #420]	@ (8004294 <HAL_DMA_IRQHandler+0x3f8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a67      	ldr	r2, [pc, #412]	@ (8004298 <HAL_DMA_IRQHandler+0x3fc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a66      	ldr	r2, [pc, #408]	@ (800429c <HAL_DMA_IRQHandler+0x400>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a64      	ldr	r2, [pc, #400]	@ (80042a0 <HAL_DMA_IRQHandler+0x404>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a63      	ldr	r2, [pc, #396]	@ (80042a4 <HAL_DMA_IRQHandler+0x408>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a61      	ldr	r2, [pc, #388]	@ (80042a8 <HAL_DMA_IRQHandler+0x40c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a60      	ldr	r2, [pc, #384]	@ (80042ac <HAL_DMA_IRQHandler+0x410>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5e      	ldr	r2, [pc, #376]	@ (80042b0 <HAL_DMA_IRQHandler+0x414>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5d      	ldr	r2, [pc, #372]	@ (80042b4 <HAL_DMA_IRQHandler+0x418>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5b      	ldr	r2, [pc, #364]	@ (80042b8 <HAL_DMA_IRQHandler+0x41c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5a      	ldr	r2, [pc, #360]	@ (80042bc <HAL_DMA_IRQHandler+0x420>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a58      	ldr	r2, [pc, #352]	@ (80042c0 <HAL_DMA_IRQHandler+0x424>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_DMA_IRQHandler+0x428>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a55      	ldr	r2, [pc, #340]	@ (80042c8 <HAL_DMA_IRQHandler+0x42c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a54      	ldr	r2, [pc, #336]	@ (80042cc <HAL_DMA_IRQHandler+0x430>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_IRQHandler+0x2ee>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a52      	ldr	r2, [pc, #328]	@ (80042d0 <HAL_DMA_IRQHandler+0x434>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10a      	bne.n	80041a0 <HAL_DMA_IRQHandler+0x304>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e003      	b.n	80041a8 <HAL_DMA_IRQHandler+0x30c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00d      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	f043 0202 	orr.w	r2, r3, #2
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 808f 	beq.w	80042fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004294 <HAL_DMA_IRQHandler+0x3f8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d04a      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004298 <HAL_DMA_IRQHandler+0x3fc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d045      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a29      	ldr	r2, [pc, #164]	@ (800429c <HAL_DMA_IRQHandler+0x400>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d040      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a27      	ldr	r2, [pc, #156]	@ (80042a0 <HAL_DMA_IRQHandler+0x404>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d03b      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <HAL_DMA_IRQHandler+0x408>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d036      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a24      	ldr	r2, [pc, #144]	@ (80042a8 <HAL_DMA_IRQHandler+0x40c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d031      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a23      	ldr	r2, [pc, #140]	@ (80042ac <HAL_DMA_IRQHandler+0x410>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d02c      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a21      	ldr	r2, [pc, #132]	@ (80042b0 <HAL_DMA_IRQHandler+0x414>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d027      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a20      	ldr	r2, [pc, #128]	@ (80042b4 <HAL_DMA_IRQHandler+0x418>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d022      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <HAL_DMA_IRQHandler+0x41c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <HAL_DMA_IRQHandler+0x420>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <HAL_DMA_IRQHandler+0x424>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1a      	ldr	r2, [pc, #104]	@ (80042c4 <HAL_DMA_IRQHandler+0x428>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a18      	ldr	r2, [pc, #96]	@ (80042c8 <HAL_DMA_IRQHandler+0x42c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a17      	ldr	r2, [pc, #92]	@ (80042cc <HAL_DMA_IRQHandler+0x430>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_DMA_IRQHandler+0x3e2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <HAL_DMA_IRQHandler+0x434>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d12a      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x438>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e023      	b.n	80042dc <HAL_DMA_IRQHandler+0x440>
 8004294:	40020010 	.word	0x40020010
 8004298:	40020028 	.word	0x40020028
 800429c:	40020040 	.word	0x40020040
 80042a0:	40020058 	.word	0x40020058
 80042a4:	40020070 	.word	0x40020070
 80042a8:	40020088 	.word	0x40020088
 80042ac:	400200a0 	.word	0x400200a0
 80042b0:	400200b8 	.word	0x400200b8
 80042b4:	40020410 	.word	0x40020410
 80042b8:	40020428 	.word	0x40020428
 80042bc:	40020440 	.word	0x40020440
 80042c0:	40020458 	.word	0x40020458
 80042c4:	40020470 	.word	0x40020470
 80042c8:	40020488 	.word	0x40020488
 80042cc:	400204a0 	.word	0x400204a0
 80042d0:	400204b8 	.word	0x400204b8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2204      	movs	r2, #4
 80042ea:	409a      	lsls	r2, r3
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f043 0204 	orr.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2210      	movs	r2, #16
 8004306:	409a      	lsls	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a6 	beq.w	800445e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a85      	ldr	r2, [pc, #532]	@ (800452c <HAL_DMA_IRQHandler+0x690>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04a      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a83      	ldr	r2, [pc, #524]	@ (8004530 <HAL_DMA_IRQHandler+0x694>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d045      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a82      	ldr	r2, [pc, #520]	@ (8004534 <HAL_DMA_IRQHandler+0x698>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d040      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a80      	ldr	r2, [pc, #512]	@ (8004538 <HAL_DMA_IRQHandler+0x69c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d03b      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7f      	ldr	r2, [pc, #508]	@ (800453c <HAL_DMA_IRQHandler+0x6a0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d036      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7d      	ldr	r2, [pc, #500]	@ (8004540 <HAL_DMA_IRQHandler+0x6a4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7c      	ldr	r2, [pc, #496]	@ (8004544 <HAL_DMA_IRQHandler+0x6a8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d02c      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7a      	ldr	r2, [pc, #488]	@ (8004548 <HAL_DMA_IRQHandler+0x6ac>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d027      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a79      	ldr	r2, [pc, #484]	@ (800454c <HAL_DMA_IRQHandler+0x6b0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a77      	ldr	r2, [pc, #476]	@ (8004550 <HAL_DMA_IRQHandler+0x6b4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01d      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a76      	ldr	r2, [pc, #472]	@ (8004554 <HAL_DMA_IRQHandler+0x6b8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a74      	ldr	r2, [pc, #464]	@ (8004558 <HAL_DMA_IRQHandler+0x6bc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a73      	ldr	r2, [pc, #460]	@ (800455c <HAL_DMA_IRQHandler+0x6c0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a71      	ldr	r2, [pc, #452]	@ (8004560 <HAL_DMA_IRQHandler+0x6c4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a70      	ldr	r2, [pc, #448]	@ (8004564 <HAL_DMA_IRQHandler+0x6c8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x516>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004568 <HAL_DMA_IRQHandler+0x6cc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10a      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x52c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e009      	b.n	80043dc <HAL_DMA_IRQHandler+0x540>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03e      	beq.n	800445e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2210      	movs	r2, #16
 80043ea:	409a      	lsls	r2, r3
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d018      	beq.n	8004430 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d024      	beq.n	800445e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01f      	b.n	800445e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01b      	beq.n	800445e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
 800442e:	e016      	b.n	800445e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0208 	bic.w	r2, r2, #8
 800444c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2220      	movs	r2, #32
 8004468:	409a      	lsls	r2, r3
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8110 	beq.w	8004694 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <HAL_DMA_IRQHandler+0x690>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d04a      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2b      	ldr	r2, [pc, #172]	@ (8004530 <HAL_DMA_IRQHandler+0x694>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d045      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a29      	ldr	r2, [pc, #164]	@ (8004534 <HAL_DMA_IRQHandler+0x698>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d040      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <HAL_DMA_IRQHandler+0x69c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d03b      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_DMA_IRQHandler+0x6a0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d036      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a25      	ldr	r2, [pc, #148]	@ (8004540 <HAL_DMA_IRQHandler+0x6a4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d031      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a23      	ldr	r2, [pc, #140]	@ (8004544 <HAL_DMA_IRQHandler+0x6a8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02c      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a22      	ldr	r2, [pc, #136]	@ (8004548 <HAL_DMA_IRQHandler+0x6ac>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d027      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a20      	ldr	r2, [pc, #128]	@ (800454c <HAL_DMA_IRQHandler+0x6b0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d022      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004550 <HAL_DMA_IRQHandler+0x6b4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d01d      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_DMA_IRQHandler+0x6b8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <HAL_DMA_IRQHandler+0x6bc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <HAL_DMA_IRQHandler+0x6c0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_DMA_IRQHandler+0x6c4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <HAL_DMA_IRQHandler+0x6c8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_DMA_IRQHandler+0x678>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <HAL_DMA_IRQHandler+0x6cc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d12b      	bne.n	800456c <HAL_DMA_IRQHandler+0x6d0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e02a      	b.n	8004580 <HAL_DMA_IRQHandler+0x6e4>
 800452a:	bf00      	nop
 800452c:	40020010 	.word	0x40020010
 8004530:	40020028 	.word	0x40020028
 8004534:	40020040 	.word	0x40020040
 8004538:	40020058 	.word	0x40020058
 800453c:	40020070 	.word	0x40020070
 8004540:	40020088 	.word	0x40020088
 8004544:	400200a0 	.word	0x400200a0
 8004548:	400200b8 	.word	0x400200b8
 800454c:	40020410 	.word	0x40020410
 8004550:	40020428 	.word	0x40020428
 8004554:	40020440 	.word	0x40020440
 8004558:	40020458 	.word	0x40020458
 800455c:	40020470 	.word	0x40020470
 8004560:	40020488 	.word	0x40020488
 8004564:	400204a0 	.word	0x400204a0
 8004568:	400204b8 	.word	0x400204b8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8087 	beq.w	8004694 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2220      	movs	r2, #32
 8004590:	409a      	lsls	r2, r3
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d139      	bne.n	8004616 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0216 	bic.w	r2, r2, #22
 80045b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x736>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0208 	bic.w	r2, r2, #8
 80045e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	223f      	movs	r2, #63	@ 0x3f
 80045ec:	409a      	lsls	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 834a 	beq.w	8004ca0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
          }
          return;
 8004614:	e344      	b.n	8004ca0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02c      	beq.n	8004694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	e027      	b.n	8004694 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d023      	beq.n	8004694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
 8004654:	e01e      	b.n	8004694 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10f      	bne.n	8004684 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0210 	bic.w	r2, r2, #16
 8004672:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8306 	beq.w	8004caa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8088 	beq.w	80047bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2204      	movs	r2, #4
 80046b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7a      	ldr	r2, [pc, #488]	@ (80048a4 <HAL_DMA_IRQHandler+0xa08>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d04a      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a79      	ldr	r2, [pc, #484]	@ (80048a8 <HAL_DMA_IRQHandler+0xa0c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d045      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a77      	ldr	r2, [pc, #476]	@ (80048ac <HAL_DMA_IRQHandler+0xa10>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d040      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a76      	ldr	r2, [pc, #472]	@ (80048b0 <HAL_DMA_IRQHandler+0xa14>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03b      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a74      	ldr	r2, [pc, #464]	@ (80048b4 <HAL_DMA_IRQHandler+0xa18>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d036      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a73      	ldr	r2, [pc, #460]	@ (80048b8 <HAL_DMA_IRQHandler+0xa1c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a71      	ldr	r2, [pc, #452]	@ (80048bc <HAL_DMA_IRQHandler+0xa20>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02c      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a70      	ldr	r2, [pc, #448]	@ (80048c0 <HAL_DMA_IRQHandler+0xa24>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d027      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6e      	ldr	r2, [pc, #440]	@ (80048c4 <HAL_DMA_IRQHandler+0xa28>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6d      	ldr	r2, [pc, #436]	@ (80048c8 <HAL_DMA_IRQHandler+0xa2c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d01d      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a6b      	ldr	r2, [pc, #428]	@ (80048cc <HAL_DMA_IRQHandler+0xa30>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6a      	ldr	r2, [pc, #424]	@ (80048d0 <HAL_DMA_IRQHandler+0xa34>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a68      	ldr	r2, [pc, #416]	@ (80048d4 <HAL_DMA_IRQHandler+0xa38>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a67      	ldr	r2, [pc, #412]	@ (80048d8 <HAL_DMA_IRQHandler+0xa3c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	@ (80048dc <HAL_DMA_IRQHandler+0xa40>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_IRQHandler+0x8b8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a64      	ldr	r2, [pc, #400]	@ (80048e0 <HAL_DMA_IRQHandler+0xa44>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <HAL_DMA_IRQHandler+0x8ca>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e007      	b.n	8004776 <HAL_DMA_IRQHandler+0x8da>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477e:	429a      	cmp	r2, r3
 8004780:	d307      	bcc.n	8004792 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f2      	bne.n	8004776 <HAL_DMA_IRQHandler+0x8da>
 8004790:	e000      	b.n	8004794 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004792:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2203      	movs	r2, #3
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80047aa:	e003      	b.n	80047b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8272 	beq.w	8004caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
 80047ce:	e26c      	b.n	8004caa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a43      	ldr	r2, [pc, #268]	@ (80048e4 <HAL_DMA_IRQHandler+0xa48>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a42      	ldr	r2, [pc, #264]	@ (80048e8 <HAL_DMA_IRQHandler+0xa4c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a40      	ldr	r2, [pc, #256]	@ (80048ec <HAL_DMA_IRQHandler+0xa50>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3f      	ldr	r2, [pc, #252]	@ (80048f0 <HAL_DMA_IRQHandler+0xa54>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3d      	ldr	r2, [pc, #244]	@ (80048f4 <HAL_DMA_IRQHandler+0xa58>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a3c      	ldr	r2, [pc, #240]	@ (80048f8 <HAL_DMA_IRQHandler+0xa5c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3a      	ldr	r2, [pc, #232]	@ (80048fc <HAL_DMA_IRQHandler+0xa60>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_DMA_IRQHandler+0x984>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a39      	ldr	r2, [pc, #228]	@ (8004900 <HAL_DMA_IRQHandler+0xa64>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_DMA_IRQHandler+0x988>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_DMA_IRQHandler+0x98a>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 823f 	beq.w	8004caa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2204      	movs	r2, #4
 800483e:	409a      	lsls	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80cd 	beq.w	80049e4 <HAL_DMA_IRQHandler+0xb48>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80c7 	beq.w	80049e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2204      	movs	r2, #4
 8004860:	409a      	lsls	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d049      	beq.n	8004904 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8210 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800488c:	e20a      	b.n	8004ca4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8206 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a0:	e200      	b.n	8004ca4 <HAL_DMA_IRQHandler+0xe08>
 80048a2:	bf00      	nop
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8
 80048e4:	58025408 	.word	0x58025408
 80048e8:	5802541c 	.word	0x5802541c
 80048ec:	58025430 	.word	0x58025430
 80048f0:	58025444 	.word	0x58025444
 80048f4:	58025458 	.word	0x58025458
 80048f8:	5802546c 	.word	0x5802546c
 80048fc:	58025480 	.word	0x58025480
 8004900:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d160      	bne.n	80049d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7f      	ldr	r2, [pc, #508]	@ (8004b10 <HAL_DMA_IRQHandler+0xc74>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d04a      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b14 <HAL_DMA_IRQHandler+0xc78>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d045      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7c      	ldr	r2, [pc, #496]	@ (8004b18 <HAL_DMA_IRQHandler+0xc7c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d040      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7a      	ldr	r2, [pc, #488]	@ (8004b1c <HAL_DMA_IRQHandler+0xc80>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d03b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a79      	ldr	r2, [pc, #484]	@ (8004b20 <HAL_DMA_IRQHandler+0xc84>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d036      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a77      	ldr	r2, [pc, #476]	@ (8004b24 <HAL_DMA_IRQHandler+0xc88>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d031      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a76      	ldr	r2, [pc, #472]	@ (8004b28 <HAL_DMA_IRQHandler+0xc8c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d02c      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a74      	ldr	r2, [pc, #464]	@ (8004b2c <HAL_DMA_IRQHandler+0xc90>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d027      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a73      	ldr	r2, [pc, #460]	@ (8004b30 <HAL_DMA_IRQHandler+0xc94>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a71      	ldr	r2, [pc, #452]	@ (8004b34 <HAL_DMA_IRQHandler+0xc98>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a70      	ldr	r2, [pc, #448]	@ (8004b38 <HAL_DMA_IRQHandler+0xc9c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6e      	ldr	r2, [pc, #440]	@ (8004b3c <HAL_DMA_IRQHandler+0xca0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b40 <HAL_DMA_IRQHandler+0xca4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6b      	ldr	r2, [pc, #428]	@ (8004b44 <HAL_DMA_IRQHandler+0xca8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b48 <HAL_DMA_IRQHandler+0xcac>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_DMA_IRQHandler+0xb12>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a68      	ldr	r2, [pc, #416]	@ (8004b4c <HAL_DMA_IRQHandler+0xcb0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <HAL_DMA_IRQHandler+0xb24>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e007      	b.n	80049d0 <HAL_DMA_IRQHandler+0xb34>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0204 	bic.w	r2, r2, #4
 80049ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8165 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e2:	e15f      	b.n	8004ca4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2202      	movs	r2, #2
 80049ee:	409a      	lsls	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80c5 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xce8>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80bf 	beq.w	8004b84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2202      	movs	r2, #2
 8004a10:	409a      	lsls	r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d018      	beq.n	8004a52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 813a 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3c:	e134      	b.n	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8130 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a50:	e12a      	b.n	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 8089 	bne.w	8004b70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2b      	ldr	r2, [pc, #172]	@ (8004b10 <HAL_DMA_IRQHandler+0xc74>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d04a      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a29      	ldr	r2, [pc, #164]	@ (8004b14 <HAL_DMA_IRQHandler+0xc78>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d045      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a28      	ldr	r2, [pc, #160]	@ (8004b18 <HAL_DMA_IRQHandler+0xc7c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d040      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a26      	ldr	r2, [pc, #152]	@ (8004b1c <HAL_DMA_IRQHandler+0xc80>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d03b      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a25      	ldr	r2, [pc, #148]	@ (8004b20 <HAL_DMA_IRQHandler+0xc84>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a23      	ldr	r2, [pc, #140]	@ (8004b24 <HAL_DMA_IRQHandler+0xc88>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d031      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a22      	ldr	r2, [pc, #136]	@ (8004b28 <HAL_DMA_IRQHandler+0xc8c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d02c      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a20      	ldr	r2, [pc, #128]	@ (8004b2c <HAL_DMA_IRQHandler+0xc90>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d027      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b30 <HAL_DMA_IRQHandler+0xc94>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_DMA_IRQHandler+0xc98>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_DMA_IRQHandler+0xc9c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <HAL_DMA_IRQHandler+0xca0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <HAL_DMA_IRQHandler+0xca4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <HAL_DMA_IRQHandler+0xca8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <HAL_DMA_IRQHandler+0xcac>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_DMA_IRQHandler+0xc62>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <HAL_DMA_IRQHandler+0xcb0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d128      	bne.n	8004b50 <HAL_DMA_IRQHandler+0xcb4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0214 	bic.w	r2, r2, #20
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e027      	b.n	8004b60 <HAL_DMA_IRQHandler+0xcc4>
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 020a 	bic.w	r2, r2, #10
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8097 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b82:	e091      	b.n	8004ca8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8088 	beq.w	8004caa <HAL_DMA_IRQHandler+0xe0e>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8082 	beq.w	8004caa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a41      	ldr	r2, [pc, #260]	@ (8004cb0 <HAL_DMA_IRQHandler+0xe14>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d04a      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb4 <HAL_DMA_IRQHandler+0xe18>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d045      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb8 <HAL_DMA_IRQHandler+0xe1c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d040      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <HAL_DMA_IRQHandler+0xe20>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03b      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cc0 <HAL_DMA_IRQHandler+0xe24>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d036      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a39      	ldr	r2, [pc, #228]	@ (8004cc4 <HAL_DMA_IRQHandler+0xe28>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d031      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a38      	ldr	r2, [pc, #224]	@ (8004cc8 <HAL_DMA_IRQHandler+0xe2c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02c      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a36      	ldr	r2, [pc, #216]	@ (8004ccc <HAL_DMA_IRQHandler+0xe30>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d027      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a35      	ldr	r2, [pc, #212]	@ (8004cd0 <HAL_DMA_IRQHandler+0xe34>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a33      	ldr	r2, [pc, #204]	@ (8004cd4 <HAL_DMA_IRQHandler+0xe38>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a32      	ldr	r2, [pc, #200]	@ (8004cd8 <HAL_DMA_IRQHandler+0xe3c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a30      	ldr	r2, [pc, #192]	@ (8004cdc <HAL_DMA_IRQHandler+0xe40>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce0 <HAL_DMA_IRQHandler+0xe44>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce4 <HAL_DMA_IRQHandler+0xe48>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce8 <HAL_DMA_IRQHandler+0xe4c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xdaa>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	@ (8004cec <HAL_DMA_IRQHandler+0xe50>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <HAL_DMA_IRQHandler+0xdbc>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 021c 	bic.w	r2, r2, #28
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e007      	b.n	8004c68 <HAL_DMA_IRQHandler+0xdcc>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 020e 	bic.w	r2, r2, #14
 8004c66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
 8004c9e:	e004      	b.n	8004caa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004caa:	3728      	adds	r7, #40	@ 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40020010 	.word	0x40020010
 8004cb4:	40020028 	.word	0x40020028
 8004cb8:	40020040 	.word	0x40020040
 8004cbc:	40020058 	.word	0x40020058
 8004cc0:	40020070 	.word	0x40020070
 8004cc4:	40020088 	.word	0x40020088
 8004cc8:	400200a0 	.word	0x400200a0
 8004ccc:	400200b8 	.word	0x400200b8
 8004cd0:	40020410 	.word	0x40020410
 8004cd4:	40020428 	.word	0x40020428
 8004cd8:	40020440 	.word	0x40020440
 8004cdc:	40020458 	.word	0x40020458
 8004ce0:	40020470 	.word	0x40020470
 8004ce4:	40020488 	.word	0x40020488
 8004ce8:	400204a0 	.word	0x400204a0
 8004cec:	400204b8 	.word	0x400204b8

08004cf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f0c <DMA_SetConfig+0x21c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d072      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7d      	ldr	r2, [pc, #500]	@ (8004f10 <DMA_SetConfig+0x220>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d06d      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7c      	ldr	r2, [pc, #496]	@ (8004f14 <DMA_SetConfig+0x224>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d068      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f18 <DMA_SetConfig+0x228>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d063      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a79      	ldr	r2, [pc, #484]	@ (8004f1c <DMA_SetConfig+0x22c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d05e      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a77      	ldr	r2, [pc, #476]	@ (8004f20 <DMA_SetConfig+0x230>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d059      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a76      	ldr	r2, [pc, #472]	@ (8004f24 <DMA_SetConfig+0x234>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d054      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a74      	ldr	r2, [pc, #464]	@ (8004f28 <DMA_SetConfig+0x238>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04f      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a73      	ldr	r2, [pc, #460]	@ (8004f2c <DMA_SetConfig+0x23c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04a      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a71      	ldr	r2, [pc, #452]	@ (8004f30 <DMA_SetConfig+0x240>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d045      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a70      	ldr	r2, [pc, #448]	@ (8004f34 <DMA_SetConfig+0x244>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d040      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f38 <DMA_SetConfig+0x248>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d03b      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6d      	ldr	r2, [pc, #436]	@ (8004f3c <DMA_SetConfig+0x24c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a6b      	ldr	r2, [pc, #428]	@ (8004f40 <DMA_SetConfig+0x250>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004f44 <DMA_SetConfig+0x254>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d02c      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a68      	ldr	r2, [pc, #416]	@ (8004f48 <DMA_SetConfig+0x258>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d027      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a67      	ldr	r2, [pc, #412]	@ (8004f4c <DMA_SetConfig+0x25c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a65      	ldr	r2, [pc, #404]	@ (8004f50 <DMA_SetConfig+0x260>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a64      	ldr	r2, [pc, #400]	@ (8004f54 <DMA_SetConfig+0x264>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a62      	ldr	r2, [pc, #392]	@ (8004f58 <DMA_SetConfig+0x268>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a61      	ldr	r2, [pc, #388]	@ (8004f5c <DMA_SetConfig+0x26c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f60 <DMA_SetConfig+0x270>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5e      	ldr	r2, [pc, #376]	@ (8004f64 <DMA_SetConfig+0x274>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <DMA_SetConfig+0x10a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f68 <DMA_SetConfig+0x278>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <DMA_SetConfig+0x10e>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <DMA_SetConfig+0x110>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a39      	ldr	r2, [pc, #228]	@ (8004f0c <DMA_SetConfig+0x21c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a38      	ldr	r2, [pc, #224]	@ (8004f10 <DMA_SetConfig+0x220>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a36      	ldr	r2, [pc, #216]	@ (8004f14 <DMA_SetConfig+0x224>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a35      	ldr	r2, [pc, #212]	@ (8004f18 <DMA_SetConfig+0x228>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a33      	ldr	r2, [pc, #204]	@ (8004f1c <DMA_SetConfig+0x22c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a32      	ldr	r2, [pc, #200]	@ (8004f20 <DMA_SetConfig+0x230>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <DMA_SetConfig+0x234>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f28 <DMA_SetConfig+0x238>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <DMA_SetConfig+0x23c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f30 <DMA_SetConfig+0x240>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	@ (8004f34 <DMA_SetConfig+0x244>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a29      	ldr	r2, [pc, #164]	@ (8004f38 <DMA_SetConfig+0x248>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	@ (8004f3c <DMA_SetConfig+0x24c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a26      	ldr	r2, [pc, #152]	@ (8004f40 <DMA_SetConfig+0x250>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <DMA_SetConfig+0x254>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <DMA_SetConfig+0x1d0>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a23      	ldr	r2, [pc, #140]	@ (8004f48 <DMA_SetConfig+0x258>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <DMA_SetConfig+0x1d4>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <DMA_SetConfig+0x1d6>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d059      	beq.n	8004f7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	223f      	movs	r2, #63	@ 0x3f
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d138      	bne.n	8004f6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f0a:	e086      	b.n	800501a <DMA_SetConfig+0x32a>
 8004f0c:	40020010 	.word	0x40020010
 8004f10:	40020028 	.word	0x40020028
 8004f14:	40020040 	.word	0x40020040
 8004f18:	40020058 	.word	0x40020058
 8004f1c:	40020070 	.word	0x40020070
 8004f20:	40020088 	.word	0x40020088
 8004f24:	400200a0 	.word	0x400200a0
 8004f28:	400200b8 	.word	0x400200b8
 8004f2c:	40020410 	.word	0x40020410
 8004f30:	40020428 	.word	0x40020428
 8004f34:	40020440 	.word	0x40020440
 8004f38:	40020458 	.word	0x40020458
 8004f3c:	40020470 	.word	0x40020470
 8004f40:	40020488 	.word	0x40020488
 8004f44:	400204a0 	.word	0x400204a0
 8004f48:	400204b8 	.word	0x400204b8
 8004f4c:	58025408 	.word	0x58025408
 8004f50:	5802541c 	.word	0x5802541c
 8004f54:	58025430 	.word	0x58025430
 8004f58:	58025444 	.word	0x58025444
 8004f5c:	58025458 	.word	0x58025458
 8004f60:	5802546c 	.word	0x5802546c
 8004f64:	58025480 	.word	0x58025480
 8004f68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
}
 8004f7c:	e04d      	b.n	800501a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <DMA_SetConfig+0x338>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d022      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a27      	ldr	r2, [pc, #156]	@ (800502c <DMA_SetConfig+0x33c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a26      	ldr	r2, [pc, #152]	@ (8005030 <DMA_SetConfig+0x340>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d018      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a24      	ldr	r2, [pc, #144]	@ (8005034 <DMA_SetConfig+0x344>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <DMA_SetConfig+0x348>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a21      	ldr	r2, [pc, #132]	@ (800503c <DMA_SetConfig+0x34c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a20      	ldr	r2, [pc, #128]	@ (8005040 <DMA_SetConfig+0x350>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <DMA_SetConfig+0x2de>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <DMA_SetConfig+0x354>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <DMA_SetConfig+0x2e2>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <DMA_SetConfig+0x2e4>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d108      	bne.n	800500a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	60da      	str	r2, [r3, #12]
}
 8005008:	e007      	b.n	800501a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	58025408 	.word	0x58025408
 800502c:	5802541c 	.word	0x5802541c
 8005030:	58025430 	.word	0x58025430
 8005034:	58025444 	.word	0x58025444
 8005038:	58025458 	.word	0x58025458
 800503c:	5802546c 	.word	0x5802546c
 8005040:	58025480 	.word	0x58025480
 8005044:	58025494 	.word	0x58025494

08005048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a42      	ldr	r2, [pc, #264]	@ (8005160 <DMA_CalcBaseAndBitshift+0x118>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d04a      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a41      	ldr	r2, [pc, #260]	@ (8005164 <DMA_CalcBaseAndBitshift+0x11c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d045      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3f      	ldr	r2, [pc, #252]	@ (8005168 <DMA_CalcBaseAndBitshift+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d040      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3e      	ldr	r2, [pc, #248]	@ (800516c <DMA_CalcBaseAndBitshift+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d03b      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3c      	ldr	r2, [pc, #240]	@ (8005170 <DMA_CalcBaseAndBitshift+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d036      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a3b      	ldr	r2, [pc, #236]	@ (8005174 <DMA_CalcBaseAndBitshift+0x12c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d031      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a39      	ldr	r2, [pc, #228]	@ (8005178 <DMA_CalcBaseAndBitshift+0x130>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d02c      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a38      	ldr	r2, [pc, #224]	@ (800517c <DMA_CalcBaseAndBitshift+0x134>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d027      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a36      	ldr	r2, [pc, #216]	@ (8005180 <DMA_CalcBaseAndBitshift+0x138>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a35      	ldr	r2, [pc, #212]	@ (8005184 <DMA_CalcBaseAndBitshift+0x13c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01d      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a33      	ldr	r2, [pc, #204]	@ (8005188 <DMA_CalcBaseAndBitshift+0x140>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a32      	ldr	r2, [pc, #200]	@ (800518c <DMA_CalcBaseAndBitshift+0x144>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a30      	ldr	r2, [pc, #192]	@ (8005190 <DMA_CalcBaseAndBitshift+0x148>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005194 <DMA_CalcBaseAndBitshift+0x14c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005198 <DMA_CalcBaseAndBitshift+0x150>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <DMA_CalcBaseAndBitshift+0xa8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2c      	ldr	r2, [pc, #176]	@ (800519c <DMA_CalcBaseAndBitshift+0x154>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <DMA_CalcBaseAndBitshift+0xac>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <DMA_CalcBaseAndBitshift+0xae>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d024      	beq.n	8005144 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3b10      	subs	r3, #16
 8005102:	4a27      	ldr	r2, [pc, #156]	@ (80051a0 <DMA_CalcBaseAndBitshift+0x158>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	4a24      	ldr	r2, [pc, #144]	@ (80051a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d908      	bls.n	8005134 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	4b1f      	ldr	r3, [pc, #124]	@ (80051a8 <DMA_CalcBaseAndBitshift+0x160>)
 800512a:	4013      	ands	r3, r2
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	659a      	str	r2, [r3, #88]	@ 0x58
 8005132:	e00d      	b.n	8005150 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <DMA_CalcBaseAndBitshift+0x160>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6593      	str	r3, [r2, #88]	@ 0x58
 8005142:	e005      	b.n	8005150 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40020010 	.word	0x40020010
 8005164:	40020028 	.word	0x40020028
 8005168:	40020040 	.word	0x40020040
 800516c:	40020058 	.word	0x40020058
 8005170:	40020070 	.word	0x40020070
 8005174:	40020088 	.word	0x40020088
 8005178:	400200a0 	.word	0x400200a0
 800517c:	400200b8 	.word	0x400200b8
 8005180:	40020410 	.word	0x40020410
 8005184:	40020428 	.word	0x40020428
 8005188:	40020440 	.word	0x40020440
 800518c:	40020458 	.word	0x40020458
 8005190:	40020470 	.word	0x40020470
 8005194:	40020488 	.word	0x40020488
 8005198:	400204a0 	.word	0x400204a0
 800519c:	400204b8 	.word	0x400204b8
 80051a0:	aaaaaaab 	.word	0xaaaaaaab
 80051a4:	0800b628 	.word	0x0800b628
 80051a8:	fffffc00 	.word	0xfffffc00

080051ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d120      	bne.n	8005202 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d858      	bhi.n	800527a <DMA_CheckFifoParam+0xce>
 80051c8:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <DMA_CheckFifoParam+0x24>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	080051e1 	.word	0x080051e1
 80051dc:	0800527b 	.word	0x0800527b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d048      	beq.n	800527e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051f0:	e045      	b.n	800527e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051fa:	d142      	bne.n	8005282 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005200:	e03f      	b.n	8005282 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520a:	d123      	bne.n	8005254 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005210:	2b03      	cmp	r3, #3
 8005212:	d838      	bhi.n	8005286 <DMA_CheckFifoParam+0xda>
 8005214:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <DMA_CheckFifoParam+0x70>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	0800522d 	.word	0x0800522d
 8005220:	08005233 	.word	0x08005233
 8005224:	0800522d 	.word	0x0800522d
 8005228:	08005245 	.word	0x08005245
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
        break;
 8005230:	e030      	b.n	8005294 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d025      	beq.n	800528a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005242:	e022      	b.n	800528a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800524c:	d11f      	bne.n	800528e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005252:	e01c      	b.n	800528e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	2b02      	cmp	r3, #2
 800525a:	d902      	bls.n	8005262 <DMA_CheckFifoParam+0xb6>
 800525c:	2b03      	cmp	r3, #3
 800525e:	d003      	beq.n	8005268 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005260:	e018      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
        break;
 8005266:	e015      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
    break;
 8005278:	e00b      	b.n	8005292 <DMA_CheckFifoParam+0xe6>
        break;
 800527a:	bf00      	nop
 800527c:	e00a      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        break;
 800527e:	bf00      	nop
 8005280:	e008      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        break;
 8005282:	bf00      	nop
 8005284:	e006      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        break;
 8005286:	bf00      	nop
 8005288:	e004      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
        break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <DMA_CheckFifoParam+0xe8>
    break;
 8005292:	bf00      	nop
    }
  }

  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop

080052a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d022      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a36      	ldr	r2, [pc, #216]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01d      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a35      	ldr	r2, [pc, #212]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d018      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a33      	ldr	r2, [pc, #204]	@ (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a32      	ldr	r2, [pc, #200]	@ (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00e      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d009      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2d      	ldr	r2, [pc, #180]	@ (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	3b08      	subs	r3, #8
 8005314:	4a28      	ldr	r2, [pc, #160]	@ (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4b26      	ldr	r3, [pc, #152]	@ (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a24      	ldr	r2, [pc, #144]	@ (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005330:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005340:	e024      	b.n	800538c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	3b10      	subs	r3, #16
 800534a:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d806      	bhi.n	800536a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a1b      	ldr	r2, [pc, #108]	@ (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d902      	bls.n	800536a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3308      	adds	r3, #8
 8005368:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4b18      	ldr	r3, [pc, #96]	@ (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800537c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2201      	movs	r2, #1
 8005386:	409a      	lsls	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	58025408 	.word	0x58025408
 800539c:	5802541c 	.word	0x5802541c
 80053a0:	58025430 	.word	0x58025430
 80053a4:	58025444 	.word	0x58025444
 80053a8:	58025458 	.word	0x58025458
 80053ac:	5802546c 	.word	0x5802546c
 80053b0:	58025480 	.word	0x58025480
 80053b4:	58025494 	.word	0x58025494
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	16009600 	.word	0x16009600
 80053c0:	58025880 	.word	0x58025880
 80053c4:	aaaaaaab 	.word	0xaaaaaaab
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	4002040f 	.word	0x4002040f
 80053d0:	10008200 	.word	0x10008200
 80053d4:	40020880 	.word	0x40020880

080053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04a      	beq.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d847      	bhi.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a24      	ldr	r2, [pc, #144]	@ (8005494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d01d      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a21      	ldr	r2, [pc, #132]	@ (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1e      	ldr	r2, [pc, #120]	@ (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4b17      	ldr	r3, [pc, #92]	@ (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005460:	671a      	str	r2, [r3, #112]	@ 0x70
 8005462:	e009      	b.n	8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a11      	ldr	r2, [pc, #68]	@ (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005476:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
 80054b0:	1600963f 	.word	0x1600963f
 80054b4:	58025940 	.word	0x58025940
 80054b8:	1000823f 	.word	0x1000823f
 80054bc:	40020940 	.word	0x40020940

080054c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e0e3      	b.n	800569a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2223      	movs	r2, #35	@ 0x23
 80054e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fb fd0d 	bl	8000f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ea:	4b6e      	ldr	r3, [pc, #440]	@ (80056a4 <HAL_ETH_Init+0x1e4>)
 80054ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054f0:	4a6c      	ldr	r2, [pc, #432]	@ (80056a4 <HAL_ETH_Init+0x1e4>)
 80054f2:	f043 0302 	orr.w	r3, r3, #2
 80054f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80054fa:	4b6a      	ldr	r3, [pc, #424]	@ (80056a4 <HAL_ETH_Init+0x1e4>)
 80054fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7a1b      	ldrb	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005510:	2000      	movs	r0, #0
 8005512:	f7fb ffe1 	bl	80014d8 <HAL_SYSCFG_ETHInterfaceSelect>
 8005516:	e003      	b.n	8005520 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005518:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800551c:	f7fb ffdc 	bl	80014d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005520:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <HAL_ETH_Init+0x1e8>)
 8005522:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800553a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800553c:	f7fb ff90 	bl	8001460 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005542:	e011      	b.n	8005568 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005544:	f7fb ff8c 	bl	8001460 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005552:	d909      	bls.n	8005568 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	22e0      	movs	r2, #224	@ 0xe0
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e098      	b.n	800569a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e4      	bne.n	8005544 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f89e 	bl	80056bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005580:	f001 fed4 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8005584:	4603      	mov	r3, r0
 8005586:	4a49      	ldr	r2, [pc, #292]	@ (80056ac <HAL_ETH_Init+0x1ec>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	0c9a      	lsrs	r2, r3, #18
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3a01      	subs	r2, #1
 8005594:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa81 	bl	8005aa0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80055aa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055ba:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	22e0      	movs	r2, #224	@ 0xe0
 80055d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e05d      	b.n	800569a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80055ea:	4b31      	ldr	r3, [pc, #196]	@ (80056b0 <HAL_ETH_Init+0x1f0>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6952      	ldr	r2, [r2, #20]
 80055f2:	0051      	lsls	r1, r2, #1
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	430b      	orrs	r3, r1
 80055fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055fe:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fae9 	bl	8005bda <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb2f 	bl	8005c6c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	3305      	adds	r3, #5
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4619      	mov	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	3303      	adds	r3, #3
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	061a      	lsls	r2, r3, #24
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	3302      	adds	r3, #2
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	3301      	adds	r3, #1
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800564c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800565a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800565c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_ETH_Init+0x1f4>)
 800566e:	430b      	orrs	r3, r1
 8005670:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <HAL_ETH_Init+0x1f8>)
 8005682:	430b      	orrs	r3, r1
 8005684:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2210      	movs	r2, #16
 8005694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
 80056a8:	58000400 	.word	0x58000400
 80056ac:	431bde83 	.word	0x431bde83
 80056b0:	ffff8001 	.word	0xffff8001
 80056b4:	0c020060 	.word	0x0c020060
 80056b8:	0c20c000 	.word	0x0c20c000

080056bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80056d6:	f001 fe29 	bl	800732c <HAL_RCC_GetHCLKFreq>
 80056da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a1a      	ldr	r2, [pc, #104]	@ (8005748 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d804      	bhi.n	80056ee <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e022      	b.n	8005734 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a16      	ldr	r2, [pc, #88]	@ (800574c <HAL_ETH_SetMDIOClockRange+0x90>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d204      	bcs.n	8005700 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e019      	b.n	8005734 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a13      	ldr	r2, [pc, #76]	@ (8005750 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d915      	bls.n	8005734 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <HAL_ETH_SetMDIOClockRange+0x98>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d804      	bhi.n	800571a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e00c      	b.n	8005734 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4a0e      	ldr	r2, [pc, #56]	@ (8005758 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d804      	bhi.n	800572c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e003      	b.n	8005734 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	02160ebf 	.word	0x02160ebf
 800574c:	03938700 	.word	0x03938700
 8005750:	05f5e0ff 	.word	0x05f5e0ff
 8005754:	08f0d17f 	.word	0x08f0d17f
 8005758:	0ee6b27f 	.word	0x0ee6b27f

0800575c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800576e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	791b      	ldrb	r3, [r3, #4]
 8005774:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	7b1b      	ldrb	r3, [r3, #12]
 800577c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800577e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	7b5b      	ldrb	r3, [r3, #13]
 8005784:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005786:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	7b9b      	ldrb	r3, [r3, #14]
 800578c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800578e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	7bdb      	ldrb	r3, [r3, #15]
 8005794:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005796:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	7c12      	ldrb	r2, [r2, #16]
 800579c:	2a00      	cmp	r2, #0
 800579e:	d102      	bne.n	80057a6 <ETH_SetMACConfig+0x4a>
 80057a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80057a4:	e000      	b.n	80057a8 <ETH_SetMACConfig+0x4c>
 80057a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80057a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	7c52      	ldrb	r2, [r2, #17]
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d102      	bne.n	80057b8 <ETH_SetMACConfig+0x5c>
 80057b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80057b6:	e000      	b.n	80057ba <ETH_SetMACConfig+0x5e>
 80057b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80057ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	7c9b      	ldrb	r3, [r3, #18]
 80057c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80057c2:	431a      	orrs	r2, r3
               macconf->Speed |
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80057c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80057ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	7f1b      	ldrb	r3, [r3, #28]
 80057d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80057d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	7f5b      	ldrb	r3, [r3, #29]
 80057dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80057de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	7f92      	ldrb	r2, [r2, #30]
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d102      	bne.n	80057ee <ETH_SetMACConfig+0x92>
 80057e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057ec:	e000      	b.n	80057f0 <ETH_SetMACConfig+0x94>
 80057ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80057f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	7fdb      	ldrb	r3, [r3, #31]
 80057f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80057f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005800:	2a00      	cmp	r2, #0
 8005802:	d102      	bne.n	800580a <ETH_SetMACConfig+0xae>
 8005804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005808:	e000      	b.n	800580c <ETH_SetMACConfig+0xb0>
 800580a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800580c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800581a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800581c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b56      	ldr	r3, [pc, #344]	@ (8005988 <ETH_SetMACConfig+0x22c>)
 800582e:	4013      	ands	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	430b      	orrs	r3, r1
 8005838:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005846:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005848:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005850:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800585a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800585c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005864:	2a00      	cmp	r2, #0
 8005866:	d102      	bne.n	800586e <ETH_SetMACConfig+0x112>
 8005868:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800586c:	e000      	b.n	8005870 <ETH_SetMACConfig+0x114>
 800586e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005870:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b42      	ldr	r3, [pc, #264]	@ (800598c <ETH_SetMACConfig+0x230>)
 8005882:	4013      	ands	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	430b      	orrs	r3, r1
 800588c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005894:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005990 <ETH_SetMACConfig+0x234>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d101      	bne.n	80058ce <ETH_SetMACConfig+0x172>
 80058ca:	2280      	movs	r2, #128	@ 0x80
 80058cc:	e000      	b.n	80058d0 <ETH_SetMACConfig+0x174>
 80058ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80058d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058e2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80058e6:	4013      	ands	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80058f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005900:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	f023 0103 	bic.w	r1, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	430a      	orrs	r2, r1
 800591a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005926:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005942:	2a00      	cmp	r2, #0
 8005944:	d101      	bne.n	800594a <ETH_SetMACConfig+0x1ee>
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	e000      	b.n	800594c <ETH_SetMACConfig+0x1f0>
 800594a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800594c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005954:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005956:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800595e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800596c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	430a      	orrs	r2, r1
 8005978:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	00048083 	.word	0x00048083
 800598c:	c0f88000 	.word	0xc0f88000
 8005990:	fffffef0 	.word	0xfffffef0

08005994 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b38      	ldr	r3, [pc, #224]	@ (8005a8c <ETH_SetDMAConfig+0xf8>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	6811      	ldr	r1, [r2, #0]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	791b      	ldrb	r3, [r3, #4]
 80059c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	7b1b      	ldrb	r3, [r3, #12]
 80059cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <ETH_SetDMAConfig+0xfc>)
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	7b5b      	ldrb	r3, [r3, #13]
 80059f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a04:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005a08:	4b22      	ldr	r3, [pc, #136]	@ (8005a94 <ETH_SetDMAConfig+0x100>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a18:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	7d1b      	ldrb	r3, [r3, #20]
 8005a24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	7f5b      	ldrb	r3, [r3, #29]
 8005a2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005a3e:	4b16      	ldr	r3, [pc, #88]	@ (8005a98 <ETH_SetDMAConfig+0x104>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a4e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	7f1b      	ldrb	r3, [r3, #28]
 8005a56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a68:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <ETH_SetDMAConfig+0x108>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	430b      	orrs	r3, r1
 8005a78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a7c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	ffff87fd 	.word	0xffff87fd
 8005a90:	ffff2ffe 	.word	0xffff2ffe
 8005a94:	fffec000 	.word	0xfffec000
 8005a98:	ffc0efef 	.word	0xffc0efef
 8005a9c:	7fc0ffff 	.word	0x7fc0ffff

08005aa0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0a4      	sub	sp, #144	@ 0x90
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005af8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005afc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005b04:	2300      	movs	r3, #0
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005b22:	2300      	movs	r3, #0
 8005b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005b4a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005b50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b54:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fde6 	bl	800575c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005b94:	2301      	movs	r3, #1
 8005b96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005baa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005bae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005bb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005bb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005bc0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fee1 	bl	8005994 <ETH_SetDMAConfig>
}
 8005bd2:	bf00      	nop
 8005bd4:	3790      	adds	r7, #144	@ 0x90
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e01d      	b.n	8005c24 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68d9      	ldr	r1, [r3, #12]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	3206      	adds	r2, #6
 8005c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d9de      	bls.n	8005be8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c4c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e023      	b.n	8005cc2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6919      	ldr	r1, [r3, #16]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	3212      	adds	r2, #18
 8005cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d9d8      	bls.n	8005c7a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d02:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d16:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	@ 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d36:	4b89      	ldr	r3, [pc, #548]	@ (8005f5c <HAL_GPIO_Init+0x234>)
 8005d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d3a:	e194      	b.n	8006066 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8186 	beq.w	8006060 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d005      	beq.n	8005d6c <HAL_GPIO_Init+0x44>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d130      	bne.n	8005dce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	2203      	movs	r2, #3
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005da2:	2201      	movs	r2, #1
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0201 	and.w	r2, r3, #1
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d017      	beq.n	8005e0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	2203      	movs	r2, #3
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d123      	bne.n	8005e5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	08da      	lsrs	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3208      	adds	r2, #8
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	220f      	movs	r2, #15
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4013      	ands	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	08da      	lsrs	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3208      	adds	r2, #8
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	2203      	movs	r2, #3
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0203 	and.w	r2, r3, #3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80e0 	beq.w	8006060 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8005f60 <HAL_GPIO_Init+0x238>)
 8005ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f60 <HAL_GPIO_Init+0x238>)
 8005ea8:	f043 0302 	orr.w	r3, r3, #2
 8005eac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f60 <HAL_GPIO_Init+0x238>)
 8005eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ebe:	4a29      	ldr	r2, [pc, #164]	@ (8005f64 <HAL_GPIO_Init+0x23c>)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	@ (8005f68 <HAL_GPIO_Init+0x240>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d052      	beq.n	8005f90 <HAL_GPIO_Init+0x268>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	@ (8005f6c <HAL_GPIO_Init+0x244>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d031      	beq.n	8005f56 <HAL_GPIO_Init+0x22e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f70 <HAL_GPIO_Init+0x248>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02b      	beq.n	8005f52 <HAL_GPIO_Init+0x22a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f74 <HAL_GPIO_Init+0x24c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d025      	beq.n	8005f4e <HAL_GPIO_Init+0x226>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <HAL_GPIO_Init+0x250>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01f      	beq.n	8005f4a <HAL_GPIO_Init+0x222>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <HAL_GPIO_Init+0x254>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d019      	beq.n	8005f46 <HAL_GPIO_Init+0x21e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <HAL_GPIO_Init+0x258>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <HAL_GPIO_Init+0x21a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <HAL_GPIO_Init+0x25c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00d      	beq.n	8005f3e <HAL_GPIO_Init+0x216>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <HAL_GPIO_Init+0x260>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d007      	beq.n	8005f3a <HAL_GPIO_Init+0x212>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <HAL_GPIO_Init+0x264>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_GPIO_Init+0x20e>
 8005f32:	2309      	movs	r3, #9
 8005f34:	e02d      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f36:	230a      	movs	r3, #10
 8005f38:	e02b      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	e029      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f3e:	2307      	movs	r3, #7
 8005f40:	e027      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f42:	2306      	movs	r3, #6
 8005f44:	e025      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f46:	2305      	movs	r3, #5
 8005f48:	e023      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	e021      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e01f      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e01d      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01b      	b.n	8005f92 <HAL_GPIO_Init+0x26a>
 8005f5a:	bf00      	nop
 8005f5c:	58000080 	.word	0x58000080
 8005f60:	58024400 	.word	0x58024400
 8005f64:	58000400 	.word	0x58000400
 8005f68:	58020000 	.word	0x58020000
 8005f6c:	58020400 	.word	0x58020400
 8005f70:	58020800 	.word	0x58020800
 8005f74:	58020c00 	.word	0x58020c00
 8005f78:	58021000 	.word	0x58021000
 8005f7c:	58021400 	.word	0x58021400
 8005f80:	58021800 	.word	0x58021800
 8005f84:	58021c00 	.word	0x58021c00
 8005f88:	58022000 	.word	0x58022000
 8005f8c:	58022400 	.word	0x58022400
 8005f90:	2300      	movs	r3, #0
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	f002 0203 	and.w	r2, r2, #3
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	4093      	lsls	r3, r2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fa2:	4938      	ldr	r1, [pc, #224]	@ (8006084 <HAL_GPIO_Init+0x35c>)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	3302      	adds	r3, #2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	43db      	mvns	r3, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4013      	ands	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f ae63 	bne.w	8005d3c <HAL_GPIO_Init+0x14>
  }
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	3724      	adds	r7, #36	@ 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	58000400 	.word	0x58000400

08006088 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006090:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <HAL_HSEM_FastTake+0x2c>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3320      	adds	r3, #32
 8006096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609a:	4a07      	ldr	r2, [pc, #28]	@ (80060b8 <HAL_HSEM_FastTake+0x30>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	58026400 	.word	0x58026400
 80060b8:	80000300 	.word	0x80000300

080060bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80060c6:	4906      	ldr	r1, [pc, #24]	@ (80060e0 <HAL_HSEM_Release+0x24>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	58026400 	.word	0x58026400

080060e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e0fe      	b.n	80062f4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f832 	bl	8001174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2203      	movs	r2, #3
 8006114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f004 ffad 	bl	800b07c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7c1a      	ldrb	r2, [r3, #16]
 800612a:	f88d 2000 	strb.w	r2, [sp]
 800612e:	3304      	adds	r3, #4
 8006130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006132:	f004 ff31 	bl	800af98 <USB_CoreInit>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0d5      	b.n	80062f4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f004 ffa5 	bl	800b09e <USB_SetCurrentMode>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e0c6      	b.n	80062f4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e04a      	b.n	8006202 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3315      	adds	r3, #21
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	3314      	adds	r3, #20
 8006190:	7bfa      	ldrb	r2, [r7, #15]
 8006192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006194:	7bfa      	ldrb	r2, [r7, #15]
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	b298      	uxth	r0, r3
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	332e      	adds	r3, #46	@ 0x2e
 80061a8:	4602      	mov	r2, r0
 80061aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061ac:	7bfa      	ldrb	r2, [r7, #15]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	3318      	adds	r3, #24
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	331c      	adds	r3, #28
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061d4:	7bfa      	ldrb	r2, [r7, #15]
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	3320      	adds	r3, #32
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061e8:	7bfa      	ldrb	r2, [r7, #15]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	3301      	adds	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	791b      	ldrb	r3, [r3, #4]
 8006206:	7bfa      	ldrb	r2, [r7, #15]
 8006208:	429a      	cmp	r2, r3
 800620a:	d3af      	bcc.n	800616c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	e044      	b.n	800629c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006228:	7bfa      	ldrb	r2, [r7, #15]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800623a:	7bfa      	ldrb	r2, [r7, #15]
 800623c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800626a:	7bfa      	ldrb	r2, [r7, #15]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	3301      	adds	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	791b      	ldrb	r3, [r3, #4]
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3b5      	bcc.n	8006212 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7c1a      	ldrb	r2, [r3, #16]
 80062ae:	f88d 2000 	strb.w	r2, [sp]
 80062b2:	3304      	adds	r3, #4
 80062b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b6:	f004 ff3f 	bl	800b138 <USB_DevInit>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e013      	b.n	80062f4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7b1b      	ldrb	r3, [r3, #12]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f80a 	bl	80062fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f005 f8fa 	bl	800b4e6 <USB_DevDisconnect>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <HAL_PCDEx_ActivateLPM+0x44>)
 800632c:	4313      	orrs	r3, r2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	10000003 	.word	0x10000003

08006344 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800634c:	4b29      	ldr	r3, [pc, #164]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	2b06      	cmp	r3, #6
 8006356:	d00a      	beq.n	800636e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006358:	4b26      	ldr	r3, [pc, #152]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d001      	beq.n	800636a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e040      	b.n	80063ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e03e      	b.n	80063ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800636e:	4b21      	ldr	r3, [pc, #132]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006376:	491f      	ldr	r1, [pc, #124]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800637e:	f7fb f86f 	bl	8001460 <HAL_GetTick>
 8006382:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006384:	e009      	b.n	800639a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006386:	f7fb f86b 	bl	8001460 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006394:	d901      	bls.n	800639a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e028      	b.n	80063ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800639a:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a6:	d1ee      	bne.n	8006386 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b1e      	cmp	r3, #30
 80063ac:	d008      	beq.n	80063c0 <HAL_PWREx_ConfigSupply+0x7c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80063b2:	d005      	beq.n	80063c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b1d      	cmp	r3, #29
 80063b8:	d002      	beq.n	80063c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80063be:	d114      	bne.n	80063ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80063c0:	f7fb f84e 	bl	8001460 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063c6:	e009      	b.n	80063dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063c8:	f7fb f84a 	bl	8001460 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063d6:	d901      	bls.n	80063dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e007      	b.n	80063ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063dc:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e8:	d1ee      	bne.n	80063c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	58024800 	.word	0x58024800

080063f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a04      	ldr	r2, [pc, #16]	@ (8006414 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006406:	60d3      	str	r3, [r2, #12]
}
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	58024800 	.word	0x58024800

08006418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	@ 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f000 bc48 	b.w	8006cbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8088 	beq.w	800654a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4b99      	ldr	r3, [pc, #612]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006444:	4b96      	ldr	r3, [pc, #600]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	2b10      	cmp	r3, #16
 800644e:	d007      	beq.n	8006460 <HAL_RCC_OscConfig+0x48>
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	2b18      	cmp	r3, #24
 8006454:	d111      	bne.n	800647a <HAL_RCC_OscConfig+0x62>
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d10c      	bne.n	800647a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	4b8f      	ldr	r3, [pc, #572]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d06d      	beq.n	8006548 <HAL_RCC_OscConfig+0x130>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d169      	bne.n	8006548 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f000 bc21 	b.w	8006cbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006482:	d106      	bne.n	8006492 <HAL_RCC_OscConfig+0x7a>
 8006484:	4b86      	ldr	r3, [pc, #536]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a85      	ldr	r2, [pc, #532]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800648a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e02e      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x9c>
 800649a:	4b81      	ldr	r3, [pc, #516]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a80      	ldr	r2, [pc, #512]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b7e      	ldr	r3, [pc, #504]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a7d      	ldr	r2, [pc, #500]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e01d      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCC_OscConfig+0xc0>
 80064be:	4b78      	ldr	r3, [pc, #480]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a77      	ldr	r2, [pc, #476]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b75      	ldr	r3, [pc, #468]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a74      	ldr	r2, [pc, #464]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e00b      	b.n	80064f0 <HAL_RCC_OscConfig+0xd8>
 80064d8:	4b71      	ldr	r3, [pc, #452]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a70      	ldr	r2, [pc, #448]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	4b6e      	ldr	r3, [pc, #440]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a6d      	ldr	r2, [pc, #436]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80064ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fa ffb2 	bl	8001460 <HAL_GetTick>
 80064fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7fa ffae 	bl	8001460 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	@ 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e3d4      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006512:	4b63      	ldr	r3, [pc, #396]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0xe8>
 800651e:	e014      	b.n	800654a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fa ff9e 	bl	8001460 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7fa ff9a 	bl	8001460 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	@ 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e3c0      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800653a:	4b59      	ldr	r3, [pc, #356]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x110>
 8006546:	e000      	b.n	800654a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80ca 	beq.w	80066ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006558:	4b51      	ldr	r3, [pc, #324]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006560:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006562:	4b4f      	ldr	r3, [pc, #316]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <HAL_RCC_OscConfig+0x166>
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b18      	cmp	r3, #24
 8006572:	d156      	bne.n	8006622 <HAL_RCC_OscConfig+0x20a>
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d151      	bne.n	8006622 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657e:	4b48      	ldr	r3, [pc, #288]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x17e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e392      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006596:	4b42      	ldr	r3, [pc, #264]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 0219 	bic.w	r2, r3, #25
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	493f      	ldr	r1, [pc, #252]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fa ff5a 	bl	8001460 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065b0:	f7fa ff56 	bl	8001460 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e37c      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c2:	4b37      	ldr	r3, [pc, #220]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ce:	f7fa ff77 	bl	80014c0 <HAL_GetREVID>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065d8:	4293      	cmp	r3, r2
 80065da:	d817      	bhi.n	800660c <HAL_RCC_OscConfig+0x1f4>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d108      	bne.n	80065f6 <HAL_RCC_OscConfig+0x1de>
 80065e4:	4b2e      	ldr	r3, [pc, #184]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065ec:	4a2c      	ldr	r2, [pc, #176]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f4:	e07a      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f6:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	031b      	lsls	r3, r3, #12
 8006604:	4926      	ldr	r1, [pc, #152]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660a:	e06f      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660c:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	061b      	lsls	r3, r3, #24
 800661a:	4921      	ldr	r1, [pc, #132]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800661c:	4313      	orrs	r3, r2
 800661e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006620:	e064      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d047      	beq.n	80066ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800662a:	4b1d      	ldr	r3, [pc, #116]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f023 0219 	bic.w	r2, r3, #25
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	491a      	ldr	r1, [pc, #104]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fa ff10 	bl	8001460 <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006644:	f7fa ff0c 	bl	8001460 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e332      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	f7fa ff2d 	bl	80014c0 <HAL_GetREVID>
 8006666:	4603      	mov	r3, r0
 8006668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800666c:	4293      	cmp	r3, r2
 800666e:	d819      	bhi.n	80066a4 <HAL_RCC_OscConfig+0x28c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d108      	bne.n	800668a <HAL_RCC_OscConfig+0x272>
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006680:	4a07      	ldr	r2, [pc, #28]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 8006682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006686:	6053      	str	r3, [r2, #4]
 8006688:	e030      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
 800668a:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	4901      	ldr	r1, [pc, #4]	@ (80066a0 <HAL_RCC_OscConfig+0x288>)
 800669a:	4313      	orrs	r3, r2
 800669c:	604b      	str	r3, [r1, #4]
 800669e:	e025      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
 80066a0:	58024400 	.word	0x58024400
 80066a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	4997      	ldr	r1, [pc, #604]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	e018      	b.n	80066ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ba:	4b95      	ldr	r3, [pc, #596]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a94      	ldr	r2, [pc, #592]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fa fecb 	bl	8001460 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ce:	f7fa fec7 	bl	8001460 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e2ed      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066e0:	4b8b      	ldr	r3, [pc, #556]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80a9 	beq.w	800684c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066fa:	4b85      	ldr	r3, [pc, #532]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006702:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006704:	4b82      	ldr	r3, [pc, #520]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b08      	cmp	r3, #8
 800670e:	d007      	beq.n	8006720 <HAL_RCC_OscConfig+0x308>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b18      	cmp	r3, #24
 8006714:	d13a      	bne.n	800678c <HAL_RCC_OscConfig+0x374>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	2b01      	cmp	r3, #1
 800671e:	d135      	bne.n	800678c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006720:	4b7b      	ldr	r3, [pc, #492]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCC_OscConfig+0x320>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b80      	cmp	r3, #128	@ 0x80
 8006732:	d001      	beq.n	8006738 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e2c1      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006738:	f7fa fec2 	bl	80014c0 <HAL_GetREVID>
 800673c:	4603      	mov	r3, r0
 800673e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006742:	4293      	cmp	r3, r2
 8006744:	d817      	bhi.n	8006776 <HAL_RCC_OscConfig+0x35e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	2b20      	cmp	r3, #32
 800674c:	d108      	bne.n	8006760 <HAL_RCC_OscConfig+0x348>
 800674e:	4b70      	ldr	r3, [pc, #448]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006756:	4a6e      	ldr	r2, [pc, #440]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800675e:	e075      	b.n	800684c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006760:	4b6b      	ldr	r3, [pc, #428]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	069b      	lsls	r3, r3, #26
 800676e:	4968      	ldr	r1, [pc, #416]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006774:	e06a      	b.n	800684c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006776:	4b66      	ldr	r3, [pc, #408]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	061b      	lsls	r3, r3, #24
 8006784:	4962      	ldr	r1, [pc, #392]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006786:	4313      	orrs	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800678a:	e05f      	b.n	800684c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d042      	beq.n	800681a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006794:	4b5e      	ldr	r3, [pc, #376]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a5d      	ldr	r2, [pc, #372]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fa fe5e 	bl	8001460 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067a8:	f7fa fe5a 	bl	8001460 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e280      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ba:	4b55      	ldr	r3, [pc, #340]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067c6:	f7fa fe7b 	bl	80014c0 <HAL_GetREVID>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d817      	bhi.n	8006804 <HAL_RCC_OscConfig+0x3ec>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d108      	bne.n	80067ee <HAL_RCC_OscConfig+0x3d6>
 80067dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80067e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	6053      	str	r3, [r2, #4]
 80067ec:	e02e      	b.n	800684c <HAL_RCC_OscConfig+0x434>
 80067ee:	4b48      	ldr	r3, [pc, #288]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	069b      	lsls	r3, r3, #26
 80067fc:	4944      	ldr	r1, [pc, #272]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	604b      	str	r3, [r1, #4]
 8006802:	e023      	b.n	800684c <HAL_RCC_OscConfig+0x434>
 8006804:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	493f      	ldr	r1, [pc, #252]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	60cb      	str	r3, [r1, #12]
 8006818:	e018      	b.n	800684c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800681a:	4b3d      	ldr	r3, [pc, #244]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a3c      	ldr	r2, [pc, #240]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006826:	f7fa fe1b 	bl	8001460 <HAL_GetTick>
 800682a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800682e:	f7fa fe17 	bl	8001460 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e23d      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006840:	4b33      	ldr	r3, [pc, #204]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f0      	bne.n	800682e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d036      	beq.n	80068c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d019      	beq.n	8006894 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006860:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006864:	4a2a      	ldr	r2, [pc, #168]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fa fdf8 	bl	8001460 <HAL_GetTick>
 8006870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006874:	f7fa fdf4 	bl	8001460 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e21a      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006886:	4b22      	ldr	r3, [pc, #136]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x45c>
 8006892:	e018      	b.n	80068c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006894:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006898:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fa fdde 	bl	8001460 <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a8:	f7fa fdda 	bl	8001460 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e200      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068ba:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80068bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d039      	beq.n	8006946 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01c      	beq.n	8006914 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068da:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a0c      	ldr	r2, [pc, #48]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 80068e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068e6:	f7fa fdbb 	bl	8001460 <HAL_GetTick>
 80068ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ee:	f7fa fdb7 	bl	8001460 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e1dd      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006900:	4b03      	ldr	r3, [pc, #12]	@ (8006910 <HAL_RCC_OscConfig+0x4f8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f0      	beq.n	80068ee <HAL_RCC_OscConfig+0x4d6>
 800690c:	e01b      	b.n	8006946 <HAL_RCC_OscConfig+0x52e>
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006914:	4b9b      	ldr	r3, [pc, #620]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a9a      	ldr	r2, [pc, #616]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 800691a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800691e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006920:	f7fa fd9e 	bl	8001460 <HAL_GetTick>
 8006924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006928:	f7fa fd9a 	bl	8001460 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e1c0      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800693a:	4b92      	ldr	r3, [pc, #584]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8081 	beq.w	8006a56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006954:	4b8c      	ldr	r3, [pc, #560]	@ (8006b88 <HAL_RCC_OscConfig+0x770>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a8b      	ldr	r2, [pc, #556]	@ (8006b88 <HAL_RCC_OscConfig+0x770>)
 800695a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800695e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006960:	f7fa fd7e 	bl	8001460 <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006968:	f7fa fd7a 	bl	8001460 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	@ 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e1a0      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800697a:	4b83      	ldr	r3, [pc, #524]	@ (8006b88 <HAL_RCC_OscConfig+0x770>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d106      	bne.n	800699c <HAL_RCC_OscConfig+0x584>
 800698e:	4b7d      	ldr	r3, [pc, #500]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	4a7c      	ldr	r2, [pc, #496]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	6713      	str	r3, [r2, #112]	@ 0x70
 800699a:	e02d      	b.n	80069f8 <HAL_RCC_OscConfig+0x5e0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10c      	bne.n	80069be <HAL_RCC_OscConfig+0x5a6>
 80069a4:	4b77      	ldr	r3, [pc, #476]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a8:	4a76      	ldr	r2, [pc, #472]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b0:	4b74      	ldr	r3, [pc, #464]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b4:	4a73      	ldr	r2, [pc, #460]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069b6:	f023 0304 	bic.w	r3, r3, #4
 80069ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80069bc:	e01c      	b.n	80069f8 <HAL_RCC_OscConfig+0x5e0>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d10c      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c8>
 80069c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a6e      	ldr	r2, [pc, #440]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069cc:	f043 0304 	orr.w	r3, r3, #4
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80069de:	e00b      	b.n	80069f8 <HAL_RCC_OscConfig+0x5e0>
 80069e0:	4b68      	ldr	r3, [pc, #416]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e4:	4a67      	ldr	r2, [pc, #412]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ec:	4b65      	ldr	r3, [pc, #404]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f0:	4a64      	ldr	r2, [pc, #400]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 80069f2:	f023 0304 	bic.w	r3, r3, #4
 80069f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fa fd2e 	bl	8001460 <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fa fd2a 	bl	8001460 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e14e      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a1e:	4b59      	ldr	r3, [pc, #356]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0ee      	beq.n	8006a08 <HAL_RCC_OscConfig+0x5f0>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fa fd18 	bl	8001460 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fa fd14 	bl	8001460 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e138      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ee      	bne.n	8006a34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 812d 	beq.w	8006cba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a60:	4b48      	ldr	r3, [pc, #288]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a68:	2b18      	cmp	r3, #24
 8006a6a:	f000 80bd 	beq.w	8006be8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	f040 809e 	bne.w	8006bb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a78:	4b42      	ldr	r3, [pc, #264]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a41      	ldr	r2, [pc, #260]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fa fcec 	bl	8001460 <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8c:	f7fa fce8 	bl	8001460 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e10e      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a9e:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aaa:	4b36      	ldr	r3, [pc, #216]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aae:	4b37      	ldr	r3, [pc, #220]	@ (8006b8c <HAL_RCC_OscConfig+0x774>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006aba:	0112      	lsls	r2, r2, #4
 8006abc:	430a      	orrs	r2, r1
 8006abe:	4931      	ldr	r1, [pc, #196]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	025b      	lsls	r3, r3, #9
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aec:	3b01      	subs	r3, #1
 8006aee:	061b      	lsls	r3, r3, #24
 8006af0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006af4:	4923      	ldr	r1, [pc, #140]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006afa:	4b22      	ldr	r3, [pc, #136]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	4a21      	ldr	r2, [pc, #132]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b06:	4b1f      	ldr	r3, [pc, #124]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b0a:	4b21      	ldr	r3, [pc, #132]	@ (8006b90 <HAL_RCC_OscConfig+0x778>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b12:	00d2      	lsls	r2, r2, #3
 8006b14:	491b      	ldr	r1, [pc, #108]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	f023 020c 	bic.w	r2, r3, #12
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	4917      	ldr	r1, [pc, #92]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b2c:	4b15      	ldr	r3, [pc, #84]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	f023 0202 	bic.w	r2, r3, #2
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b38:	4912      	ldr	r1, [pc, #72]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b3e:	4b11      	ldr	r3, [pc, #68]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	4a10      	ldr	r2, [pc, #64]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b56:	4b0b      	ldr	r3, [pc, #44]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b62:	4b08      	ldr	r3, [pc, #32]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	4a07      	ldr	r2, [pc, #28]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b6e:	4b05      	ldr	r3, [pc, #20]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a04      	ldr	r2, [pc, #16]	@ (8006b84 <HAL_RCC_OscConfig+0x76c>)
 8006b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7a:	f7fa fc71 	bl	8001460 <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b80:	e011      	b.n	8006ba6 <HAL_RCC_OscConfig+0x78e>
 8006b82:	bf00      	nop
 8006b84:	58024400 	.word	0x58024400
 8006b88:	58024800 	.word	0x58024800
 8006b8c:	fffffc0c 	.word	0xfffffc0c
 8006b90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fa fc64 	bl	8001460 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e08a      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ba6:	4b47      	ldr	r3, [pc, #284]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x77c>
 8006bb2:	e082      	b.n	8006cba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb4:	4b43      	ldr	r3, [pc, #268]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a42      	ldr	r2, [pc, #264]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fa fc4e 	bl	8001460 <HAL_GetTick>
 8006bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fa fc4a 	bl	8001460 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e070      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bda:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x7b0>
 8006be6:	e068      	b.n	8006cba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006be8:	4b36      	ldr	r3, [pc, #216]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bee:	4b35      	ldr	r3, [pc, #212]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d031      	beq.n	8006c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f003 0203 	and.w	r2, r3, #3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d12a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d122      	bne.n	8006c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d11a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	0a5b      	lsrs	r3, r3, #9
 8006c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d111      	bne.n	8006c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0c1b      	lsrs	r3, r3, #16
 8006c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02b      	b.n	8006cbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c64:	4b17      	ldr	r3, [pc, #92]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c68:	08db      	lsrs	r3, r3, #3
 8006c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d01f      	beq.n	8006cba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c7a:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c86:	f7fa fbeb 	bl	8001460 <HAL_GetTick>
 8006c8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c8c:	bf00      	nop
 8006c8e:	f7fa fbe7 	bl	8001460 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d0f9      	beq.n	8006c8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc8 <HAL_RCC_OscConfig+0x8b0>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ca6:	00d2      	lsls	r2, r2, #3
 8006ca8:	4906      	ldr	r1, [pc, #24]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <HAL_RCC_OscConfig+0x8ac>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3730      	adds	r7, #48	@ 0x30
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	ffff0007 	.word	0xffff0007

08006ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e19c      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d910      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b87      	ldr	r3, [pc, #540]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f023 020f 	bic.w	r2, r3, #15
 8006cf6:	4985      	ldr	r1, [pc, #532]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b83      	ldr	r3, [pc, #524]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e184      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d010      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	4b7b      	ldr	r3, [pc, #492]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d908      	bls.n	8006d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d2c:	4b78      	ldr	r3, [pc, #480]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	4975      	ldr	r1, [pc, #468]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d010      	beq.n	8006d6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	4b70      	ldr	r3, [pc, #448]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d908      	bls.n	8006d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	496a      	ldr	r1, [pc, #424]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	4b64      	ldr	r3, [pc, #400]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d908      	bls.n	8006d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d88:	4b61      	ldr	r3, [pc, #388]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	495e      	ldr	r1, [pc, #376]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d010      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69da      	ldr	r2, [r3, #28]
 8006daa:	4b59      	ldr	r3, [pc, #356]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d908      	bls.n	8006dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006db6:	4b56      	ldr	r3, [pc, #344]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4953      	ldr	r1, [pc, #332]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d010      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d908      	bls.n	8006df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de4:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f023 020f 	bic.w	r2, r3, #15
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4947      	ldr	r1, [pc, #284]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d055      	beq.n	8006eae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e02:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4940      	ldr	r1, [pc, #256]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d121      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0f6      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d107      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e34:	4b36      	ldr	r3, [pc, #216]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d115      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e0ea      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e4c:	4b30      	ldr	r3, [pc, #192]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0de      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e0d6      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f023 0207 	bic.w	r2, r3, #7
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4925      	ldr	r1, [pc, #148]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7e:	f7fa faef 	bl	8001460 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e84:	e00a      	b.n	8006e9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e86:	f7fa faeb 	bl	8001460 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0be      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d1eb      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d010      	beq.n	8006edc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	4b14      	ldr	r3, [pc, #80]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d208      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eca:	4b11      	ldr	r3, [pc, #68]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f023 020f 	bic.w	r2, r3, #15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	490e      	ldr	r1, [pc, #56]	@ (8006f10 <HAL_RCC_ClockConfig+0x244>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d214      	bcs.n	8006f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b08      	ldr	r3, [pc, #32]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 020f 	bic.w	r2, r3, #15
 8006ef2:	4906      	ldr	r1, [pc, #24]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b04      	ldr	r3, [pc, #16]	@ (8006f0c <HAL_RCC_ClockConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d005      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e086      	b.n	800701a <HAL_RCC_ClockConfig+0x34e>
 8006f0c:	52002000 	.word	0x52002000
 8006f10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d010      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	4b3f      	ldr	r3, [pc, #252]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d208      	bcs.n	8006f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f30:	4b3c      	ldr	r3, [pc, #240]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	4939      	ldr	r1, [pc, #228]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	4b34      	ldr	r3, [pc, #208]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d208      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f5e:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	492e      	ldr	r1, [pc, #184]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d208      	bcs.n	8006f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4922      	ldr	r1, [pc, #136]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	4b1d      	ldr	r3, [pc, #116]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d208      	bcs.n	8006fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fba:	4b1a      	ldr	r3, [pc, #104]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	4917      	ldr	r1, [pc, #92]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fcc:	f000 f834 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	4912      	ldr	r1, [pc, #72]	@ (8007028 <HAL_RCC_ClockConfig+0x35c>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <HAL_RCC_ClockConfig+0x358>)
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8007028 <HAL_RCC_ClockConfig+0x35c>)
 8006ff4:	5cd3      	ldrb	r3, [r2, r3]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8007000:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <HAL_RCC_ClockConfig+0x360>)
 8007002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007004:	4a0a      	ldr	r2, [pc, #40]	@ (8007030 <HAL_RCC_ClockConfig+0x364>)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_ClockConfig+0x368>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa f9dc 	bl	80013cc <HAL_InitTick>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	0800b618 	.word	0x0800b618
 800702c:	24000004 	.word	0x24000004
 8007030:	24000000 	.word	0x24000000
 8007034:	24000008 	.word	0x24000008

08007038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	@ 0x24
 800703c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800703e:	4bb3      	ldr	r3, [pc, #716]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007046:	2b18      	cmp	r3, #24
 8007048:	f200 8155 	bhi.w	80072f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800704c:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <HAL_RCC_GetSysClockFreq+0x1c>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	080070b9 	.word	0x080070b9
 8007058:	080072f7 	.word	0x080072f7
 800705c:	080072f7 	.word	0x080072f7
 8007060:	080072f7 	.word	0x080072f7
 8007064:	080072f7 	.word	0x080072f7
 8007068:	080072f7 	.word	0x080072f7
 800706c:	080072f7 	.word	0x080072f7
 8007070:	080072f7 	.word	0x080072f7
 8007074:	080070df 	.word	0x080070df
 8007078:	080072f7 	.word	0x080072f7
 800707c:	080072f7 	.word	0x080072f7
 8007080:	080072f7 	.word	0x080072f7
 8007084:	080072f7 	.word	0x080072f7
 8007088:	080072f7 	.word	0x080072f7
 800708c:	080072f7 	.word	0x080072f7
 8007090:	080072f7 	.word	0x080072f7
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080072f7 	.word	0x080072f7
 800709c:	080072f7 	.word	0x080072f7
 80070a0:	080072f7 	.word	0x080072f7
 80070a4:	080072f7 	.word	0x080072f7
 80070a8:	080072f7 	.word	0x080072f7
 80070ac:	080072f7 	.word	0x080072f7
 80070b0:	080072f7 	.word	0x080072f7
 80070b4:	080070eb 	.word	0x080070eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b8:	4b94      	ldr	r3, [pc, #592]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c4:	4b91      	ldr	r3, [pc, #580]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a90      	ldr	r2, [pc, #576]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80070d6:	e111      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070d8:	4b8d      	ldr	r3, [pc, #564]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070da:	61bb      	str	r3, [r7, #24]
      break;
 80070dc:	e10e      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80070de:	4b8d      	ldr	r3, [pc, #564]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070e0:	61bb      	str	r3, [r7, #24]
      break;
 80070e2:	e10b      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070e6:	61bb      	str	r3, [r7, #24]
      break;
 80070e8:	e108      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070ea:	4b88      	ldr	r3, [pc, #544]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070f4:	4b85      	ldr	r3, [pc, #532]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007100:	4b82      	ldr	r3, [pc, #520]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800710a:	4b80      	ldr	r3, [pc, #512]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710e:	08db      	lsrs	r3, r3, #3
 8007110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80e1 	beq.w	80072f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f000 8083 	beq.w	800723c <HAL_RCC_GetSysClockFreq+0x204>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b02      	cmp	r3, #2
 800713a:	f200 80a1 	bhi.w	8007280 <HAL_RCC_GetSysClockFreq+0x248>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x114>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d056      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800714a:	e099      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714c:	4b6f      	ldr	r3, [pc, #444]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02d      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007158:	4b6c      	ldr	r3, [pc, #432]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	4a6b      	ldr	r2, [pc, #428]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b62      	ldr	r3, [pc, #392]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a02 	vldr	s12, [r7, #8]
 8007196:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071b2:	e087      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007320 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b51      	ldr	r3, [pc, #324]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071f6:	e065      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b40      	ldr	r3, [pc, #256]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a02 	vldr	s12, [r7, #8]
 800721e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800723a:	e043      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007328 <HAL_RCC_GetSysClockFreq+0x2f0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b2f      	ldr	r3, [pc, #188]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800727e:	e021      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007324 <HAL_RCC_GetSysClockFreq+0x2ec>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800731c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072c4:	4b11      	ldr	r3, [pc, #68]	@ (800730c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c8:	0a5b      	lsrs	r3, r3, #9
 80072ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ce:	3301      	adds	r3, #1
 80072d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e8:	ee17 3a90 	vmov	r3, s15
 80072ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072ee:	e005      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
      break;
 80072f4:	e002      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072f6:	4b07      	ldr	r3, [pc, #28]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072f8:	61bb      	str	r3, [r7, #24]
      break;
 80072fa:	bf00      	nop
  }

  return sysclockfreq;
 80072fc:	69bb      	ldr	r3, [r7, #24]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3724      	adds	r7, #36	@ 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	03d09000 	.word	0x03d09000
 8007314:	003d0900 	.word	0x003d0900
 8007318:	007a1200 	.word	0x007a1200
 800731c:	46000000 	.word	0x46000000
 8007320:	4c742400 	.word	0x4c742400
 8007324:	4a742400 	.word	0x4a742400
 8007328:	4af42400 	.word	0x4af42400

0800732c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007332:	f7ff fe81 	bl	8007038 <HAL_RCC_GetSysClockFreq>
 8007336:	4602      	mov	r2, r0
 8007338:	4b10      	ldr	r3, [pc, #64]	@ (800737c <HAL_RCC_GetHCLKFreq+0x50>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	490f      	ldr	r1, [pc, #60]	@ (8007380 <HAL_RCC_GetHCLKFreq+0x54>)
 8007344:	5ccb      	ldrb	r3, [r1, r3]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007350:	4b0a      	ldr	r3, [pc, #40]	@ (800737c <HAL_RCC_GetHCLKFreq+0x50>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <HAL_RCC_GetHCLKFreq+0x54>)
 800735a:	5cd3      	ldrb	r3, [r2, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	fa22 f303 	lsr.w	r3, r2, r3
 8007366:	4a07      	ldr	r2, [pc, #28]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x58>)
 8007368:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800736a:	4a07      	ldr	r2, [pc, #28]	@ (8007388 <HAL_RCC_GetHCLKFreq+0x5c>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x58>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	58024400 	.word	0x58024400
 8007380:	0800b618 	.word	0x0800b618
 8007384:	24000004 	.word	0x24000004
 8007388:	24000000 	.word	0x24000000

0800738c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007390:	f7ff ffcc 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	091b      	lsrs	r3, r3, #4
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4904      	ldr	r1, [pc, #16]	@ (80073b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	0800b618 	.word	0x0800b618

080073b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073bc:	f7ff ffb6 	bl	800732c <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	0800b618 	.word	0x0800b618

080073e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b0ca      	sub	sp, #296	@ 0x128
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007408:	2500      	movs	r5, #0
 800740a:	ea54 0305 	orrs.w	r3, r4, r5
 800740e:	d049      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800741a:	d02f      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800741c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007420:	d828      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007426:	d01a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800742c:	d822      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007436:	d007      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007438:	e01c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743a:	4bb8      	ldr	r3, [pc, #736]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4ab7      	ldr	r2, [pc, #732]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007446:	e01a      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	3308      	adds	r3, #8
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fb61 	bl	8009b18 <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800745c:	e00f      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	3328      	adds	r3, #40	@ 0x28
 8007464:	2102      	movs	r1, #2
 8007466:	4618      	mov	r0, r3
 8007468:	f002 fc08 	bl	8009c7c <RCCEx_PLL3_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007472:	e004      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800747a:	e000      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800747c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10a      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007486:	4ba5      	ldr	r3, [pc, #660]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800748e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007494:	4aa1      	ldr	r2, [pc, #644]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007496:	430b      	orrs	r3, r1
 8007498:	6513      	str	r3, [r2, #80]	@ 0x50
 800749a:	e003      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	ea58 0309 	orrs.w	r3, r8, r9
 80074b8:	d047      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d82a      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80074c4:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	08007505 	.word	0x08007505
 80074d8:	08007523 	.word	0x08007523
 80074dc:	08007523 	.word	0x08007523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b8e      	ldr	r3, [pc, #568]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a8d      	ldr	r2, [pc, #564]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074ec:	e01a      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f2:	3308      	adds	r3, #8
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 fb0e 	bl	8009b18 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007502:	e00f      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007508:	3328      	adds	r3, #40	@ 0x28
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f002 fbb5 	bl	8009c7c <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800752c:	4b7b      	ldr	r3, [pc, #492]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800752e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007530:	f023 0107 	bic.w	r1, r3, #7
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753a:	4a78      	ldr	r2, [pc, #480]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800753c:	430b      	orrs	r3, r1
 800753e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007556:	f04f 0b00 	mov.w	fp, #0
 800755a:	ea5a 030b 	orrs.w	r3, sl, fp
 800755e:	d04c      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756a:	d030      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800756c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007570:	d829      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007572:	2bc0      	cmp	r3, #192	@ 0xc0
 8007574:	d02d      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007576:	2bc0      	cmp	r3, #192	@ 0xc0
 8007578:	d825      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800757a:	2b80      	cmp	r3, #128	@ 0x80
 800757c:	d018      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800757e:	2b80      	cmp	r3, #128	@ 0x80
 8007580:	d821      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007586:	2b40      	cmp	r3, #64	@ 0x40
 8007588:	d007      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800758a:	e01c      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758c:	4b63      	ldr	r3, [pc, #396]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	4a62      	ldr	r2, [pc, #392]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007598:	e01c      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759e:	3308      	adds	r3, #8
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f002 fab8 	bl	8009b18 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80075ae:	e011      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b4:	3328      	adds	r3, #40	@ 0x28
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f002 fb5f 	bl	8009c7c <RCCEx_PLL3_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80075c4:	e006      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075cc:	e002      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80075d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80075dc:	4b4f      	ldr	r3, [pc, #316]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075ea:	4a4c      	ldr	r2, [pc, #304]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80075f0:	e003      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007606:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800760a:	2300      	movs	r3, #0
 800760c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007610:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007614:	460b      	mov	r3, r1
 8007616:	4313      	orrs	r3, r2
 8007618:	d053      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007622:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007626:	d035      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007628:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800762c:	d82e      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800762e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007632:	d031      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007634:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007638:	d828      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800763a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800763e:	d01a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007644:	d822      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764e:	d007      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007650:	e01c      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007652:	4b32      	ldr	r3, [pc, #200]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	4a31      	ldr	r2, [pc, #196]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800765c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800765e:	e01c      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007664:	3308      	adds	r3, #8
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f002 fa55 	bl	8009b18 <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007674:	e011      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	3328      	adds	r3, #40	@ 0x28
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f002 fafc 	bl	8009c7c <RCCEx_PLL3_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800768a:	e006      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007692:	e002      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076a2:	4b1e      	ldr	r3, [pc, #120]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80076b2:	4a1a      	ldr	r2, [pc, #104]	@ (800771c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80076ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80076d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d056      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076ee:	d038      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80076f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076f4:	d831      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80076fa:	d034      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80076fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007700:	d82b      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007706:	d01d      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800770c:	d825      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d006      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007718:	e01f      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007720:	4ba2      	ldr	r3, [pc, #648]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	4aa1      	ldr	r2, [pc, #644]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800772a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800772c:	e01c      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800772e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007732:	3308      	adds	r3, #8
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f002 f9ee 	bl	8009b18 <RCCEx_PLL2_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007742:	e011      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007748:	3328      	adds	r3, #40	@ 0x28
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f002 fa95 	bl	8009c7c <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007758:	e006      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007760:	e002      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10b      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007770:	4b8e      	ldr	r3, [pc, #568]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007774:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007780:	4a8a      	ldr	r2, [pc, #552]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007782:	430b      	orrs	r3, r1
 8007784:	6593      	str	r3, [r2, #88]	@ 0x58
 8007786:	e003      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800778c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800779c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80077aa:	460b      	mov	r3, r1
 80077ac:	4313      	orrs	r3, r2
 80077ae:	d03a      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b6:	2b30      	cmp	r3, #48	@ 0x30
 80077b8:	d01f      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80077ba:	2b30      	cmp	r3, #48	@ 0x30
 80077bc:	d819      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d00c      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d815      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d019      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d111      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ce:	4b77      	ldr	r3, [pc, #476]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d2:	4a76      	ldr	r2, [pc, #472]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077da:	e011      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e0:	3308      	adds	r3, #8
 80077e2:	2102      	movs	r1, #2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f002 f997 	bl	8009b18 <RCCEx_PLL2_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80077f0:	e006      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077f8:	e002      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077fa:	bf00      	nop
 80077fc:	e000      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80077fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007808:	4b68      	ldr	r3, [pc, #416]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800780a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	4a65      	ldr	r2, [pc, #404]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007818:	430b      	orrs	r3, r1
 800781a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800781c:	e003      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800783c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d051      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800784c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007850:	d035      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007856:	d82e      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800785c:	d031      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800785e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007862:	d828      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007868:	d01a      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800786a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800786e:	d822      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007878:	d007      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800787a:	e01c      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800787c:	4b4b      	ldr	r3, [pc, #300]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	4a4a      	ldr	r2, [pc, #296]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007888:	e01c      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788e:	3308      	adds	r3, #8
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f002 f940 	bl	8009b18 <RCCEx_PLL2_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800789e:	e011      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	3328      	adds	r3, #40	@ 0x28
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 f9e7 	bl	8009c7c <RCCEx_PLL3_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80078b4:	e006      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80078c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078cc:	4b37      	ldr	r3, [pc, #220]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078da:	4a34      	ldr	r2, [pc, #208]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6513      	str	r3, [r2, #80]	@ 0x50
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d056      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007914:	d033      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007916:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800791a:	d82c      	bhi.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800791c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007920:	d02f      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007926:	d826      	bhi.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800792c:	d02b      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800792e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007932:	d820      	bhi.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007938:	d012      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800793a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800793e:	d81a      	bhi.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d022      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007948:	d115      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794e:	3308      	adds	r3, #8
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f002 f8e0 	bl	8009b18 <RCCEx_PLL2_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800795e:	e015      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	3328      	adds	r3, #40	@ 0x28
 8007966:	2101      	movs	r1, #1
 8007968:	4618      	mov	r0, r3
 800796a:	f002 f987 	bl	8009c7c <RCCEx_PLL3_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007974:	e00a      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800797c:	e006      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800797e:	bf00      	nop
 8007980:	e004      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800798a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10d      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007994:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007998:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079a2:	4a02      	ldr	r2, [pc, #8]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80079aa:	bf00      	nop
 80079ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80079c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4313      	orrs	r3, r2
 80079d6:	d055      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079e4:	d033      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80079e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ea:	d82c      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f0:	d02f      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f6:	d826      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80079f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079fc:	d02b      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80079fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a02:	d820      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a08:	d012      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0e:	d81a      	bhi.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d022      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a18:	d115      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	3308      	adds	r3, #8
 8007a20:	2101      	movs	r1, #1
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 f878 	bl	8009b18 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a2e:	e015      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	3328      	adds	r3, #40	@ 0x28
 8007a36:	2101      	movs	r1, #1
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f91f 	bl	8009c7c <RCCEx_PLL3_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007a44:	e00a      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a4c:	e006      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a4e:	bf00      	nop
 8007a50:	e004      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a64:	4ba3      	ldr	r3, [pc, #652]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a74:	4a9f      	ldr	r2, [pc, #636]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a76:	430b      	orrs	r3, r1
 8007a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a7a:	e003      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a94:	2300      	movs	r3, #0
 8007a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d037      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aae:	d00e      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab4:	d816      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d018      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007abe:	d111      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007acc:	e00f      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f002 f81e 	bl	8009b18 <RCCEx_PLL2_Config>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ae2:	e004      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007af6:	4b7f      	ldr	r3, [pc, #508]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b04:	4a7b      	ldr	r2, [pc, #492]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b0a:	e003      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4313      	orrs	r3, r2
 8007b32:	d039      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d81c      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b81 	.word	0x08007b81
 8007b48:	08007b55 	.word	0x08007b55
 8007b4c:	08007b63 	.word	0x08007b63
 8007b50:	08007b81 	.word	0x08007b81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b54:	4b67      	ldr	r3, [pc, #412]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b58:	4a66      	ldr	r2, [pc, #408]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b60:	e00f      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b66:	3308      	adds	r3, #8
 8007b68:	2102      	movs	r1, #2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 ffd4 	bl	8009b18 <RCCEx_PLL2_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007b76:	e004      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8e:	f023 0103 	bic.w	r1, r3, #3
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b98:	4a56      	ldr	r2, [pc, #344]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b9e:	e003      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f000 809f 	beq.w	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bca:	4b4b      	ldr	r3, [pc, #300]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a4a      	ldr	r2, [pc, #296]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bd6:	f7f9 fc43 	bl	8001460 <HAL_GetTick>
 8007bda:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bde:	e00b      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be0:	f7f9 fc3e 	bl	8001460 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b64      	cmp	r3, #100	@ 0x64
 8007bee:	d903      	bls.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bf6:	e005      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0ed      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d179      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c0c:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c18:	4053      	eors	r3, r2
 8007c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d015      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c22:	4b34      	ldr	r3, [pc, #208]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c2e:	4b31      	ldr	r3, [pc, #196]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c32:	4a30      	ldr	r2, [pc, #192]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c46:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007c4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c5a:	d118      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7f9 fc00 	bl	8001460 <HAL_GetTick>
 8007c60:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c64:	e00d      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c66:	f7f9 fbfb 	bl	8001460 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d903      	bls.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007c80:	e005      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c82:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0eb      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d129      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ca8:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cb8:	091a      	lsrs	r2, r3, #4
 8007cba:	4b10      	ldr	r3, [pc, #64]	@ (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6113      	str	r3, [r2, #16]
 8007cc4:	e005      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ccc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007cd0:	6113      	str	r3, [r2, #16]
 8007cd2:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce2:	4a04      	ldr	r2, [pc, #16]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ce8:	e00e      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007cf2:	e009      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	58024800 	.word	0x58024800
 8007cfc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f002 0301 	and.w	r3, r2, #1
 8007d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f000 8089 	beq.w	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d30:	2b28      	cmp	r3, #40	@ 0x28
 8007d32:	d86b      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007e15 	.word	0x08007e15
 8007d40:	08007e0d 	.word	0x08007e0d
 8007d44:	08007e0d 	.word	0x08007e0d
 8007d48:	08007e0d 	.word	0x08007e0d
 8007d4c:	08007e0d 	.word	0x08007e0d
 8007d50:	08007e0d 	.word	0x08007e0d
 8007d54:	08007e0d 	.word	0x08007e0d
 8007d58:	08007e0d 	.word	0x08007e0d
 8007d5c:	08007de1 	.word	0x08007de1
 8007d60:	08007e0d 	.word	0x08007e0d
 8007d64:	08007e0d 	.word	0x08007e0d
 8007d68:	08007e0d 	.word	0x08007e0d
 8007d6c:	08007e0d 	.word	0x08007e0d
 8007d70:	08007e0d 	.word	0x08007e0d
 8007d74:	08007e0d 	.word	0x08007e0d
 8007d78:	08007e0d 	.word	0x08007e0d
 8007d7c:	08007df7 	.word	0x08007df7
 8007d80:	08007e0d 	.word	0x08007e0d
 8007d84:	08007e0d 	.word	0x08007e0d
 8007d88:	08007e0d 	.word	0x08007e0d
 8007d8c:	08007e0d 	.word	0x08007e0d
 8007d90:	08007e0d 	.word	0x08007e0d
 8007d94:	08007e0d 	.word	0x08007e0d
 8007d98:	08007e0d 	.word	0x08007e0d
 8007d9c:	08007e15 	.word	0x08007e15
 8007da0:	08007e0d 	.word	0x08007e0d
 8007da4:	08007e0d 	.word	0x08007e0d
 8007da8:	08007e0d 	.word	0x08007e0d
 8007dac:	08007e0d 	.word	0x08007e0d
 8007db0:	08007e0d 	.word	0x08007e0d
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007e0d 	.word	0x08007e0d
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e0d 	.word	0x08007e0d
 8007dc4:	08007e0d 	.word	0x08007e0d
 8007dc8:	08007e0d 	.word	0x08007e0d
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e0d 	.word	0x08007e0d
 8007dd4:	08007e0d 	.word	0x08007e0d
 8007dd8:	08007e0d 	.word	0x08007e0d
 8007ddc:	08007e15 	.word	0x08007e15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	3308      	adds	r3, #8
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 fe95 	bl	8009b18 <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007df4:	e00f      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 ff3c 	bl	8009c7c <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e1e:	4bbf      	ldr	r3, [pc, #764]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e2c:	4abb      	ldr	r2, [pc, #748]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f002 0302 	and.w	r3, r2, #2
 8007e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d041      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	d824      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007e66:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007e85 	.word	0x08007e85
 8007e74:	08007e9b 	.word	0x08007e9b
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	3308      	adds	r3, #8
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 fe43 	bl	8009b18 <RCCEx_PLL2_Config>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e98:	e00f      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	3328      	adds	r3, #40	@ 0x28
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f001 feea 	bl	8009c7c <RCCEx_PLL3_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007eae:	e004      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ec2:	4b96      	ldr	r3, [pc, #600]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec6:	f023 0107 	bic.w	r1, r3, #7
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ed0:	4a92      	ldr	r2, [pc, #584]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ed6:	e003      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f002 0304 	and.w	r3, r2, #4
 8007eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ef6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4313      	orrs	r3, r2
 8007efe:	d044      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d825      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f61 	.word	0x08007f61
 8007f18:	08007f2d 	.word	0x08007f2d
 8007f1c:	08007f43 	.word	0x08007f43
 8007f20:	08007f61 	.word	0x08007f61
 8007f24:	08007f61 	.word	0x08007f61
 8007f28:	08007f61 	.word	0x08007f61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	3308      	adds	r3, #8
 8007f32:	2101      	movs	r1, #1
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 fdef 	bl	8009b18 <RCCEx_PLL2_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f40:	e00f      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	3328      	adds	r3, #40	@ 0x28
 8007f48:	2101      	movs	r1, #1
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fe96 	bl	8009c7c <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007f56:	e004      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f5e:	e000      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f6a:	4b6c      	ldr	r3, [pc, #432]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6e:	f023 0107 	bic.w	r1, r3, #7
 8007f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f7a:	4a68      	ldr	r2, [pc, #416]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f80:	e003      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f002 0320 	and.w	r3, r2, #32
 8007f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d055      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fb6:	d033      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fbc:	d82c      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc2:	d02f      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc8:	d826      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fce:	d02b      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fd4:	d820      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fda:	d012      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe0:	d81a      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d022      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fea:	d115      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fd8f 	bl	8009b18 <RCCEx_PLL2_Config>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008000:	e015      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	3328      	adds	r3, #40	@ 0x28
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fe36 	bl	8009c7c <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008016:	e00a      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800801e:	e006      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008020:	bf00      	nop
 8008022:	e004      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008024:	bf00      	nop
 8008026:	e002      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008028:	bf00      	nop
 800802a:	e000      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800802c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008036:	4b39      	ldr	r3, [pc, #228]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800803a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008046:	4a35      	ldr	r2, [pc, #212]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008048:	430b      	orrs	r3, r1
 800804a:	6553      	str	r3, [r2, #84]	@ 0x54
 800804c:	e003      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008066:	2300      	movs	r3, #0
 8008068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800806c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008070:	460b      	mov	r3, r1
 8008072:	4313      	orrs	r3, r2
 8008074:	d058      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800807e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008082:	d033      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008084:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008088:	d82c      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808e:	d02f      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008094:	d826      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800809a:	d02b      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800809c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080a0:	d820      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80080a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a6:	d012      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80080a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ac:	d81a      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d022      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b6:	d115      	bne.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	3308      	adds	r3, #8
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fd29 	bl	8009b18 <RCCEx_PLL2_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080cc:	e015      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	3328      	adds	r3, #40	@ 0x28
 80080d4:	2102      	movs	r1, #2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fdd0 	bl	8009c7c <RCCEx_PLL3_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80080e2:	e00a      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ea:	e006      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080ec:	bf00      	nop
 80080ee:	e004      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080f0:	bf00      	nop
 80080f2:	e002      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80080f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10e      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008102:	4b06      	ldr	r3, [pc, #24]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008106:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008112:	4a02      	ldr	r2, [pc, #8]	@ (800811c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6593      	str	r3, [r2, #88]	@ 0x58
 8008118:	e006      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800811a:	bf00      	nop
 800811c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008138:	2300      	movs	r3, #0
 800813a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800813e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008142:	460b      	mov	r3, r1
 8008144:	4313      	orrs	r3, r2
 8008146:	d055      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008150:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008154:	d033      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008156:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800815a:	d82c      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800815c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008160:	d02f      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008166:	d826      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008168:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800816c:	d02b      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800816e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008172:	d820      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008178:	d012      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800817a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800817e:	d81a      	bhi.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d022      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008188:	d115      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818e:	3308      	adds	r3, #8
 8008190:	2100      	movs	r1, #0
 8008192:	4618      	mov	r0, r3
 8008194:	f001 fcc0 	bl	8009b18 <RCCEx_PLL2_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800819e:	e015      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	3328      	adds	r3, #40	@ 0x28
 80081a6:	2102      	movs	r1, #2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 fd67 	bl	8009c7c <RCCEx_PLL3_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80081b4:	e00a      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081bc:	e006      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081be:	bf00      	nop
 80081c0:	e004      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081c2:	bf00      	nop
 80081c4:	e002      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081c6:	bf00      	nop
 80081c8:	e000      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80081ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081d4:	4ba1      	ldr	r3, [pc, #644]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081e4:	4a9d      	ldr	r2, [pc, #628]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f002 0308 	and.w	r3, r2, #8
 8008200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800820a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800820e:	460b      	mov	r3, r1
 8008210:	4313      	orrs	r3, r2
 8008212:	d01e      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008220:	d10c      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008226:	3328      	adds	r3, #40	@ 0x28
 8008228:	2102      	movs	r1, #2
 800822a:	4618      	mov	r0, r3
 800822c:	f001 fd26 	bl	8009c7c <RCCEx_PLL3_Config>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800823c:	4b87      	ldr	r3, [pc, #540]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800823e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008240:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800824c:	4a83      	ldr	r2, [pc, #524]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800824e:	430b      	orrs	r3, r1
 8008250:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f002 0310 	and.w	r3, r2, #16
 800825e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008268:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	d01e      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800827a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800827e:	d10c      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008284:	3328      	adds	r3, #40	@ 0x28
 8008286:	2102      	movs	r1, #2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fcf7 	bl	8009c7c <RCCEx_PLL3_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800829a:	4b70      	ldr	r3, [pc, #448]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800829c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082aa:	4a6c      	ldr	r2, [pc, #432]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80082bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80082ca:	460b      	mov	r3, r1
 80082cc:	4313      	orrs	r3, r2
 80082ce:	d03e      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80082d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082dc:	d022      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80082de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082e2:	d81b      	bhi.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ec:	d00b      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80082ee:	e015      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f4:	3308      	adds	r3, #8
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fc0d 	bl	8009b18 <RCCEx_PLL2_Config>
 80082fe:	4603      	mov	r3, r0
 8008300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008304:	e00f      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830a:	3328      	adds	r3, #40	@ 0x28
 800830c:	2102      	movs	r1, #2
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fcb4 	bl	8009c7c <RCCEx_PLL3_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800831a:	e004      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008322:	e000      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800832e:	4b4b      	ldr	r3, [pc, #300]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008332:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800833e:	4a47      	ldr	r2, [pc, #284]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008340:	430b      	orrs	r3, r1
 8008342:	6593      	str	r3, [r2, #88]	@ 0x58
 8008344:	e003      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800835a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800835c:	2300      	movs	r3, #0
 800835e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008364:	460b      	mov	r3, r1
 8008366:	4313      	orrs	r3, r2
 8008368:	d03b      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008376:	d01f      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800837c:	d818      	bhi.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800837e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008388:	d007      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800838a:	e011      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b33      	ldr	r3, [pc, #204]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	4a32      	ldr	r2, [pc, #200]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008398:	e00f      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800839a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839e:	3328      	adds	r3, #40	@ 0x28
 80083a0:	2101      	movs	r1, #1
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fc6a 	bl	8009c7c <RCCEx_PLL3_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80083ae:	e004      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80083b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083c2:	4b26      	ldr	r3, [pc, #152]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80083ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d2:	4a22      	ldr	r2, [pc, #136]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80083ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80083f0:	2300      	movs	r3, #0
 80083f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80083f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083f8:	460b      	mov	r3, r1
 80083fa:	4313      	orrs	r3, r2
 80083fc:	d034      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840c:	d007      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800840e:	e011      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008410:	4b12      	ldr	r3, [pc, #72]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	4a11      	ldr	r2, [pc, #68]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800841c:	e00e      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	3308      	adds	r3, #8
 8008424:	2102      	movs	r1, #2
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fb76 	bl	8009b18 <RCCEx_PLL2_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008432:	e003      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800843a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800843c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10d      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008444:	4b05      	ldr	r3, [pc, #20]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008448:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008452:	4a02      	ldr	r2, [pc, #8]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008454:	430b      	orrs	r3, r1
 8008456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008458:	e006      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008476:	2300      	movs	r3, #0
 8008478:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800847a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800847e:	460b      	mov	r3, r1
 8008480:	4313      	orrs	r3, r2
 8008482:	d00c      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	3328      	adds	r3, #40	@ 0x28
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fbf5 	bl	8009c7c <RCCEx_PLL3_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80084aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ac:	2300      	movs	r3, #0
 80084ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80084b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80084b4:	460b      	mov	r3, r1
 80084b6:	4313      	orrs	r3, r2
 80084b8:	d038      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084c6:	d018      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80084c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084cc:	d811      	bhi.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d2:	d014      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80084d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d8:	d80b      	bhi.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80084de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e2:	d106      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e4:	4bc3      	ldr	r3, [pc, #780]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	4ac2      	ldr	r2, [pc, #776]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80084f0:	e008      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084f8:	e004      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084fa:	bf00      	nop
 80084fc:	e002      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80084fe:	bf00      	nop
 8008500:	e000      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10b      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800850c:	4bb9      	ldr	r3, [pc, #740]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800850e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008510:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800851c:	4ab5      	ldr	r2, [pc, #724]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800851e:	430b      	orrs	r3, r1
 8008520:	6553      	str	r3, [r2, #84]	@ 0x54
 8008522:	e003      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800853a:	2300      	movs	r3, #0
 800853c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800853e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	d009      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008548:	4baa      	ldr	r3, [pc, #680]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800854a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008556:	4aa7      	ldr	r2, [pc, #668]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008558:	430b      	orrs	r3, r1
 800855a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008568:	653b      	str	r3, [r7, #80]	@ 0x50
 800856a:	2300      	movs	r3, #0
 800856c:	657b      	str	r3, [r7, #84]	@ 0x54
 800856e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d00a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008578:	4b9e      	ldr	r3, [pc, #632]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008588:	4a9a      	ldr	r2, [pc, #616]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800858a:	430b      	orrs	r3, r1
 800858c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800859a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859c:	2300      	movs	r3, #0
 800859e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80085a4:	460b      	mov	r3, r1
 80085a6:	4313      	orrs	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085aa:	4b92      	ldr	r3, [pc, #584]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b8:	4a8e      	ldr	r2, [pc, #568]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80085ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80085cc:	2300      	movs	r3, #0
 80085ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085d4:	460b      	mov	r3, r1
 80085d6:	4313      	orrs	r3, r2
 80085d8:	d00e      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085da:	4b86      	ldr	r3, [pc, #536]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	4a85      	ldr	r2, [pc, #532]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085e4:	6113      	str	r3, [r2, #16]
 80085e6:	4b83      	ldr	r3, [pc, #524]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085e8:	6919      	ldr	r1, [r3, #16]
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085f2:	4a80      	ldr	r2, [pc, #512]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085f4:	430b      	orrs	r3, r1
 80085f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800860a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800860e:	460b      	mov	r3, r1
 8008610:	4313      	orrs	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008614:	4b77      	ldr	r3, [pc, #476]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008618:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008622:	4a74      	ldr	r2, [pc, #464]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008624:	430b      	orrs	r3, r1
 8008626:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008634:	633b      	str	r3, [r7, #48]	@ 0x30
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
 800863a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008644:	4b6b      	ldr	r3, [pc, #428]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008648:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008654:	4a67      	ldr	r2, [pc, #412]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008656:	430b      	orrs	r3, r1
 8008658:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	2100      	movs	r1, #0
 8008664:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800866c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008670:	460b      	mov	r3, r1
 8008672:	4313      	orrs	r3, r2
 8008674:	d011      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867a:	3308      	adds	r3, #8
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fa4a 	bl	8009b18 <RCCEx_PLL2_Config>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	2100      	movs	r1, #0
 80086a4:	6239      	str	r1, [r7, #32]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80086b0:	460b      	mov	r3, r1
 80086b2:	4313      	orrs	r3, r2
 80086b4:	d011      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ba:	3308      	adds	r3, #8
 80086bc:	2101      	movs	r1, #1
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fa2a 	bl	8009b18 <RCCEx_PLL2_Config>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	2100      	movs	r1, #0
 80086e4:	61b9      	str	r1, [r7, #24]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	61fb      	str	r3, [r7, #28]
 80086ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086f0:	460b      	mov	r3, r1
 80086f2:	4313      	orrs	r3, r2
 80086f4:	d011      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	3308      	adds	r3, #8
 80086fc:	2102      	movs	r1, #2
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fa0a 	bl	8009b18 <RCCEx_PLL2_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800870a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800871a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	2100      	movs	r1, #0
 8008724:	6139      	str	r1, [r7, #16]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008730:	460b      	mov	r3, r1
 8008732:	4313      	orrs	r3, r2
 8008734:	d011      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873a:	3328      	adds	r3, #40	@ 0x28
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fa9c 	bl	8009c7c <RCCEx_PLL3_Config>
 8008744:	4603      	mov	r3, r0
 8008746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800874a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800875a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	2100      	movs	r1, #0
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d011      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877a:	3328      	adds	r3, #40	@ 0x28
 800877c:	2101      	movs	r1, #1
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fa7c 	bl	8009c7c <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800878a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	2100      	movs	r1, #0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	607b      	str	r3, [r7, #4]
 80087ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80087b0:	460b      	mov	r3, r1
 80087b2:	4313      	orrs	r3, r2
 80087b4:	d011      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	3328      	adds	r3, #40	@ 0x28
 80087bc:	2102      	movs	r1, #2
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 fa5c 	bl	8009c7c <RCCEx_PLL3_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80087da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e000      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80087ee:	46bd      	mov	sp, r7
 80087f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f4:	58024400 	.word	0x58024400

080087f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b090      	sub	sp, #64	@ 0x40
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008806:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800880a:	430b      	orrs	r3, r1
 800880c:	f040 8094 	bne.w	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008810:	4b9e      	ldr	r3, [pc, #632]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	2b04      	cmp	r3, #4
 800881e:	f200 8087 	bhi.w	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008822:	a201      	add	r2, pc, #4	@ (adr r2, 8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	0800883d 	.word	0x0800883d
 800882c:	08008865 	.word	0x08008865
 8008830:	0800888d 	.word	0x0800888d
 8008834:	08008929 	.word	0x08008929
 8008838:	080088b5 	.word	0x080088b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800883c:	4b93      	ldr	r3, [pc, #588]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008848:	d108      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800884a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800884e:	4618      	mov	r0, r3
 8008850:	f001 f810 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008858:	f000 bd45 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008860:	f000 bd41 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008864:	4b89      	ldr	r3, [pc, #548]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008870:	d108      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008872:	f107 0318 	add.w	r3, r7, #24
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fd54 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008880:	f000 bd31 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	f000 bd2d 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800888c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008898:	d108      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fe94 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a8:	f000 bd1d 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b0:	f000 bd19 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088b4:	4b75      	ldr	r3, [pc, #468]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088be:	4b73      	ldr	r3, [pc, #460]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d10c      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80088ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d109      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088d0:	4b6e      	ldr	r3, [pc, #440]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	4a6d      	ldr	r2, [pc, #436]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e2:	e01f      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e4:	4b69      	ldr	r3, [pc, #420]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f0:	d106      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80088f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088f8:	d102      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088fa:	4b66      	ldr	r3, [pc, #408]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088fe:	e011      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008900:	4b62      	ldr	r3, [pc, #392]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800890c:	d106      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008914:	d102      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008916:	4b60      	ldr	r3, [pc, #384]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800891a:	e003      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008920:	f000 bce1 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008924:	f000 bcdf 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008928:	4b5c      	ldr	r3, [pc, #368]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892c:	f000 bcdb 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	f000 bcd7 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008940:	430b      	orrs	r3, r1
 8008942:	f040 80ad 	bne.w	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008946:	4b51      	ldr	r3, [pc, #324]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800894e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008956:	d056      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800895e:	f200 8090 	bhi.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	2bc0      	cmp	r3, #192	@ 0xc0
 8008966:	f000 8088 	beq.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	2bc0      	cmp	r3, #192	@ 0xc0
 800896e:	f200 8088 	bhi.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	2b80      	cmp	r3, #128	@ 0x80
 8008976:	d032      	beq.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	2b80      	cmp	r3, #128	@ 0x80
 800897c:	f200 8081 	bhi.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	2b40      	cmp	r3, #64	@ 0x40
 800898a:	d014      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800898c:	e079      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800898e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800899a:	d108      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800899c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 ff67 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089aa:	f000 bc9c 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b2:	f000 bc98 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089b6:	4b35      	ldr	r3, [pc, #212]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089c2:	d108      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c4:	f107 0318 	add.w	r3, r7, #24
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fcab 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d2:	f000 bc88 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	f000 bc84 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089de:	4b2b      	ldr	r3, [pc, #172]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ea:	d108      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ec:	f107 030c 	add.w	r3, r7, #12
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fdeb 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089fa:	f000 bc74 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a02:	f000 bc70 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a06:	4b21      	ldr	r3, [pc, #132]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a10:	4b1e      	ldr	r3, [pc, #120]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d10c      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a22:	4b1a      	ldr	r3, [pc, #104]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	08db      	lsrs	r3, r3, #3
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	4a18      	ldr	r2, [pc, #96]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a34:	e01f      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a36:	4b15      	ldr	r3, [pc, #84]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a42:	d106      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a4a:	d102      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a50:	e011      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a52:	4b0e      	ldr	r3, [pc, #56]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a5e:	d106      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a66:	d102      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a68:	4b0b      	ldr	r3, [pc, #44]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a6c:	e003      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a72:	f000 bc38 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a76:	f000 bc36 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a7a:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7e:	f000 bc32 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a86:	f000 bc2e 	b.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
 8008a94:	003d0900 	.word	0x003d0900
 8008a98:	007a1200 	.word	0x007a1200
 8008a9c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	f040 809c 	bne.w	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008aae:	4b9e      	ldr	r3, [pc, #632]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008abe:	d054      	beq.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ac6:	f200 808b 	bhi.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ad0:	f000 8083 	beq.w	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ada:	f200 8081 	bhi.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ae4:	d02f      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aec:	d878      	bhi.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008afa:	d012      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008afc:	e070      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008afe:	4b8a      	ldr	r3, [pc, #552]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 feaf 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b1a:	e3e4      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b20:	e3e1      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b22:	4b81      	ldr	r3, [pc, #516]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b30:	f107 0318 	add.w	r3, r7, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fbf5 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b3e:	e3d2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e3cf      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b46:	4b78      	ldr	r3, [pc, #480]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b52:	d107      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fd37 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b62:	e3c0      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b68:	e3bd      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b74:	4b6c      	ldr	r3, [pc, #432]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b86:	4b68      	ldr	r3, [pc, #416]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	08db      	lsrs	r3, r3, #3
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	4a66      	ldr	r2, [pc, #408]	@ (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b92:	fa22 f303 	lsr.w	r3, r2, r3
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b98:	e01e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b9a:	4b63      	ldr	r3, [pc, #396]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bae:	d102      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb4:	e010      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bc2:	d106      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bca:	d102      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bcc:	4b59      	ldr	r3, [pc, #356]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bd6:	e386      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008bd8:	e385      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bda:	4b57      	ldr	r3, [pc, #348]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bde:	e382      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be4:	e37f      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	f040 80a7 	bne.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008bfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c04:	d055      	beq.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c0c:	f200 8096 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c16:	f000 8084 	beq.w	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c20:	f200 808c 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c2a:	d030      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c32:	f200 8083 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c42:	d012      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008c44:	e07a      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c46:	4b38      	ldr	r3, [pc, #224]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c52:	d107      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fe0b 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c62:	e340      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c68:	e33d      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c76:	d107      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c78:	f107 0318 	add.w	r3, r7, #24
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fb51 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c86:	e32e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8c:	e32b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c8e:	4b26      	ldr	r3, [pc, #152]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c9a:	d107      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9c:	f107 030c 	add.w	r3, r7, #12
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fc93 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008caa:	e31c      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb0:	e319      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d10c      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cce:	4b16      	ldr	r3, [pc, #88]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	08db      	lsrs	r3, r3, #3
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	4a14      	ldr	r2, [pc, #80]	@ (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008cda:	fa22 f303 	lsr.w	r3, r2, r3
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ce0:	e01e      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ce2:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cee:	d106      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf6:	d102      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cfc:	e010      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d12:	d102      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d14:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d1e:	e2e2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d20:	e2e1      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d22:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d26:	e2de      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	03d09000 	.word	0x03d09000
 8008d30:	003d0900 	.word	0x003d0900
 8008d34:	007a1200 	.word	0x007a1200
 8008d38:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d40:	e2d1      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d46:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	f040 809c 	bne.w	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008d50:	4b93      	ldr	r3, [pc, #588]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008d58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d60:	d054      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d68:	f200 808b 	bhi.w	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d72:	f000 8083 	beq.w	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d7c:	f200 8081 	bhi.w	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d86:	d02f      	beq.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d8e:	d878      	bhi.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d9c:	d012      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008d9e:	e070      	b.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008da0:	4b7f      	ldr	r3, [pc, #508]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dac:	d107      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fd5e 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dbc:	e293      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc2:	e290      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc4:	4b76      	ldr	r3, [pc, #472]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dd2:	f107 0318 	add.w	r3, r7, #24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 faa4 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008de0:	e281      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de6:	e27e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008de8:	4b6d      	ldr	r3, [pc, #436]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008df4:	d107      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fbe6 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e04:	e26f      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0a:	e26c      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e0c:	4b64      	ldr	r3, [pc, #400]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e16:	4b62      	ldr	r3, [pc, #392]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d109      	bne.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e28:	4b5d      	ldr	r3, [pc, #372]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	08db      	lsrs	r3, r3, #3
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	4a5c      	ldr	r2, [pc, #368]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e34:	fa22 f303 	lsr.w	r3, r2, r3
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3a:	e01e      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e3c:	4b58      	ldr	r3, [pc, #352]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e48:	d106      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e50:	d102      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e52:	4b55      	ldr	r3, [pc, #340]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e56:	e010      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e58:	4b51      	ldr	r3, [pc, #324]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e64:	d106      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e6c:	d102      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e72:	e002      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e78:	e235      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e7a:	e234      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e80:	e231      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e86:	e22e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008e90:	430b      	orrs	r3, r1
 8008e92:	f040 808f 	bne.w	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008e96:	4b42      	ldr	r3, [pc, #264]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ea6:	d06b      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008eae:	d874      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008eb6:	d056      	beq.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ebe:	d86c      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ec6:	d03b      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ece:	d864      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ed6:	d021      	beq.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ede:	d85c      	bhi.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d004      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eec:	d004      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008eee:	e054      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008ef0:	f7fe fa4c 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 8008ef4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ef6:	e1f6      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef8:	4b29      	ldr	r3, [pc, #164]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f04:	d107      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f06:	f107 0318 	add.w	r3, r7, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fa0a 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f14:	e1e7      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1a:	e1e4      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f1c:	4b20      	ldr	r3, [pc, #128]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f28:	d107      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fb4c 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f38:	e1d5      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3e:	e1d2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f40:	4b17      	ldr	r3, [pc, #92]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d109      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f4c:	4b14      	ldr	r3, [pc, #80]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	4a13      	ldr	r2, [pc, #76]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5e:	e1c2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f64:	e1bf      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f66:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f72:	d102      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008f74:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f78:	e1b5      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7e:	e1b2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f80:	4b07      	ldr	r3, [pc, #28]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f92:	e1a8      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f98:	e1a5      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9e:	e1a2      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	007a1200 	.word	0x007a1200
 8008fb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	d173      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008fc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fd0:	d02f      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fd8:	d863      	bhi.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe6:	d012      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008fe8:	e05b      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fea:	4b92      	ldr	r3, [pc, #584]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ff6:	d107      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff8:	f107 0318 	add.w	r3, r7, #24
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 f991 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009006:	e16e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e16b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800900e:	4b89      	ldr	r3, [pc, #548]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901a:	d107      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fad3 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902a:	e15c      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009030:	e159      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009032:	4b80      	ldr	r3, [pc, #512]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800903c:	4b7d      	ldr	r3, [pc, #500]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b04      	cmp	r3, #4
 8009046:	d10c      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904a:	2b00      	cmp	r3, #0
 800904c:	d109      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800904e:	4b79      	ldr	r3, [pc, #484]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	08db      	lsrs	r3, r3, #3
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	4a77      	ldr	r2, [pc, #476]	@ (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800905a:	fa22 f303 	lsr.w	r3, r2, r3
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009060:	e01e      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009062:	4b74      	ldr	r3, [pc, #464]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800906e:	d106      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009076:	d102      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009078:	4b70      	ldr	r3, [pc, #448]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800907c:	e010      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800907e:	4b6d      	ldr	r3, [pc, #436]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908a:	d106      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009094:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009098:	e002      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800909e:	e122      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090a0:	e121      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a6:	e11e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80090a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80090b0:	430b      	orrs	r3, r1
 80090b2:	d133      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80090b4:	4b5f      	ldr	r3, [pc, #380]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ca:	d012      	beq.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80090cc:	e023      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090ce:	4b59      	ldr	r3, [pc, #356]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090da:	d107      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fbc7 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090ea:	e0fc      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f0:	e0f9      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f2:	4b50      	ldr	r3, [pc, #320]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090fe:	d107      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009100:	f107 0318 	add.w	r3, r7, #24
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f90d 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910e:	e0ea      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009114:	e0e7      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911a:	e0e4      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800911c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009120:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009124:	430b      	orrs	r3, r1
 8009126:	f040 808d 	bne.w	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800912a:	4b42      	ldr	r3, [pc, #264]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800912c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009132:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800913a:	d06b      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009142:	d874      	bhi.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914a:	d056      	beq.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800914c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009152:	d86c      	bhi.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800915a:	d03b      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009162:	d864      	bhi.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916a:	d021      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800916c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009172:	d85c      	bhi.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009180:	d004      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009182:	e054      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009184:	f000 f8b8 	bl	80092f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009188:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800918a:	e0ac      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800918c:	4b29      	ldr	r3, [pc, #164]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009198:	d107      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f8c0 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a8:	e09d      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ae:	e09a      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091b0:	4b20      	ldr	r3, [pc, #128]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fa02 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091cc:	e08b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d2:	e088      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091d4:	4b17      	ldr	r3, [pc, #92]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d109      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091e0:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	4a13      	ldr	r2, [pc, #76]	@ (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f2:	e078      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	e075      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80091fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009206:	d102      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920c:	e06b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009212:	e068      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009214:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009220:	d102      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009222:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009226:	e05e      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800922c:	e05b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009232:	e058      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009234:	58024400 	.word	0x58024400
 8009238:	03d09000 	.word	0x03d09000
 800923c:	003d0900 	.word	0x003d0900
 8009240:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009248:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800924c:	430b      	orrs	r3, r1
 800924e:	d148      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009250:	4b27      	ldr	r3, [pc, #156]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009254:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009258:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009260:	d02a      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009268:	d838      	bhi.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009276:	d00d      	beq.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009278:	e030      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800927a:	4b1d      	ldr	r3, [pc, #116]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009286:	d102      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009288:	4b1a      	ldr	r3, [pc, #104]	@ (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800928c:	e02b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009292:	e028      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009294:	4b16      	ldr	r3, [pc, #88]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800929c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092a0:	d107      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fae4 	bl	8009874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092b0:	e019      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b6:	e016      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092b8:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092c4:	d107      	bne.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c6:	f107 0318 	add.w	r3, r7, #24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f82a 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d4:	e007      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092da:	e004      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e0:	e001      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80092e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3740      	adds	r7, #64	@ 0x40
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	58024400 	.word	0x58024400
 80092f4:	007a1200 	.word	0x007a1200

080092f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092fc:	f7fe f816 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8009300:	4602      	mov	r2, r0
 8009302:	4b06      	ldr	r3, [pc, #24]	@ (800931c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	4904      	ldr	r1, [pc, #16]	@ (8009320 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800930e:	5ccb      	ldrb	r3, [r1, r3]
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	58024400 	.word	0x58024400
 8009320:	0800b618 	.word	0x0800b618

08009324 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	@ 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800932c:	4ba1      	ldr	r3, [pc, #644]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009336:	4b9f      	ldr	r3, [pc, #636]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	0b1b      	lsrs	r3, r3, #12
 800933c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009340:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009342:	4b9c      	ldr	r3, [pc, #624]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009346:	091b      	lsrs	r3, r3, #4
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800934e:	4b99      	ldr	r3, [pc, #612]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009352:	08db      	lsrs	r3, r3, #3
 8009354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	fb02 f303 	mul.w	r3, r2, r3
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8111 	beq.w	8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b02      	cmp	r3, #2
 8009376:	f000 8083 	beq.w	8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b02      	cmp	r3, #2
 800937e:	f200 80a1 	bhi.w	80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d056      	beq.n	800943c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800938e:	e099      	b.n	80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009390:	4b88      	ldr	r3, [pc, #544]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02d      	beq.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800939c:	4b85      	ldr	r3, [pc, #532]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	4a84      	ldr	r2, [pc, #528]	@ (80095b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b7b      	ldr	r3, [pc, #492]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093f6:	e087      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b6a      	ldr	r3, [pc, #424]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	e065      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b59      	ldr	r3, [pc, #356]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947e:	e043      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b48      	ldr	r3, [pc, #288]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c2:	e021      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d6:	4b37      	ldr	r3, [pc, #220]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009506:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009508:	4b2a      	ldr	r3, [pc, #168]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	0a5b      	lsrs	r3, r3, #9
 800950e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800951e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009522:	edd7 6a07 	vldr	s13, [r7, #28]
 8009526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952e:	ee17 2a90 	vmov	r2, s15
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009536:	4b1f      	ldr	r3, [pc, #124]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800954c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009550:	edd7 6a07 	vldr	s13, [r7, #28]
 8009554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955c:	ee17 2a90 	vmov	r2, s15
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009564:	4b13      	ldr	r3, [pc, #76]	@ (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	0e1b      	lsrs	r3, r3, #24
 800956a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800957a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800957e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958a:	ee17 2a90 	vmov	r2, s15
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009592:	e008      	b.n	80095a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	609a      	str	r2, [r3, #8]
}
 80095a6:	bf00      	nop
 80095a8:	3724      	adds	r7, #36	@ 0x24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	58024400 	.word	0x58024400
 80095b8:	03d09000 	.word	0x03d09000
 80095bc:	46000000 	.word	0x46000000
 80095c0:	4c742400 	.word	0x4c742400
 80095c4:	4a742400 	.word	0x4a742400
 80095c8:	4af42400 	.word	0x4af42400

080095cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b089      	sub	sp, #36	@ 0x24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095d4:	4ba1      	ldr	r3, [pc, #644]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80095de:	4b9f      	ldr	r3, [pc, #636]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e2:	0d1b      	lsrs	r3, r3, #20
 80095e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095ea:	4b9c      	ldr	r3, [pc, #624]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095f6:	4b99      	ldr	r3, [pc, #612]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	fb02 f303 	mul.w	r3, r2, r3
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8111 	beq.w	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b02      	cmp	r3, #2
 800961e:	f000 8083 	beq.w	8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b02      	cmp	r3, #2
 8009626:	f200 80a1 	bhi.w	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d056      	beq.n	80096e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009636:	e099      	b.n	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009638:	4b88      	ldr	r3, [pc, #544]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02d      	beq.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009644:	4b85      	ldr	r3, [pc, #532]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	08db      	lsrs	r3, r3, #3
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	4a84      	ldr	r2, [pc, #528]	@ (8009860 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
 8009654:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	ee07 3a90 	vmov	s15, r3
 800965c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966e:	4b7b      	ldr	r3, [pc, #492]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009682:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800969e:	e087      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009868 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80096ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b2:	4b6a      	ldr	r3, [pc, #424]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ba:	ee07 3a90 	vmov	s15, r3
 80096be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e2:	e065      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800986c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f6:	4b59      	ldr	r3, [pc, #356]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009706:	ed97 6a03 	vldr	s12, [r7, #12]
 800970a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800971a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009726:	e043      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009732:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973a:	4b48      	ldr	r3, [pc, #288]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974a:	ed97 6a03 	vldr	s12, [r7, #12]
 800974e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800976a:	e021      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800986c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800977a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977e:	4b37      	ldr	r3, [pc, #220]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009792:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80097b0:	4b2a      	ldr	r3, [pc, #168]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b4:	0a5b      	lsrs	r3, r3, #9
 80097b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d6:	ee17 2a90 	vmov	r2, s15
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80097de:	4b1f      	ldr	r3, [pc, #124]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e2:	0c1b      	lsrs	r3, r3, #16
 80097e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009804:	ee17 2a90 	vmov	r2, s15
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800980c:	4b13      	ldr	r3, [pc, #76]	@ (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800980e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009826:	edd7 6a07 	vldr	s13, [r7, #28]
 800982a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800982e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009832:	ee17 2a90 	vmov	r2, s15
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800983a:	e008      	b.n	800984e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	609a      	str	r2, [r3, #8]
}
 800984e:	bf00      	nop
 8009850:	3724      	adds	r7, #36	@ 0x24
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	03d09000 	.word	0x03d09000
 8009864:	46000000 	.word	0x46000000
 8009868:	4c742400 	.word	0x4c742400
 800986c:	4a742400 	.word	0x4a742400
 8009870:	4af42400 	.word	0x4af42400

08009874 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009874:	b480      	push	{r7}
 8009876:	b089      	sub	sp, #36	@ 0x24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800987c:	4ba0      	ldr	r3, [pc, #640]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009886:	4b9e      	ldr	r3, [pc, #632]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988a:	091b      	lsrs	r3, r3, #4
 800988c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009890:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009892:	4b9b      	ldr	r3, [pc, #620]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800989c:	4b98      	ldr	r3, [pc, #608]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	fb02 f303 	mul.w	r3, r2, r3
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8111 	beq.w	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	f000 8083 	beq.w	80099ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	f200 80a1 	bhi.w	8009a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d056      	beq.n	800998a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80098dc:	e099      	b.n	8009a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098de:	4b88      	ldr	r3, [pc, #544]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d02d      	beq.n	8009946 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ea:	4b85      	ldr	r3, [pc, #532]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	08db      	lsrs	r3, r3, #3
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	4a83      	ldr	r2, [pc, #524]	@ (8009b04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80098f6:	fa22 f303 	lsr.w	r3, r2, r3
 80098fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009914:	4b7a      	ldr	r3, [pc, #488]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009924:	ed97 6a03 	vldr	s12, [r7, #12]
 8009928:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800992c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009940:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009944:	e087      	b.n	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	ee07 3a90 	vmov	s15, r3
 800994c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009950:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009958:	4b69      	ldr	r3, [pc, #420]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800995a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009960:	ee07 3a90 	vmov	s15, r3
 8009964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009968:	ed97 6a03 	vldr	s12, [r7, #12]
 800996c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800997c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009988:	e065      	b.n	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009994:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009b10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800999c:	4b58      	ldr	r3, [pc, #352]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099cc:	e043      	b.n	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	ee07 3a90 	vmov	s15, r3
 80099d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80099dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e0:	4b47      	ldr	r3, [pc, #284]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e8:	ee07 3a90 	vmov	s15, r3
 80099ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a10:	e021      	b.n	8009a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a24:	4b36      	ldr	r3, [pc, #216]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009a56:	4b2a      	ldr	r3, [pc, #168]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5a:	0a5b      	lsrs	r3, r3, #9
 8009a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a60:	ee07 3a90 	vmov	s15, r3
 8009a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a7c:	ee17 2a90 	vmov	r2, s15
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009a84:	4b1e      	ldr	r3, [pc, #120]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a88:	0c1b      	lsrs	r3, r3, #16
 8009a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aaa:	ee17 2a90 	vmov	r2, s15
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009ab2:	4b13      	ldr	r3, [pc, #76]	@ (8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab6:	0e1b      	lsrs	r3, r3, #24
 8009ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009abc:	ee07 3a90 	vmov	s15, r3
 8009ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad8:	ee17 2a90 	vmov	r2, s15
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ae0:	e008      	b.n	8009af4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	609a      	str	r2, [r3, #8]
}
 8009af4:	bf00      	nop
 8009af6:	3724      	adds	r7, #36	@ 0x24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	58024400 	.word	0x58024400
 8009b04:	03d09000 	.word	0x03d09000
 8009b08:	46000000 	.word	0x46000000
 8009b0c:	4c742400 	.word	0x4c742400
 8009b10:	4a742400 	.word	0x4a742400
 8009b14:	4af42400 	.word	0x4af42400

08009b18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b26:	4b53      	ldr	r3, [pc, #332]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d101      	bne.n	8009b36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e099      	b.n	8009c6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b36:	4b4f      	ldr	r3, [pc, #316]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b42:	f7f7 fc8d 	bl	8001460 <HAL_GetTick>
 8009b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b48:	e008      	b.n	8009b5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b4a:	f7f7 fc89 	bl	8001460 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d901      	bls.n	8009b5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e086      	b.n	8009c6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b5c:	4b45      	ldr	r3, [pc, #276]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1f0      	bne.n	8009b4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b68:	4b42      	ldr	r3, [pc, #264]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	031b      	lsls	r3, r3, #12
 8009b76:	493f      	ldr	r1, [pc, #252]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	025b      	lsls	r3, r3, #9
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	431a      	orrs	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	061b      	lsls	r3, r3, #24
 8009ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009bac:	4931      	ldr	r1, [pc, #196]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bb2:	4b30      	ldr	r3, [pc, #192]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	492d      	ldr	r1, [pc, #180]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc8:	f023 0220 	bic.w	r2, r3, #32
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	4928      	ldr	r1, [pc, #160]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009bd6:	4b27      	ldr	r3, [pc, #156]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bda:	4a26      	ldr	r2, [pc, #152]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	f023 0310 	bic.w	r3, r3, #16
 8009be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009be2:	4b24      	ldr	r3, [pc, #144]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009be6:	4b24      	ldr	r3, [pc, #144]	@ (8009c78 <RCCEx_PLL2_Config+0x160>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	69d2      	ldr	r2, [r2, #28]
 8009bee:	00d2      	lsls	r2, r2, #3
 8009bf0:	4920      	ldr	r1, [pc, #128]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009bfc:	f043 0310 	orr.w	r3, r3, #16
 8009c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c08:	4b1a      	ldr	r3, [pc, #104]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	4a19      	ldr	r2, [pc, #100]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c14:	e00f      	b.n	8009c36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d106      	bne.n	8009c2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c1c:	4b15      	ldr	r3, [pc, #84]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	4a14      	ldr	r2, [pc, #80]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c28:	e005      	b.n	8009c36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c2a:	4b12      	ldr	r3, [pc, #72]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2e:	4a11      	ldr	r2, [pc, #68]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c36:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c42:	f7f7 fc0d 	bl	8001460 <HAL_GetTick>
 8009c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c48:	e008      	b.n	8009c5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c4a:	f7f7 fc09 	bl	8001460 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d901      	bls.n	8009c5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e006      	b.n	8009c6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <RCCEx_PLL2_Config+0x15c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0f0      	beq.n	8009c4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	58024400 	.word	0x58024400
 8009c78:	ffff0007 	.word	0xffff0007

08009c7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c8a:	4b53      	ldr	r3, [pc, #332]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d101      	bne.n	8009c9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e099      	b.n	8009dce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca6:	f7f7 fbdb 	bl	8001460 <HAL_GetTick>
 8009caa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cac:	e008      	b.n	8009cc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cae:	f7f7 fbd7 	bl	8001460 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e086      	b.n	8009dce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cc0:	4b45      	ldr	r3, [pc, #276]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f0      	bne.n	8009cae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ccc:	4b42      	ldr	r3, [pc, #264]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	051b      	lsls	r3, r3, #20
 8009cda:	493f      	ldr	r1, [pc, #252]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	025b      	lsls	r3, r3, #9
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	061b      	lsls	r3, r3, #24
 8009d0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d10:	4931      	ldr	r1, [pc, #196]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d16:	4b30      	ldr	r3, [pc, #192]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	492d      	ldr	r1, [pc, #180]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d28:	4b2b      	ldr	r3, [pc, #172]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	4928      	ldr	r1, [pc, #160]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d3a:	4b27      	ldr	r3, [pc, #156]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3e:	4a26      	ldr	r2, [pc, #152]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d46:	4b24      	ldr	r3, [pc, #144]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d4a:	4b24      	ldr	r3, [pc, #144]	@ (8009ddc <RCCEx_PLL3_Config+0x160>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	69d2      	ldr	r2, [r2, #28]
 8009d52:	00d2      	lsls	r2, r2, #3
 8009d54:	4920      	ldr	r1, [pc, #128]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	4a19      	ldr	r2, [pc, #100]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d78:	e00f      	b.n	8009d9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d106      	bne.n	8009d8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d80:	4b15      	ldr	r3, [pc, #84]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d84:	4a14      	ldr	r2, [pc, #80]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d8c:	e005      	b.n	8009d9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d8e:	4b12      	ldr	r3, [pc, #72]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d92:	4a11      	ldr	r2, [pc, #68]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009da6:	f7f7 fb5b 	bl	8001460 <HAL_GetTick>
 8009daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dac:	e008      	b.n	8009dc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dae:	f7f7 fb57 	bl	8001460 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d901      	bls.n	8009dc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e006      	b.n	8009dce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <RCCEx_PLL3_Config+0x15c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0f0      	beq.n	8009dae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	ffff0007 	.word	0xffff0007

08009de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e042      	b.n	8009e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d106      	bne.n	8009e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7f7 f94b 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2224      	movs	r2, #36	@ 0x24
 8009e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0201 	bic.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fd90 	bl	800a950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f825 	bl	8009e80 <UART_SetConfig>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e01b      	b.n	8009e78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fe0f 	bl	800aa94 <UART_CheckIdleState>
 8009e76:	4603      	mov	r3, r0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e84:	b092      	sub	sp, #72	@ 0x48
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4bbe      	ldr	r3, [pc, #760]	@ (800a1a8 <UART_SetConfig+0x328>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4ab3      	ldr	r2, [pc, #716]	@ (800a1ac <UART_SetConfig+0x32c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d004      	beq.n	8009eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	4baf      	ldr	r3, [pc, #700]	@ (800a1b0 <UART_SetConfig+0x330>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f023 010f 	bic.w	r1, r3, #15
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4aa6      	ldr	r2, [pc, #664]	@ (800a1b4 <UART_SetConfig+0x334>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d177      	bne.n	800a010 <UART_SetConfig+0x190>
 8009f20:	4ba5      	ldr	r3, [pc, #660]	@ (800a1b8 <UART_SetConfig+0x338>)
 8009f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f28:	2b28      	cmp	r3, #40	@ 0x28
 8009f2a:	d86d      	bhi.n	800a008 <UART_SetConfig+0x188>
 8009f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <UART_SetConfig+0xb4>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009fd9 	.word	0x08009fd9
 8009f38:	0800a009 	.word	0x0800a009
 8009f3c:	0800a009 	.word	0x0800a009
 8009f40:	0800a009 	.word	0x0800a009
 8009f44:	0800a009 	.word	0x0800a009
 8009f48:	0800a009 	.word	0x0800a009
 8009f4c:	0800a009 	.word	0x0800a009
 8009f50:	0800a009 	.word	0x0800a009
 8009f54:	08009fe1 	.word	0x08009fe1
 8009f58:	0800a009 	.word	0x0800a009
 8009f5c:	0800a009 	.word	0x0800a009
 8009f60:	0800a009 	.word	0x0800a009
 8009f64:	0800a009 	.word	0x0800a009
 8009f68:	0800a009 	.word	0x0800a009
 8009f6c:	0800a009 	.word	0x0800a009
 8009f70:	0800a009 	.word	0x0800a009
 8009f74:	08009fe9 	.word	0x08009fe9
 8009f78:	0800a009 	.word	0x0800a009
 8009f7c:	0800a009 	.word	0x0800a009
 8009f80:	0800a009 	.word	0x0800a009
 8009f84:	0800a009 	.word	0x0800a009
 8009f88:	0800a009 	.word	0x0800a009
 8009f8c:	0800a009 	.word	0x0800a009
 8009f90:	0800a009 	.word	0x0800a009
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	0800a009 	.word	0x0800a009
 8009f9c:	0800a009 	.word	0x0800a009
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	0800a009 	.word	0x0800a009
 8009fa8:	0800a009 	.word	0x0800a009
 8009fac:	0800a009 	.word	0x0800a009
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	0800a009 	.word	0x0800a009
 8009fbc:	0800a009 	.word	0x0800a009
 8009fc0:	0800a009 	.word	0x0800a009
 8009fc4:	0800a009 	.word	0x0800a009
 8009fc8:	0800a009 	.word	0x0800a009
 8009fcc:	0800a009 	.word	0x0800a009
 8009fd0:	0800a009 	.word	0x0800a009
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e222      	b.n	800a426 <UART_SetConfig+0x5a6>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e21e      	b.n	800a426 <UART_SetConfig+0x5a6>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e21a      	b.n	800a426 <UART_SetConfig+0x5a6>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e216      	b.n	800a426 <UART_SetConfig+0x5a6>
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e212      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a000:	2340      	movs	r3, #64	@ 0x40
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e20e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a008:	2380      	movs	r3, #128	@ 0x80
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e20a      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a69      	ldr	r2, [pc, #420]	@ (800a1bc <UART_SetConfig+0x33c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d130      	bne.n	800a07c <UART_SetConfig+0x1fc>
 800a01a:	4b67      	ldr	r3, [pc, #412]	@ (800a1b8 <UART_SetConfig+0x338>)
 800a01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b05      	cmp	r3, #5
 800a024:	d826      	bhi.n	800a074 <UART_SetConfig+0x1f4>
 800a026:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <UART_SetConfig+0x1ac>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	0800a055 	.word	0x0800a055
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	2300      	movs	r3, #0
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e1ec      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a04c:	2304      	movs	r3, #4
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e1e8      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a054:	2308      	movs	r3, #8
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e1e4      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e1e0      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a064:	2320      	movs	r3, #32
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e1dc      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a06c:	2340      	movs	r3, #64	@ 0x40
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e1d8      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a074:	2380      	movs	r3, #128	@ 0x80
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e1d4      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a4f      	ldr	r2, [pc, #316]	@ (800a1c0 <UART_SetConfig+0x340>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d130      	bne.n	800a0e8 <UART_SetConfig+0x268>
 800a086:	4b4c      	ldr	r3, [pc, #304]	@ (800a1b8 <UART_SetConfig+0x338>)
 800a088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	2b05      	cmp	r3, #5
 800a090:	d826      	bhi.n	800a0e0 <UART_SetConfig+0x260>
 800a092:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <UART_SetConfig+0x218>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0b1 	.word	0x0800a0b1
 800a09c:	0800a0b9 	.word	0x0800a0b9
 800a0a0:	0800a0c1 	.word	0x0800a0c1
 800a0a4:	0800a0c9 	.word	0x0800a0c9
 800a0a8:	0800a0d1 	.word	0x0800a0d1
 800a0ac:	0800a0d9 	.word	0x0800a0d9
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e1b6      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e1b2      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e1ae      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ce:	e1aa      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0d0:	2320      	movs	r3, #32
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	e1a6      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0d8:	2340      	movs	r3, #64	@ 0x40
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e1a2      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0e0:	2380      	movs	r3, #128	@ 0x80
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e19e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a35      	ldr	r2, [pc, #212]	@ (800a1c4 <UART_SetConfig+0x344>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d130      	bne.n	800a154 <UART_SetConfig+0x2d4>
 800a0f2:	4b31      	ldr	r3, [pc, #196]	@ (800a1b8 <UART_SetConfig+0x338>)
 800a0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b05      	cmp	r3, #5
 800a0fc:	d826      	bhi.n	800a14c <UART_SetConfig+0x2cc>
 800a0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a104 <UART_SetConfig+0x284>)
 800a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a125 	.word	0x0800a125
 800a10c:	0800a12d 	.word	0x0800a12d
 800a110:	0800a135 	.word	0x0800a135
 800a114:	0800a13d 	.word	0x0800a13d
 800a118:	0800a145 	.word	0x0800a145
 800a11c:	2300      	movs	r3, #0
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e180      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a124:	2304      	movs	r3, #4
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e17c      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a12c:	2308      	movs	r3, #8
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e178      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a134:	2310      	movs	r3, #16
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13a:	e174      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a13c:	2320      	movs	r3, #32
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e170      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a144:	2340      	movs	r3, #64	@ 0x40
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e16c      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a14c:	2380      	movs	r3, #128	@ 0x80
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e168      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <UART_SetConfig+0x348>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d142      	bne.n	800a1e4 <UART_SetConfig+0x364>
 800a15e:	4b16      	ldr	r3, [pc, #88]	@ (800a1b8 <UART_SetConfig+0x338>)
 800a160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b05      	cmp	r3, #5
 800a168:	d838      	bhi.n	800a1dc <UART_SetConfig+0x35c>
 800a16a:	a201      	add	r2, pc, #4	@ (adr r2, 800a170 <UART_SetConfig+0x2f0>)
 800a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a170:	0800a189 	.word	0x0800a189
 800a174:	0800a191 	.word	0x0800a191
 800a178:	0800a199 	.word	0x0800a199
 800a17c:	0800a1a1 	.word	0x0800a1a1
 800a180:	0800a1cd 	.word	0x0800a1cd
 800a184:	0800a1d5 	.word	0x0800a1d5
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e14a      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a190:	2304      	movs	r3, #4
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e146      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a198:	2308      	movs	r3, #8
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19e:	e142      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a6:	e13e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a1a8:	cfff69f3 	.word	0xcfff69f3
 800a1ac:	58000c00 	.word	0x58000c00
 800a1b0:	11fff4ff 	.word	0x11fff4ff
 800a1b4:	40011000 	.word	0x40011000
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	40004400 	.word	0x40004400
 800a1c0:	40004800 	.word	0x40004800
 800a1c4:	40004c00 	.word	0x40004c00
 800a1c8:	40005000 	.word	0x40005000
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e128      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a1d4:	2340      	movs	r3, #64	@ 0x40
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e124      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a1dc:	2380      	movs	r3, #128	@ 0x80
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e120      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4acb      	ldr	r2, [pc, #812]	@ (800a518 <UART_SetConfig+0x698>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d176      	bne.n	800a2dc <UART_SetConfig+0x45c>
 800a1ee:	4bcb      	ldr	r3, [pc, #812]	@ (800a51c <UART_SetConfig+0x69c>)
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1f6:	2b28      	cmp	r3, #40	@ 0x28
 800a1f8:	d86c      	bhi.n	800a2d4 <UART_SetConfig+0x454>
 800a1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <UART_SetConfig+0x380>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a2a5 	.word	0x0800a2a5
 800a204:	0800a2d5 	.word	0x0800a2d5
 800a208:	0800a2d5 	.word	0x0800a2d5
 800a20c:	0800a2d5 	.word	0x0800a2d5
 800a210:	0800a2d5 	.word	0x0800a2d5
 800a214:	0800a2d5 	.word	0x0800a2d5
 800a218:	0800a2d5 	.word	0x0800a2d5
 800a21c:	0800a2d5 	.word	0x0800a2d5
 800a220:	0800a2ad 	.word	0x0800a2ad
 800a224:	0800a2d5 	.word	0x0800a2d5
 800a228:	0800a2d5 	.word	0x0800a2d5
 800a22c:	0800a2d5 	.word	0x0800a2d5
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a2d5 	.word	0x0800a2d5
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a2d5 	.word	0x0800a2d5
 800a240:	0800a2b5 	.word	0x0800a2b5
 800a244:	0800a2d5 	.word	0x0800a2d5
 800a248:	0800a2d5 	.word	0x0800a2d5
 800a24c:	0800a2d5 	.word	0x0800a2d5
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2d5 	.word	0x0800a2d5
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a2d5 	.word	0x0800a2d5
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2d5 	.word	0x0800a2d5
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a2d5 	.word	0x0800a2d5
 800a274:	0800a2d5 	.word	0x0800a2d5
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2c5 	.word	0x0800a2c5
 800a284:	0800a2d5 	.word	0x0800a2d5
 800a288:	0800a2d5 	.word	0x0800a2d5
 800a28c:	0800a2d5 	.word	0x0800a2d5
 800a290:	0800a2d5 	.word	0x0800a2d5
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a2d5 	.word	0x0800a2d5
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2cd 	.word	0x0800a2cd
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e0bc      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b2:	e0b8      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	e0b4      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2bc:	2310      	movs	r3, #16
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c2:	e0b0      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ca:	e0ac      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2cc:	2340      	movs	r3, #64	@ 0x40
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d2:	e0a8      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2d4:	2380      	movs	r3, #128	@ 0x80
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2da:	e0a4      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a8f      	ldr	r2, [pc, #572]	@ (800a520 <UART_SetConfig+0x6a0>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d130      	bne.n	800a348 <UART_SetConfig+0x4c8>
 800a2e6:	4b8d      	ldr	r3, [pc, #564]	@ (800a51c <UART_SetConfig+0x69c>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d826      	bhi.n	800a340 <UART_SetConfig+0x4c0>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <UART_SetConfig+0x478>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a319 	.word	0x0800a319
 800a300:	0800a321 	.word	0x0800a321
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a331 	.word	0x0800a331
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e086      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a318:	2304      	movs	r3, #4
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31e:	e082      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a320:	2308      	movs	r3, #8
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a326:	e07e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a328:	2310      	movs	r3, #16
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32e:	e07a      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a330:	2320      	movs	r3, #32
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e076      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a338:	2340      	movs	r3, #64	@ 0x40
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e072      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a340:	2380      	movs	r3, #128	@ 0x80
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e06e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a75      	ldr	r2, [pc, #468]	@ (800a524 <UART_SetConfig+0x6a4>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d130      	bne.n	800a3b4 <UART_SetConfig+0x534>
 800a352:	4b72      	ldr	r3, [pc, #456]	@ (800a51c <UART_SetConfig+0x69c>)
 800a354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d826      	bhi.n	800a3ac <UART_SetConfig+0x52c>
 800a35e:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <UART_SetConfig+0x4e4>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a37d 	.word	0x0800a37d
 800a368:	0800a385 	.word	0x0800a385
 800a36c:	0800a38d 	.word	0x0800a38d
 800a370:	0800a395 	.word	0x0800a395
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a3a5 	.word	0x0800a3a5
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e050      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a384:	2304      	movs	r3, #4
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e04c      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a38c:	2308      	movs	r3, #8
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e048      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a394:	2310      	movs	r3, #16
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e044      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a39c:	2320      	movs	r3, #32
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e040      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a3a4:	2340      	movs	r3, #64	@ 0x40
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e03c      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a3ac:	2380      	movs	r3, #128	@ 0x80
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e038      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a5b      	ldr	r2, [pc, #364]	@ (800a528 <UART_SetConfig+0x6a8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d130      	bne.n	800a420 <UART_SetConfig+0x5a0>
 800a3be:	4b57      	ldr	r3, [pc, #348]	@ (800a51c <UART_SetConfig+0x69c>)
 800a3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b05      	cmp	r3, #5
 800a3c8:	d826      	bhi.n	800a418 <UART_SetConfig+0x598>
 800a3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d0 <UART_SetConfig+0x550>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a3e9 	.word	0x0800a3e9
 800a3d4:	0800a3f1 	.word	0x0800a3f1
 800a3d8:	0800a3f9 	.word	0x0800a3f9
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a409 	.word	0x0800a409
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e01a      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e016      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e012      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a400:	2310      	movs	r3, #16
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e00e      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a408:	2320      	movs	r3, #32
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e00a      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a410:	2340      	movs	r3, #64	@ 0x40
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e006      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a418:	2380      	movs	r3, #128	@ 0x80
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e002      	b.n	800a426 <UART_SetConfig+0x5a6>
 800a420:	2380      	movs	r3, #128	@ 0x80
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a3f      	ldr	r2, [pc, #252]	@ (800a528 <UART_SetConfig+0x6a8>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	f040 80f8 	bne.w	800a622 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a432:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a436:	2b20      	cmp	r3, #32
 800a438:	dc46      	bgt.n	800a4c8 <UART_SetConfig+0x648>
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	f2c0 8082 	blt.w	800a544 <UART_SetConfig+0x6c4>
 800a440:	3b02      	subs	r3, #2
 800a442:	2b1e      	cmp	r3, #30
 800a444:	d87e      	bhi.n	800a544 <UART_SetConfig+0x6c4>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <UART_SetConfig+0x5cc>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a4cf 	.word	0x0800a4cf
 800a450:	0800a545 	.word	0x0800a545
 800a454:	0800a4d7 	.word	0x0800a4d7
 800a458:	0800a545 	.word	0x0800a545
 800a45c:	0800a545 	.word	0x0800a545
 800a460:	0800a545 	.word	0x0800a545
 800a464:	0800a4e7 	.word	0x0800a4e7
 800a468:	0800a545 	.word	0x0800a545
 800a46c:	0800a545 	.word	0x0800a545
 800a470:	0800a545 	.word	0x0800a545
 800a474:	0800a545 	.word	0x0800a545
 800a478:	0800a545 	.word	0x0800a545
 800a47c:	0800a545 	.word	0x0800a545
 800a480:	0800a545 	.word	0x0800a545
 800a484:	0800a4f7 	.word	0x0800a4f7
 800a488:	0800a545 	.word	0x0800a545
 800a48c:	0800a545 	.word	0x0800a545
 800a490:	0800a545 	.word	0x0800a545
 800a494:	0800a545 	.word	0x0800a545
 800a498:	0800a545 	.word	0x0800a545
 800a49c:	0800a545 	.word	0x0800a545
 800a4a0:	0800a545 	.word	0x0800a545
 800a4a4:	0800a545 	.word	0x0800a545
 800a4a8:	0800a545 	.word	0x0800a545
 800a4ac:	0800a545 	.word	0x0800a545
 800a4b0:	0800a545 	.word	0x0800a545
 800a4b4:	0800a545 	.word	0x0800a545
 800a4b8:	0800a545 	.word	0x0800a545
 800a4bc:	0800a545 	.word	0x0800a545
 800a4c0:	0800a545 	.word	0x0800a545
 800a4c4:	0800a537 	.word	0x0800a537
 800a4c8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ca:	d037      	beq.n	800a53c <UART_SetConfig+0x6bc>
 800a4cc:	e03a      	b.n	800a544 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4ce:	f7fe ff13 	bl	80092f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e03c      	b.n	800a550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe ff22 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e4:	e034      	b.n	800a550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e6:	f107 0318 	add.w	r3, r7, #24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff f86e 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f4:	e02c      	b.n	800a550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f6:	4b09      	ldr	r3, [pc, #36]	@ (800a51c <UART_SetConfig+0x69c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d016      	beq.n	800a530 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a502:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <UART_SetConfig+0x69c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	08db      	lsrs	r3, r3, #3
 800a508:	f003 0303 	and.w	r3, r3, #3
 800a50c:	4a07      	ldr	r2, [pc, #28]	@ (800a52c <UART_SetConfig+0x6ac>)
 800a50e:	fa22 f303 	lsr.w	r3, r2, r3
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a514:	e01c      	b.n	800a550 <UART_SetConfig+0x6d0>
 800a516:	bf00      	nop
 800a518:	40011400 	.word	0x40011400
 800a51c:	58024400 	.word	0x58024400
 800a520:	40007800 	.word	0x40007800
 800a524:	40007c00 	.word	0x40007c00
 800a528:	58000c00 	.word	0x58000c00
 800a52c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a530:	4b9d      	ldr	r3, [pc, #628]	@ (800a7a8 <UART_SetConfig+0x928>)
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a534:	e00c      	b.n	800a550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a536:	4b9d      	ldr	r3, [pc, #628]	@ (800a7ac <UART_SetConfig+0x92c>)
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53a:	e009      	b.n	800a550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a53c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a542:	e005      	b.n	800a550 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a54e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 81de 	beq.w	800a914 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55c:	4a94      	ldr	r2, [pc, #592]	@ (800a7b0 <UART_SetConfig+0x930>)
 800a55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a562:	461a      	mov	r2, r3
 800a564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a566:	fbb3 f3f2 	udiv	r3, r3, r2
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a578:	429a      	cmp	r2, r3
 800a57a:	d305      	bcc.n	800a588 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a584:	429a      	cmp	r2, r3
 800a586:	d903      	bls.n	800a590 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a58e:	e1c1      	b.n	800a914 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a592:	2200      	movs	r2, #0
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	60fa      	str	r2, [r7, #12]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59c:	4a84      	ldr	r2, [pc, #528]	@ (800a7b0 <UART_SetConfig+0x930>)
 800a59e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5b2:	f7f5 fe91 	bl	80002d8 <__aeabi_uldivmod>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	020b      	lsls	r3, r1, #8
 800a5c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5cc:	0202      	lsls	r2, r0, #8
 800a5ce:	6979      	ldr	r1, [r7, #20]
 800a5d0:	6849      	ldr	r1, [r1, #4]
 800a5d2:	0849      	lsrs	r1, r1, #1
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4605      	mov	r5, r0
 800a5da:	eb12 0804 	adds.w	r8, r2, r4
 800a5de:	eb43 0905 	adc.w	r9, r3, r5
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	4693      	mov	fp, r2
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f5 fe70 	bl	80002d8 <__aeabi_uldivmod>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a606:	d308      	bcc.n	800a61a <UART_SetConfig+0x79a>
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60e:	d204      	bcs.n	800a61a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a616:	60da      	str	r2, [r3, #12]
 800a618:	e17c      	b.n	800a914 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a620:	e178      	b.n	800a914 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a62a:	f040 80c5 	bne.w	800a7b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a62e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a632:	2b20      	cmp	r3, #32
 800a634:	dc48      	bgt.n	800a6c8 <UART_SetConfig+0x848>
 800a636:	2b00      	cmp	r3, #0
 800a638:	db7b      	blt.n	800a732 <UART_SetConfig+0x8b2>
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d879      	bhi.n	800a732 <UART_SetConfig+0x8b2>
 800a63e:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <UART_SetConfig+0x7c4>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a6cf 	.word	0x0800a6cf
 800a648:	0800a6d7 	.word	0x0800a6d7
 800a64c:	0800a733 	.word	0x0800a733
 800a650:	0800a733 	.word	0x0800a733
 800a654:	0800a6df 	.word	0x0800a6df
 800a658:	0800a733 	.word	0x0800a733
 800a65c:	0800a733 	.word	0x0800a733
 800a660:	0800a733 	.word	0x0800a733
 800a664:	0800a6ef 	.word	0x0800a6ef
 800a668:	0800a733 	.word	0x0800a733
 800a66c:	0800a733 	.word	0x0800a733
 800a670:	0800a733 	.word	0x0800a733
 800a674:	0800a733 	.word	0x0800a733
 800a678:	0800a733 	.word	0x0800a733
 800a67c:	0800a733 	.word	0x0800a733
 800a680:	0800a733 	.word	0x0800a733
 800a684:	0800a6ff 	.word	0x0800a6ff
 800a688:	0800a733 	.word	0x0800a733
 800a68c:	0800a733 	.word	0x0800a733
 800a690:	0800a733 	.word	0x0800a733
 800a694:	0800a733 	.word	0x0800a733
 800a698:	0800a733 	.word	0x0800a733
 800a69c:	0800a733 	.word	0x0800a733
 800a6a0:	0800a733 	.word	0x0800a733
 800a6a4:	0800a733 	.word	0x0800a733
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a733 	.word	0x0800a733
 800a6b0:	0800a733 	.word	0x0800a733
 800a6b4:	0800a733 	.word	0x0800a733
 800a6b8:	0800a733 	.word	0x0800a733
 800a6bc:	0800a733 	.word	0x0800a733
 800a6c0:	0800a733 	.word	0x0800a733
 800a6c4:	0800a725 	.word	0x0800a725
 800a6c8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ca:	d02e      	beq.n	800a72a <UART_SetConfig+0x8aa>
 800a6cc:	e031      	b.n	800a732 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ce:	f7fc fe5d 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 800a6d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6d4:	e033      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6d6:	f7fc fe6f 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 800a6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6dc:	e02f      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fe1e 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ec:	e027      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ee:	f107 0318 	add.w	r3, r7, #24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe ff6a 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fc:	e01f      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6fe:	4b2d      	ldr	r3, [pc, #180]	@ (800a7b4 <UART_SetConfig+0x934>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d009      	beq.n	800a71e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a70a:	4b2a      	ldr	r3, [pc, #168]	@ (800a7b4 <UART_SetConfig+0x934>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	4a24      	ldr	r2, [pc, #144]	@ (800a7a8 <UART_SetConfig+0x928>)
 800a716:	fa22 f303 	lsr.w	r3, r2, r3
 800a71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a71c:	e00f      	b.n	800a73e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a71e:	4b22      	ldr	r3, [pc, #136]	@ (800a7a8 <UART_SetConfig+0x928>)
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a722:	e00c      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a724:	4b21      	ldr	r3, [pc, #132]	@ (800a7ac <UART_SetConfig+0x92c>)
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e009      	b.n	800a73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a730:	e005      	b.n	800a73e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a73c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80e7 	beq.w	800a914 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	4a19      	ldr	r2, [pc, #100]	@ (800a7b0 <UART_SetConfig+0x930>)
 800a74c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a750:	461a      	mov	r2, r3
 800a752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a754:	fbb3 f3f2 	udiv	r3, r3, r2
 800a758:	005a      	lsls	r2, r3, #1
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	085b      	lsrs	r3, r3, #1
 800a760:	441a      	add	r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	2b0f      	cmp	r3, #15
 800a770:	d916      	bls.n	800a7a0 <UART_SetConfig+0x920>
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a778:	d212      	bcs.n	800a7a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f023 030f 	bic.w	r3, r3, #15
 800a782:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	085b      	lsrs	r3, r3, #1
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f003 0307 	and.w	r3, r3, #7
 800a78e:	b29a      	uxth	r2, r3
 800a790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a792:	4313      	orrs	r3, r2
 800a794:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a79c:	60da      	str	r2, [r3, #12]
 800a79e:	e0b9      	b.n	800a914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7a6:	e0b5      	b.n	800a914 <UART_SetConfig+0xa94>
 800a7a8:	03d09000 	.word	0x03d09000
 800a7ac:	003d0900 	.word	0x003d0900
 800a7b0:	0800b630 	.word	0x0800b630
 800a7b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7bc:	2b20      	cmp	r3, #32
 800a7be:	dc49      	bgt.n	800a854 <UART_SetConfig+0x9d4>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db7c      	blt.n	800a8be <UART_SetConfig+0xa3e>
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d87a      	bhi.n	800a8be <UART_SetConfig+0xa3e>
 800a7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d0 <UART_SetConfig+0x950>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a85b 	.word	0x0800a85b
 800a7d4:	0800a863 	.word	0x0800a863
 800a7d8:	0800a8bf 	.word	0x0800a8bf
 800a7dc:	0800a8bf 	.word	0x0800a8bf
 800a7e0:	0800a86b 	.word	0x0800a86b
 800a7e4:	0800a8bf 	.word	0x0800a8bf
 800a7e8:	0800a8bf 	.word	0x0800a8bf
 800a7ec:	0800a8bf 	.word	0x0800a8bf
 800a7f0:	0800a87b 	.word	0x0800a87b
 800a7f4:	0800a8bf 	.word	0x0800a8bf
 800a7f8:	0800a8bf 	.word	0x0800a8bf
 800a7fc:	0800a8bf 	.word	0x0800a8bf
 800a800:	0800a8bf 	.word	0x0800a8bf
 800a804:	0800a8bf 	.word	0x0800a8bf
 800a808:	0800a8bf 	.word	0x0800a8bf
 800a80c:	0800a8bf 	.word	0x0800a8bf
 800a810:	0800a88b 	.word	0x0800a88b
 800a814:	0800a8bf 	.word	0x0800a8bf
 800a818:	0800a8bf 	.word	0x0800a8bf
 800a81c:	0800a8bf 	.word	0x0800a8bf
 800a820:	0800a8bf 	.word	0x0800a8bf
 800a824:	0800a8bf 	.word	0x0800a8bf
 800a828:	0800a8bf 	.word	0x0800a8bf
 800a82c:	0800a8bf 	.word	0x0800a8bf
 800a830:	0800a8bf 	.word	0x0800a8bf
 800a834:	0800a8bf 	.word	0x0800a8bf
 800a838:	0800a8bf 	.word	0x0800a8bf
 800a83c:	0800a8bf 	.word	0x0800a8bf
 800a840:	0800a8bf 	.word	0x0800a8bf
 800a844:	0800a8bf 	.word	0x0800a8bf
 800a848:	0800a8bf 	.word	0x0800a8bf
 800a84c:	0800a8bf 	.word	0x0800a8bf
 800a850:	0800a8b1 	.word	0x0800a8b1
 800a854:	2b40      	cmp	r3, #64	@ 0x40
 800a856:	d02e      	beq.n	800a8b6 <UART_SetConfig+0xa36>
 800a858:	e031      	b.n	800a8be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a85a:	f7fc fd97 	bl	800738c <HAL_RCC_GetPCLK1Freq>
 800a85e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a860:	e033      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a862:	f7fc fda9 	bl	80073b8 <HAL_RCC_GetPCLK2Freq>
 800a866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a868:	e02f      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe fd58 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a878:	e027      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a87a:	f107 0318 	add.w	r3, r7, #24
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fea4 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	e01f      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a88a:	4b2d      	ldr	r3, [pc, #180]	@ (800a940 <UART_SetConfig+0xac0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d009      	beq.n	800a8aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a896:	4b2a      	ldr	r3, [pc, #168]	@ (800a940 <UART_SetConfig+0xac0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	08db      	lsrs	r3, r3, #3
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	4a28      	ldr	r2, [pc, #160]	@ (800a944 <UART_SetConfig+0xac4>)
 800a8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8a8:	e00f      	b.n	800a8ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a8aa:	4b26      	ldr	r3, [pc, #152]	@ (800a944 <UART_SetConfig+0xac4>)
 800a8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ae:	e00c      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8b0:	4b25      	ldr	r3, [pc, #148]	@ (800a948 <UART_SetConfig+0xac8>)
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b4:	e009      	b.n	800a8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8bc:	e005      	b.n	800a8ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8c8:	bf00      	nop
    }

    if (pclk != 0U)
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d021      	beq.n	800a914 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a94c <UART_SetConfig+0xacc>)
 800a8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8de:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	085b      	lsrs	r3, r3, #1
 800a8e8:	441a      	add	r2, r3
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	2b0f      	cmp	r3, #15
 800a8f8:	d909      	bls.n	800a90e <UART_SetConfig+0xa8e>
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a900:	d205      	bcs.n	800a90e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	b29a      	uxth	r2, r3
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60da      	str	r2, [r3, #12]
 800a90c:	e002      	b.n	800a914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2201      	movs	r2, #1
 800a918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2201      	movs	r2, #1
 800a920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	2200      	movs	r2, #0
 800a928:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2200      	movs	r2, #0
 800a92e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a930:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a934:	4618      	mov	r0, r3
 800a936:	3748      	adds	r7, #72	@ 0x48
 800a938:	46bd      	mov	sp, r7
 800a93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a93e:	bf00      	nop
 800a940:	58024400 	.word	0x58024400
 800a944:	03d09000 	.word	0x03d09000
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	0800b630 	.word	0x0800b630

0800a950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95c:	f003 0308 	and.w	r3, r3, #8
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01a      	beq.n	800aa66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa4e:	d10a      	bne.n	800aa66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	605a      	str	r2, [r3, #4]
  }
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b098      	sub	sp, #96	@ 0x60
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaa4:	f7f6 fcdc 	bl	8001460 <HAL_GetTick>
 800aaa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0308 	and.w	r3, r3, #8
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d12f      	bne.n	800ab18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aac0:	2200      	movs	r2, #0
 800aac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f88e 	bl	800abe8 <UART_WaitOnFlagUntilTimeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d022      	beq.n	800ab18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aae6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e6      	bne.n	800aad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e063      	b.n	800abe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d149      	bne.n	800abba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f857 	bl	800abe8 <UART_WaitOnFlagUntilTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d03c      	beq.n	800abba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e6      	bne.n	800ab40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3308      	adds	r3, #8
 800ab78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3308      	adds	r3, #8
 800ab90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab92:	61fa      	str	r2, [r7, #28]
 800ab94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	69b9      	ldr	r1, [r7, #24]
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	617b      	str	r3, [r7, #20]
   return(result);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e5      	bne.n	800ab72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e012      	b.n	800abe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3758      	adds	r7, #88	@ 0x58
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	4613      	mov	r3, r2
 800abf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf8:	e04f      	b.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d04b      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac02:	f7f6 fc2d 	bl	8001460 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d302      	bcc.n	800ac18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e04e      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d037      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b80      	cmp	r3, #128	@ 0x80
 800ac2e:	d034      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b40      	cmp	r3, #64	@ 0x40
 800ac34:	d031      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	f003 0308 	and.w	r3, r3, #8
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d110      	bne.n	800ac66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2208      	movs	r2, #8
 800ac4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f839 	bl	800acc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2208      	movs	r2, #8
 800ac56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e029      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac74:	d111      	bne.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f81f 	bl	800acc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e00f      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69da      	ldr	r2, [r3, #28]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	4013      	ands	r3, r2
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	bf0c      	ite	eq
 800acaa:	2301      	moveq	r3, #1
 800acac:	2300      	movne	r3, #0
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d0a0      	beq.n	800abfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b095      	sub	sp, #84	@ 0x54
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ace0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acea:	643b      	str	r3, [r7, #64]	@ 0x40
 800acec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e6      	bne.n	800accc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	4b1e      	ldr	r3, [pc, #120]	@ (800ad8c <UART_EndRxTransfer+0xc8>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e5      	bne.n	800acfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d118      	bne.n	800ad6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f023 0310 	bic.w	r3, r3, #16
 800ad4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6979      	ldr	r1, [r7, #20]
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	613b      	str	r3, [r7, #16]
   return(result);
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e6      	bne.n	800ad3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad80:	bf00      	nop
 800ad82:	3754      	adds	r7, #84	@ 0x54
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	effffffe 	.word	0xeffffffe

0800ad90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ada2:	2302      	movs	r3, #2
 800ada4:	e027      	b.n	800adf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2224      	movs	r2, #36	@ 0x24
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0201 	bic.w	r2, r2, #1
 800adcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800add4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e02d      	b.n	800ae76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2224      	movs	r2, #36	@ 0x24
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0201 	bic.w	r2, r2, #1
 800ae40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f850 	bl	800aefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e02d      	b.n	800aef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2224      	movs	r2, #36	@ 0x24
 800aea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 0201 	bic.w	r2, r2, #1
 800aebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	430a      	orrs	r2, r1
 800aed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f812 	bl	800aefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2220      	movs	r2, #32
 800aee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d108      	bne.n	800af1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af1c:	e031      	b.n	800af82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af1e:	2310      	movs	r3, #16
 800af20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af22:	2310      	movs	r3, #16
 800af24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	0e5b      	lsrs	r3, r3, #25
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	0f5b      	lsrs	r3, r3, #29
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	7b3a      	ldrb	r2, [r7, #12]
 800af4a:	4911      	ldr	r1, [pc, #68]	@ (800af90 <UARTEx_SetNbDataToProcess+0x94>)
 800af4c:	5c8a      	ldrb	r2, [r1, r2]
 800af4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af52:	7b3a      	ldrb	r2, [r7, #12]
 800af54:	490f      	ldr	r1, [pc, #60]	@ (800af94 <UARTEx_SetNbDataToProcess+0x98>)
 800af56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af58:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	7b7a      	ldrb	r2, [r7, #13]
 800af68:	4909      	ldr	r1, [pc, #36]	@ (800af90 <UARTEx_SetNbDataToProcess+0x94>)
 800af6a:	5c8a      	ldrb	r2, [r1, r2]
 800af6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af70:	7b7a      	ldrb	r2, [r7, #13]
 800af72:	4908      	ldr	r1, [pc, #32]	@ (800af94 <UARTEx_SetNbDataToProcess+0x98>)
 800af74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af76:	fb93 f3f2 	sdiv	r3, r3, r2
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	0800b648 	.word	0x0800b648
 800af94:	0800b650 	.word	0x0800b650

0800af98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af98:	b084      	sub	sp, #16
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	f107 001c 	add.w	r0, r7, #28
 800afa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d121      	bne.n	800aff6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	4b2c      	ldr	r3, [pc, #176]	@ (800b074 <USB_CoreInit+0xdc>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d105      	bne.n	800afea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 faaa 	bl	800b544 <USB_CoreReset>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]
 800aff4:	e01b      	b.n	800b02e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa9e 	bl	800b544 <USB_CoreReset>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b00c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b018:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b020:	e005      	b.n	800b02e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b026:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b02e:	7fbb      	ldrb	r3, [r7, #30]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d116      	bne.n	800b062 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b038:	b29a      	uxth	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b042:	4b0d      	ldr	r3, [pc, #52]	@ (800b078 <USB_CoreInit+0xe0>)
 800b044:	4313      	orrs	r3, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f043 0206 	orr.w	r2, r3, #6
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f043 0220 	orr.w	r2, r3, #32
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b06e:	b004      	add	sp, #16
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	ffbdffbf 	.word	0xffbdffbf
 800b078:	03ee0000 	.word	0x03ee0000

0800b07c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f023 0201 	bic.w	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d115      	bne.n	800b0ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b0cc:	200a      	movs	r0, #10
 800b0ce:	f7f6 f9d3 	bl	8001478 <HAL_Delay>
      ms += 10U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	330a      	adds	r3, #10
 800b0d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fa25 	bl	800b528 <USB_GetMode>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d01e      	beq.n	800b122 <USB_SetCurrentMode+0x84>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b0e8:	d9f0      	bls.n	800b0cc <USB_SetCurrentMode+0x2e>
 800b0ea:	e01a      	b.n	800b122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d115      	bne.n	800b11e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b0fe:	200a      	movs	r0, #10
 800b100:	f7f6 f9ba 	bl	8001478 <HAL_Delay>
      ms += 10U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	330a      	adds	r3, #10
 800b108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa0c 	bl	800b528 <USB_GetMode>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d005      	beq.n	800b122 <USB_SetCurrentMode+0x84>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2bc7      	cmp	r3, #199	@ 0xc7
 800b11a:	d9f0      	bls.n	800b0fe <USB_SetCurrentMode+0x60>
 800b11c:	e001      	b.n	800b122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e005      	b.n	800b12e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2bc8      	cmp	r3, #200	@ 0xc8
 800b126:	d101      	bne.n	800b12c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e000      	b.n	800b12e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b138:	b084      	sub	sp, #16
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b152:	2300      	movs	r3, #0
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	e009      	b.n	800b16c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	3340      	adds	r3, #64	@ 0x40
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	2200      	movs	r2, #0
 800b164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	3301      	adds	r3, #1
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	2b0e      	cmp	r3, #14
 800b170:	d9f2      	bls.n	800b158 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b172:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b176:	2b00      	cmp	r3, #0
 800b178:	d11c      	bne.n	800b1b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b188:	f043 0302 	orr.w	r3, r3, #2
 800b18c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b192:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e005      	b.n	800b1c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d10d      	bne.n	800b1f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1dc:	2100      	movs	r1, #0
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f968 	bl	800b4b4 <USB_SetDevSpeed>
 800b1e4:	e008      	b.n	800b1f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f963 	bl	800b4b4 <USB_SetDevSpeed>
 800b1ee:	e003      	b.n	800b1f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b1f0:	2103      	movs	r1, #3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f95e 	bl	800b4b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1f8:	2110      	movs	r1, #16
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f8fa 	bl	800b3f4 <USB_FlushTxFifo>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f924 	bl	800b458 <USB_FlushRxFifo>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b220:	461a      	mov	r2, r3
 800b222:	2300      	movs	r3, #0
 800b224:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b22c:	461a      	mov	r2, r3
 800b22e:	2300      	movs	r3, #0
 800b230:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b238:	461a      	mov	r2, r3
 800b23a:	2300      	movs	r3, #0
 800b23c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e043      	b.n	800b2cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b25a:	d118      	bne.n	800b28e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b26e:	461a      	mov	r2, r3
 800b270:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e013      	b.n	800b2a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b284:	461a      	mov	r2, r3
 800b286:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	e008      	b.n	800b2a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b29a:	461a      	mov	r2, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b2c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d3b5      	bcc.n	800b244 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e043      	b.n	800b366 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2f4:	d118      	bne.n	800b328 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b308:	461a      	mov	r2, r3
 800b30a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	e013      	b.n	800b33a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31e:	461a      	mov	r2, r3
 800b320:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	e008      	b.n	800b33a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b334:	461a      	mov	r2, r3
 800b336:	2300      	movs	r3, #0
 800b338:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b346:	461a      	mov	r2, r3
 800b348:	2300      	movs	r3, #0
 800b34a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b358:	461a      	mov	r2, r3
 800b35a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b35e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3301      	adds	r3, #1
 800b364:	613b      	str	r3, [r7, #16]
 800b366:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b36a:	461a      	mov	r2, r3
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	4293      	cmp	r3, r2
 800b370:	d3b5      	bcc.n	800b2de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b384:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b392:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d105      	bne.n	800b3a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	f043 0210 	orr.w	r2, r3, #16
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699a      	ldr	r2, [r3, #24]
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b3ec <USB_DevInit+0x2b4>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	f043 0208 	orr.w	r2, r3, #8
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d105      	bne.n	800b3dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699a      	ldr	r2, [r3, #24]
 800b3d4:	4b06      	ldr	r3, [pc, #24]	@ (800b3f0 <USB_DevInit+0x2b8>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3e8:	b004      	add	sp, #16
 800b3ea:	4770      	bx	lr
 800b3ec:	803c3800 	.word	0x803c3800
 800b3f0:	40000004 	.word	0x40000004

0800b3f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3301      	adds	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b40e:	d901      	bls.n	800b414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e01b      	b.n	800b44c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	daf2      	bge.n	800b402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b41c:	2300      	movs	r3, #0
 800b41e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	019b      	lsls	r3, r3, #6
 800b424:	f043 0220 	orr.w	r2, r3, #32
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b438:	d901      	bls.n	800b43e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b43a:	2303      	movs	r3, #3
 800b43c:	e006      	b.n	800b44c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	f003 0320 	and.w	r3, r3, #32
 800b446:	2b20      	cmp	r3, #32
 800b448:	d0f0      	beq.n	800b42c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b470:	d901      	bls.n	800b476 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e018      	b.n	800b4a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	daf2      	bge.n	800b464 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2210      	movs	r2, #16
 800b486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3301      	adds	r3, #1
 800b48c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b494:	d901      	bls.n	800b49a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e006      	b.n	800b4a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	f003 0310 	and.w	r3, r3, #16
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d0f0      	beq.n	800b488 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	68f9      	ldr	r1, [r7, #12]
 800b4d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	f003 0301 	and.w	r3, r3, #1
}
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3301      	adds	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b55c:	d901      	bls.n	800b562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e01b      	b.n	800b59a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	daf2      	bge.n	800b550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	f043 0201 	orr.w	r2, r3, #1
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b586:	d901      	bls.n	800b58c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e006      	b.n	800b59a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b01      	cmp	r3, #1
 800b596:	d0f0      	beq.n	800b57a <USB_CoreReset+0x36>

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <memset>:
 800b5a6:	4402      	add	r2, r0
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d100      	bne.n	800b5b0 <memset+0xa>
 800b5ae:	4770      	bx	lr
 800b5b0:	f803 1b01 	strb.w	r1, [r3], #1
 800b5b4:	e7f9      	b.n	800b5aa <memset+0x4>
	...

0800b5b8 <__libc_init_array>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b5f0 <__libc_init_array+0x38>)
 800b5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b5f4 <__libc_init_array+0x3c>)
 800b5be:	1b64      	subs	r4, r4, r5
 800b5c0:	10a4      	asrs	r4, r4, #2
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	42a6      	cmp	r6, r4
 800b5c6:	d109      	bne.n	800b5dc <__libc_init_array+0x24>
 800b5c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b5f8 <__libc_init_array+0x40>)
 800b5ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b5fc <__libc_init_array+0x44>)
 800b5cc:	f000 f818 	bl	800b600 <_init>
 800b5d0:	1b64      	subs	r4, r4, r5
 800b5d2:	10a4      	asrs	r4, r4, #2
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	42a6      	cmp	r6, r4
 800b5d8:	d105      	bne.n	800b5e6 <__libc_init_array+0x2e>
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e0:	4798      	blx	r3
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7ee      	b.n	800b5c4 <__libc_init_array+0xc>
 800b5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ea:	4798      	blx	r3
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	e7f2      	b.n	800b5d6 <__libc_init_array+0x1e>
 800b5f0:	0800b660 	.word	0x0800b660
 800b5f4:	0800b660 	.word	0x0800b660
 800b5f8:	0800b660 	.word	0x0800b660
 800b5fc:	0800b664 	.word	0x0800b664

0800b600 <_init>:
 800b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b602:	bf00      	nop
 800b604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b606:	bc08      	pop	{r3}
 800b608:	469e      	mov	lr, r3
 800b60a:	4770      	bx	lr

0800b60c <_fini>:
 800b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60e:	bf00      	nop
 800b610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b612:	bc08      	pop	{r3}
 800b614:	469e      	mov	lr, r3
 800b616:	4770      	bx	lr
