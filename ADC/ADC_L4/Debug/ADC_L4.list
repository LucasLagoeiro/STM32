
ADC_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a0c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004ba0  08004ba0  00005ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be8  08004be8  00005be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf0  08004bf0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bf8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08004c04  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004c04  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb9c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223f  00000000  00000000  00015bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00017e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7b  00000000  00000000  00018bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eb6  00000000  00000000  00019643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f874  00000000  00000000  0003c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc276  00000000  00000000  0004bd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  00128028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0012b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b88 	.word	0x08004b88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004b88 	.word	0x08004b88

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fba2 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f834 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f968 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f948 	bl	8000768 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f916 	bl	8000708 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004dc:	f000 f87e 	bl	80005dc <MX_ADC1_Init>
  MX_DAC1_Init();
 80004e0:	f000 f8e0 	bl	80006a4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	4810      	ldr	r0, [pc, #64]	@ (8000528 <main+0x64>)
 80004e8:	f001 ff4f 	bl	800238a <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004ec:	217f      	movs	r1, #127	@ 0x7f
 80004ee:	480f      	ldr	r0, [pc, #60]	@ (800052c <main+0x68>)
 80004f0:	f001 fdb8 	bl	8002064 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	490e      	ldr	r1, [pc, #56]	@ (8000530 <main+0x6c>)
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <main+0x68>)
 80004fa:	f000 ff6f 	bl	80013dc <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <main+0x70>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	4808      	ldr	r0, [pc, #32]	@ (8000528 <main+0x64>)
 8000508:	f001 ff78 	bl	80023fc <HAL_DAC_SetValue>
	   value_dac++;
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <main+0x70>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <main+0x70>)
 8000514:	6013      	str	r3, [r2, #0]
	   if(value_dac>4095) {
 8000516:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <main+0x70>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800051e:	d3ee      	bcc.n	80004fe <main+0x3a>
		 value_dac=0;
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <main+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
 8000526:	e7ea      	b.n	80004fe <main+0x3a>
 8000528:	200000d8 	.word	0x200000d8
 800052c:	20000028 	.word	0x20000028
 8000530:	20000174 	.word	0x20000174
 8000534:	20000178 	.word	0x20000178

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	@ 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	@ 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 faf1 	bl	8004b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055e:	f002 fc0b 	bl	8002d78 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f982 	bl	8000870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000576:	2340      	movs	r3, #64	@ 0x40
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fc42 	bl	8002e24 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 f963 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 f842 	bl	800364c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f94f 	bl	8000870 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	@ 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_ADC1_Init+0xbc>)
 80005f4:	4a29      	ldr	r2, [pc, #164]	@ (800069c <MX_ADC1_Init+0xc0>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80005f8:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <MX_ADC1_Init+0xbc>)
 80005fa:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC1_Init+0xbc>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000614:	2204      	movs	r2, #4
 8000616:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC1_Init+0xbc>)
 800061a:	2200      	movs	r2, #0
 800061c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000620:	2201      	movs	r2, #1
 8000622:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000626:	2201      	movs	r2, #1
 8000628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC1_Init+0xbc>)
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC1_Init+0xbc>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4810      	ldr	r0, [pc, #64]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000656:	f000 fd7b 	bl	8001150 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000660:	f000 f906 	bl	8000870 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_ADC1_Init+0xc4>)
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000668:	2306      	movs	r3, #6
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800066c:	2305      	movs	r3, #5
 800066e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000670:	237f      	movs	r3, #127	@ 0x7f
 8000672:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000674:	2304      	movs	r3, #4
 8000676:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC1_Init+0xbc>)
 8000682:	f000 ff4d 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800068c:	f000 f8f0 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000028 	.word	0x20000028
 800069c:	50040000 	.word	0x50040000
 80006a0:	19200040 	.word	0x19200040

080006a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2224      	movs	r2, #36	@ 0x24
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fa3c 	bl	8004b2e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_DAC1_Init+0x5c>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_DAC1_Init+0x60>)
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <MX_DAC1_Init+0x5c>)
 80006be:	f001 fe42 	bl	8002346 <HAL_DAC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006c8:	f000 f8d2 	bl	8000870 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <MX_DAC1_Init+0x5c>)
 80006e8:	f001 fead 	bl	8002446 <HAL_DAC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8bd 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000d8 	.word	0x200000d8
 8000704:	40007400 	.word	0x40007400

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <MX_USART2_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART2_UART_Init+0x58>)
 800074c:	f003 fd00 	bl	8004150 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f88b 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec
 8000764:	40004400 	.word	0x40004400

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x38>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6493      	str	r3, [r2, #72]	@ 0x48
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x38>)
 800077c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200b      	movs	r0, #11
 800078c:	f001 fda5 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000790:	200b      	movs	r0, #11
 8000792:	f001 fdbe 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a2a      	ldr	r2, [pc, #168]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b28      	ldr	r3, [pc, #160]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a24      	ldr	r2, [pc, #144]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a18      	ldr	r2, [pc, #96]	@ (8000868 <MX_GPIO_Init+0xc4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f002 fa83 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <MX_GPIO_Init+0xc8>)
 800083e:	f002 f8fb 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000842:	2320      	movs	r3, #32
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f002 f8ec 	bl	8002a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	@ 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	48000800 	.word	0x48000800

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	@ 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0a4      	sub	sp, #144	@ 0x90
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2268      	movs	r2, #104	@ 0x68
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 f922 	bl	8004b2e <memset>
  if(hadc->Instance==ADC1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a3c      	ldr	r2, [pc, #240]	@ (80009e0 <HAL_ADC_MspInit+0x11c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d170      	bne.n	80009d6 <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008fe:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800090c:	2307      	movs	r3, #7
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f8b6 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800092e:	f7ff ff9f 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 8000938:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a25      	ldr	r2, [pc, #148]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <HAL_ADC_MspInit+0x120>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000962:	2302      	movs	r3, #2
 8000964:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000966:	230b      	movs	r3, #11
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f002 f85c 	bl	8002a38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 8000982:	4a1a      	ldr	r2, [pc, #104]	@ (80009ec <HAL_ADC_MspInit+0x128>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 800099a:	2280      	movs	r2, #128	@ 0x80
 800099c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009b0:	2220      	movs	r2, #32
 80009b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009bc:	f001 fe44 	bl	8002648 <HAL_DMA_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_ADC_MspInit+0x106>
    {
      Error_Handler();
 80009c6:	f7ff ff53 	bl	8000870 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80009d0:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <HAL_ADC_MspInit+0x124>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3790      	adds	r7, #144	@ 0x90
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	50040000 	.word	0x50040000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	20000090 	.word	0x20000090
 80009ec:	40020008 	.word	0x40020008

080009f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <HAL_DAC_MspInit+0x74>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d124      	bne.n	8000a5c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_DAC_MspInit+0x78>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a42:	2310      	movs	r3, #16
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f001 ffee 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40007400 	.word	0x40007400
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0a4      	sub	sp, #144	@ 0x90
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2268      	movs	r2, #104	@ 0x68
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f84e 	bl	8004b2e <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a21      	ldr	r2, [pc, #132]	@ (8000b1c <HAL_UART_MspInit+0xb0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d13a      	bne.n	8000b12 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fff3 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff fedc 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abc:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0e:	f001 ff93 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3790      	adds	r7, #144	@ 0x90
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f8a5 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <DMA1_Channel1_IRQHandler+0x10>)
 8000b8a:	f001 fe75 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000090 	.word	0x20000090

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 ffa9 	bl	8004b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fc69 	bl	80004c4 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000180 	.word	0x20000180

08000c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_Init+0x3c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_Init+0x3c>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f001 fb4c 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f80f 	bl	8000c50 <HAL_InitTick>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	e001      	b.n	8000c42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3e:	f7ff fe1d 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d023      	beq.n	8000cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_InitTick+0x70>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fb57 	bl	800232e <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d809      	bhi.n	8000ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f001 fb21 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_InitTick+0x74>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e001      	b.n	8000cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	2000017c 	.word	0x2000017c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000017c 	.word	0x2000017c

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3360      	adds	r3, #96	@ 0x60
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <LL_ADC_SetOffset+0x44>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	4313      	orrs	r3, r2
 8000de8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000df0:	bf00      	nop
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	03fff000 	.word	0x03fff000

08000e00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3360      	adds	r3, #96	@ 0x60
 8000e0e:	461a      	mov	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3360      	adds	r3, #96	@ 0x60
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	615a      	str	r2, [r3, #20]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3330      	adds	r3, #48	@ 0x30
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	211f      	movs	r1, #31
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0e9b      	lsrs	r3, r3, #26
 8000ee6:	f003 011f 	and.w	r1, r3, #31
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3314      	adds	r3, #20
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	0e5b      	lsrs	r3, r3, #25
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	0d1b      	lsrs	r3, r3, #20
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	2107      	movs	r1, #7
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	0d1b      	lsrs	r3, r3, #20
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0318 	and.w	r3, r3, #24
 8000f7e:	4908      	ldr	r1, [pc, #32]	@ (8000fa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f80:	40d9      	lsrs	r1, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	400b      	ands	r3, r1
 8000f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	0007ffff 	.word	0x0007ffff

08000fa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fdc:	d101      	bne.n	8000fe2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001004:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800102c:	d101      	bne.n	8001032 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001050:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001054:	f043 0201 	orr.w	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800107c:	f043 0202 	orr.w	r2, r3, #2
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <LL_ADC_IsEnabled+0x18>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <LL_ADC_IsEnabled+0x1a>
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d101      	bne.n	80010ce <LL_ADC_IsDisableOngoing+0x18>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <LL_ADC_IsDisableOngoing+0x1a>
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f0:	f043 0204 	orr.w	r2, r3, #4
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b04      	cmp	r3, #4
 8001116:	d101      	bne.n	800111c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b08      	cmp	r3, #8
 800113c:	d101      	bne.n	8001142 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e129      	b.n	80013be <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	2b00      	cmp	r3, #0
 8001176:	d109      	bne.n	800118c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fba3 	bl	80008c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff19 	bl	8000fc8 <LL_ADC_IsDeepPowerDownEnabled>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff feff 	bl	8000fa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff34 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d115      	bne.n	80011e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff18 	bl	8000ff0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c0:	4b81      	ldr	r3, [pc, #516]	@ (80013c8 <HAL_ADC_Init+0x278>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	4a81      	ldr	r2, [pc, #516]	@ (80013cc <HAL_ADC_Init+0x27c>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	3301      	adds	r3, #1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff16 	bl	8001018 <LL_ADC_IsInternalRegulatorEnabled>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	f043 0210 	orr.w	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff76 	bl	8001104 <LL_ADC_REG_IsConversionOngoing>
 8001218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80c2 	bne.w	80013ac <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 80be 	bne.w	80013ac <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001238:	f043 0202 	orr.w	r2, r3, #2
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff23 	bl	8001090 <LL_ADC_IsEnabled>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001250:	485f      	ldr	r0, [pc, #380]	@ (80013d0 <HAL_ADC_Init+0x280>)
 8001252:	f7ff ff1d 	bl	8001090 <LL_ADC_IsEnabled>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	485c      	ldr	r0, [pc, #368]	@ (80013d4 <HAL_ADC_Init+0x284>)
 8001264:	f7ff fd74 	bl	8000d50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e5b      	ldrb	r3, [r3, #25]
 800126c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001272:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001278:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800127e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001286:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d106      	bne.n	80012a4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	3b01      	subs	r3, #1
 800129c:	045b      	lsls	r3, r3, #17
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <HAL_ADC_Init+0x288>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff26 	bl	800112a <LL_ADC_INJ_IsConversionOngoing>
 80012de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d140      	bne.n	8001368 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d13d      	bne.n	8001368 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
 80012f4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012f6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800130e:	f023 0306 	bic.w	r3, r3, #6
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	430b      	orrs	r3, r1
 800131a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001322:	2b01      	cmp	r3, #1
 8001324:	d118      	bne.n	8001358 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800133c:	4311      	orrs	r1, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001348:	430a      	orrs	r2, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10c      	bne.n	800138a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f023 010f 	bic.w	r1, r3, #15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
 8001388:	e007      	b.n	800139a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020f 	bic.w	r2, r2, #15
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80013aa:	e007      	b.n	80013bc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	053e2d63 	.word	0x053e2d63
 80013d0:	50040000 	.word	0x50040000
 80013d4:	50040300 	.word	0x50040300
 80013d8:	fff0c007 	.word	0xfff0c007

080013dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe89 	bl	8001104 <LL_ADC_REG_IsConversionOngoing>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d167      	bne.n	80014c8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Start_DMA+0x2a>
 8001402:	2302      	movs	r3, #2
 8001404:	e063      	b.n	80014ce <HAL_ADC_Start_DMA+0xf2>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fc82 	bl	8001d18 <ADC_Enable>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d14f      	bne.n	80014be <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001442:	f023 0206 	bic.w	r2, r3, #6
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	65da      	str	r2, [r3, #92]	@ 0x5c
 800144a:	e002      	b.n	8001452 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001456:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_ADC_Start_DMA+0xfc>)
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <HAL_ADC_Start_DMA+0x100>)
 8001460:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001466:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <HAL_ADC_Start_DMA+0x104>)
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	221c      	movs	r2, #28
 8001470:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0210 	orr.w	r2, r2, #16
 8001488:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3340      	adds	r3, #64	@ 0x40
 80014a4:	4619      	mov	r1, r3
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f001 f985 	bl	80027b8 <HAL_DMA_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe10 	bl	80010dc <LL_ADC_REG_StartConversion>
 80014bc:	e006      	b.n	80014cc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80014c6:	e001      	b.n	80014cc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014c8:	2302      	movs	r3, #2
 80014ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08001ee3 	.word	0x08001ee3
 80014dc:	08001fbb 	.word	0x08001fbb
 80014e0:	08001fd7 	.word	0x08001fd7

080014e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0b6      	sub	sp, #216	@ 0xd8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x22>
 800153e:	2302      	movs	r3, #2
 8001540:	e3d5      	b.n	8001cee <HAL_ADC_ConfigChannel+0x7ce>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fdd8 	bl	8001104 <LL_ADC_REG_IsConversionOngoing>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 83ba 	bne.w	8001cd0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d824      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	3b02      	subs	r3, #2
 8001572:	2b03      	cmp	r3, #3
 8001574:	d81b      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0x8e>
 8001576:	a201      	add	r2, pc, #4	@ (adr r2, 800157c <HAL_ADC_ConfigChannel+0x5c>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001595 	.word	0x08001595
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015a5 	.word	0x080015a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800158c:	230c      	movs	r3, #12
 800158e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001592:	e010      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001594:	2312      	movs	r3, #18
 8001596:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800159a:	e00c      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800159c:	2318      	movs	r3, #24
 800159e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015a2:	e008      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015ac:	e003      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015ae:	2306      	movs	r3, #6
 80015b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80015c4:	f7ff fc73 	bl	8000eae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd99 	bl	8001104 <LL_ADC_REG_IsConversionOngoing>
 80015d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fda5 	bl	800112a <LL_ADC_INJ_IsConversionOngoing>
 80015e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 81bf 	bne.w	800196c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 81ba 	bne.w	800196c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001600:	d10f      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fc7a 	bl	8000f06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fc21 	bl	8000e62 <LL_ADC_SetSamplingTimeCommonConfig>
 8001620:	e00e      	b.n	8001640 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	f7ff fc69 	bl	8000f06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc11 	bl	8000e62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d00a      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001672:	f7ff fba1 	bl	8000db8 <LL_ADC_SetOffset>
 8001676:	e179      	b.n	800196c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbbe 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x184>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fbb3 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	0e9b      	lsrs	r3, r3, #26
 800169e:	f003 021f 	and.w	r2, r3, #31
 80016a2:	e01e      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1c2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fba8 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e004      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80016d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x1da>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0e9b      	lsrs	r3, r3, #26
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	e018      	b.n	800172c <HAL_ADC_ConfigChannel+0x20c>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800170e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800171e:	2320      	movs	r3, #32
 8001720:	e004      	b.n	800172c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800172c:	429a      	cmp	r2, r3
 800172e:	d106      	bne.n	800173e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fb77 	bl	8000e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fb5b 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10a      	bne.n	800176a <HAL_ADC_ConfigChannel+0x24a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb50 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	e01e      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x288>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb45 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001788:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800178c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e004      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800179c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x2a0>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	e018      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x2d2>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80017d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80017dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	e004      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80017e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d106      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2200      	movs	r2, #0
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fb14 	bl	8000e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2102      	movs	r1, #2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff faf8 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x310>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2102      	movs	r1, #2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff faed 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	0e9b      	lsrs	r3, r3, #26
 800182a:	f003 021f 	and.w	r2, r3, #31
 800182e:	e01e      	b.n	800186e <HAL_ADC_ConfigChannel+0x34e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fae2 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800184e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800185e:	2320      	movs	r3, #32
 8001860:	e004      	b.n	800186c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x366>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	e014      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x390>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001896:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800189a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80018a2:	2320      	movs	r3, #32
 80018a4:	e004      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80018a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d106      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fab5 	bl	8000e2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2103      	movs	r1, #3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa99 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x3ce>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fa8e 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	e017      	b.n	800191e <HAL_ADC_ConfigChannel+0x3fe>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2103      	movs	r1, #3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa83 	bl	8000e00 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001908:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800190a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x416>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0e9b      	lsrs	r3, r3, #26
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	e011      	b.n	800195a <HAL_ADC_ConfigChannel+0x43a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001946:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e003      	b.n	800195a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800195a:	429a      	cmp	r2, r3
 800195c:	d106      	bne.n	800196c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	2103      	movs	r1, #3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fa60 	bl	8000e2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fb8d 	bl	8001090 <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 813f 	bne.w	8001bfc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	f7ff fae6 	bl	8000f5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	f040 8130 	bne.w	8001bfc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x4a4>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	3301      	adds	r3, #1
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e019      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x4d8>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80019d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80019d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e003      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80019e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	bf94      	ite	ls
 80019f2:	2301      	movls	r3, #1
 80019f4:	2300      	movhi	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d079      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d107      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x4f8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	3301      	adds	r3, #1
 8001a10:	069b      	lsls	r3, r3, #26
 8001a12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a16:	e015      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x524>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a28:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x544>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	3301      	adds	r3, #1
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	e017      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x574>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e003      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	ea42 0103 	orr.w	r1, r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x59a>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	051b      	lsls	r3, r3, #20
 8001ab8:	e018      	b.n	8001aec <HAL_ADC_ConfigChannel+0x5cc>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e003      	b.n	8001ade <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aec:	430b      	orrs	r3, r1
 8001aee:	e080      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x5ec>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	3301      	adds	r3, #1
 8001b04:	069b      	lsls	r3, r3, #26
 8001b06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b0a:	e015      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x618>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001b24:	2320      	movs	r3, #32
 8001b26:	e003      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x638>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	e017      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x668>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	61bb      	str	r3, [r7, #24]
  return result;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	ea42 0103 	orr.w	r1, r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x694>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b1e      	subs	r3, #30
 8001bac:	051b      	lsls	r3, r3, #20
 8001bae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	e01d      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x6d0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
  return result;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e005      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x6bc>
 8001bd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 021f 	and.w	r2, r3, #31
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3b1e      	subs	r3, #30
 8001bea:	051b      	lsls	r3, r3, #20
 8001bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7ff f985 	bl	8000f06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d06c      	beq.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c08:	483c      	ldr	r0, [pc, #240]	@ (8001cfc <HAL_ADC_ConfigChannel+0x7dc>)
 8001c0a:	f7ff f8c7 	bl	8000d9c <LL_ADC_GetCommonPathInternalCh>
 8001c0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3a      	ldr	r2, [pc, #232]	@ (8001d00 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d127      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d121      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a35      	ldr	r2, [pc, #212]	@ (8001d04 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d157      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	482f      	ldr	r0, [pc, #188]	@ (8001cfc <HAL_ADC_ConfigChannel+0x7dc>)
 8001c3e:	f7ff f89a 	bl	8000d76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c42:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <HAL_ADC_ConfigChannel+0x7e8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <HAL_ADC_ConfigChannel+0x7ec>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f9      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a27      	ldr	r2, [pc, #156]	@ (8001d10 <HAL_ADC_ConfigChannel+0x7f0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d113      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d12a      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c94:	4619      	mov	r1, r3
 8001c96:	4819      	ldr	r0, [pc, #100]	@ (8001cfc <HAL_ADC_ConfigChannel+0x7dc>)
 8001c98:	f7ff f86d 	bl	8000d76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c9c:	e021      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d11c      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d111      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <HAL_ADC_ConfigChannel+0x7dc>)
 8001cca:	f7ff f854 	bl	8000d76 <LL_ADC_SetCommonPathInternalCh>
 8001cce:	e008      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	37d8      	adds	r7, #216	@ 0xd8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	80080000 	.word	0x80080000
 8001cfc:	50040300 	.word	0x50040300
 8001d00:	c7520000 	.word	0xc7520000
 8001d04:	50040000 	.word	0x50040000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	053e2d63 	.word	0x053e2d63
 8001d10:	cb840000 	.word	0xcb840000
 8001d14:	80000001 	.word	0x80000001

08001d18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f9b1 	bl	8001090 <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d169      	bne.n	8001e08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <ADC_Enable+0xfc>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e055      	b.n	8001e0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f96c 	bl	8001040 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d68:	482b      	ldr	r0, [pc, #172]	@ (8001e18 <ADC_Enable+0x100>)
 8001d6a:	f7ff f817 	bl	8000d9c <LL_ADC_GetCommonPathInternalCh>
 8001d6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <ADC_Enable+0x104>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a28      	ldr	r2, [pc, #160]	@ (8001e20 <ADC_Enable+0x108>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d92:	e002      	b.n	8001d9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001da0:	f7fe ffa6 	bl	8000cf0 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001da6:	e028      	b.n	8001dfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f96f 	bl	8001090 <LL_ADC_IsEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f93f 	bl	8001040 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dc2:	f7fe ff95 	bl	8000cf0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d914      	bls.n	8001dfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d00d      	beq.n	8001dfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e007      	b.n	8001e0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d1cf      	bne.n	8001da8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	8000003f 	.word	0x8000003f
 8001e18:	50040300 	.word	0x50040300
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	053e2d63 	.word	0x053e2d63

08001e24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f940 	bl	80010b6 <LL_ADC_IsDisableOngoing>
 8001e36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f927 	bl	8001090 <LL_ADC_IsEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d047      	beq.n	8001ed8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d144      	bne.n	8001ed8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030d 	and.w	r3, r3, #13
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10c      	bne.n	8001e76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f901 	bl	8001068 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e6e:	f7fe ff3f 	bl	8000cf0 <HAL_GetTick>
 8001e72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e74:	e029      	b.n	8001eca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e023      	b.n	8001eda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e92:	f7fe ff2d 	bl	8000cf0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d914      	bls.n	8001eca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e007      	b.n	8001eda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1dc      	bne.n	8001e92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d14b      	bne.n	8001f94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d021      	beq.n	8001f5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe ffb4 	bl	8000e88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d032      	beq.n	8001f8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d12b      	bne.n	8001f8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11f      	bne.n	8001f8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f58:	e018      	b.n	8001f8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d111      	bne.n	8001f8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff faa9 	bl	80014e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f92:	e00e      	b.n	8001fb2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f7ff fab3 	bl	800150c <HAL_ADC_ErrorCallback>
}
 8001fa6:	e004      	b.n	8001fb2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fa95 	bl	80014f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff fa85 	bl	800150c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_ADC_StartCalibration>:
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002026:	4313      	orrs	r3, r2
 8002028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsCalibrationOnGoing>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800204c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_ADCEx_Calibration_Start+0x1c>
 800207c:	2302      	movs	r3, #2
 800207e:	e04d      	b.n	800211c <HAL_ADCEx_Calibration_Start+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fecb 	bl	8001e24 <ADC_Disable>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d136      	bne.n	8002106 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020a0:	f023 0302 	bic.w	r3, r3, #2
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ffa9 	bl	800200a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80020b8:	e014      	b.n	80020e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3301      	adds	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80020c6:	d30d      	bcc.n	80020e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f023 0312 	bic.w	r3, r3, #18
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e01b      	b.n	800211c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ffa7 	bl	800203c <LL_ADC_IsCalibrationOnGoing>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e2      	bne.n	80020ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58
 8002104:	e005      	b.n	8002112 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e014      	b.n	8002382 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	791b      	ldrb	r3, [r3, #4]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe fb41 	bl	80009f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	795b      	ldrb	r3, [r3, #5]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_DAC_Start+0x16>
 800239c:	2302      	movs	r3, #2
 800239e:	e027      	b.n	80023f0 <HAL_DAC_Start+0x66>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */


#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80023ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80023d0:	d107      	bne.n	80023e2 <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	3308      	adds	r3, #8
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e004      	b.n	8002430 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	3314      	adds	r3, #20
 800242e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b088      	sub	sp, #32
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	795b      	ldrb	r3, [r3, #5]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_DAC_ConfigChannel+0x1c>
 800245e:	2302      	movs	r3, #2
 8002460:	e0ee      	b.n	8002640 <HAL_DAC_ConfigChannel+0x1fa>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2202      	movs	r2, #2
 800246c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d15b      	bne.n	800252e <HAL_DAC_ConfigChannel+0xe8>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002476:	f7fe fc3b 	bl	8000cf0 <HAL_GetTick>
 800247a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d128      	bne.n	80024d4 <HAL_DAC_ConfigChannel+0x8e>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002482:	e018      	b.n	80024b6 <HAL_DAC_ConfigChannel+0x70>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002484:	f7fe fc34 	bl	8000cf0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d911      	bls.n	80024b6 <HAL_DAC_ConfigChannel+0x70>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_DAC_ConfigChannel+0x70>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f043 0208 	orr.w	r2, r3, #8
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2203      	movs	r2, #3
 80024b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0c4      	b.n	8002640 <HAL_DAC_ConfigChannel+0x1fa>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1df      	bne.n	8002484 <HAL_DAC_ConfigChannel+0x3e>
          }
        }
      }
      HAL_Delay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe fc1f 	bl	8000d08 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	6992      	ldr	r2, [r2, #24]
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	ea02 0103 	and.w	r1, r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	21ff      	movs	r1, #255	@ 0xff
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	ea02 0103 	and.w	r1, r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d11d      	bne.n	8002572 <HAL_DAC_ConfigChannel+0x12c>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	431a      	orrs	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	22c0      	movs	r2, #192	@ 0xc0
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e098      	b.n	800278c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <HAL_DMA_Init+0x150>)
 8002662:	429a      	cmp	r2, r3
 8002664:	d80f      	bhi.n	8002686 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b4b      	ldr	r3, [pc, #300]	@ (800279c <HAL_DMA_Init+0x154>)
 800266e:	4413      	add	r3, r2
 8002670:	4a4b      	ldr	r2, [pc, #300]	@ (80027a0 <HAL_DMA_Init+0x158>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	009a      	lsls	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a48      	ldr	r2, [pc, #288]	@ (80027a4 <HAL_DMA_Init+0x15c>)
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40
 8002684:	e00e      	b.n	80026a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <HAL_DMA_Init+0x160>)
 800268e:	4413      	add	r3, r2
 8002690:	4a43      	ldr	r2, [pc, #268]	@ (80027a0 <HAL_DMA_Init+0x158>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a42      	ldr	r2, [pc, #264]	@ (80027ac <HAL_DMA_Init+0x164>)
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026fe:	d039      	beq.n	8002774 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_DMA_Init+0x15c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11a      	bne.n	8002740 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800270a:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <HAL_DMA_Init+0x168>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f003 031c 	and.w	r3, r3, #28
 8002716:	210f      	movs	r1, #15
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4924      	ldr	r1, [pc, #144]	@ (80027b0 <HAL_DMA_Init+0x168>)
 8002720:	4013      	ands	r3, r2
 8002722:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002724:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_DMA_Init+0x168>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	491d      	ldr	r1, [pc, #116]	@ (80027b0 <HAL_DMA_Init+0x168>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
 800273e:	e019      	b.n	8002774 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002740:	4b1c      	ldr	r3, [pc, #112]	@ (80027b4 <HAL_DMA_Init+0x16c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	210f      	movs	r1, #15
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	4917      	ldr	r1, [pc, #92]	@ (80027b4 <HAL_DMA_Init+0x16c>)
 8002756:	4013      	ands	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800275a:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <HAL_DMA_Init+0x16c>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f003 031c 	and.w	r3, r3, #28
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	4911      	ldr	r1, [pc, #68]	@ (80027b4 <HAL_DMA_Init+0x16c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40020407 	.word	0x40020407
 800279c:	bffdfff8 	.word	0xbffdfff8
 80027a0:	cccccccd 	.word	0xcccccccd
 80027a4:	40020000 	.word	0x40020000
 80027a8:	bffdfbf8 	.word	0xbffdfbf8
 80027ac:	40020400 	.word	0x40020400
 80027b0:	400200a8 	.word	0x400200a8
 80027b4:	400204a8 	.word	0x400204a8

080027b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x20>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e04b      	b.n	8002870 <HAL_DMA_Start_IT+0xb8>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d13a      	bne.n	8002862 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f8e0 	bl	80029d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 020e 	orr.w	r2, r2, #14
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00f      	b.n	8002850 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 020a 	orr.w	r2, r2, #10
 800284e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e005      	b.n	800286e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800286e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	f003 031c 	and.w	r3, r3, #28
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d026      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x7a>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d021      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f003 021c 	and.w	r2, r3, #28
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2104      	movs	r1, #4
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d071      	beq.n	80029cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028f0:	e06c      	b.n	80029cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f003 031c 	and.w	r3, r3, #28
 80028fa:	2202      	movs	r2, #2
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_DMA_IRQHandler+0xec>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d029      	beq.n	8002964 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 020a 	bic.w	r2, r2, #10
 800292c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f003 021c 	and.w	r2, r3, #28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2102      	movs	r1, #2
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d038      	beq.n	80029cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002962:	e033      	b.n	80029cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	f003 031c 	and.w	r3, r3, #28
 800296c:	2208      	movs	r2, #8
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02a      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d025      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 020e 	bic.w	r2, r2, #14
 8002990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f003 021c 	and.w	r2, r3, #28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
}
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e8:	f003 021c 	and.w	r2, r3, #28
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d108      	bne.n	8002a1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a18:	e007      	b.n	8002a2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e154      	b.n	8002cf2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8146 	beq.w	8002cec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d005      	beq.n	8002a78 <HAL_GPIO_Init+0x40>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d130      	bne.n	8002ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aae:	2201      	movs	r2, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0201 	and.w	r2, r3, #1
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d017      	beq.n	8002b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d123      	bne.n	8002b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	6939      	ldr	r1, [r7, #16]
 8002b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80a0 	beq.w	8002cec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bac:	4b58      	ldr	r3, [pc, #352]	@ (8002d10 <HAL_GPIO_Init+0x2d8>)
 8002bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb0:	4a57      	ldr	r2, [pc, #348]	@ (8002d10 <HAL_GPIO_Init+0x2d8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bb8:	4b55      	ldr	r3, [pc, #340]	@ (8002d10 <HAL_GPIO_Init+0x2d8>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bc4:	4a53      	ldr	r2, [pc, #332]	@ (8002d14 <HAL_GPIO_Init+0x2dc>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bee:	d019      	beq.n	8002c24 <HAL_GPIO_Init+0x1ec>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a49      	ldr	r2, [pc, #292]	@ (8002d18 <HAL_GPIO_Init+0x2e0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1e8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a48      	ldr	r2, [pc, #288]	@ (8002d1c <HAL_GPIO_Init+0x2e4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a47      	ldr	r2, [pc, #284]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1e0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a46      	ldr	r2, [pc, #280]	@ (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1dc>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e008      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c14:	2307      	movs	r3, #7
 8002c16:	e006      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e004      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e002      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_GPIO_Init+0x1ee>
 8002c24:	2300      	movs	r3, #0
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c36:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_GPIO_Init+0x2dc>)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c68:	4a2f      	ldr	r2, [pc, #188]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c92:	4a25      	ldr	r2, [pc, #148]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cc2:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ce6:	4a10      	ldr	r2, [pc, #64]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f aea3 	bne.w	8002a48 <HAL_GPIO_Init+0x10>
  }
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40010000 	.word	0x40010000
 8002d18:	48000400 	.word	0x48000400
 8002d1c:	48000800 	.word	0x48000800
 8002d20:	48000c00 	.word	0x48000c00
 8002d24:	48001000 	.word	0x48001000
 8002d28:	40010400 	.word	0x40010400

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d48:	e002      	b.n	8002d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d86:	d130      	bne.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d88:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d94:	d038      	beq.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2232      	movs	r2, #50	@ 0x32
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dbc:	e002      	b.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd0:	d102      	bne.n	8002dd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f2      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de4:	d110      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e00f      	b.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df6:	d007      	beq.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e00:	4a05      	ldr	r2, [pc, #20]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	431bde83 	.word	0x431bde83

08002e24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f000 bc02 	b.w	800363c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e38:	4b96      	ldr	r3, [pc, #600]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e42:	4b94      	ldr	r3, [pc, #592]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80e4 	beq.w	8003022 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4c>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f040 808b 	bne.w	8002f7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 8087 	bne.w	8002f7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e70:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_OscConfig+0x64>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e3d9      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	4b81      	ldr	r3, [pc, #516]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x7e>
 8002e98:	4b7e      	ldr	r3, [pc, #504]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_OscConfig+0x8a>
 8002ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d223      	bcs.n	8002efa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fd8c 	bl	80039d4 <RCC_SetFlashLatencyFromMSIRange>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e3ba      	b.n	800363c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec6:	4b73      	ldr	r3, [pc, #460]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a72      	ldr	r2, [pc, #456]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b70      	ldr	r3, [pc, #448]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	496d      	ldr	r1, [pc, #436]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	4968      	ldr	r1, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	e025      	b.n	8002f46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efa:	4b66      	ldr	r3, [pc, #408]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a65      	ldr	r2, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b63      	ldr	r3, [pc, #396]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4960      	ldr	r1, [pc, #384]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f18:	4b5e      	ldr	r3, [pc, #376]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	495b      	ldr	r1, [pc, #364]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fd4c 	bl	80039d4 <RCC_SetFlashLatencyFromMSIRange>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e37a      	b.n	800363c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f46:	f000 fc81 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b51      	ldr	r3, [pc, #324]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4950      	ldr	r1, [pc, #320]	@ (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <HAL_RCC_OscConfig+0x278>)
 8002f64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f66:	4b4e      	ldr	r3, [pc, #312]	@ (80030a0 <HAL_RCC_OscConfig+0x27c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fe70 	bl	8000c50 <HAL_InitTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d052      	beq.n	8003020 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	e35e      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d032      	beq.n	8002fec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f86:	4b43      	ldr	r3, [pc, #268]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a42      	ldr	r2, [pc, #264]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f92:	f7fd fead 	bl	8000cf0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9a:	f7fd fea9 	bl	8000cf0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e347      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fac:	4b39      	ldr	r3, [pc, #228]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a35      	ldr	r2, [pc, #212]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4930      	ldr	r1, [pc, #192]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	492b      	ldr	r1, [pc, #172]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	e01a      	b.n	8003022 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fec:	4b29      	ldr	r3, [pc, #164]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fe7a 	bl	8000cf0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003000:	f7fd fe76 	bl	8000cf0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e314      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003012:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1dc>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d073      	beq.n	8003116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d005      	beq.n	8003040 <HAL_RCC_OscConfig+0x21c>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d10e      	bne.n	8003058 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d10b      	bne.n	8003058 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d063      	beq.n	8003114 <HAL_RCC_OscConfig+0x2f0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d15f      	bne.n	8003114 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e2f1      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x24c>
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0b      	ldr	r2, [pc, #44]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e025      	b.n	80030bc <HAL_RCC_OscConfig+0x298>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003078:	d114      	bne.n	80030a4 <HAL_RCC_OscConfig+0x280>
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a02      	ldr	r2, [pc, #8]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e013      	b.n	80030bc <HAL_RCC_OscConfig+0x298>
 8003094:	40021000 	.word	0x40021000
 8003098:	08004ba0 	.word	0x08004ba0
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000004 	.word	0x20000004
 80030a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd fe14 	bl	8000cf0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd fe10 	bl	8000cf0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e2ae      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030de:	4b92      	ldr	r3, [pc, #584]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x2a8>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd fe00 	bl	8000cf0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd fdfc 	bl	8000cf0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e29a      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003106:	4b88      	ldr	r3, [pc, #544]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d0>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d060      	beq.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x310>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d119      	bne.n	8003162 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d116      	bne.n	8003162 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	4b7c      	ldr	r3, [pc, #496]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x328>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e277      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b76      	ldr	r3, [pc, #472]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4973      	ldr	r1, [pc, #460]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e040      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d023      	beq.n	80031b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316a:	4b6f      	ldr	r3, [pc, #444]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6e      	ldr	r2, [pc, #440]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fd fdbb 	bl	8000cf0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fd fdb7 	bl	8000cf0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e255      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003190:	4b65      	ldr	r3, [pc, #404]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b62      	ldr	r3, [pc, #392]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	495f      	ldr	r1, [pc, #380]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	e018      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80031b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd fd97 	bl	8000cf0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fd fd93 	bl	8000cf0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e231      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d03c      	beq.n	800326a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01c      	beq.n	8003232 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fd fd72 	bl	8000cf0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7fd fd6e 	bl	8000cf0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e20c      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <HAL_RCC_OscConfig+0x3ec>
 8003230:	e01b      	b.n	800326a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003238:	4a3b      	ldr	r2, [pc, #236]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fd fd55 	bl	8000cf0 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324a:	f7fd fd51 	bl	8000cf0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1ef      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325c:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ef      	bne.n	800324a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a6 	beq.w	80033c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10d      	bne.n	80032a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	@ 0x58
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a4:	4b21      	ldr	r3, [pc, #132]	@ (800332c <HAL_RCC_OscConfig+0x508>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d118      	bne.n	80032e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b0:	4b1e      	ldr	r3, [pc, #120]	@ (800332c <HAL_RCC_OscConfig+0x508>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	@ (800332c <HAL_RCC_OscConfig+0x508>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032bc:	f7fd fd18 	bl	8000cf0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c4:	f7fd fd14 	bl	8000cf0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1b2      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d6:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_RCC_OscConfig+0x508>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_RCC_OscConfig+0x4d8>
 80032ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032fa:	e029      	b.n	8003350 <HAL_RCC_OscConfig+0x52c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d115      	bne.n	8003330 <HAL_RCC_OscConfig+0x50c>
 8003304:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331a:	4a03      	ldr	r2, [pc, #12]	@ (8003328 <HAL_RCC_OscConfig+0x504>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003324:	e014      	b.n	8003350 <HAL_RCC_OscConfig+0x52c>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	4b9a      	ldr	r3, [pc, #616]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	4a99      	ldr	r2, [pc, #612]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003340:	4b96      	ldr	r3, [pc, #600]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	4a95      	ldr	r2, [pc, #596]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fd fcca 	bl	8000cf0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fd fcc6 	bl	8000cf0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e162      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b89      	ldr	r3, [pc, #548]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ed      	beq.n	8003360 <HAL_RCC_OscConfig+0x53c>
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd fcb3 	bl	8000cf0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fcaf 	bl	8000cf0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e14b      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	4b7d      	ldr	r3, [pc, #500]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ed      	bne.n	800338e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b78      	ldr	r3, [pc, #480]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4a77      	ldr	r2, [pc, #476]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03c      	beq.n	800344a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033d8:	4b70      	ldr	r3, [pc, #448]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80033da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033de:	4a6f      	ldr	r2, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fc82 	bl	8000cf0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f0:	f7fd fc7e 	bl	8000cf0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e11c      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003402:	4b66      	ldr	r3, [pc, #408]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <HAL_RCC_OscConfig+0x5cc>
 8003410:	e01b      	b.n	800344a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003412:	4b62      	ldr	r3, [pc, #392]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003418:	4a60      	ldr	r2, [pc, #384]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fc65 	bl	8000cf0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800342a:	f7fd fc61 	bl	8000cf0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0ff      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800343c:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800343e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ef      	bne.n	800342a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80f3 	beq.w	800363a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	2b02      	cmp	r3, #2
 800345a:	f040 80c9 	bne.w	80035f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800345e:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0203 	and.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	429a      	cmp	r2, r3
 8003470:	d12c      	bne.n	80034cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	3b01      	subs	r3, #1
 800347e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d123      	bne.n	80034cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d11b      	bne.n	80034cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d113      	bne.n	80034cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d109      	bne.n	80034cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	3b01      	subs	r3, #1
 80034c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d06b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d062      	beq.n	8003598 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034d2:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0ac      	b.n	800363c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034e2:	4b2e      	ldr	r3, [pc, #184]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2d      	ldr	r2, [pc, #180]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 80034e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ee:	f7fd fbff 	bl	8000cf0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fd fbfb 	bl	8000cf0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e099      	b.n	800363c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003514:	4b21      	ldr	r3, [pc, #132]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCC_OscConfig+0x77c>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003524:	3a01      	subs	r2, #1
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800352e:	0212      	lsls	r2, r2, #8
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0552      	lsls	r2, r2, #21
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0652      	lsls	r2, r2, #25
 8003548:	4311      	orrs	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800354e:	06d2      	lsls	r2, r2, #27
 8003550:	430a      	orrs	r2, r1
 8003552:	4912      	ldr	r1, [pc, #72]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003554:	4313      	orrs	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003558:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003562:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003564:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a0c      	ldr	r2, [pc, #48]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003570:	f7fd fbbe 	bl	8000cf0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fd fbba 	bl	8000cf0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e058      	b.n	800363c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCC_OscConfig+0x778>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003596:	e050      	b.n	800363a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04f      	b.n	800363c <HAL_RCC_OscConfig+0x818>
 800359c:	40021000 	.word	0x40021000
 80035a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d144      	bne.n	800363a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a23      	ldr	r2, [pc, #140]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035bc:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a20      	ldr	r2, [pc, #128]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035c8:	f7fd fb92 	bl	8000cf0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd fb8e 	bl	8000cf0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e02c      	b.n	800363c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x7ac>
 80035ee:	e024      	b.n	800363a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d01f      	beq.n	8003636 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 80035fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd fb75 	bl	8000cf0 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd fb71 	bl	8000cf0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00f      	b.n	800363c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	4905      	ldr	r1, [pc, #20]	@ (8003644 <HAL_RCC_OscConfig+0x820>)
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCC_OscConfig+0x824>)
 8003630:	4013      	ands	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
 8003634:	e001      	b.n	800363a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	feeefffc 	.word	0xfeeefffc

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0e7      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003660:	4b75      	ldr	r3, [pc, #468]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d910      	bls.n	8003690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b72      	ldr	r3, [pc, #456]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 0207 	bic.w	r2, r3, #7
 8003676:	4970      	ldr	r1, [pc, #448]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b6e      	ldr	r3, [pc, #440]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cf      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b66      	ldr	r3, [pc, #408]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d908      	bls.n	80036be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b63      	ldr	r3, [pc, #396]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4960      	ldr	r1, [pc, #384]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d04c      	beq.n	8003764 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	4b5a      	ldr	r3, [pc, #360]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d121      	bne.n	8003722 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0a6      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ea:	4b54      	ldr	r3, [pc, #336]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d115      	bne.n	8003722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e09a      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003702:	4b4e      	ldr	r3, [pc, #312]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e08e      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003712:	4b4a      	ldr	r3, [pc, #296]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e086      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b46      	ldr	r3, [pc, #280]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4943      	ldr	r1, [pc, #268]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003734:	f7fd fadc 	bl	8000cf0 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fd fad8 	bl	8000cf0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e06e      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b31      	ldr	r3, [pc, #196]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800377c:	429a      	cmp	r2, r3
 800377e:	d208      	bcs.n	8003792 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b2e      	ldr	r3, [pc, #184]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	492b      	ldr	r1, [pc, #172]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003792:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d210      	bcs.n	80037c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a0:	4b25      	ldr	r3, [pc, #148]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0207 	bic.w	r2, r3, #7
 80037a8:	4923      	ldr	r1, [pc, #140]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b0:	4b21      	ldr	r3, [pc, #132]	@ (8003838 <HAL_RCC_ClockConfig+0x1ec>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e036      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ce:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4918      	ldr	r1, [pc, #96]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ec:	4b13      	ldr	r3, [pc, #76]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4910      	ldr	r1, [pc, #64]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003800:	f000 f824 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	490b      	ldr	r1, [pc, #44]	@ (8003840 <HAL_RCC_ClockConfig+0x1f4>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	4a09      	ldr	r2, [pc, #36]	@ (8003844 <HAL_RCC_ClockConfig+0x1f8>)
 800381e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003820:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <HAL_RCC_ClockConfig+0x1fc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fa13 	bl	8000c50 <HAL_InitTick>
 800382a:	4603      	mov	r3, r0
 800382c:	72fb      	strb	r3, [r7, #11]

  return status;
 800382e:	7afb      	ldrb	r3, [r7, #11]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40022000 	.word	0x40022000
 800383c:	40021000 	.word	0x40021000
 8003840:	08004ba0 	.word	0x08004ba0
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385a:	4b3e      	ldr	r3, [pc, #248]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003864:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x34>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d121      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d11e      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003880:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800388c:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e005      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800389c:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_RCC_GetSysClockFreq+0x110>)
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e004      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d0:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x114>)
 80038d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d134      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d003      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0xac>
 80038f0:	e005      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_RCC_GetSysClockFreq+0x110>)
 80038f4:	617b      	str	r3, [r7, #20]
      break;
 80038f6:	e005      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x114>)
 80038fa:	617b      	str	r3, [r7, #20]
      break;
 80038fc:	e002      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	617b      	str	r3, [r7, #20]
      break;
 8003902:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003904:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	3301      	adds	r3, #1
 8003910:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	fb03 f202 	mul.w	r2, r3, r2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x108>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	0e5b      	lsrs	r3, r3, #25
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	3301      	adds	r3, #1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003944:	69bb      	ldr	r3, [r7, #24]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	@ 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	08004bb8 	.word	0x08004bb8
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08004bb0 	.word	0x08004bb0

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039ac:	f7ff ffda 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0adb      	lsrs	r3, r3, #11
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4904      	ldr	r1, [pc, #16]	@ (80039d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08004bb0 	.word	0x08004bb0

080039d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039e0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039ec:	f7ff f9b6 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
 80039f0:	6178      	str	r0, [r7, #20]
 80039f2:	e014      	b.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a00:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a0c:	f7ff f9a6 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
 8003a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b1e      	ldr	r3, [pc, #120]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a24:	d10b      	bne.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d919      	bls.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a30:	d902      	bls.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a32:	2302      	movs	r3, #2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e013      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a38:	2301      	movs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e010      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	d902      	bls.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a44:	2303      	movs	r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e00a      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b80      	cmp	r3, #128	@ 0x80
 8003a4e:	d102      	bne.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a50:	2302      	movs	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e004      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b70      	cmp	r3, #112	@ 0x70
 8003a5a:	d101      	bne.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 0207 	bic.w	r2, r3, #7
 8003a68:	4909      	ldr	r1, [pc, #36]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40022000 	.word	0x40022000

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d031      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ab8:	d01a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003aba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003abe:	d814      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ac8:	d10f      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003aca:	4b5d      	ldr	r3, [pc, #372]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a5c      	ldr	r2, [pc, #368]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad6:	e00c      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fa44 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	74fb      	strb	r3, [r7, #19]
      break;
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af8:	4b51      	ldr	r3, [pc, #324]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	494e      	ldr	r1, [pc, #312]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b0e:	e001      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 809e 	beq.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b26:	4b46      	ldr	r3, [pc, #280]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b40      	ldr	r3, [pc, #256]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	4a3f      	ldr	r2, [pc, #252]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b48:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b58:	4b3a      	ldr	r3, [pc, #232]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b64:	f7fd f8c4 	bl	8000cf0 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b6a:	e009      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fd f8c0 	bl	8000cf0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d902      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b7e:	e005      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b80:	4b30      	ldr	r3, [pc, #192]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ef      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d15a      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b92:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d019      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bae:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bca:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bda:	4a19      	ldr	r2, [pc, #100]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d016      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd f880 	bl	8000cf0 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fd f87c 	bl	8000cf0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d902      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	74fb      	strb	r3, [r7, #19]
            break;
 8003c0a:	e006      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ec      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c20:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2e:	4904      	ldr	r1, [pc, #16]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c36:	e009      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
 8003c3c:	e006      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4c:	7c7b      	ldrb	r3, [r7, #17]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b9e      	ldr	r3, [pc, #632]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c56:	4a9d      	ldr	r2, [pc, #628]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c6a:	4b98      	ldr	r3, [pc, #608]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 0203 	bic.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4994      	ldr	r1, [pc, #592]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f023 020c 	bic.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	498c      	ldr	r1, [pc, #560]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cae:	4b87      	ldr	r3, [pc, #540]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	4983      	ldr	r1, [pc, #524]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	497b      	ldr	r1, [pc, #492]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf2:	4b76      	ldr	r3, [pc, #472]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	4972      	ldr	r1, [pc, #456]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d14:	4b6d      	ldr	r3, [pc, #436]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	496a      	ldr	r1, [pc, #424]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d36:	4b65      	ldr	r3, [pc, #404]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d44:	4961      	ldr	r1, [pc, #388]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d58:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	4959      	ldr	r1, [pc, #356]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d7a:	4b54      	ldr	r3, [pc, #336]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	4950      	ldr	r1, [pc, #320]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	4948      	ldr	r1, [pc, #288]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dbe:	4b43      	ldr	r3, [pc, #268]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc4:	f023 0203 	bic.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	493f      	ldr	r1, [pc, #252]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d028      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dee:	4937      	ldr	r1, [pc, #220]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b32      	ldr	r3, [pc, #200]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a31      	ldr	r2, [pc, #196]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
 8003e0c:	e011      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f8a4 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	491f      	ldr	r1, [pc, #124]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5c:	d106      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e68:	60d3      	str	r3, [r2, #12]
 8003e6a:	e011      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f875 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4908      	ldr	r1, [pc, #32]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ebc:	4b03      	ldr	r3, [pc, #12]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a02      	ldr	r2, [pc, #8]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec6:	60d3      	str	r3, [r2, #12]
 8003ec8:	e014      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f843 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01c      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f00:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	4916      	ldr	r1, [pc, #88]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f1e:	d10c      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2102      	movs	r1, #2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f820 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f46:	4b08      	ldr	r3, [pc, #32]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f54:	4904      	ldr	r1, [pc, #16]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7a:	4b74      	ldr	r3, [pc, #464]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f86:	4b71      	ldr	r3, [pc, #452]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10d      	bne.n	8003fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
       ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d047      	beq.n	8004042 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e044      	b.n	8004042 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d018      	beq.n	8003ff2 <RCCEx_PLLSAI1_Config+0x86>
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d825      	bhi.n	8004010 <RCCEx_PLLSAI1_Config+0xa4>
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <RCCEx_PLLSAI1_Config+0x62>
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d009      	beq.n	8003fe0 <RCCEx_PLLSAI1_Config+0x74>
 8003fcc:	e020      	b.n	8004010 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fce:	4b5f      	ldr	r3, [pc, #380]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fde:	e01a      	b.n	8004016 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff0:	e013      	b.n	800401a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ff2:	4b56      	ldr	r3, [pc, #344]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ffe:	4b53      	ldr	r3, [pc, #332]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800400e:	e006      	b.n	800401e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e004      	b.n	8004020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004026:	4b49      	ldr	r3, [pc, #292]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	430b      	orrs	r3, r1
 800403c:	4943      	ldr	r1, [pc, #268]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d17c      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004048:	4b40      	ldr	r3, [pc, #256]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3f      	ldr	r2, [pc, #252]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 800404e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7fc fe4c 	bl	8000cf0 <HAL_GetTick>
 8004058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800405a:	e009      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800405c:	f7fc fe48 	bl	8000cf0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d902      	bls.n	8004070 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	73fb      	strb	r3, [r7, #15]
        break;
 800406e:	e005      	b.n	800407c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ef      	bne.n	800405c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d15f      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d110      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004088:	4b30      	ldr	r3, [pc, #192]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004090:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6892      	ldr	r2, [r2, #8]
 8004098:	0211      	lsls	r1, r2, #8
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	06d2      	lsls	r2, r2, #27
 80040a0:	430a      	orrs	r2, r1
 80040a2:	492a      	ldr	r1, [pc, #168]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
 80040a8:	e027      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d112      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b0:	4b26      	ldr	r3, [pc, #152]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6912      	ldr	r2, [r2, #16]
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0552      	lsls	r2, r2, #21
 80040cc:	430a      	orrs	r2, r1
 80040ce:	491f      	ldr	r1, [pc, #124]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]
 80040d4:	e011      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d6:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	0211      	lsls	r1, r2, #8
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6952      	ldr	r2, [r2, #20]
 80040ec:	0852      	lsrs	r2, r2, #1
 80040ee:	3a01      	subs	r2, #1
 80040f0:	0652      	lsls	r2, r2, #25
 80040f2:	430a      	orrs	r2, r1
 80040f4:	4915      	ldr	r1, [pc, #84]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040fa:	4b14      	ldr	r3, [pc, #80]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a13      	ldr	r2, [pc, #76]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004100:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004104:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fc fdf3 	bl	8000cf0 <HAL_GetTick>
 800410a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800410c:	e009      	b.n	8004122 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800410e:	f7fc fdef 	bl	8000cf0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d902      	bls.n	8004122 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	73fb      	strb	r3, [r7, #15]
          break;
 8004120:	e005      	b.n	800412e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ef      	beq.n	800410e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4903      	ldr	r1, [pc, #12]	@ (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e040      	b.n	80041e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fc7a 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	@ 0x24
 800417c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 faae 	bl	80046f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f825 	bl	80041ec <UART_SetConfig>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e01b      	b.n	80041e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fb2d 	bl	800483c <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f0:	b08a      	sub	sp, #40	@ 0x28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba5      	ldr	r3, [pc, #660]	@ (80044b0 <UART_SetConfig+0x2c4>)
 800421c:	4013      	ands	r3, r2
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004224:	430b      	orrs	r3, r1
 8004226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a9a      	ldr	r2, [pc, #616]	@ (80044b4 <UART_SetConfig+0x2c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004254:	4313      	orrs	r3, r2
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	430a      	orrs	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a91      	ldr	r2, [pc, #580]	@ (80044b8 <UART_SetConfig+0x2cc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d126      	bne.n	80042c4 <UART_SetConfig+0xd8>
 8004276:	4b91      	ldr	r3, [pc, #580]	@ (80044bc <UART_SetConfig+0x2d0>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b03      	cmp	r3, #3
 8004282:	d81b      	bhi.n	80042bc <UART_SetConfig+0xd0>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <UART_SetConfig+0xa0>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042ad 	.word	0x080042ad
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b5 	.word	0x080042b5
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e0d6      	b.n	8004452 <UART_SetConfig+0x266>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e0d2      	b.n	8004452 <UART_SetConfig+0x266>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e0ce      	b.n	8004452 <UART_SetConfig+0x266>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e0ca      	b.n	8004452 <UART_SetConfig+0x266>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e0c6      	b.n	8004452 <UART_SetConfig+0x266>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7d      	ldr	r2, [pc, #500]	@ (80044c0 <UART_SetConfig+0x2d4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d138      	bne.n	8004340 <UART_SetConfig+0x154>
 80042ce:	4b7b      	ldr	r3, [pc, #492]	@ (80044bc <UART_SetConfig+0x2d0>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d82d      	bhi.n	8004338 <UART_SetConfig+0x14c>
 80042dc:	a201      	add	r2, pc, #4	@ (adr r2, 80042e4 <UART_SetConfig+0xf8>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004339 	.word	0x08004339
 80042ec:	08004339 	.word	0x08004339
 80042f0:	08004339 	.word	0x08004339
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004339 	.word	0x08004339
 80042fc:	08004339 	.word	0x08004339
 8004300:	08004339 	.word	0x08004339
 8004304:	08004321 	.word	0x08004321
 8004308:	08004339 	.word	0x08004339
 800430c:	08004339 	.word	0x08004339
 8004310:	08004339 	.word	0x08004339
 8004314:	08004331 	.word	0x08004331
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431e:	e098      	b.n	8004452 <UART_SetConfig+0x266>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004326:	e094      	b.n	8004452 <UART_SetConfig+0x266>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432e:	e090      	b.n	8004452 <UART_SetConfig+0x266>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004336:	e08c      	b.n	8004452 <UART_SetConfig+0x266>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e088      	b.n	8004452 <UART_SetConfig+0x266>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5f      	ldr	r2, [pc, #380]	@ (80044c4 <UART_SetConfig+0x2d8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d125      	bne.n	8004396 <UART_SetConfig+0x1aa>
 800434a:	4b5c      	ldr	r3, [pc, #368]	@ (80044bc <UART_SetConfig+0x2d0>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004354:	2b30      	cmp	r3, #48	@ 0x30
 8004356:	d016      	beq.n	8004386 <UART_SetConfig+0x19a>
 8004358:	2b30      	cmp	r3, #48	@ 0x30
 800435a:	d818      	bhi.n	800438e <UART_SetConfig+0x1a2>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d00a      	beq.n	8004376 <UART_SetConfig+0x18a>
 8004360:	2b20      	cmp	r3, #32
 8004362:	d814      	bhi.n	800438e <UART_SetConfig+0x1a2>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <UART_SetConfig+0x182>
 8004368:	2b10      	cmp	r3, #16
 800436a:	d008      	beq.n	800437e <UART_SetConfig+0x192>
 800436c:	e00f      	b.n	800438e <UART_SetConfig+0x1a2>
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004374:	e06d      	b.n	8004452 <UART_SetConfig+0x266>
 8004376:	2302      	movs	r3, #2
 8004378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437c:	e069      	b.n	8004452 <UART_SetConfig+0x266>
 800437e:	2304      	movs	r3, #4
 8004380:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004384:	e065      	b.n	8004452 <UART_SetConfig+0x266>
 8004386:	2308      	movs	r3, #8
 8004388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438c:	e061      	b.n	8004452 <UART_SetConfig+0x266>
 800438e:	2310      	movs	r3, #16
 8004390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004394:	e05d      	b.n	8004452 <UART_SetConfig+0x266>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4b      	ldr	r2, [pc, #300]	@ (80044c8 <UART_SetConfig+0x2dc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d125      	bne.n	80043ec <UART_SetConfig+0x200>
 80043a0:	4b46      	ldr	r3, [pc, #280]	@ (80044bc <UART_SetConfig+0x2d0>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80043ac:	d016      	beq.n	80043dc <UART_SetConfig+0x1f0>
 80043ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b0:	d818      	bhi.n	80043e4 <UART_SetConfig+0x1f8>
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d00a      	beq.n	80043cc <UART_SetConfig+0x1e0>
 80043b6:	2b80      	cmp	r3, #128	@ 0x80
 80043b8:	d814      	bhi.n	80043e4 <UART_SetConfig+0x1f8>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <UART_SetConfig+0x1d8>
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d008      	beq.n	80043d4 <UART_SetConfig+0x1e8>
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x1f8>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e042      	b.n	8004452 <UART_SetConfig+0x266>
 80043cc:	2302      	movs	r3, #2
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e03e      	b.n	8004452 <UART_SetConfig+0x266>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e03a      	b.n	8004452 <UART_SetConfig+0x266>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e036      	b.n	8004452 <UART_SetConfig+0x266>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e032      	b.n	8004452 <UART_SetConfig+0x266>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <UART_SetConfig+0x2c8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d12a      	bne.n	800444c <UART_SetConfig+0x260>
 80043f6:	4b31      	ldr	r3, [pc, #196]	@ (80044bc <UART_SetConfig+0x2d0>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004404:	d01a      	beq.n	800443c <UART_SetConfig+0x250>
 8004406:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800440a:	d81b      	bhi.n	8004444 <UART_SetConfig+0x258>
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004410:	d00c      	beq.n	800442c <UART_SetConfig+0x240>
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004416:	d815      	bhi.n	8004444 <UART_SetConfig+0x258>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <UART_SetConfig+0x238>
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004420:	d008      	beq.n	8004434 <UART_SetConfig+0x248>
 8004422:	e00f      	b.n	8004444 <UART_SetConfig+0x258>
 8004424:	2300      	movs	r3, #0
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442a:	e012      	b.n	8004452 <UART_SetConfig+0x266>
 800442c:	2302      	movs	r3, #2
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004432:	e00e      	b.n	8004452 <UART_SetConfig+0x266>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e00a      	b.n	8004452 <UART_SetConfig+0x266>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e006      	b.n	8004452 <UART_SetConfig+0x266>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e002      	b.n	8004452 <UART_SetConfig+0x266>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <UART_SetConfig+0x2c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	f040 808b 	bne.w	8004574 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800445e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004462:	2b08      	cmp	r3, #8
 8004464:	d834      	bhi.n	80044d0 <UART_SetConfig+0x2e4>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <UART_SetConfig+0x280>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	080044d1 	.word	0x080044d1
 8004474:	08004499 	.word	0x08004499
 8004478:	080044d1 	.word	0x080044d1
 800447c:	0800449f 	.word	0x0800449f
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7ff fa74 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e021      	b.n	80044dc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <UART_SetConfig+0x2e0>)
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e01e      	b.n	80044dc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7ff f9d5 	bl	800384c <HAL_RCC_GetSysClockFreq>
 80044a2:	61f8      	str	r0, [r7, #28]
        break;
 80044a4:	e01a      	b.n	80044dc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e016      	b.n	80044dc <UART_SetConfig+0x2f0>
 80044ae:	bf00      	nop
 80044b0:	efff69f3 	.word	0xefff69f3
 80044b4:	40008000 	.word	0x40008000
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40004400 	.word	0x40004400
 80044c4:	40004800 	.word	0x40004800
 80044c8:	40004c00 	.word	0x40004c00
 80044cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80fa 	beq.w	80046d8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d305      	bcc.n	8004500 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d903      	bls.n	8004508 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004506:	e0e7      	b.n	80046d8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2200      	movs	r2, #0
 800450c:	461c      	mov	r4, r3
 800450e:	4615      	mov	r5, r2
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	022b      	lsls	r3, r5, #8
 800451a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800451e:	0222      	lsls	r2, r4, #8
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	6849      	ldr	r1, [r1, #4]
 8004524:	0849      	lsrs	r1, r1, #1
 8004526:	2000      	movs	r0, #0
 8004528:	4688      	mov	r8, r1
 800452a:	4681      	mov	r9, r0
 800452c:	eb12 0a08 	adds.w	sl, r2, r8
 8004530:	eb43 0b09 	adc.w	fp, r3, r9
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004542:	4650      	mov	r0, sl
 8004544:	4659      	mov	r1, fp
 8004546:	f7fb fe45 	bl	80001d4 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4613      	mov	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004558:	d308      	bcc.n	800456c <UART_SetConfig+0x380>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004560:	d204      	bcs.n	800456c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e0b5      	b.n	80046d8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004572:	e0b1      	b.n	80046d8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457c:	d15d      	bne.n	800463a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800457e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004582:	2b08      	cmp	r3, #8
 8004584:	d827      	bhi.n	80045d6 <UART_SetConfig+0x3ea>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <UART_SetConfig+0x3a0>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045d7 	.word	0x080045d7
 800459c:	080045c7 	.word	0x080045c7
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045d7 	.word	0x080045d7
 80045a8:	080045d7 	.word	0x080045d7
 80045ac:	080045cf 	.word	0x080045cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7ff f9e4 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80045b4:	61f8      	str	r0, [r7, #28]
        break;
 80045b6:	e014      	b.n	80045e2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7ff f9f6 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 80045bc:	61f8      	str	r0, [r7, #28]
        break;
 80045be:	e010      	b.n	80045e2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c0:	4b4c      	ldr	r3, [pc, #304]	@ (80046f4 <UART_SetConfig+0x508>)
 80045c2:	61fb      	str	r3, [r7, #28]
        break;
 80045c4:	e00d      	b.n	80045e2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c6:	f7ff f941 	bl	800384c <HAL_RCC_GetSysClockFreq>
 80045ca:	61f8      	str	r0, [r7, #28]
        break;
 80045cc:	e009      	b.n	80045e2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e005      	b.n	80045e2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d077      	beq.n	80046d8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005a      	lsls	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	441a      	add	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d916      	bls.n	8004632 <UART_SetConfig+0x446>
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460a:	d212      	bcs.n	8004632 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f023 030f 	bic.w	r3, r3, #15
 8004614:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	b29a      	uxth	r2, r3
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	4313      	orrs	r3, r2
 8004626:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	8afa      	ldrh	r2, [r7, #22]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e052      	b.n	80046d8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004638:	e04e      	b.n	80046d8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800463e:	2b08      	cmp	r3, #8
 8004640:	d827      	bhi.n	8004692 <UART_SetConfig+0x4a6>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x45c>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800466d 	.word	0x0800466d
 800464c:	08004675 	.word	0x08004675
 8004650:	0800467d 	.word	0x0800467d
 8004654:	08004693 	.word	0x08004693
 8004658:	08004683 	.word	0x08004683
 800465c:	08004693 	.word	0x08004693
 8004660:	08004693 	.word	0x08004693
 8004664:	08004693 	.word	0x08004693
 8004668:	0800468b 	.word	0x0800468b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7ff f986 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004670:	61f8      	str	r0, [r7, #28]
        break;
 8004672:	e014      	b.n	800469e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7ff f998 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004678:	61f8      	str	r0, [r7, #28]
        break;
 800467a:	e010      	b.n	800469e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467c:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <UART_SetConfig+0x508>)
 800467e:	61fb      	str	r3, [r7, #28]
        break;
 8004680:	e00d      	b.n	800469e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004682:	f7ff f8e3 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8004686:	61f8      	str	r0, [r7, #28]
        break;
 8004688:	e009      	b.n	800469e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e005      	b.n	800469e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800469c:	bf00      	nop
    }

    if (pclk != 0U)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	085a      	lsrs	r2, r3, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d909      	bls.n	80046d2 <UART_SetConfig+0x4e6>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c4:	d205      	bcs.n	80046d2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	e002      	b.n	80046d8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3728      	adds	r7, #40	@ 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d10a      	bne.n	800480e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b098      	sub	sp, #96	@ 0x60
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800484c:	f7fc fa50 	bl	8000cf0 <HAL_GetTick>
 8004850:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d12e      	bne.n	80048be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004860:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f88c 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d021      	beq.n	80048be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004898:	647b      	str	r3, [r7, #68]	@ 0x44
 800489a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800489e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e062      	b.n	8004984 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d149      	bne.n	8004960 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f856 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	623b      	str	r3, [r7, #32]
   return(result);
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800490a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60fb      	str	r3, [r7, #12]
   return(result);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004938:	61fa      	str	r2, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	617b      	str	r3, [r7, #20]
   return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e011      	b.n	8004984 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3758      	adds	r7, #88	@ 0x58
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	e04f      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d04b      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fc f9a3 	bl	8000cf0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <UART_WaitOnFlagUntilTimeout+0x30>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e04e      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d037      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d034      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d031      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d110      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f838 	bl	8004a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2208      	movs	r2, #8
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e029      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a18:	d111      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f81e 	bl	8004a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00f      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d0a0      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b095      	sub	sp, #84	@ 0x54
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e6      	bne.n	8004a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d118      	bne.n	8004b0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b22:	bf00      	nop
 8004b24:	3754      	adds	r7, #84	@ 0x54
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <memset>:
 8004b2e:	4402      	add	r2, r0
 8004b30:	4603      	mov	r3, r0
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d100      	bne.n	8004b38 <memset+0xa>
 8004b36:	4770      	bx	lr
 8004b38:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3c:	e7f9      	b.n	8004b32 <memset+0x4>
	...

08004b40 <__libc_init_array>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	4d0d      	ldr	r5, [pc, #52]	@ (8004b78 <__libc_init_array+0x38>)
 8004b44:	4c0d      	ldr	r4, [pc, #52]	@ (8004b7c <__libc_init_array+0x3c>)
 8004b46:	1b64      	subs	r4, r4, r5
 8004b48:	10a4      	asrs	r4, r4, #2
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	42a6      	cmp	r6, r4
 8004b4e:	d109      	bne.n	8004b64 <__libc_init_array+0x24>
 8004b50:	4d0b      	ldr	r5, [pc, #44]	@ (8004b80 <__libc_init_array+0x40>)
 8004b52:	4c0c      	ldr	r4, [pc, #48]	@ (8004b84 <__libc_init_array+0x44>)
 8004b54:	f000 f818 	bl	8004b88 <_init>
 8004b58:	1b64      	subs	r4, r4, r5
 8004b5a:	10a4      	asrs	r4, r4, #2
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	42a6      	cmp	r6, r4
 8004b60:	d105      	bne.n	8004b6e <__libc_init_array+0x2e>
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b68:	4798      	blx	r3
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7ee      	b.n	8004b4c <__libc_init_array+0xc>
 8004b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b72:	4798      	blx	r3
 8004b74:	3601      	adds	r6, #1
 8004b76:	e7f2      	b.n	8004b5e <__libc_init_array+0x1e>
 8004b78:	08004bf0 	.word	0x08004bf0
 8004b7c:	08004bf0 	.word	0x08004bf0
 8004b80:	08004bf0 	.word	0x08004bf0
 8004b84:	08004bf4 	.word	0x08004bf4

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
