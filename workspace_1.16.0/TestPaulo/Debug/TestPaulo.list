
TestPaulo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000153  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b94  08009b94  0000ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b9c  08009b9c  0000ab9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08009ba4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a4  20000068  08009c0c  0000b068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000030c  08009c0c  0000b30c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025025  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dcf  00000000  00000000  000300c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d98  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016dc  00000000  00000000  00034c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e3e  00000000  00000000  0003630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c5c7  00000000  00000000  0006b14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014987f  00000000  00000000  00087711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0f90  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008708  00000000  00000000  001d0fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001d96dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08009a28 	.word	0x08009a28

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08009a28 	.word	0x08009a28

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MEMS_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
static void MEMS_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
	ISM330DHCX_IO_t io_ctx;
	uint8_t id;
	ISM330DHCX_AxesRaw_t axes;

	/* Link I2C functions to the ISM330DHCX driver */
	io_ctx.BusType     = ISM330DHCX_I2C_BUS;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 800059a:	23d7      	movs	r3, #215	@ 0xd7
 800059c:	753b      	strb	r3, [r7, #20]
	io_ctx.Init        = BSP_I2C2_Init;
 800059e:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <MEMS_Init+0x7c>)
 80005a0:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit      = BSP_I2C2_DeInit;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MEMS_Init+0x80>)
 80005a4:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MEMS_Init+0x84>)
 80005a8:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MEMS_Init+0x88>)
 80005ac:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick     = BSP_GetTick;
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <MEMS_Init+0x8c>)
 80005b0:	623b      	str	r3, [r7, #32]
	ISM330DHCX_RegisterBusIO(&MotionSensor, &io_ctx);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	4819      	ldr	r0, [pc, #100]	@ (8000620 <MEMS_Init+0x90>)
 80005ba:	f000 ff47 	bl	800144c <ISM330DHCX_RegisterBusIO>

	/* Read the ISM330DHCX WHO_AM_I register */
	ISM330DHCX_ReadID(&MotionSensor, &id);
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4817      	ldr	r0, [pc, #92]	@ (8000620 <MEMS_Init+0x90>)
 80005c4:	f001 f839 	bl	800163a <ISM330DHCX_ReadID>
	if (id != ISM330DHCX_ID) {
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b6b      	cmp	r3, #107	@ 0x6b
 80005cc:	d001      	beq.n	80005d2 <MEMS_Init+0x42>
		Error_Handler();
 80005ce:	f000 fbfb 	bl	8000dc8 <Error_Handler>
	}

	/* Initialize the ISM330DHCX sensor */
	ISM330DHCX_Init(&MotionSensor);
 80005d2:	4813      	ldr	r0, [pc, #76]	@ (8000620 <MEMS_Init+0x90>)
 80005d4:	f000 ffa4 	bl	8001520 <ISM330DHCX_Init>

	/* Configure the ISM330DHCX accelerometer (ODR, scale and interrupt) */
	ISM330DHCX_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 80005d8:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 80005dc:	4810      	ldr	r0, [pc, #64]	@ (8000620 <MEMS_Init+0x90>)
 80005de:	f001 f8ad 	bl	800173c <ISM330DHCX_ACC_SetOutputDataRate>
	ISM330DHCX_ACC_SetFullScale(&MotionSensor, 4);     /* [-4000mg; +4000mg] */
 80005e2:	2104      	movs	r1, #4
 80005e4:	480e      	ldr	r0, [pc, #56]	@ (8000620 <MEMS_Init+0x90>)
 80005e6:	f001 f8c5 	bl	8001774 <ISM330DHCX_ACC_SetFullScale>
	ISM330DHCX_Set_INT1_Drdy(&MotionSensor, ENABLE);   /* Enable DRDY */
 80005ea:	2101      	movs	r1, #1
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MEMS_Init+0x90>)
 80005ee:	f001 f97f 	bl	80018f0 <ISM330DHCX_Set_INT1_Drdy>
	ISM330DHCX_ACC_GetAxesRaw(&MotionSensor, &axes);   /* Clear DRDY */
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	480a      	ldr	r0, [pc, #40]	@ (8000620 <MEMS_Init+0x90>)
 80005f8:	f001 f8e4 	bl	80017c4 <ISM330DHCX_ACC_GetAxesRaw>

	/* Start the ISM330DHCX accelerometer */
	ISM330DHCX_ACC_Enable(&MotionSensor);
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <MEMS_Init+0x90>)
 80005fe:	f001 f832 	bl	8001666 <ISM330DHCX_ACC_Enable>
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	@ 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	08001119 	.word	0x08001119
 8000610:	08001195 	.word	0x08001195
 8000614:	08001249 	.word	0x08001249
 8000618:	080011e5 	.word	0x080011e5
 800061c:	080012ad 	.word	0x080012ad
 8000620:	20000084 	.word	0x20000084

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f002 f888 	bl	800273c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f824 	bl	8000678 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000630:	f000 f87e 	bl	8000730 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f8ea 	bl	800080c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000638:	f000 f888 	bl	800074c <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f89a 	bl	8000774 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    dataRdyIntReceived = 0;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <main+0x44>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
    MEMS_Init();
 8000646:	f7ff ffa3 	bl	8000590 <MEMS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ISM330DHCX_ACC_GetAxes(&MotionSensor, &acc_axes);
 800064a:	4908      	ldr	r1, [pc, #32]	@ (800066c <main+0x48>)
 800064c:	4808      	ldr	r0, [pc, #32]	@ (8000670 <main+0x4c>)
 800064e:	f001 f8dd 	bl	800180c <ISM330DHCX_ACC_GetAxes>
	  printf("X = %5d, Y =  %5d,  Z = %5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <main+0x48>)
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <main+0x48>)
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <main+0x48>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <main+0x50>)
 8000660:	f008 fb62 	bl	8008d28 <iprintf>
	  ISM330DHCX_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000664:	bf00      	nop
 8000666:	e7f0      	b.n	800064a <main+0x26>
 8000668:	200000c8 	.word	0x200000c8
 800066c:	200000bc 	.word	0x200000bc
 8000670:	20000084 	.word	0x20000084
 8000674:	08009a40 	.word	0x08009a40

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09e      	sub	sp, #120	@ 0x78
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	2260      	movs	r2, #96	@ 0x60
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fba3 	bl	8008dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006a0:	f003 fc56 	bl	8003f50 <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006aa:	f000 fb8d 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ae:	2310      	movs	r3, #16
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006d0:	2350      	movs	r3, #80	@ 0x50
 80006d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fd1b 	bl	8004128 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006f8:	f000 fb66 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	231f      	movs	r3, #31
 80006fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fbe1 	bl	8004ee0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000724:	f000 fb50 	bl	8000dc8 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3778      	adds	r7, #120	@ 0x78
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000734:	f003 fce8 	bl	8004108 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000738:	2002      	movs	r0, #2
 800073a:	f003 fc95 	bl	8004068 <HAL_PWREx_ConfigSupply>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000744:	f000 fb40 	bl	8000dc8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000750:	2000      	movs	r0, #0
 8000752:	f003 fbcd 	bl	8003ef0 <HAL_ICACHE_ConfigAssociativityMode>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800075c:	f000 fb34 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000760:	f003 fbe6 	bl	8003f30 <HAL_ICACHE_Enable>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800076a:	f000 fb2d 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <MX_USART1_UART_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007be:	f007 fc3f 	bl	8008040 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 fafe 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007d0:	f008 f91e 	bl	8008a10 <HAL_UARTEx_SetTxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 faf5 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007e2:	f008 f953 	bl	8008a8c <HAL_UARTEx_SetRxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 faec 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_USART1_UART_Init+0x90>)
 80007f2:	f008 f8d4 	bl	800899e <HAL_UARTEx_DisableFifoMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 fae4 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000cc 	.word	0x200000cc
 8000808:	40013800 	.word	0x40013800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	@ 0x38
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	4bbe      	ldr	r3, [pc, #760]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000828:	4abc      	ldr	r2, [pc, #752]	@ (8000b1c <MX_GPIO_Init+0x310>)
 800082a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000832:	4bba      	ldr	r3, [pc, #744]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083c:	623b      	str	r3, [r7, #32]
 800083e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4bb6      	ldr	r3, [pc, #728]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000846:	4ab5      	ldr	r2, [pc, #724]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000850:	4bb2      	ldr	r3, [pc, #712]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4baf      	ldr	r3, [pc, #700]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000864:	4aad      	ldr	r2, [pc, #692]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800086e:	4bab      	ldr	r3, [pc, #684]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800087c:	4ba7      	ldr	r3, [pc, #668]	@ (8000b1c <MX_GPIO_Init+0x310>)
 800087e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000882:	4aa6      	ldr	r2, [pc, #664]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000888:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088c:	4ba3      	ldr	r3, [pc, #652]	@ (8000b1c <MX_GPIO_Init+0x310>)
 800088e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4ba0      	ldr	r3, [pc, #640]	@ (8000b1c <MX_GPIO_Init+0x310>)
 800089c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a0:	4a9e      	ldr	r2, [pc, #632]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008aa:	4b9c      	ldr	r3, [pc, #624]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b98      	ldr	r3, [pc, #608]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008be:	4a97      	ldr	r2, [pc, #604]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008c8:	4b94      	ldr	r3, [pc, #592]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b91      	ldr	r3, [pc, #580]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008dc:	4a8f      	ldr	r2, [pc, #572]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008de:	f043 0308 	orr.w	r3, r3, #8
 80008e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e6:	4b8d      	ldr	r3, [pc, #564]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f4:	4b89      	ldr	r3, [pc, #548]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fa:	4a88      	ldr	r2, [pc, #544]	@ (8000b1c <MX_GPIO_Init+0x310>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000904:	4b85      	ldr	r3, [pc, #532]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b82      	ldr	r3, [pc, #520]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000918:	4a80      	ldr	r2, [pc, #512]	@ (8000b1c <MX_GPIO_Init+0x310>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000922:	4b7e      	ldr	r3, [pc, #504]	@ (8000b1c <MX_GPIO_Init+0x310>)
 8000924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	487a      	ldr	r0, [pc, #488]	@ (8000b20 <MX_GPIO_Init+0x314>)
 8000936:	f002 fc11 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	21c2      	movs	r1, #194	@ 0xc2
 800093e:	4879      	ldr	r0, [pc, #484]	@ (8000b24 <MX_GPIO_Init+0x318>)
 8000940:	f002 fc0c 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	4877      	ldr	r0, [pc, #476]	@ (8000b28 <MX_GPIO_Init+0x31c>)
 800094a:	f002 fc07 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000954:	4875      	ldr	r0, [pc, #468]	@ (8000b2c <MX_GPIO_Init+0x320>)
 8000956:	f002 fc01 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 800095a:	f248 0324 	movw	r3, #32804	@ 0x8024
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	486e      	ldr	r0, [pc, #440]	@ (8000b28 <MX_GPIO_Init+0x31c>)
 8000970:	f002 f93e 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8000974:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000986:	2308      	movs	r3, #8
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4867      	ldr	r0, [pc, #412]	@ (8000b30 <MX_GPIO_Init+0x324>)
 8000992:	f002 f92d 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8000996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4862      	ldr	r0, [pc, #392]	@ (8000b34 <MX_GPIO_Init+0x328>)
 80009ac:	f002 f920 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80009c0:	2305      	movs	r3, #5
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	485b      	ldr	r0, [pc, #364]	@ (8000b38 <MX_GPIO_Init+0x32c>)
 80009cc:	f002 f910 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80009e0:	2303      	movs	r3, #3
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4853      	ldr	r0, [pc, #332]	@ (8000b38 <MX_GPIO_Init+0x32c>)
 80009ec:	f002 f900 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80009f0:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000a02:	2305      	movs	r3, #5
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4845      	ldr	r0, [pc, #276]	@ (8000b24 <MX_GPIO_Init+0x318>)
 8000a0e:	f002 f8ef 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000a12:	2308      	movs	r3, #8
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	483f      	ldr	r0, [pc, #252]	@ (8000b24 <MX_GPIO_Init+0x318>)
 8000a26:	f002 f8e3 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4837      	ldr	r0, [pc, #220]	@ (8000b20 <MX_GPIO_Init+0x314>)
 8000a42:	f002 f8d5 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8000a46:	231a      	movs	r3, #26
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a56:	2305      	movs	r3, #5
 8000a58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4836      	ldr	r0, [pc, #216]	@ (8000b3c <MX_GPIO_Init+0x330>)
 8000a62:	f002 f8c5 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000a76:	2303      	movs	r3, #3
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482f      	ldr	r0, [pc, #188]	@ (8000b40 <MX_GPIO_Init+0x334>)
 8000a82:	f002 f8b5 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000a86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481f      	ldr	r0, [pc, #124]	@ (8000b20 <MX_GPIO_Init+0x314>)
 8000aa4:	f002 f8a4 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000ab8:	230a      	movs	r3, #10
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481e      	ldr	r0, [pc, #120]	@ (8000b3c <MX_GPIO_Init+0x330>)
 8000ac4:	f002 f894 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8000ac8:	f241 031f 	movw	r3, #4127	@ 0x101f
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8000ada:	2305      	movs	r3, #5
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <MX_GPIO_Init+0x320>)
 8000ae6:	f002 f883 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000aea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <MX_GPIO_Init+0x324>)
 8000b00:	f002 f876 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000b04:	23c2      	movs	r3, #194	@ 0xc2
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e013      	b.n	8000b44 <MX_GPIO_Init+0x338>
 8000b1c:	46020c00 	.word	0x46020c00
 8000b20:	42020400 	.word	0x42020400
 8000b24:	42021c00 	.word	0x42021c00
 8000b28:	42021800 	.word	0x42021800
 8000b2c:	42021400 	.word	0x42021400
 8000b30:	42020800 	.word	0x42020800
 8000b34:	42020000 	.word	0x42020000
 8000b38:	42022000 	.word	0x42022000
 8000b3c:	42020c00 	.word	0x42020c00
 8000b40:	42021000 	.word	0x42021000
 8000b44:	4881      	ldr	r0, [pc, #516]	@ (8000d4c <MX_GPIO_Init+0x540>)
 8000b46:	f002 f853 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8000b4a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000b5c:	230a      	movs	r3, #10
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	487a      	ldr	r0, [pc, #488]	@ (8000d50 <MX_GPIO_Init+0x544>)
 8000b68:	f002 f842 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4871      	ldr	r0, [pc, #452]	@ (8000d4c <MX_GPIO_Init+0x540>)
 8000b88:	f002 f832 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8000b8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	486a      	ldr	r0, [pc, #424]	@ (8000d54 <MX_GPIO_Init+0x548>)
 8000baa:	f002 f821 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4861      	ldr	r0, [pc, #388]	@ (8000d50 <MX_GPIO_Init+0x544>)
 8000bcc:	f002 f810 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8000bd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8000be2:	2303      	movs	r3, #3
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	485a      	ldr	r0, [pc, #360]	@ (8000d58 <MX_GPIO_Init+0x54c>)
 8000bee:	f001 ffff 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4854      	ldr	r0, [pc, #336]	@ (8000d5c <MX_GPIO_Init+0x550>)
 8000c0a:	f001 fff1 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8000c0e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	484f      	ldr	r0, [pc, #316]	@ (8000d60 <MX_GPIO_Init+0x554>)
 8000c24:	f001 ffe4 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4848      	ldr	r0, [pc, #288]	@ (8000d64 <MX_GPIO_Init+0x558>)
 8000c44:	f001 ffd4 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin;
 8000c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	483e      	ldr	r0, [pc, #248]	@ (8000d58 <MX_GPIO_Init+0x54c>)
 8000c5e:	f001 ffc7 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8000c62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000c74:	230a      	movs	r3, #10
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	483a      	ldr	r0, [pc, #232]	@ (8000d68 <MX_GPIO_Init+0x55c>)
 8000c80:	f001 ffb6 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8000c84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	482d      	ldr	r0, [pc, #180]	@ (8000d50 <MX_GPIO_Init+0x544>)
 8000c9a:	f001 ffa9 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482b      	ldr	r0, [pc, #172]	@ (8000d68 <MX_GPIO_Init+0x55c>)
 8000cbc:	f001 ff98 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4824      	ldr	r0, [pc, #144]	@ (8000d68 <MX_GPIO_Init+0x55c>)
 8000cd6:	f001 ff8b 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8000cda:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4817      	ldr	r0, [pc, #92]	@ (8000d50 <MX_GPIO_Init+0x544>)
 8000cf4:	f001 ff7c 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cf8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_GPIO_Init+0x560>)
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MX_GPIO_Init+0x54c>)
 8000d0e:	f001 ff6f 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8000d12:	2302      	movs	r3, #2
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000d22:	2306      	movs	r3, #6
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_GPIO_Init+0x55c>)
 8000d2e:	f001 ff5f 	bl	8002bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2016      	movs	r0, #22
 8000d38:	f001 fe7e 	bl	8002a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000d3c:	2016      	movs	r0, #22
 8000d3e:	f001 fe95 	bl	8002a6c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d42:	bf00      	nop
 8000d44:	3738      	adds	r7, #56	@ 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	42021c00 	.word	0x42021c00
 8000d50:	42021400 	.word	0x42021400
 8000d54:	42020000 	.word	0x42020000
 8000d58:	42021000 	.word	0x42021000
 8000d5c:	42021800 	.word	0x42021800
 8000d60:	42020c00 	.word	0x42020c00
 8000d64:	42020800 	.word	0x42020800
 8000d68:	42020400 	.word	0x42020400
 8000d6c:	10110000 	.word	0x10110000

08000d70 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11)
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d80:	d104      	bne.n	8000d8c <HAL_GPIO_EXTI_Rising_Callback+0x1c>
    dataRdyIntReceived++;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a03      	ldr	r2, [pc, #12]	@ (8000d98 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	200000c8 	.word	0x200000c8

08000d9c <_write>:

int _write(int fd, char * ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <_write+0x28>)
 8000db4:	f007 f994 	bl	80080e0 <HAL_UART_Transmit>
  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000cc 	.word	0x200000cc

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de0:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	46020c00 	.word	0x46020c00

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0bc      	sub	sp, #240	@ 0xf0
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	22c8      	movs	r2, #200	@ 0xc8
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f007 ffd2 	bl	8008dd2 <memset>
  if(huart->Instance==USART1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a26      	ldr	r2, [pc, #152]	@ (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d145      	bne.n	8000ec4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e38:	f04f 0201 	mov.w	r2, #1
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e44:	2300      	movs	r3, #0
 8000e46:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fc17 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e58:	f7ff ffb6 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e62:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e80:	4a13      	ldr	r2, [pc, #76]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_UART_MspInit+0xc8>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000e98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_UART_MspInit+0xcc>)
 8000ec0:	f001 fe96 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ec4:	bf00      	nop
 8000ec6:	37f0      	adds	r7, #240	@ 0xf0
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	46020c00 	.word	0x46020c00
 8000ed4:	42020000 	.word	0x42020000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f001 fcab 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f3a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f3e:	f002 f925 	bl	800318c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00a      	b.n	8000f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f58:	f3af 8000 	nop.w
 8000f5c:	4601      	mov	r1, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	60ba      	str	r2, [r7, #8]
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf0      	blt.n	8000f58 <_read+0x12>
  }

  return len;
 8000f76:	687b      	ldr	r3, [r7, #4]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f007 ff2a 	bl	8008e70 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200c0000 	.word	0x200c0000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000160 	.word	0x20000160
 8001050:	20000310 	.word	0x20000310

08001054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <SystemInit+0x68>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <SystemInit+0x68>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001068:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <SystemInit+0x6c>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <SystemInit+0x6c>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SystemInit+0x6c>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <SystemInit+0x6c>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <SystemInit+0x6c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <SystemInit+0x6c>)
 8001086:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800108a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <SystemInit+0x6c>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <SystemInit+0x6c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <SystemInit+0x6c>)
 800109c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <SystemInit+0x6c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SystemInit+0x68>)
 80010aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ae:	609a      	str	r2, [r3, #8]
  #endif
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	46020c00 	.word	0x46020c00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010fc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff ffc4 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	@ (8001104 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
	ldr	r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
	b	LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <LoopForever+0x16>)
	cmp	r2, r3
 80010ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f007 fec3 	bl	8008e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff fa95 	bl	8000624 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010fc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001100:	08009ba4 	.word	0x08009ba4
	ldr	r0, =_sdata
 8001104:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001108:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800110c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001110:	2000030c 	.word	0x2000030c

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>
	...

08001118 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <BSP_I2C2_Init+0x70>)
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <BSP_I2C2_Init+0x74>)
 8001126:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <BSP_I2C2_Init+0x78>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4918      	ldr	r1, [pc, #96]	@ (8001190 <BSP_I2C2_Init+0x78>)
 8001130:	600a      	str	r2, [r1, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d122      	bne.n	800117c <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001136:	4814      	ldr	r0, [pc, #80]	@ (8001188 <BSP_I2C2_Init+0x70>)
 8001138:	f002 fb66 	bl	8003808 <HAL_I2C_GetState>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d11c      	bne.n	800117c <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <BSP_I2C2_Init+0x70>)
 8001144:	f000 f8fe 	bl	8001344 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800114e:	480e      	ldr	r0, [pc, #56]	@ (8001188 <BSP_I2C2_Init+0x70>)
 8001150:	f000 f8b4 	bl	80012bc <MX_I2C2_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800115a:	f06f 0307 	mvn.w	r3, #7
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	e00c      	b.n	800117c <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <BSP_I2C2_Init+0x70>)
 8001166:	f002 fe2b 	bl	8003dc0 <HAL_I2CEx_ConfigAnalogFilter>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001170:	f06f 0307 	mvn.w	r3, #7
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e001      	b.n	800117c <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000164 	.word	0x20000164
 800118c:	40005800 	.word	0x40005800
 8001190:	200001b8 	.word	0x200001b8

08001194 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <BSP_I2C2_DeInit+0x48>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d014      	beq.n	80011d0 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <BSP_I2C2_DeInit+0x48>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <BSP_I2C2_DeInit+0x48>)
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <BSP_I2C2_DeInit+0x48>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10b      	bne.n	80011d0 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80011b8:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <BSP_I2C2_DeInit+0x4c>)
 80011ba:	f000 f92b 	bl	8001414 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80011be:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <BSP_I2C2_DeInit+0x4c>)
 80011c0:	f002 f8b0 	bl	8003324 <HAL_I2C_DeInit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80011ca:	f06f 0307 	mvn.w	r3, #7
 80011ce:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001b8 	.word	0x200001b8
 80011e0:	20000164 	.word	0x20000164

080011e4 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	60ba      	str	r2, [r7, #8]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	81fb      	strh	r3, [r7, #14]
 80011f2:	460b      	mov	r3, r1
 80011f4:	81bb      	strh	r3, [r7, #12]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80011fe:	89ba      	ldrh	r2, [r7, #12]
 8001200:	89f9      	ldrh	r1, [r7, #14]
 8001202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	480c      	ldr	r0, [pc, #48]	@ (8001244 <BSP_I2C2_WriteReg+0x60>)
 8001214:	f002 f8ca 	bl	80033ac <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00c      	beq.n	8001238 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800121e:	4809      	ldr	r0, [pc, #36]	@ (8001244 <BSP_I2C2_WriteReg+0x60>)
 8001220:	f002 fb00 	bl	8003824 <HAL_I2C_GetError>
 8001224:	4603      	mov	r3, r0
 8001226:	2b04      	cmp	r3, #4
 8001228:	d103      	bne.n	8001232 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800122a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e002      	b.n	8001238 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001232:	f06f 0303 	mvn.w	r3, #3
 8001236:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001238:	697b      	ldr	r3, [r7, #20]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000164 	.word	0x20000164

08001248 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af04      	add	r7, sp, #16
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	4603      	mov	r3, r0
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	460b      	mov	r3, r1
 8001258:	81bb      	strh	r3, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001262:	89ba      	ldrh	r2, [r7, #12]
 8001264:	89f9      	ldrh	r1, [r7, #14]
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <BSP_I2C2_ReadReg+0x60>)
 8001278:	f002 f9ac 	bl	80035d4 <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001282:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <BSP_I2C2_ReadReg+0x60>)
 8001284:	f002 face 	bl	8003824 <HAL_I2C_GetError>
 8001288:	4603      	mov	r3, r0
 800128a:	2b04      	cmp	r3, #4
 800128c:	d103      	bne.n	8001296 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800128e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e002      	b.n	800129c <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001296:	f06f 0303 	mvn.w	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800129c:	697b      	ldr	r3, [r7, #20]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000164 	.word	0x20000164

080012ac <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012b0:	f001 fafe 	bl	80028b0 <HAL_GetTick>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <MX_I2C2_Init+0x80>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F07BFF;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <MX_I2C2_Init+0x84>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 ff75 	bl	80031ee <HAL_I2C_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f002 fd55 	bl	8003dc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f002 fd97 	bl	8003e56 <HAL_I2CEx_ConfigDigitalFilter>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005800 	.word	0x40005800
 8001340:	00f07bff 	.word	0x00f07bff

08001344 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0bc      	sub	sp, #240	@ 0xf0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	22c8      	movs	r2, #200	@ 0xc8
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fd3c 	bl	8008dd2 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800135a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001366:	2300      	movs	r3, #0
 8001368:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f004 f986 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <I2C2_MspInit+0xc8>)
 8001376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137a:	4a24      	ldr	r2, [pc, #144]	@ (800140c <I2C2_MspInit+0xc8>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001380:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <I2C2_MspInit+0xc8>)
 8001386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001392:	2310      	movs	r3, #16
 8001394:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001398:	2312      	movs	r3, #18
 800139a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80013aa:	2304      	movs	r3, #4
 80013ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80013b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	@ (8001410 <I2C2_MspInit+0xcc>)
 80013b8:	f001 fc1a 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80013bc:	2320      	movs	r3, #32
 80013be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c2:	2312      	movs	r3, #18
 80013c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80013d4:	2304      	movs	r3, #4
 80013d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80013da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <I2C2_MspInit+0xcc>)
 80013e2:	f001 fc05 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <I2C2_MspInit+0xc8>)
 80013e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <I2C2_MspInit+0xc8>)
 80013ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <I2C2_MspInit+0xc8>)
 80013f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001404:	bf00      	nop
 8001406:	37f0      	adds	r7, #240	@ 0xf0
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	46020c00 	.word	0x46020c00
 8001410:	42021c00 	.word	0x42021c00

08001414 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <I2C2_MspDeInit+0x30>)
 800141e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <I2C2_MspDeInit+0x30>)
 8001424:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001428:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800142c:	2110      	movs	r1, #16
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <I2C2_MspDeInit+0x34>)
 8001430:	f001 fdb6 	bl	8002fa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001434:	2120      	movs	r1, #32
 8001436:	4804      	ldr	r0, [pc, #16]	@ (8001448 <I2C2_MspDeInit+0x34>)
 8001438:	f001 fdb2 	bl	8002fa0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	46020c00 	.word	0x46020c00
 8001448:	42021c00 	.word	0x42021c00

0800144c <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e051      	b.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7b1a      	ldrb	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <ISM330DHCX_RegisterBusIO+0xcc>)
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1c      	ldr	r2, [pc, #112]	@ (800151c <ISM330DHCX_RegisterBusIO+0xd0>)
 80014aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	69da      	ldr	r2, [r3, #28]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e020      	b.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4798      	blx	r3
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e016      	b.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d112      	bne.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10d      	bne.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80014f0:	230c      	movs	r3, #12
 80014f2:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2112      	movs	r1, #18
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f9dd 	bl	80018ba <ISM330DHCX_Write_Reg>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08001b71 	.word	0x08001b71
 800151c:	08001ba7 	.word	0x08001ba7

08001520 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3320      	adds	r3, #32
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f000 ff4e 	bl	80023d0 <ism330dhcx_device_conf_set>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e078      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3320      	adds	r3, #32
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f000 ffc5 	bl	80024d6 <ism330dhcx_auto_increment_set>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e06c      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3320      	adds	r3, #32
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ff93 	bl	800248a <ism330dhcx_reset_set>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e060      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3320      	adds	r3, #32
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f000 ffad 	bl	80024d6 <ism330dhcx_auto_increment_set>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e054      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3320      	adds	r3, #32
 800158c:	2101      	movs	r1, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f000 feb0 	bl	80022f4 <ism330dhcx_block_data_update_set>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e048      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3320      	adds	r3, #32
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 ffbb 	bl	8002522 <ism330dhcx_fifo_mode_set>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e03c      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2204      	movs	r2, #4
 80015bc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3320      	adds	r3, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fb96 	bl	8001cf8 <ism330dhcx_xl_data_rate_set>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e02c      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3320      	adds	r3, #32
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb2c 	bl	8001c3c <ism330dhcx_xl_full_scale_set>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e020      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2204      	movs	r2, #4
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3320      	adds	r3, #32
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fd0c 	bl	800201c <ism330dhcx_gy_data_rate_set>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e010      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3320      	adds	r3, #32
 8001614:	210c      	movs	r1, #12
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fcda 	bl	8001fd0 <ism330dhcx_gy_full_scale_set>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e004      	b.n	8001632 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return ISM330DHCX_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3320      	adds	r3, #32
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f000 ff0c 	bl	8002468 <ism330dhcx_device_id_get>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e000      	b.n	800165e <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e014      	b.n	80016a6 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 0220 	add.w	r2, r3, #32
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001688:	4619      	mov	r1, r3
 800168a:	4610      	mov	r0, r2
 800168c:	f000 fb34 	bl	8001cf8 <ism330dhcx_xl_data_rate_set>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e004      	b.n	80016a6 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return ISM330DHCX_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3320      	adds	r3, #32
 80016c2:	f107 020b 	add.w	r2, r7, #11
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fadd 	bl	8001c88 <ism330dhcx_xl_full_scale_get>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	e023      	b.n	8001722 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d81b      	bhi.n	8001718 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80016e0:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001711 	.word	0x08001711
 80016f0:	08001701 	.word	0x08001701
 80016f4:	08001709 	.word	0x08001709
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e00f      	b.n	8001720 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8001704:	601a      	str	r2, [r3, #0]
      break;
 8001706:	e00b      	b.n	8001720 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 800170c:	601a      	str	r2, [r3, #0]
      break;
 800170e:	e007      	b.n	8001720 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8001714:	601a      	str	r2, [r3, #0]
      break;
 8001716:	e003      	b.n	8001720 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	60fb      	str	r3, [r7, #12]
      break;
 800171e:	bf00      	nop
  }

  return ret;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	3d79db23 	.word	0x3d79db23
 8001730:	3df9db23 	.word	0x3df9db23
 8001734:	3e79db23 	.word	0x3e79db23
 8001738:	3ef9db23 	.word	0x3ef9db23

0800173c <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800174e:	2b01      	cmp	r3, #1
 8001750:	d106      	bne.n	8001760 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001752:	ed97 0a00 	vldr	s0, [r7]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8fc 	bl	8001954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 800175c:	4603      	mov	r3, r0
 800175e:	e005      	b.n	800176c <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001760:	ed97 0a00 	vldr	s0, [r7]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f981 	bl	8001a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 800176a:	4603      	mov	r3, r0
  }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b02      	cmp	r3, #2
 8001782:	dd0b      	ble.n	800179c <ISM330DHCX_ACC_SetFullScale+0x28>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b04      	cmp	r3, #4
 8001788:	dd06      	ble.n	8001798 <ISM330DHCX_ACC_SetFullScale+0x24>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b08      	cmp	r3, #8
 800178e:	dc01      	bgt.n	8001794 <ISM330DHCX_ACC_SetFullScale+0x20>
 8001790:	2303      	movs	r3, #3
 8001792:	e004      	b.n	800179e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001794:	2301      	movs	r3, #1
 8001796:	e002      	b.n	800179e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8001798:	2302      	movs	r3, #2
 800179a:	e000      	b.n	800179e <ISM330DHCX_ACC_SetFullScale+0x2a>
 800179c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800179e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3320      	adds	r3, #32
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fa47 	bl	8001c3c <ism330dhcx_xl_full_scale_set>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	e000      	b.n	80017bc <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3320      	adds	r3, #32
 80017d2:	f107 0208 	add.w	r2, r7, #8
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fdb1 	bl	8002340 <ism330dhcx_acceleration_raw_get>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	e00c      	b.n	8001804 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80017ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80017f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80017fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3320      	adds	r3, #32
 8001820:	f107 0210 	add.w	r2, r7, #16
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fd8a 	bl	8002340 <ism330dhcx_acceleration_raw_get>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e03c      	b.n	80018b2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff36 	bl	80016b0 <ISM330DHCX_ACC_GetSensitivity>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e030      	b.n	80018b2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001850:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001868:	ee17 2a90 	vmov	r2, s15
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001888:	ee17 2a90 	vmov	r2, s15
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189c:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a8:	ee17 2a90 	vmov	r2, s15
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
 80018c6:	4613      	mov	r3, r2
 80018c8:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f103 0020 	add.w	r0, r3, #32
 80018d0:	1cba      	adds	r2, r7, #2
 80018d2:	78f9      	ldrb	r1, [r7, #3]
 80018d4:	2301      	movs	r3, #1
 80018d6:	f000 f999 	bl	8001c0c <ism330dhcx_write_reg>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	e000      	b.n	80018e8 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <ISM330DHCX_Set_INT1_Drdy>:
  * @param  pObj the device pObj
  * @param  Status DRDY interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Set_INT1_Drdy(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 0020 	add.w	r0, r3, #32
 8001902:	f107 020c 	add.w	r2, r7, #12
 8001906:	2301      	movs	r3, #1
 8001908:	210d      	movs	r1, #13
 800190a:	f000 f967 	bl	8001bdc <ism330dhcx_read_reg>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <ISM330DHCX_Set_INT1_Drdy+0x2a>
  {
    return ISM330DHCX_ERROR;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	e017      	b.n	800194a <ISM330DHCX_Set_INT1_Drdy+0x5a>
  }

  reg.int1_ctrl.int1_drdy_xl = Status;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	7b3b      	ldrb	r3, [r7, #12]
 8001924:	f362 0300 	bfi	r3, r2, #0, #1
 8001928:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f103 0020 	add.w	r0, r3, #32
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	2301      	movs	r3, #1
 8001936:	210d      	movs	r1, #13
 8001938:	f000 f968 	bl	8001c0c <ism330dhcx_write_reg>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <ISM330DHCX_Set_INT1_Drdy+0x58>
  {
    return ISM330DHCX_ERROR;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e000      	b.n	800194a <ISM330DHCX_Set_INT1_Drdy+0x5a>
  }

  return ISM330DHCX_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001960:	edd7 7a00 	vldr	s15, [r7]
 8001964:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d801      	bhi.n	8001976 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001972:	2301      	movs	r3, #1
 8001974:	e058      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001976:	edd7 7a00 	vldr	s15, [r7]
 800197a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800197e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	d801      	bhi.n	800198c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001988:	2302      	movs	r3, #2
 800198a:	e04d      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800198c:	edd7 7a00 	vldr	s15, [r7]
 8001990:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a50 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d801      	bhi.n	80019a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800199e:	2303      	movs	r3, #3
 80019a0:	e042      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80019a2:	edd7 7a00 	vldr	s15, [r7]
 80019a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001a54 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80019aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d801      	bhi.n	80019b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e037      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80019b8:	edd7 7a00 	vldr	s15, [r7]
 80019bc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a58 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80019c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d801      	bhi.n	80019ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e02c      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80019ce:	edd7 7a00 	vldr	s15, [r7]
 80019d2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001a5c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 80019d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d801      	bhi.n	80019e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80019e0:	2306      	movs	r3, #6
 80019e2:	e021      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80019e4:	edd7 7a00 	vldr	s15, [r7]
 80019e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001a60 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80019ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	d801      	bhi.n	80019fa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e016      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80019fa:	edd7 7a00 	vldr	s15, [r7]
 80019fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a64 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	d801      	bhi.n	8001a10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	e00b      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001a10:	edd7 7a00 	vldr	s15, [r7]
 8001a14:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a68 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d801      	bhi.n	8001a26 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8001a22:	2309      	movs	r3, #9
 8001a24:	e000      	b.n	8001a28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001a26:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8001a28:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f960 	bl	8001cf8 <ism330dhcx_xl_data_rate_set>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e000      	b.n	8001a46 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	42500000 	.word	0x42500000
 8001a54:	42d00000 	.word	0x42d00000
 8001a58:	43500000 	.word	0x43500000
 8001a5c:	43d00000 	.word	0x43d00000
 8001a60:	44504000 	.word	0x44504000
 8001a64:	44d04000 	.word	0x44d04000
 8001a68:	45504000 	.word	0x45504000

08001a6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8001a78:	edd7 7a00 	vldr	s15, [r7]
 8001a7c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	d801      	bhi.n	8001a8e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e058      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a8e:	edd7 7a00 	vldr	s15, [r7]
 8001a92:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	d801      	bhi.n	8001aa4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e04d      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001aa4:	edd7 7a00 	vldr	s15, [r7]
 8001aa8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001b54 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d801      	bhi.n	8001aba <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e042      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001aba:	edd7 7a00 	vldr	s15, [r7]
 8001abe:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001b58 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d801      	bhi.n	8001ad0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001acc:	2304      	movs	r3, #4
 8001ace:	e037      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ad0:	edd7 7a00 	vldr	s15, [r7]
 8001ad4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001b5c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d801      	bhi.n	8001ae6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e02c      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ae6:	edd7 7a00 	vldr	s15, [r7]
 8001aea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001b60 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8001aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d801      	bhi.n	8001afc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001af8:	2306      	movs	r3, #6
 8001afa:	e021      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001afc:	edd7 7a00 	vldr	s15, [r7]
 8001b00:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001b64 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d801      	bhi.n	8001b12 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e016      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001b12:	edd7 7a00 	vldr	s15, [r7]
 8001b16:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001b68 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	d801      	bhi.n	8001b28 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001b24:	2308      	movs	r3, #8
 8001b26:	e00b      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001b28:	edd7 7a00 	vldr	s15, [r7]
 8001b2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001b6c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	d801      	bhi.n	8001b3e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	e000      	b.n	8001b40 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001b3e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	42500000 	.word	0x42500000
 8001b58:	42d00000 	.word	0x42d00000
 8001b5c:	43500000 	.word	0x43500000
 8001b60:	43d00000 	.word	0x43d00000
 8001b64:	44504000 	.word	0x44504000
 8001b68:	44d04000 	.word	0x44d04000
 8001b6c:	45504000 	.word	0x45504000

08001b70 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	72fb      	strb	r3, [r7, #11]
 8001b80:	4613      	mov	r3, r2
 8001b82:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	695c      	ldr	r4, [r3, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
 8001b90:	4618      	mov	r0, r3
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	b299      	uxth	r1, r3
 8001b96:	893b      	ldrh	r3, [r7, #8]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	47a0      	blx	r4
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}

08001ba6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ba6:	b590      	push	{r4, r7, lr}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	72fb      	strb	r3, [r7, #11]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	691c      	ldr	r4, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	7b1b      	ldrb	r3, [r3, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	893b      	ldrh	r3, [r7, #8]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	47a0      	blx	r4
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}

08001bdc <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	460b      	mov	r3, r1
 8001bea:	72fb      	strb	r3, [r7, #11]
 8001bec:	4613      	mov	r3, r2
 8001bee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685c      	ldr	r4, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68d8      	ldr	r0, [r3, #12]
 8001bf8:	893b      	ldrh	r3, [r7, #8]
 8001bfa:	7af9      	ldrb	r1, [r7, #11]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	47a0      	blx	r4
 8001c00:	6178      	str	r0, [r7, #20]

  return ret;
 8001c02:	697b      	ldr	r3, [r7, #20]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}

08001c0c <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68d8      	ldr	r0, [r3, #12]
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	7af9      	ldrb	r1, [r7, #11]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	47a0      	blx	r4
 8001c30:	6178      	str	r0, [r7, #20]

  return ret;
 8001c32:	697b      	ldr	r3, [r7, #20]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001c48:	f107 0208 	add.w	r2, r7, #8
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2110      	movs	r1, #16
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ffc3 	bl	8001bdc <ism330dhcx_read_reg>
 8001c56:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10f      	bne.n	8001c7e <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	7a3b      	ldrb	r3, [r7, #8]
 8001c68:	f362 0383 	bfi	r3, r2, #2, #2
 8001c6c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001c6e:	f107 0208 	add.w	r2, r7, #8
 8001c72:	2301      	movs	r3, #1
 8001c74:	2110      	movs	r1, #16
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffc8 	bl	8001c0c <ism330dhcx_write_reg>
 8001c7c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001c92:	f107 0208 	add.w	r2, r7, #8
 8001c96:	2301      	movs	r3, #1
 8001c98:	2110      	movs	r1, #16
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff9e 	bl	8001bdc <ism330dhcx_read_reg>
 8001ca0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8001ca2:	7a3b      	ldrb	r3, [r7, #8]
 8001ca4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d81a      	bhi.n	8001ce4 <ism330dhcx_xl_full_scale_get+0x5c>
 8001cae:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb4 <ism330dhcx_xl_full_scale_get+0x2c>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001cc5 	.word	0x08001cc5
 8001cb8:	08001ccd 	.word	0x08001ccd
 8001cbc:	08001cd5 	.word	0x08001cd5
 8001cc0:	08001cdd 	.word	0x08001cdd
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
      break;
 8001cca:	e00f      	b.n	8001cec <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
      break;
 8001cd2:	e00b      	b.n	8001cec <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e007      	b.n	8001cec <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e003      	b.n	8001cec <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
      break;
 8001cea:	bf00      	nop
  }

  return ret;
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop

08001cf8 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fc2d 	bl	800256e <ism330dhcx_fsm_enable_get>
 8001d14:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 80c4 	bne.w	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001d1e:	7b3b      	ldrb	r3, [r7, #12]
 8001d20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001d26:	7b3b      	ldrb	r3, [r7, #12]
 8001d28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d2c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001d3e:	7b3b      	ldrb	r3, [r7, #12]
 8001d40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001d4a:	7b3b      	ldrb	r3, [r7, #12]
 8001d4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001d56:	7b3b      	ldrb	r3, [r7, #12]
 8001d58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001d62:	7b3b      	ldrb	r3, [r7, #12]
 8001d64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001d7a:	7b7b      	ldrb	r3, [r7, #13]
 8001d7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001d86:	7b7b      	ldrb	r3, [r7, #13]
 8001d88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001d92:	7b7b      	ldrb	r3, [r7, #13]
 8001d94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001da4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001daa:	7b7b      	ldrb	r3, [r7, #13]
 8001dac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001db0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001dc2:	7b7b      	ldrb	r3, [r7, #13]
 8001dc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001dce:	7b7b      	ldrb	r3, [r7, #13]
 8001dd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d163      	bne.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001dde:	f107 030b 	add.w	r3, r7, #11
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fbef 	bl	80025c8 <ism330dhcx_fsm_data_rate_get>
 8001dea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d159      	bne.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d853      	bhi.n	8001ea0 <ism330dhcx_xl_data_rate_set+0x1a8>
 8001df8:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <ism330dhcx_xl_data_rate_set+0x108>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e23 	.word	0x08001e23
 8001e08:	08001e41 	.word	0x08001e41
 8001e0c:	08001e6b 	.word	0x08001e6b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001e1a:	e044      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	75fb      	strb	r3, [r7, #23]
            break;
 8001e20:	e041      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001e2c:	e03b      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001e34:	2302      	movs	r3, #2
 8001e36:	75fb      	strb	r3, [r7, #23]
            break;
 8001e38:	e035      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	75fb      	strb	r3, [r7, #23]
            break;
 8001e3e:	e032      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001e46:	2303      	movs	r3, #3
 8001e48:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001e4a:	e02c      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d102      	bne.n	8001e58 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001e52:	2303      	movs	r3, #3
 8001e54:	75fb      	strb	r3, [r7, #23]
            break;
 8001e56:	e026      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d102      	bne.n	8001e64 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	75fb      	strb	r3, [r7, #23]
            break;
 8001e62:	e020      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	75fb      	strb	r3, [r7, #23]
            break;
 8001e68:	e01d      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e70:	2304      	movs	r3, #4
 8001e72:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001e74:	e017      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	75fb      	strb	r3, [r7, #23]
            break;
 8001e80:	e011      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d102      	bne.n	8001e8e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8001e8c:	e00b      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d102      	bne.n	8001e9a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001e94:	2304      	movs	r3, #4
 8001e96:	75fb      	strb	r3, [r7, #23]
            break;
 8001e98:	e005      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	75fb      	strb	r3, [r7, #23]
            break;
 8001e9e:	e002      	b.n	8001ea6 <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8001ea4:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d16c      	bne.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001eb0:	f107 030a 	add.w	r3, r7, #10
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fbce 	bl	8002658 <ism330dhcx_mlc_get>
 8001ebc:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8001ebe:	7abb      	ldrb	r3, [r7, #10]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d162      	bne.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8001ec4:	f107 0309 	add.w	r3, r7, #9
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fbee 	bl	80026ac <ism330dhcx_mlc_data_rate_get>
 8001ed0:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d158      	bne.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8001ed8:	7a7b      	ldrb	r3, [r7, #9]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d852      	bhi.n	8001f84 <ism330dhcx_xl_data_rate_set+0x28c>
 8001ede:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee4 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001f07 	.word	0x08001f07
 8001eec:	08001f25 	.word	0x08001f25
 8001ef0:	08001f4f 	.word	0x08001f4f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001efe:	e044      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	75fb      	strb	r3, [r7, #23]
            break;
 8001f04:	e041      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001f10:	e03b      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001f1c:	e035      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	75fb      	strb	r3, [r7, #23]
            break;
 8001f22:	e032      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001f2e:	e02c      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001f36:	2303      	movs	r3, #3
 8001f38:	75fb      	strb	r3, [r7, #23]
            break;
 8001f3a:	e026      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d102      	bne.n	8001f48 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001f42:	2303      	movs	r3, #3
 8001f44:	75fb      	strb	r3, [r7, #23]
            break;
 8001f46:	e020      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	75fb      	strb	r3, [r7, #23]
            break;
 8001f4c:	e01d      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001f54:	2304      	movs	r3, #4
 8001f56:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001f58:	e017      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001f60:	2304      	movs	r3, #4
 8001f62:	75fb      	strb	r3, [r7, #23]
            break;
 8001f64:	e011      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d102      	bne.n	8001f72 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	75fb      	strb	r3, [r7, #23]
            break;
 8001f70:	e00b      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d102      	bne.n	8001f7e <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8001f7c:	e005      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	75fb      	strb	r3, [r7, #23]
            break;
 8001f82:	e002      	b.n	8001f8a <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	75fb      	strb	r3, [r7, #23]
            break;
 8001f88:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001f90:	f107 0208 	add.w	r2, r7, #8
 8001f94:	2301      	movs	r3, #1
 8001f96:	2110      	movs	r1, #16
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe1f 	bl	8001bdc <ism330dhcx_read_reg>
 8001f9e:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	7a3b      	ldrb	r3, [r7, #8]
 8001fb0:	f362 1307 	bfi	r3, r2, #4, #4
 8001fb4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001fb6:	f107 0208 	add.w	r2, r7, #8
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fe24 	bl	8001c0c <ism330dhcx_write_reg>
 8001fc4:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001fc6:	693b      	ldr	r3, [r7, #16]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	2111      	movs	r1, #17
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fdf9 	bl	8001bdc <ism330dhcx_read_reg>
 8001fea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	7a3b      	ldrb	r3, [r7, #8]
 8001ffc:	f362 0303 	bfi	r3, r2, #0, #4
 8002000:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8002002:	f107 0208 	add.w	r2, r7, #8
 8002006:	2301      	movs	r3, #1
 8002008:	2111      	movs	r1, #17
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fdfe 	bl	8001c0c <ism330dhcx_write_reg>
 8002010:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa9b 	bl	800256e <ism330dhcx_fsm_enable_get>
 8002038:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 80c4 	bne.w	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002042:	7b3b      	ldrb	r3, [r7, #12]
 8002044:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800204a:	7b3b      	ldrb	r3, [r7, #12]
 800204c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002050:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002052:	4313      	orrs	r3, r2
 8002054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002056:	7b3b      	ldrb	r3, [r7, #12]
 8002058:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800205c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800205e:	4313      	orrs	r3, r2
 8002060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002062:	7b3b      	ldrb	r3, [r7, #12]
 8002064:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800206a:	4313      	orrs	r3, r2
 800206c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800206e:	7b3b      	ldrb	r3, [r7, #12]
 8002070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002076:	4313      	orrs	r3, r2
 8002078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800207a:	7b3b      	ldrb	r3, [r7, #12]
 800207c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002082:	4313      	orrs	r3, r2
 8002084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002086:	7b3b      	ldrb	r3, [r7, #12]
 8002088:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800208c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800208e:	4313      	orrs	r3, r2
 8002090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002092:	7b3b      	ldrb	r3, [r7, #12]
 8002094:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800209a:	4313      	orrs	r3, r2
 800209c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80020aa:	7b7b      	ldrb	r3, [r7, #13]
 80020ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80020b6:	7b7b      	ldrb	r3, [r7, #13]
 80020b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80020be:	4313      	orrs	r3, r2
 80020c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80020c2:	7b7b      	ldrb	r3, [r7, #13]
 80020c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80020da:	7b7b      	ldrb	r3, [r7, #13]
 80020dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80020f2:	7b7b      	ldrb	r3, [r7, #13]
 80020f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d163      	bne.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8002102:	f107 030b 	add.w	r3, r7, #11
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fa5d 	bl	80025c8 <ism330dhcx_fsm_data_rate_get>
 800210e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d159      	bne.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d853      	bhi.n	80021c4 <ism330dhcx_gy_data_rate_set+0x1a8>
 800211c:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <ism330dhcx_gy_data_rate_set+0x108>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002135 	.word	0x08002135
 8002128:	08002147 	.word	0x08002147
 800212c:	08002165 	.word	0x08002165
 8002130:	0800218f 	.word	0x0800218f
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800213e:	e044      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	75fb      	strb	r3, [r7, #23]
            break;
 8002144:	e041      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800214c:	2302      	movs	r3, #2
 800214e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002150:	e03b      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002158:	2302      	movs	r3, #2
 800215a:	75fb      	strb	r3, [r7, #23]
            break;
 800215c:	e035      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	75fb      	strb	r3, [r7, #23]
            break;
 8002162:	e032      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800216a:	2303      	movs	r3, #3
 800216c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800216e:	e02c      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002176:	2303      	movs	r3, #3
 8002178:	75fb      	strb	r3, [r7, #23]
            break;
 800217a:	e026      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d102      	bne.n	8002188 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002182:	2303      	movs	r3, #3
 8002184:	75fb      	strb	r3, [r7, #23]
            break;
 8002186:	e020      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	75fb      	strb	r3, [r7, #23]
            break;
 800218c:	e01d      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002194:	2304      	movs	r3, #4
 8002196:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002198:	e017      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021a0:	2304      	movs	r3, #4
 80021a2:	75fb      	strb	r3, [r7, #23]
            break;
 80021a4:	e011      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d102      	bne.n	80021b2 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021ac:	2304      	movs	r3, #4
 80021ae:	75fb      	strb	r3, [r7, #23]
            break;
 80021b0:	e00b      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d102      	bne.n	80021be <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80021b8:	2304      	movs	r3, #4
 80021ba:	75fb      	strb	r3, [r7, #23]
            break;
 80021bc:	e005      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	75fb      	strb	r3, [r7, #23]
            break;
 80021c2:	e002      	b.n	80021ca <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	75fb      	strb	r3, [r7, #23]
            break;
 80021c8:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d16c      	bne.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80021d4:	f107 030a 	add.w	r3, r7, #10
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fa3c 	bl	8002658 <ism330dhcx_mlc_get>
 80021e0:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80021e2:	7abb      	ldrb	r3, [r7, #10]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d162      	bne.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80021e8:	f107 0309 	add.w	r3, r7, #9
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa5c 	bl	80026ac <ism330dhcx_mlc_data_rate_get>
 80021f4:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d158      	bne.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 80021fc:	7a7b      	ldrb	r3, [r7, #9]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d852      	bhi.n	80022a8 <ism330dhcx_gy_data_rate_set+0x28c>
 8002202:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <ism330dhcx_gy_data_rate_set+0x1ec>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	0800222b 	.word	0x0800222b
 8002210:	08002249 	.word	0x08002249
 8002214:	08002273 	.word	0x08002273
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002222:	e044      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	75fb      	strb	r3, [r7, #23]
            break;
 8002228:	e041      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8002230:	2302      	movs	r3, #2
 8002232:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002234:	e03b      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800223c:	2302      	movs	r3, #2
 800223e:	75fb      	strb	r3, [r7, #23]
            break;
 8002240:	e035      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	75fb      	strb	r3, [r7, #23]
            break;
 8002246:	e032      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800224e:	2303      	movs	r3, #3
 8002250:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002252:	e02c      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800225a:	2303      	movs	r3, #3
 800225c:	75fb      	strb	r3, [r7, #23]
            break;
 800225e:	e026      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d102      	bne.n	800226c <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8002266:	2303      	movs	r3, #3
 8002268:	75fb      	strb	r3, [r7, #23]
            break;
 800226a:	e020      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	75fb      	strb	r3, [r7, #23]
            break;
 8002270:	e01d      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002278:	2304      	movs	r3, #4
 800227a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800227c:	e017      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002284:	2304      	movs	r3, #4
 8002286:	75fb      	strb	r3, [r7, #23]
            break;
 8002288:	e011      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d102      	bne.n	8002296 <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8002290:	2304      	movs	r3, #4
 8002292:	75fb      	strb	r3, [r7, #23]
            break;
 8002294:	e00b      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d102      	bne.n	80022a2 <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800229c:	2304      	movs	r3, #4
 800229e:	75fb      	strb	r3, [r7, #23]
            break;
 80022a0:	e005      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	75fb      	strb	r3, [r7, #23]
            break;
 80022a6:	e002      	b.n	80022ae <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	75fb      	strb	r3, [r7, #23]
            break;
 80022ac:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80022b4:	f107 0208 	add.w	r2, r7, #8
 80022b8:	2301      	movs	r3, #1
 80022ba:	2111      	movs	r1, #17
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fc8d 	bl	8001bdc <ism330dhcx_read_reg>
 80022c2:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	f362 1307 	bfi	r3, r2, #4, #4
 80022d8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80022da:	f107 0208 	add.w	r2, r7, #8
 80022de:	2301      	movs	r3, #1
 80022e0:	2111      	movs	r1, #17
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fc92 	bl	8001c0c <ism330dhcx_write_reg>
 80022e8:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80022ea:	693b      	ldr	r3, [r7, #16]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002300:	f107 0208 	add.w	r2, r7, #8
 8002304:	2301      	movs	r3, #1
 8002306:	2112      	movs	r1, #18
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fc67 	bl	8001bdc <ism330dhcx_read_reg>
 800230e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	7a3b      	ldrb	r3, [r7, #8]
 8002320:	f362 1386 	bfi	r3, r2, #6, #1
 8002324:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	2301      	movs	r3, #1
 800232c:	2112      	movs	r1, #18
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fc6c 	bl	8001c0c <ism330dhcx_write_reg>
 8002334:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800234a:	f107 020c 	add.w	r2, r7, #12
 800234e:	2306      	movs	r3, #6
 8002350:	2128      	movs	r1, #40	@ 0x28
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fc42 	bl	8001bdc <ism330dhcx_read_reg>
 8002358:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800235a:	7b7b      	ldrb	r3, [r7, #13]
 800235c:	b21a      	sxth	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002368:	b29b      	uxth	r3, r3
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	7b3a      	ldrb	r2, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	b21a      	sxth	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3302      	adds	r3, #2
 8002380:	b212      	sxth	r2, r2
 8002382:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3302      	adds	r3, #2
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	b29b      	uxth	r3, r3
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	7bba      	ldrb	r2, [r7, #14]
 8002394:	4413      	add	r3, r2
 8002396:	b29a      	uxth	r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3302      	adds	r3, #2
 800239c:	b212      	sxth	r2, r2
 800239e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80023a0:	7c7a      	ldrb	r2, [r7, #17]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3304      	adds	r3, #4
 80023a6:	b212      	sxth	r2, r2
 80023a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3304      	adds	r3, #4
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	7c3a      	ldrb	r2, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	b29a      	uxth	r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3304      	adds	r3, #4
 80023c2:	b212      	sxth	r2, r2
 80023c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80023c6:	697b      	ldr	r3, [r7, #20]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80023dc:	f107 0208 	add.w	r2, r7, #8
 80023e0:	2301      	movs	r3, #1
 80023e2:	2118      	movs	r1, #24
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fbf9 	bl	8001bdc <ism330dhcx_read_reg>
 80023ea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	7a3b      	ldrb	r3, [r7, #8]
 80023fc:	f362 0341 	bfi	r3, r2, #1, #1
 8002400:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8002402:	f107 0208 	add.w	r2, r7, #8
 8002406:	2301      	movs	r3, #1
 8002408:	2118      	movs	r1, #24
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fbfe 	bl	8001c0c <ism330dhcx_write_reg>
 8002410:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002428:	f107 0208 	add.w	r2, r7, #8
 800242c:	2301      	movs	r3, #1
 800242e:	2101      	movs	r1, #1
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fbd3 	bl	8001bdc <ism330dhcx_read_reg>
 8002436:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7a3b      	ldrb	r3, [r7, #8]
 8002448:	f362 1387 	bfi	r3, r2, #6, #2
 800244c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	2301      	movs	r3, #1
 8002454:	2101      	movs	r1, #1
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fbd8 	bl	8001c0c <ism330dhcx_write_reg>
 800245c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8002472:	2301      	movs	r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	210f      	movs	r1, #15
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fbaf 	bl	8001bdc <ism330dhcx_read_reg>
 800247e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002496:	f107 0208 	add.w	r2, r7, #8
 800249a:	2301      	movs	r3, #1
 800249c:	2112      	movs	r1, #18
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fb9c 	bl	8001bdc <ism330dhcx_read_reg>
 80024a4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10f      	bne.n	80024cc <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	7a3b      	ldrb	r3, [r7, #8]
 80024b6:	f362 0300 	bfi	r3, r2, #0, #1
 80024ba:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80024bc:	f107 0208 	add.w	r2, r7, #8
 80024c0:	2301      	movs	r3, #1
 80024c2:	2112      	movs	r1, #18
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fba1 	bl	8001c0c <ism330dhcx_write_reg>
 80024ca:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80024cc:	68fb      	ldr	r3, [r7, #12]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80024e2:	f107 0208 	add.w	r2, r7, #8
 80024e6:	2301      	movs	r3, #1
 80024e8:	2112      	movs	r1, #18
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fb76 	bl	8001bdc <ism330dhcx_read_reg>
 80024f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10f      	bne.n	8002518 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	7a3b      	ldrb	r3, [r7, #8]
 8002502:	f362 0382 	bfi	r3, r2, #2, #1
 8002506:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002508:	f107 0208 	add.w	r2, r7, #8
 800250c:	2301      	movs	r3, #1
 800250e:	2112      	movs	r1, #18
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fb7b 	bl	8001c0c <ism330dhcx_write_reg>
 8002516:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800252e:	f107 0208 	add.w	r2, r7, #8
 8002532:	2301      	movs	r3, #1
 8002534:	210a      	movs	r1, #10
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fb50 	bl	8001bdc <ism330dhcx_read_reg>
 800253c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	b2da      	uxtb	r2, r3
 800254c:	7a3b      	ldrb	r3, [r7, #8]
 800254e:	f362 0302 	bfi	r3, r2, #0, #3
 8002552:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8002554:	f107 0208 	add.w	r2, r7, #8
 8002558:	2301      	movs	r3, #1
 800255a:	210a      	movs	r1, #10
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff fb55 	bl	8001c0c <ism330dhcx_write_reg>
 8002562:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002578:	2102      	movs	r1, #2
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff4e 	bl	800241c <ism330dhcx_mem_bank_set>
 8002580:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8002588:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800258a:	2301      	movs	r3, #1
 800258c:	2146      	movs	r1, #70	@ 0x46
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fb24 	bl	8001bdc <ism330dhcx_read_reg>
 8002594:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80025a0:	2301      	movs	r3, #1
 80025a2:	2147      	movs	r1, #71	@ 0x47
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fb19 	bl	8001bdc <ism330dhcx_read_reg>
 80025aa:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d104      	bne.n	80025bc <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80025b2:	2100      	movs	r1, #0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff31 	bl	800241c <ism330dhcx_mem_bank_set>
 80025ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80025d2:	2102      	movs	r1, #2
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff21 	bl	800241c <ism330dhcx_mem_bank_set>
 80025da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80025e2:	f107 0208 	add.w	r2, r7, #8
 80025e6:	2301      	movs	r3, #1
 80025e8:	215f      	movs	r1, #95	@ 0x5f
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff faf6 	bl	8001bdc <ism330dhcx_read_reg>
 80025f0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80025f8:	2100      	movs	r1, #0
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ff0e 	bl	800241c <ism330dhcx_mem_bank_set>
 8002600:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8002602:	7a3b      	ldrb	r3, [r7, #8]
 8002604:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b03      	cmp	r3, #3
 800260c:	d81a      	bhi.n	8002644 <ism330dhcx_fsm_data_rate_get+0x7c>
 800260e:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	0800262d 	.word	0x0800262d
 800261c:	08002635 	.word	0x08002635
 8002620:	0800263d 	.word	0x0800263d
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e00f      	b.n	800264c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
      break;
 8002632:	e00b      	b.n	800264c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
      break;
 800263a:	e007      	b.n	800264c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2203      	movs	r2, #3
 8002640:	701a      	strb	r2, [r3, #0]
      break;
 8002642:	e003      	b.n	800264c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
      break;
 800264a:	bf00      	nop
  }

  return ret;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002662:	2102      	movs	r1, #2
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fed9 	bl	800241c <ism330dhcx_mem_bank_set>
 800266a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8002672:	f107 0208 	add.w	r2, r7, #8
 8002676:	2301      	movs	r3, #1
 8002678:	2105      	movs	r1, #5
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff faae 	bl	8001bdc <ism330dhcx_read_reg>
 8002680:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fec6 	bl	800241c <ism330dhcx_mem_bank_set>
 8002690:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8002692:	7a3b      	ldrb	r3, [r7, #8]
 8002694:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80026b6:	2102      	movs	r1, #2
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff feaf 	bl	800241c <ism330dhcx_mem_bank_set>
 80026be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80026c6:	f107 0208 	add.w	r2, r7, #8
 80026ca:	2301      	movs	r3, #1
 80026cc:	2160      	movs	r1, #96	@ 0x60
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fa84 	bl	8001bdc <ism330dhcx_read_reg>
 80026d4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d12a      	bne.n	8002732 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80026dc:	7a3b      	ldrb	r3, [r7, #8]
 80026de:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d81b      	bhi.n	8002720 <ism330dhcx_mlc_data_rate_get+0x74>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <ism330dhcx_mlc_data_rate_get+0x44>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002709 	.word	0x08002709
 80026f8:	08002711 	.word	0x08002711
 80026fc:	08002719 	.word	0x08002719
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
        break;
 8002706:	e00f      	b.n	8002728 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
        break;
 800270e:	e00b      	b.n	8002728 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
        break;
 8002716:	e007      	b.n	8002728 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2203      	movs	r2, #3
 800271c:	701a      	strb	r2, [r3, #0]
        break;
 800271e:	e003      	b.n	8002728 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
        break;
 8002726:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002728:	2100      	movs	r1, #0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fe76 	bl	800241c <ism330dhcx_mem_bank_set>
 8002730:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_Init+0x50>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a11      	ldr	r2, [pc, #68]	@ (800278c <HAL_Init+0x50>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f968 	bl	8002a22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002752:	f002 fdb7 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_Init+0x54>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	490c      	ldr	r1, [pc, #48]	@ (8002794 <HAL_Init+0x58>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	4a0b      	ldr	r2, [pc, #44]	@ (8002798 <HAL_Init+0x5c>)
 800276a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800276c:	2004      	movs	r0, #4
 800276e:	f000 f9ad 	bl	8002acc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002772:	200f      	movs	r0, #15
 8002774:	f000 f812 	bl	800279c <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e002      	b.n	8002788 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002782:	f7fe fb27 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	46020c00 	.word	0x46020c00
 8002794:	08009a60 	.word	0x08009a60
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <HAL_InitTick+0xdc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e05c      	b.n	800286e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80027b4:	4b31      	ldr	r3, [pc, #196]	@ (800287c <HAL_InitTick+0xe0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d10c      	bne.n	80027da <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <HAL_InitTick+0xe4>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002878 <HAL_InitTick+0xdc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e037      	b.n	800284a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027da:	f000 f9cf 	bl	8002b7c <HAL_SYSTICK_GetCLKSourceConfig>
 80027de:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d023      	beq.n	800282e <HAL_InitTick+0x92>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d82d      	bhi.n	8002848 <HAL_InitTick+0xac>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_InitTick+0x5e>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d00d      	beq.n	8002814 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80027f8:	e026      	b.n	8002848 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80027fa:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <HAL_InitTick+0xe4>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_InitTick+0xdc>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002808:	fbb3 f3f1 	udiv	r3, r3, r1
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	60fb      	str	r3, [r7, #12]
        break;
 8002812:	e01a      	b.n	800284a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002814:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_InitTick+0xdc>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002822:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
        break;
 800282c:	e00d      	b.n	800284a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0xdc>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002838:	fbb3 f3f2 	udiv	r3, r3, r2
 800283c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	60fb      	str	r3, [r7, #12]
        break;
 8002846:	e000      	b.n	800284a <HAL_InitTick+0xae>
        break;
 8002848:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f91c 	bl	8002a88 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e009      	b.n	800286e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285a:	2200      	movs	r2, #0
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	f04f 30ff 	mov.w	r0, #4294967295
 8002862:	f000 f8e9 	bl	8002a38 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002866:	4a07      	ldr	r2, [pc, #28]	@ (8002884 <HAL_InitTick+0xe8>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000008 	.word	0x20000008
 800287c:	e000e010 	.word	0xe000e010
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008
 80028ac:	200001bc 	.word	0x200001bc

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	200001bc 	.word	0x200001bc

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	@ (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	@ (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	@ 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	@ 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff4c 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a46:	f7ff ff63 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f7ff ffb3 	bl	80029bc <NVIC_EncodePriority>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff82 	bl	8002968 <__NVIC_SetPriority>
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff56 	bl	800292c <__NVIC_EnableIRQ>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00d      	b.n	8002aba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <HAL_SYSTICK_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_SYSTICK_Config+0x40>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_SYSTICK_Config+0x40>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <HAL_SYSTICK_Config+0x40>)
 8002ab2:	f043 0303 	orr.w	r3, r3, #3
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d844      	bhi.n	8002b64 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ada:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b03 	.word	0x08002b03
 8002ae4:	08002b21 	.word	0x08002b21
 8002ae8:	08002b43 	.word	0x08002b43
 8002aec:	08002b65 	.word	0x08002b65
 8002af0:	08002af5 	.word	0x08002af5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6013      	str	r3, [r2, #0]
      break;
 8002b00:	e031      	b.n	8002b66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b14:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002b1e:	e022      	b.n	8002b66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b32:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002b40:	e011      	b.n	8002b66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b54:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002b64:	bf00      	nop
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010
 8002b78:	46020c00 	.word	0x46020c00

08002b7c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002b82:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	e021      	b.n	8002bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002b9e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ba6:	d011      	beq.n	8002bcc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bae:	d810      	bhi.n	8002bd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bbc:	d003      	beq.n	8002bc6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002bbe:	e008      	b.n	8002bd2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
        break;
 8002bc4:	e008      	b.n	8002bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
        break;
 8002bca:	e005      	b.n	8002bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	607b      	str	r3, [r7, #4]
        break;
 8002bd0:	e002      	b.n	8002bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
        break;
 8002bd6:	bf00      	nop
    }
  }
  return systick_source;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010
 8002bec:	46020c00 	.word	0x46020c00

08002bf0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c02:	e1ba      	b.n	8002f7a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81aa 	beq.w	8002f74 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a55      	ldr	r2, [pc, #340]	@ (8002d78 <HAL_GPIO_Init+0x188>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d15d      	bne.n	8002ce4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002c2e:	2201      	movs	r2, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002c58:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <HAL_GPIO_Init+0x18c>)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c60:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002c62:	4a46      	ldr	r2, [pc, #280]	@ (8002d7c <HAL_GPIO_Init+0x18c>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3208      	adds	r2, #8
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220b      	movs	r2, #11
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69f9      	ldr	r1, [r7, #28]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e067      	b.n	8002db4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x104>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d145      	bne.n	8002d80 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e01e      	b.n	8002db4 <HAL_GPIO_Init+0x1c4>
 8002d76:	bf00      	nop
 8002d78:	46020000 	.word	0x46020000
 8002d7c:	08009ab8 	.word	0x08009ab8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00b      	beq.n	8002dd4 <HAL_GPIO_Init+0x1e4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d007      	beq.n	8002dd4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d130      	bne.n	8002e36 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0201 	and.w	r2, r3, #1
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d017      	beq.n	8002e6e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d07c      	beq.n	8002f74 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e7a:	4a47      	ldr	r2, [pc, #284]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3318      	adds	r3, #24
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0a9a      	lsrs	r2, r3, #10
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8002f9c <HAL_GPIO_Init+0x3ac>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	f002 0203 	and.w	r2, r2, #3
 8002eac:	00d2      	lsls	r2, r2, #3
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002eb6:	4938      	ldr	r1, [pc, #224]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002eee:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002f12:	4a21      	ldr	r2, [pc, #132]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f18:	4b1f      	ldr	r3, [pc, #124]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002f3e:	4a16      	ldr	r2, [pc, #88]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <HAL_GPIO_Init+0x3a8>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f47f ae3d 	bne.w	8002c04 <HAL_GPIO_Init+0x14>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	3724      	adds	r7, #36	@ 0x24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	46022000 	.word	0x46022000
 8002f9c:	002f7f7f 	.word	0x002f7f7f

08002fa0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002fb2:	e0bc      	b.n	800312e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80ad 	beq.w	8003128 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a5e      	ldr	r2, [pc, #376]	@ (800314c <HAL_GPIO_DeInit+0x1ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d115      	bne.n	8003002 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8003150 <HAL_GPIO_DeInit+0x1b0>)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fde:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8003150 <HAL_GPIO_DeInit+0x1b0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8002fec:	4b57      	ldr	r3, [pc, #348]	@ (800314c <HAL_GPIO_DeInit+0x1ac>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4954      	ldr	r1, [pc, #336]	@ (800314c <HAL_GPIO_DeInit+0x1ac>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e053      	b.n	80030aa <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8003002:	4a54      	ldr	r2, [pc, #336]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3318      	adds	r3, #24
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0a9a      	lsrs	r2, r3, #10
 8003028:	4b4b      	ldr	r3, [pc, #300]	@ (8003158 <HAL_GPIO_DeInit+0x1b8>)
 800302a:	4013      	ands	r3, r2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	f002 0203 	and.w	r2, r2, #3
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	4093      	lsls	r3, r2
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d136      	bne.n	80030aa <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800303c:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 800303e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	4943      	ldr	r1, [pc, #268]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003048:	4013      	ands	r3, r2
 800304a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003050:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	493e      	ldr	r1, [pc, #248]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 800305a:	4013      	ands	r3, r2
 800305c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8003060:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	493a      	ldr	r1, [pc, #232]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 800306a:	4013      	ands	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800306e:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	4937      	ldr	r1, [pc, #220]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 8003078:	4013      	ands	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800308c:	4a31      	ldr	r2, [pc, #196]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3318      	adds	r3, #24
 8003094:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43da      	mvns	r2, r3
 800309c:	482d      	ldr	r0, [pc, #180]	@ (8003154 <HAL_GPIO_DeInit+0x1b4>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	400a      	ands	r2, r1
 80030a4:	3318      	adds	r3, #24
 80030a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2103      	movs	r1, #3
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3208      	adds	r2, #8
 80030c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	08d2      	lsrs	r2, r2, #3
 80030de:	4019      	ands	r1, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2103      	movs	r1, #3
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	2101      	movs	r1, #1
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2103      	movs	r1, #3
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3301      	adds	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	f47f af3c 	bne.w	8002fb4 <HAL_GPIO_DeInit+0x14>
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	46020000 	.word	0x46020000
 8003150:	08009ab8 	.word	0x08009ab8
 8003154:	46022000 	.word	0x46022000
 8003158:	002f7f7f 	.word	0x002f7f7f

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003178:	e002      	b.n	8003180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003196:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fde0 	bl	8000d70 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031bc:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f807 	bl	80031d8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	46022000 	.word	0x46022000

080031d8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e08d      	b.n	800331c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8b4 	bl	8003382 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2224      	movs	r2, #36	@ 0x24
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800323e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800324e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	e006      	b.n	8003276 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003274:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d108      	bne.n	8003290 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e007      	b.n	80032a0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69d9      	ldr	r1, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e021      	b.n	800337a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2224      	movs	r2, #36	@ 0x24
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f821 	bl	8003396 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 80f9 	bne.w	80035c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_I2C_Mem_Write+0x34>
 80033da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0ed      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Mem_Write+0x4e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e6      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003402:	f7ff fa55 	bl	80028b0 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2319      	movs	r3, #25
 800340e:	2201      	movs	r2, #1
 8003410:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fadd 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0d1      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	@ 0x21
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	@ 0x40
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800344c:	88f8      	ldrh	r0, [r7, #6]
 800344e:	893a      	ldrh	r2, [r7, #8]
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4603      	mov	r3, r0
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f9ed 	bl	800383c <I2C_RequestMemoryWrite>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0a9      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2bff      	cmp	r3, #255	@ 0xff
 800347c:	d90e      	bls.n	800349c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	@ 0xff
 8003482:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	b2da      	uxtb	r2, r3
 800348a:	8979      	ldrh	r1, [r7, #10]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fc61 	bl	8003d5c <I2C_TransferConfig>
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fc50 	bl	8003d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fae0 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e07b      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d034      	beq.n	8003574 <HAL_I2C_Mem_Write+0x1c8>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d130      	bne.n	8003574 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	@ 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa59 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e04d      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2bff      	cmp	r3, #255	@ 0xff
 8003534:	d90e      	bls.n	8003554 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22ff      	movs	r2, #255	@ 0xff
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003540:	b2da      	uxtb	r2, r3
 8003542:	8979      	ldrh	r1, [r7, #10]
 8003544:	2300      	movs	r3, #0
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fc05 	bl	8003d5c <I2C_TransferConfig>
 8003552:	e00f      	b.n	8003574 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	b2da      	uxtb	r2, r3
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	2300      	movs	r3, #0
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fbf4 	bl	8003d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d19e      	bne.n	80034bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fac6 	bl	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e01a      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2220      	movs	r2, #32
 8003598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_I2C_Mem_Write+0x224>)
 80035a6:	400b      	ands	r3, r1
 80035a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	fe00e800 	.word	0xfe00e800

080035d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	f040 80fd 	bne.w	80037f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_I2C_Mem_Read+0x34>
 8003602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0f1      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Mem_Read+0x4e>
 800361e:	2302      	movs	r3, #2
 8003620:	e0ea      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800362a:	f7ff f941 	bl	80028b0 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2319      	movs	r3, #25
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f9c9 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0d5      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2222      	movs	r2, #34	@ 0x22
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800366c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003674:	88f8      	ldrh	r0, [r7, #6]
 8003676:	893a      	ldrh	r2, [r7, #8]
 8003678:	8979      	ldrh	r1, [r7, #10]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	4603      	mov	r3, r0
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f92d 	bl	80038e4 <I2C_RequestMemoryRead>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0ad      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2bff      	cmp	r3, #255	@ 0xff
 80036a4:	d90e      	bls.n	80036c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	@ 0xff
 80036aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	8979      	ldrh	r1, [r7, #10]
 80036b4:	4b52      	ldr	r3, [pc, #328]	@ (8003800 <HAL_I2C_Mem_Read+0x22c>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fb4d 	bl	8003d5c <I2C_TransferConfig>
 80036c2:	e00f      	b.n	80036e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003800 <HAL_I2C_Mem_Read+0x22c>)
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fb3c 	bl	8003d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2200      	movs	r2, #0
 80036ec:	2104      	movs	r1, #4
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f970 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07c      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d034      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x1d0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d130      	bne.n	80037a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	@ 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f941 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04d      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2bff      	cmp	r3, #255	@ 0xff
 8003764:	d90e      	bls.n	8003784 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	@ 0xff
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	2300      	movs	r3, #0
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 faed 	bl	8003d5c <I2C_TransferConfig>
 8003782:	e00f      	b.n	80037a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003792:	b2da      	uxtb	r2, r3
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fadc 	bl	8003d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d19a      	bne.n	80036e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f9ae 	bl	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01a      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_I2C_Mem_Read+0x230>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	80002400 	.word	0x80002400
 8003804:	fe00e800 	.word	0xfe00e800

08003808 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003816:	b2db      	uxtb	r3, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	8979      	ldrh	r1, [r7, #10]
 800385c:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <I2C_RequestMemoryWrite+0xa4>)
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa79 	bl	8003d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	69b9      	ldr	r1, [r7, #24]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f909 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e02c      	b.n	80038d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003884:	893b      	ldrh	r3, [r7, #8]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
 800388e:	e015      	b.n	80038bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b29b      	uxth	r3, r3
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f8ef 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e012      	b.n	80038d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038b2:	893b      	ldrh	r3, [r7, #8]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2180      	movs	r1, #128	@ 0x80
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f884 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	80002000 	.word	0x80002000

080038e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <I2C_RequestMemoryRead+0xa4>)
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fa26 	bl	8003d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f8b6 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e02c      	b.n	800397e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800392a:	893b      	ldrh	r3, [r7, #8]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
 8003934:	e015      	b.n	8003962 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	b29b      	uxth	r3, r3
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f89c 	bl	8003a86 <I2C_WaitOnTXISFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e012      	b.n	800397e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003958:	893b      	ldrh	r3, [r7, #8]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2200      	movs	r2, #0
 800396a:	2140      	movs	r1, #64	@ 0x40
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f831 	bl	80039d4 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	80002000 	.word	0x80002000

0800398c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d103      	bne.n	80039aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d007      	beq.n	80039c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	619a      	str	r2, [r3, #24]
  }
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	e03b      	b.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8d6 	bl	8003b9c <I2C_IsErrorOccurred>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e041      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d02d      	beq.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fe ff55 	bl	80028b0 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d122      	bne.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d113      	bne.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00f      	b.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d0b4      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a92:	e033      	b.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f87f 	bl	8003b9c <I2C_IsErrorOccurred>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e031      	b.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d025      	beq.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fe fefe 	bl	80028b0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11a      	bne.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d013      	beq.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e007      	b.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d1c4      	bne.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b20:	e02f      	b.n	8003b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f838 	bl	8003b9c <I2C_IsErrorOccurred>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e02d      	b.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fe febb 	bl	80028b0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11a      	bne.n	8003b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d013      	beq.n	8003b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e007      	b.n	8003b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d1c8      	bne.n	8003b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d068      	beq.n	8003c9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd0:	e049      	b.n	8003c66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d045      	beq.n	8003c66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fe69 	bl	80028b0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_IsErrorOccurred+0x54>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d13a      	bne.n	8003c66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c12:	d121      	bne.n	8003c58 <I2C_IsErrorOccurred+0xbc>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1a:	d01d      	beq.n	8003c58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d01a      	beq.n	8003c58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c32:	f7fe fe3d 	bl	80028b0 <HAL_GetTick>
 8003c36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c38:	e00e      	b.n	8003c58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c3a:	f7fe fe39 	bl	80028b0 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b19      	cmp	r3, #25
 8003c46:	d907      	bls.n	8003c58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f043 0320 	orr.w	r3, r3, #32
 8003c4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c56:	e006      	b.n	8003c66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d1e9      	bne.n	8003c3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d003      	beq.n	8003c7c <I2C_IsErrorOccurred+0xe0>
 8003c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0aa      	beq.n	8003bd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01c      	beq.n	8003d4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fe3b 	bl	800398c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <I2C_IsErrorOccurred+0x1bc>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3728      	adds	r7, #40	@ 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	fe00e800 	.word	0xfe00e800

08003d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d74:	7a7b      	ldrb	r3, [r7, #9]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	0d5b      	lsrs	r3, r3, #21
 8003d96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d9a:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <I2C_TransferConfig+0x60>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	ea02 0103 	and.w	r1, r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	03ff63ff 	.word	0x03ff63ff

08003dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d138      	bne.n	8003e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e032      	b.n	8003e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	@ 0x24
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d139      	bne.n	8003ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e033      	b.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2224      	movs	r2, #36	@ 0x24
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ea8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e007      	b.n	8003f1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 0204 	bic.w	r2, r3, #4
 8003f16:	4905      	ldr	r1, [pc, #20]	@ (8003f2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40030400 	.word	0x40030400

08003f30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_ICACHE_Enable+0x1c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <HAL_ICACHE_Enable+0x1c>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40030400 	.word	0x40030400

08003f50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f58:	4b39      	ldr	r3, [pc, #228]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10b      	bne.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f70:	d905      	bls.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f72:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a32      	ldr	r2, [pc, #200]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e057      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d90a      	bls.n	8003fa0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	4a2a      	ldr	r2, [pc, #168]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f9c:	60d3      	str	r3, [r2, #12]
 8003f9e:	e007      	b.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fa8:	4925      	ldr	r1, [pc, #148]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fb0:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a24      	ldr	r2, [pc, #144]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2232      	movs	r2, #50	@ 0x32
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	4a21      	ldr	r2, [pc, #132]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fce:	e002      	b.n	8003fd6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f3      	bne.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01b      	beq.n	8004026 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	2232      	movs	r2, #50	@ 0x32
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800400c:	e002      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f3      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e000      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	46020800 	.word	0x46020800
 8004044:	20000000 	.word	0x20000000
 8004048:	10624dd3 	.word	0x10624dd3

0800404c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <HAL_PWREx_GetVoltageRange+0x18>)
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	46020800 	.word	0x46020800

08004068 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004070:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <HAL_PWREx_ConfigSupply+0x94>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a22      	ldr	r2, [pc, #136]	@ (8004100 <HAL_PWREx_ConfigSupply+0x98>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	2232      	movs	r2, #50	@ 0x32
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <HAL_PWREx_ConfigSupply+0x98>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d113      	bne.n	80040bc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 800409a:	f023 0302 	bic.w	r3, r3, #2
 800409e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040a0:	e002      	b.n	80040a8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040a8:	4b16      	ldr	r3, [pc, #88]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d116      	bne.n	80040e2 <HAL_PWREx_ConfigSupply+0x7a>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f3      	bne.n	80040a2 <HAL_PWREx_ConfigSupply+0x3a>
 80040ba:	e012      	b.n	80040e2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040c8:	e002      	b.n	80040d0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80040d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004104 <HAL_PWREx_ConfigSupply+0x9c>)
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <HAL_PWREx_ConfigSupply+0x7a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f3      	bne.n	80040ca <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e000      	b.n	80040ee <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000000 	.word	0x20000000
 8004100:	10624dd3 	.word	0x10624dd3
 8004104:	46020800 	.word	0x46020800

08004108 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_PWREx_EnableVddIO2+0x1c>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	4a04      	ldr	r2, [pc, #16]	@ (8004124 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004112:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004116:	6113      	str	r3, [r2, #16]
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	46020800 	.word	0x46020800

08004128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	@ 0x38
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f000 bec8 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b99      	ldr	r3, [pc, #612]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b96      	ldr	r3, [pc, #600]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 816c 	beq.w	800443c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_RCC_OscConfig+0x52>
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f040 80de 	bne.w	800432e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80da 	bne.w	800432e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f000 bea5 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800418c:	4b86      	ldr	r3, [pc, #536]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <HAL_RCC_OscConfig+0x7a>
 8004198:	4b83      	ldr	r3, [pc, #524]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041a0:	e005      	b.n	80041ae <HAL_RCC_OscConfig+0x86>
 80041a2:	4b81      	ldr	r3, [pc, #516]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d255      	bcs.n	800425e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 f9d9 	bl	8005574 <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f000 be82 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4a75      	ldr	r2, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	4b73      	ldr	r3, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	4970      	ldr	r1, [pc, #448]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041f4:	d309      	bcc.n	800420a <HAL_RCC_OscConfig+0xe2>
 80041f6:	4b6c      	ldr	r3, [pc, #432]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 021f 	bic.w	r2, r3, #31
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4969      	ldr	r1, [pc, #420]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004204:	4313      	orrs	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
 8004208:	e07e      	b.n	8004308 <HAL_RCC_OscConfig+0x1e0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	da0a      	bge.n	8004228 <HAL_RCC_OscConfig+0x100>
 8004212:	4b65      	ldr	r3, [pc, #404]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	015b      	lsls	r3, r3, #5
 8004220:	4961      	ldr	r1, [pc, #388]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
 8004226:	e06f      	b.n	8004308 <HAL_RCC_OscConfig+0x1e0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d30a      	bcc.n	8004248 <HAL_RCC_OscConfig+0x120>
 8004232:	4b5d      	ldr	r3, [pc, #372]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	4959      	ldr	r1, [pc, #356]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004242:	4313      	orrs	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]
 8004246:	e05f      	b.n	8004308 <HAL_RCC_OscConfig+0x1e0>
 8004248:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	03db      	lsls	r3, r3, #15
 8004256:	4954      	ldr	r1, [pc, #336]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004258:	4313      	orrs	r3, r2
 800425a:	60cb      	str	r3, [r1, #12]
 800425c:	e054      	b.n	8004308 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800425e:	4b52      	ldr	r3, [pc, #328]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	4a51      	ldr	r2, [pc, #324]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004264:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004268:	6093      	str	r3, [r2, #8]
 800426a:	4b4f      	ldr	r3, [pc, #316]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	494c      	ldr	r1, [pc, #304]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004284:	d309      	bcc.n	800429a <HAL_RCC_OscConfig+0x172>
 8004286:	4b48      	ldr	r3, [pc, #288]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f023 021f 	bic.w	r2, r3, #31
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4945      	ldr	r1, [pc, #276]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004294:	4313      	orrs	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	e028      	b.n	80042ec <HAL_RCC_OscConfig+0x1c4>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0a      	bge.n	80042b8 <HAL_RCC_OscConfig+0x190>
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	493d      	ldr	r1, [pc, #244]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
 80042b6:	e019      	b.n	80042ec <HAL_RCC_OscConfig+0x1c4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c0:	d30a      	bcc.n	80042d8 <HAL_RCC_OscConfig+0x1b0>
 80042c2:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	4935      	ldr	r1, [pc, #212]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60cb      	str	r3, [r1, #12]
 80042d6:	e009      	b.n	80042ec <HAL_RCC_OscConfig+0x1c4>
 80042d8:	4b33      	ldr	r3, [pc, #204]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	03db      	lsls	r3, r3, #15
 80042e6:	4930      	ldr	r1, [pc, #192]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f93c 	bl	8005574 <RCC_SetFlashLatencyFromMSIRange>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f000 bde5 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004308:	f001 f8de 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <HAL_RCC_OscConfig+0x284>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fa43 	bl	800279c <HAL_InitTick>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800431c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 808a 	beq.w	800443a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800432a:	f000 bdd2 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d066      	beq.n	8004404 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004336:	4b1c      	ldr	r3, [pc, #112]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004342:	f7fe fab5 	bl	80028b0 <HAL_GetTick>
 8004346:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434a:	f7fe fab1 	bl	80028b0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d902      	bls.n	800435e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	f000 bdba 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800435e:	4b12      	ldr	r3, [pc, #72]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800436a:	4b0f      	ldr	r3, [pc, #60]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a0e      	ldr	r2, [pc, #56]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004370:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	4909      	ldr	r1, [pc, #36]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004390:	d30e      	bcc.n	80043b0 <HAL_RCC_OscConfig+0x288>
 8004392:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 021f 	bic.w	r2, r3, #31
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4902      	ldr	r1, [pc, #8]	@ (80043a8 <HAL_RCC_OscConfig+0x280>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
 80043a4:	e04a      	b.n	800443c <HAL_RCC_OscConfig+0x314>
 80043a6:	bf00      	nop
 80043a8:	46020c00 	.word	0x46020c00
 80043ac:	20000004 	.word	0x20000004
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da0a      	bge.n	80043ce <HAL_RCC_OscConfig+0x2a6>
 80043b8:	4b98      	ldr	r3, [pc, #608]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	015b      	lsls	r3, r3, #5
 80043c6:	4995      	ldr	r1, [pc, #596]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60cb      	str	r3, [r1, #12]
 80043cc:	e036      	b.n	800443c <HAL_RCC_OscConfig+0x314>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d6:	d30a      	bcc.n	80043ee <HAL_RCC_OscConfig+0x2c6>
 80043d8:	4b90      	ldr	r3, [pc, #576]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	498d      	ldr	r1, [pc, #564]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60cb      	str	r3, [r1, #12]
 80043ec:	e026      	b.n	800443c <HAL_RCC_OscConfig+0x314>
 80043ee:	4b8b      	ldr	r3, [pc, #556]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	03db      	lsls	r3, r3, #15
 80043fc:	4987      	ldr	r1, [pc, #540]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]
 8004402:	e01b      	b.n	800443c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004404:	4b85      	ldr	r3, [pc, #532]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a84      	ldr	r2, [pc, #528]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004410:	f7fe fa4e 	bl	80028b0 <HAL_GetTick>
 8004414:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004416:	e009      	b.n	800442c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004418:	f7fe fa4a 	bl	80028b0 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	f000 bd53 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800442c:	4b7b      	ldr	r3, [pc, #492]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ef      	bne.n	8004418 <HAL_RCC_OscConfig+0x2f0>
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800443a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 808b 	beq.w	8004560 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	2b08      	cmp	r3, #8
 800444e:	d005      	beq.n	800445c <HAL_RCC_OscConfig+0x334>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d109      	bne.n	800446a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	2b03      	cmp	r3, #3
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d17d      	bne.n	8004560 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f000 bd34 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x35a>
 8004474:	4b69      	ldr	r3, [pc, #420]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800447a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	e041      	b.n	8004506 <HAL_RCC_OscConfig+0x3de>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800448a:	d112      	bne.n	80044b2 <HAL_RCC_OscConfig+0x38a>
 800448c:	4b63      	ldr	r3, [pc, #396]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a62      	ldr	r2, [pc, #392]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 8004492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b60      	ldr	r3, [pc, #384]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a5f      	ldr	r2, [pc, #380]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800449e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b5d      	ldr	r3, [pc, #372]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5c      	ldr	r2, [pc, #368]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e029      	b.n	8004506 <HAL_RCC_OscConfig+0x3de>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80044ba:	d112      	bne.n	80044e2 <HAL_RCC_OscConfig+0x3ba>
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a56      	ldr	r2, [pc, #344]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b54      	ldr	r3, [pc, #336]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a53      	ldr	r2, [pc, #332]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b51      	ldr	r3, [pc, #324]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a50      	ldr	r2, [pc, #320]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e011      	b.n	8004506 <HAL_RCC_OscConfig+0x3de>
 80044e2:	4b4e      	ldr	r3, [pc, #312]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4d      	ldr	r2, [pc, #308]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4a      	ldr	r2, [pc, #296]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b48      	ldr	r3, [pc, #288]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a47      	ldr	r2, [pc, #284]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 8004500:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004504:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d014      	beq.n	8004538 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800450e:	f7fe f9cf 	bl	80028b0 <HAL_GetTick>
 8004512:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004516:	f7fe f9cb 	bl	80028b0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b64      	cmp	r3, #100	@ 0x64
 8004522:	d902      	bls.n	800452a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	f000 bcd4 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	4b3c      	ldr	r3, [pc, #240]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ef      	beq.n	8004516 <HAL_RCC_OscConfig+0x3ee>
 8004536:	e013      	b.n	8004560 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004538:	f7fe f9ba 	bl	80028b0 <HAL_GetTick>
 800453c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe f9b6 	bl	80028b0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d902      	bls.n	8004554 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	f000 bcbf 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004554:	4b31      	ldr	r3, [pc, #196]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ef      	bne.n	8004540 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05f      	beq.n	800462c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	2b04      	cmp	r3, #4
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x456>
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d114      	bne.n	80045a2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457a:	2b02      	cmp	r3, #2
 800457c:	d111      	bne.n	80045a2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f000 bca3 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800458c:	4b23      	ldr	r3, [pc, #140]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	4920      	ldr	r1, [pc, #128]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045a0:	e044      	b.n	800462c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d024      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80045aa:	4b1c      	ldr	r3, [pc, #112]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045b6:	f7fe f97b 	bl	80028b0 <HAL_GetTick>
 80045ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045be:	f7fe f977 	bl	80028b0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d902      	bls.n	80045d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	f000 bc80 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d2:	4b12      	ldr	r3, [pc, #72]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ef      	beq.n	80045be <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b0f      	ldr	r3, [pc, #60]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	490b      	ldr	r1, [pc, #44]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e01b      	b.n	800462c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045f4:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a08      	ldr	r2, [pc, #32]	@ (800461c <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004600:	f7fe f956 	bl	80028b0 <HAL_GetTick>
 8004604:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fe f952 	bl	80028b0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d904      	bls.n	8004620 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	f000 bc5b 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
 800461c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004620:	4baf      	ldr	r3, [pc, #700]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ed      	bne.n	8004608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80c8 	beq.w	80047ca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004640:	4ba7      	ldr	r3, [pc, #668]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d111      	bne.n	8004672 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4ba4      	ldr	r3, [pc, #656]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004654:	4aa2      	ldr	r2, [pc, #648]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800465e:	4ba0      	ldr	r3, [pc, #640]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004672:	4b9c      	ldr	r3, [pc, #624]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800467e:	4b99      	ldr	r3, [pc, #612]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	4a98      	ldr	r2, [pc, #608]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fe f911 	bl	80028b0 <HAL_GetTick>
 800468e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004690:	e009      	b.n	80046a6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fe f90d 	bl	80028b0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d902      	bls.n	80046a6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f000 bc16 	b.w	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046a6:	4b8f      	ldr	r3, [pc, #572]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ef      	beq.n	8004692 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d05f      	beq.n	800477a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80046ba:	4b89      	ldr	r3, [pc, #548]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80046bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d037      	beq.n	8004740 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e3f4      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01b      	beq.n	800472a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80046f2:	4b7b      	ldr	r3, [pc, #492]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80046f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f8:	4a79      	ldr	r2, [pc, #484]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80046fa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004702:	f7fe f8d5 	bl	80028b0 <HAL_GetTick>
 8004706:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470a:	f7fe f8d1 	bl	80028b0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e3da      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800471c:	4b70      	ldr	r3, [pc, #448]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800471e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ef      	bne.n	800470a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800472a:	4b6d      	ldr	r3, [pc, #436]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800472c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004730:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	4969      	ldr	r1, [pc, #420]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004740:	4b67      	ldr	r3, [pc, #412]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004746:	4a66      	ldr	r2, [pc, #408]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800474c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004750:	f7fe f8ae 	bl	80028b0 <HAL_GetTick>
 8004754:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fe f8aa 	bl	80028b0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b05      	cmp	r3, #5
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e3b3      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800476a:	4b5d      	ldr	r3, [pc, #372]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800476c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x630>
 8004778:	e01b      	b.n	80047b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800477a:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004780:	4a57      	ldr	r2, [pc, #348]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004782:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800478a:	f7fe f891 	bl	80028b0 <HAL_GetTick>
 800478e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fe f88d 	bl	80028b0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b05      	cmp	r3, #5
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e396      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80047a4:	4b4e      	ldr	r3, [pc, #312]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c0:	4a47      	ldr	r2, [pc, #284]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8111 	beq.w	80049fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b40      	ldr	r3, [pc, #256]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f2:	4a3b      	ldr	r2, [pc, #236]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d118      	bne.n	800484e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800481c:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	4a30      	ldr	r2, [pc, #192]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004828:	f7fe f842 	bl	80028b0 <HAL_GetTick>
 800482c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004830:	f7fe f83e 	bl	80028b0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e347      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004842:	4b28      	ldr	r3, [pc, #160]	@ (80048e4 <HAL_RCC_OscConfig+0x7bc>)
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01f      	beq.n	800489a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004866:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487c:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004886:	e018      	b.n	80048ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800488a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800488e:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004898:	e00f      	b.n	80048ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800489a:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 800489c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a0:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80048ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b0:	4a0b      	ldr	r2, [pc, #44]	@ (80048e0 <HAL_RCC_OscConfig+0x7b8>)
 80048b2:	f023 0304 	bic.w	r3, r3, #4
 80048b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d057      	beq.n	8004972 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80048c2:	f7fd fff5 	bl	80028b0 <HAL_GetTick>
 80048c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c8:	e00e      	b.n	80048e8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fd fff1 	bl	80028b0 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d905      	bls.n	80048e8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e2f8      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e8:	4b9c      	ldr	r3, [pc, #624]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80048ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0e9      	beq.n	80048ca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004902:	4b96      	ldr	r3, [pc, #600]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004908:	4a94      	ldr	r2, [pc, #592]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 800490a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fd ffcc 	bl	80028b0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e2d3      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800492a:	4b8c      	ldr	r3, [pc, #560]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 800492c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ed      	beq.n	8004914 <HAL_RCC_OscConfig+0x7ec>
 8004938:	e053      	b.n	80049e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800493a:	4b88      	ldr	r3, [pc, #544]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 800493c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004940:	4a86      	ldr	r2, [pc, #536]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fd ffb0 	bl	80028b0 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e2b7      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004962:	4b7e      	ldr	r3, [pc, #504]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ed      	bne.n	800494c <HAL_RCC_OscConfig+0x824>
 8004970:	e037      	b.n	80049e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004972:	f7fd ff9d 	bl	80028b0 <HAL_GetTick>
 8004976:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fd ff99 	bl	80028b0 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e2a0      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004990:	4b72      	ldr	r3, [pc, #456]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ed      	bne.n	800497a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800499e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049ac:	4b6b      	ldr	r3, [pc, #428]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fd ff77 	bl	80028b0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e27e      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049d4:	4b61      	ldr	r3, [pc, #388]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ed      	bne.n	80049be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b5c      	ldr	r3, [pc, #368]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d019      	beq.n	8004a42 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004a0e:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a18:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a1a:	f7fd ff49 	bl	80028b0 <HAL_GetTick>
 8004a1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a22:	f7fd ff45 	bl	80028b0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e24e      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a34:	4b49      	ldr	r3, [pc, #292]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x8fa>
 8004a40:	e018      	b.n	8004a74 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004a42:	4b46      	ldr	r3, [pc, #280]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a45      	ldr	r2, [pc, #276]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a4c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a4e:	f7fd ff2f 	bl	80028b0 <HAL_GetTick>
 8004a52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a56:	f7fd ff2b 	bl	80028b0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e234      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a68:	4b3c      	ldr	r3, [pc, #240]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d036      	beq.n	8004aee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d019      	beq.n	8004abc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a88:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a94:	f7fd ff0c 	bl	80028b0 <HAL_GetTick>
 8004a98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a9c:	f7fd ff08 	bl	80028b0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e211      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x974>
 8004aba:	e018      	b.n	8004aee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004abc:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ac6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ac8:	f7fd fef2 	bl	80028b0 <HAL_GetTick>
 8004acc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004ad0:	f7fd feee 	bl	80028b0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1f7      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d07f      	beq.n	8004bfa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d062      	beq.n	8004bc8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004b02:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	4910      	ldr	r1, [pc, #64]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b28:	d309      	bcc.n	8004b3e <HAL_RCC_OscConfig+0xa16>
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 021f 	bic.w	r2, r3, #31
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4909      	ldr	r1, [pc, #36]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60cb      	str	r3, [r1, #12]
 8004b3c:	e02a      	b.n	8004b94 <HAL_RCC_OscConfig+0xa6c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da0c      	bge.n	8004b60 <HAL_RCC_OscConfig+0xa38>
 8004b46:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	015b      	lsls	r3, r3, #5
 8004b54:	4901      	ldr	r1, [pc, #4]	@ (8004b5c <HAL_RCC_OscConfig+0xa34>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60cb      	str	r3, [r1, #12]
 8004b5a:	e01b      	b.n	8004b94 <HAL_RCC_OscConfig+0xa6c>
 8004b5c:	46020c00 	.word	0x46020c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b68:	d30a      	bcc.n	8004b80 <HAL_RCC_OscConfig+0xa58>
 8004b6a:	4ba1      	ldr	r3, [pc, #644]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	499d      	ldr	r1, [pc, #628]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]
 8004b7e:	e009      	b.n	8004b94 <HAL_RCC_OscConfig+0xa6c>
 8004b80:	4b9b      	ldr	r3, [pc, #620]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	03db      	lsls	r3, r3, #15
 8004b8e:	4998      	ldr	r1, [pc, #608]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b94:	4b96      	ldr	r3, [pc, #600]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a95      	ldr	r2, [pc, #596]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004b9a:	f043 0310 	orr.w	r3, r3, #16
 8004b9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ba0:	f7fd fe86 	bl	80028b0 <HAL_GetTick>
 8004ba4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004ba8:	f7fd fe82 	bl	80028b0 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e18b      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004bba:	4b8d      	ldr	r3, [pc, #564]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xa80>
 8004bc6:	e018      	b.n	8004bfa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004bc8:	4b89      	ldr	r3, [pc, #548]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a88      	ldr	r2, [pc, #544]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bd4:	f7fd fe6c 	bl	80028b0 <HAL_GetTick>
 8004bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004bdc:	f7fd fe68 	bl	80028b0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e171      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bee:	4b80      	ldr	r3, [pc, #512]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8166 	beq.w	8004ed0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0a:	4b79      	ldr	r3, [pc, #484]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	f000 80f2 	beq.w	8004dfc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	f040 80c5 	bne.w	8004dac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c22:	4b73      	ldr	r3, [pc, #460]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a72      	ldr	r2, [pc, #456]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c2e:	f7fd fe3f 	bl	80028b0 <HAL_GetTick>
 8004c32:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7fd fe3b 	bl	80028b0 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e144      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c48:	4b69      	ldr	r3, [pc, #420]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c54:	4b66      	ldr	r3, [pc, #408]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d111      	bne.n	8004c86 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	4b63      	ldr	r3, [pc, #396]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c68:	4a61      	ldr	r2, [pc, #388]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c72:	4b5f      	ldr	r3, [pc, #380]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c86:	4b5b      	ldr	r3, [pc, #364]	@ (8004df4 <HAL_RCC_OscConfig+0xccc>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c9a:	4b56      	ldr	r3, [pc, #344]	@ (8004df4 <HAL_RCC_OscConfig+0xccc>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4a55      	ldr	r2, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0xccc>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004ca6:	4b52      	ldr	r3, [pc, #328]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cba:	3a01      	subs	r2, #1
 8004cbc:	0212      	lsls	r2, r2, #8
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	494a      	ldr	r1, [pc, #296]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ccc:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd0:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <HAL_RCC_OscConfig+0xcd0>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ce2:	3a01      	subs	r2, #1
 8004ce4:	0252      	lsls	r2, r2, #9
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	4311      	orrs	r1, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	0412      	lsls	r2, r2, #16
 8004cf2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004cfc:	3a01      	subs	r2, #1
 8004cfe:	0612      	lsls	r2, r2, #24
 8004d00:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004d04:	430a      	orrs	r2, r1
 8004d06:	493a      	ldr	r1, [pc, #232]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004d0c:	4b38      	ldr	r3, [pc, #224]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	4a37      	ldr	r2, [pc, #220]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d12:	f023 0310 	bic.w	r3, r3, #16
 8004d16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1c:	4a34      	ldr	r2, [pc, #208]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d22:	4b33      	ldr	r3, [pc, #204]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d28:	f043 0310 	orr.w	r3, r3, #16
 8004d2c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004d2e:	4b30      	ldr	r3, [pc, #192]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f023 020c 	bic.w	r2, r3, #12
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3a:	492d      	ldr	r1, [pc, #180]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004d40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d48:	4b2a      	ldr	r3, [pc, #168]	@ (8004df4 <HAL_RCC_OscConfig+0xccc>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <HAL_RCC_OscConfig+0xccc>)
 8004d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d52:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d54:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d5c:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d62:	4a23      	ldr	r2, [pc, #140]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b20      	ldr	r3, [pc, #128]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d78:	f7fd fd9a 	bl	80028b0 <HAL_GetTick>
 8004d7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fd fd96 	bl	80028b0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e09f      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d92:	4b17      	ldr	r3, [pc, #92]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da8:	6293      	str	r3, [r2, #40]	@ 0x28
 8004daa:	e091      	b.n	8004ed0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0f      	ldr	r2, [pc, #60]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db8:	f7fd fd7a 	bl	80028b0 <HAL_GetTick>
 8004dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fd76 	bl	80028b0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e07f      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dd2:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004dde:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	4a03      	ldr	r2, [pc, #12]	@ (8004df0 <HAL_RCC_OscConfig+0xcc8>)
 8004de4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	6293      	str	r3, [r2, #40]	@ 0x28
 8004dee:	e06f      	b.n	8004ed0 <HAL_RCC_OscConfig+0xda8>
 8004df0:	46020c00 	.word	0x46020c00
 8004df4:	46020800 	.word	0x46020800
 8004df8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004dfc:	4b37      	ldr	r3, [pc, #220]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e02:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d039      	beq.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0203 	and.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d132      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d129      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d122      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e48:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d11a      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	0a5b      	lsrs	r3, r3, #9
 8004e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d108      	bne.n	8004e84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e024      	b.n	8004ed2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	08db      	lsrs	r3, r3, #3
 8004e8e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d01a      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004ea0:	f023 0310 	bic.w	r3, r3, #16
 8004ea4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fd fd03 	bl	80028b0 <HAL_GetTick>
 8004eaa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004eac:	bf00      	nop
 8004eae:	f7fd fcff 	bl	80028b0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d0f9      	beq.n	8004eae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebe:	4a07      	ldr	r2, [pc, #28]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	4a04      	ldr	r2, [pc, #16]	@ (8004edc <HAL_RCC_OscConfig+0xdb4>)
 8004eca:	f043 0310 	orr.w	r3, r3, #16
 8004ece:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3738      	adds	r7, #56	@ 0x38
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	46020c00 	.word	0x46020c00

08004ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e1d9      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b9b      	ldr	r3, [pc, #620]	@ (8005164 <HAL_RCC_ClockConfig+0x284>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d910      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b98      	ldr	r3, [pc, #608]	@ (8005164 <HAL_RCC_ClockConfig+0x284>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	4996      	ldr	r1, [pc, #600]	@ (8005164 <HAL_RCC_ClockConfig+0x284>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b94      	ldr	r3, [pc, #592]	@ (8005164 <HAL_RCC_ClockConfig+0x284>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e1c1      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	4b8c      	ldr	r3, [pc, #560]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d908      	bls.n	8004f52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004f40:	4b89      	ldr	r3, [pc, #548]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	4986      	ldr	r1, [pc, #536]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d012      	beq.n	8004f84 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	4b81      	ldr	r3, [pc, #516]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d909      	bls.n	8004f84 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f70:	4b7d      	ldr	r3, [pc, #500]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	497a      	ldr	r1, [pc, #488]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b74      	ldr	r3, [pc, #464]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d908      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004fa0:	4b71      	ldr	r3, [pc, #452]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	496e      	ldr	r1, [pc, #440]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	4b69      	ldr	r3, [pc, #420]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d908      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004fce:	4b66      	ldr	r3, [pc, #408]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 020f 	bic.w	r2, r3, #15
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4963      	ldr	r1, [pc, #396]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80d2 	beq.w	8005192 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d143      	bne.n	8005082 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8004ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d110      	bne.n	800502a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005008:	4b57      	ldr	r3, [pc, #348]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 800500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800500e:	4a56      	ldr	r2, [pc, #344]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8005010:	f043 0304 	orr.w	r3, r3, #4
 8005014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005018:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 800501a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800502a:	f7fd fc41 	bl	80028b0 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005030:	4b4e      	ldr	r3, [pc, #312]	@ (800516c <HAL_RCC_ClockConfig+0x28c>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00f      	beq.n	800505c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800503e:	f7fd fc37 	bl	80028b0 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e12b      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005050:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCC_ClockConfig+0x28c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005062:	4b41      	ldr	r3, [pc, #260]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005068:	4a3f      	ldr	r2, [pc, #252]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005072:	4b3d      	ldr	r3, [pc, #244]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d121      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e112      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d115      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e106      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80050a2:	4b31      	ldr	r3, [pc, #196]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e0fa      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0f2      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80050c2:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4926      	ldr	r1, [pc, #152]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80050d4:	f7fd fbec 	bl	80028b0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d112      	bne.n	8005108 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fd fbe4 	bl	80028b0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0d6      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d1ee      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x204>
 8005106:	e044      	b.n	8005192 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d112      	bne.n	8005136 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005110:	e00a      	b.n	8005128 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005112:	f7fd fbcd 	bl	80028b0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e0bf      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 030c 	and.w	r3, r3, #12
 8005130:	2b08      	cmp	r3, #8
 8005132:	d1ee      	bne.n	8005112 <HAL_RCC_ClockConfig+0x232>
 8005134:	e02d      	b.n	8005192 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d123      	bne.n	8005186 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fd fbb6 	bl	80028b0 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0a8      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005156:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <HAL_RCC_ClockConfig+0x288>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ee      	bne.n	8005140 <HAL_RCC_ClockConfig+0x260>
 8005162:	e016      	b.n	8005192 <HAL_RCC_ClockConfig+0x2b2>
 8005164:	40022000 	.word	0x40022000
 8005168:	46020c00 	.word	0x46020c00
 800516c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fd fb9e 	bl	80028b0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e090      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005186:	4b4a      	ldr	r3, [pc, #296]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b04      	cmp	r3, #4
 8005190:	d1ee      	bne.n	8005170 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	4b43      	ldr	r3, [pc, #268]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d208      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80051ae:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	493d      	ldr	r1, [pc, #244]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b3c      	ldr	r3, [pc, #240]	@ (80052b4 <HAL_RCC_ClockConfig+0x3d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d210      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b39      	ldr	r3, [pc, #228]	@ (80052b4 <HAL_RCC_ClockConfig+0x3d4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 020f 	bic.w	r2, r3, #15
 80051d6:	4937      	ldr	r1, [pc, #220]	@ (80052b4 <HAL_RCC_ClockConfig+0x3d4>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b35      	ldr	r3, [pc, #212]	@ (80052b4 <HAL_RCC_ClockConfig+0x3d4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e05b      	b.n	80052a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005208:	429a      	cmp	r2, r3
 800520a:	d208      	bcs.n	800521e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800520c:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4925      	ldr	r1, [pc, #148]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800521a:	4313      	orrs	r3, r2
 800521c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d012      	beq.n	8005250 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	4b20      	ldr	r3, [pc, #128]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005238:	429a      	cmp	r2, r3
 800523a:	d209      	bcs.n	8005250 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800523c:	4b1c      	ldr	r3, [pc, #112]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4919      	ldr	r1, [pc, #100]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800524c:	4313      	orrs	r3, r2
 800524e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005268:	429a      	cmp	r2, r3
 800526a:	d208      	bcs.n	800527e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800526c:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	490d      	ldr	r1, [pc, #52]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800527e:	f000 f821 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8005282:	4602      	mov	r2, r0
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <HAL_RCC_ClockConfig+0x3d0>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	490a      	ldr	r1, [pc, #40]	@ (80052b8 <HAL_RCC_ClockConfig+0x3d8>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	4a09      	ldr	r2, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x3dc>)
 8005296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005298:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <HAL_RCC_ClockConfig+0x3e0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7fd fa7d 	bl	800279c <HAL_InitTick>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	46020c00 	.word	0x46020c00
 80052b4:	40022000 	.word	0x40022000
 80052b8:	08009a60 	.word	0x08009a60
 80052bc:	20000000 	.word	0x20000000
 80052c0:	20000004 	.word	0x20000004

080052c4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b08b      	sub	sp, #44	@ 0x2c
 80052c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d2:	4b78      	ldr	r3, [pc, #480]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052dc:	4b75      	ldr	r3, [pc, #468]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x34>
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d121      	bne.n	8005336 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d11e      	bne.n	8005336 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052f8:	4b6e      	ldr	r3, [pc, #440]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005304:	4b6b      	ldr	r3, [pc, #428]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800530a:	0b1b      	lsrs	r3, r3, #12
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
 8005312:	e005      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005314:	4b67      	ldr	r3, [pc, #412]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	0f1b      	lsrs	r3, r3, #28
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005320:	4a65      	ldr	r2, [pc, #404]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005334:	e00d      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005336:	4b5f      	ldr	r3, [pc, #380]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	2b04      	cmp	r3, #4
 8005340:	d102      	bne.n	8005348 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005342:	4b5e      	ldr	r3, [pc, #376]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	e004      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b08      	cmp	r3, #8
 800534c:	d101      	bne.n	8005352 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800534e:	4b5b      	ldr	r3, [pc, #364]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005350:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b0c      	cmp	r3, #12
 8005356:	f040 80a5 	bne.w	80054a4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800535a:	4b56      	ldr	r3, [pc, #344]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005364:	4b53      	ldr	r3, [pc, #332]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800537e:	4b4d      	ldr	r3, [pc, #308]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	08db      	lsrs	r3, r3, #3
 8005384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d003      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d022      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x128>
 80053a6:	e043      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80054c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b3e      	ldr	r3, [pc, #248]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80053ce:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80054c4 <HAL_RCC_GetSysClockFreq+0x200>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ea:	e046      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80054c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b2d      	ldr	r3, [pc, #180]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800540e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005412:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80054c4 <HAL_RCC_GetSysClockFreq+0x200>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800541e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542e:	e024      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800544a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005458:	ed97 6a01 	vldr	s12, [r7, #4]
 800545c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80054c4 <HAL_RCC_GetSysClockFreq+0x200>
 8005460:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005464:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005474:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005478:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800547a:	4b0e      	ldr	r3, [pc, #56]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800547c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547e:	0e1b      	lsrs	r3, r3, #24
 8005480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005484:	3301      	adds	r3, #1
 8005486:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005492:	edd7 6a07 	vldr	s13, [r7, #28]
 8005496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549e:	ee17 3a90 	vmov	r3, s15
 80054a2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	372c      	adds	r7, #44	@ 0x2c
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	46020c00 	.word	0x46020c00
 80054b8:	08009a78 	.word	0x08009a78
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	4b742400 	.word	0x4b742400
 80054c4:	46000000 	.word	0x46000000

080054c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80054cc:	f7ff fefa 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x28>)
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4906      	ldr	r1, [pc, #24]	@ (80054f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	4a05      	ldr	r2, [pc, #20]	@ (80054f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80054e4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80054e6:	4b04      	ldr	r3, [pc, #16]	@ (80054f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80054e8:	681b      	ldr	r3, [r3, #0]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	46020c00 	.word	0x46020c00
 80054f4:	08009a60 	.word	0x08009a60
 80054f8:	20000000 	.word	0x20000000

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005500:	f7ff ffe2 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	46020c00 	.word	0x46020c00
 8005520:	08009a70 	.word	0x08009a70

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005528:	f7ff ffce 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	46020c00 	.word	0x46020c00
 8005548:	08009a70 	.word	0x08009a70

0800554c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005550:	f7ff ffba 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	@ (8005570 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	46020c00 	.word	0x46020c00
 8005570:	08009a70 	.word	0x08009a70

08005574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800557c:	4b3e      	ldr	r3, [pc, #248]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800558a:	f7fe fd5f 	bl	800404c <HAL_PWREx_GetVoltageRange>
 800558e:	6178      	str	r0, [r7, #20]
 8005590:	e019      	b.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	4b39      	ldr	r3, [pc, #228]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055a2:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055b0:	f7fe fd4c 	bl	800404c <HAL_PWREx_GetVoltageRange>
 80055b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b30      	ldr	r3, [pc, #192]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005678 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055be:	f023 0304 	bic.w	r3, r3, #4
 80055c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055cc:	d003      	beq.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d4:	d109      	bne.n	80055ea <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055dc:	d202      	bcs.n	80055e4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80055de:	2301      	movs	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055e2:	e033      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055e8:	e030      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055f0:	d208      	bcs.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f8:	d102      	bne.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055fa:	2303      	movs	r3, #3
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	e025      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e035      	b.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800560a:	d90f      	bls.n	800562c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005618:	d902      	bls.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e015      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005620:	2301      	movs	r3, #1
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e012      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e00f      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005632:	d109      	bne.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563a:	d102      	bne.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800563c:	2301      	movs	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e004      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005642:	2302      	movs	r3, #2
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e001      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005648:	2301      	movs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 020f 	bic.w	r2, r3, #15
 8005654:	4909      	ldr	r1, [pc, #36]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	46020c00 	.word	0x46020c00
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b0ba      	sub	sp, #232	@ 0xe8
 8005686:	af00      	add	r7, sp, #0
 8005688:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800568c:	2300      	movs	r3, #0
 800568e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005692:	2300      	movs	r3, #0
 8005694:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 0401 	and.w	r4, r2, #1
 80056a4:	2500      	movs	r5, #0
 80056a6:	ea54 0305 	orrs.w	r3, r4, r5
 80056aa:	d00b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80056ac:	4bcb      	ldr	r3, [pc, #812]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b2:	f023 0103 	bic.w	r1, r3, #3
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056bc:	4ac7      	ldr	r2, [pc, #796]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056be:	430b      	orrs	r3, r1
 80056c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f002 0802 	and.w	r8, r2, #2
 80056d0:	f04f 0900 	mov.w	r9, #0
 80056d4:	ea58 0309 	orrs.w	r3, r8, r9
 80056d8:	d00b      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80056da:	4bc0      	ldr	r3, [pc, #768]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e0:	f023 010c 	bic.w	r1, r3, #12
 80056e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	4abc      	ldr	r2, [pc, #752]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ec:	430b      	orrs	r3, r1
 80056ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f002 0a04 	and.w	sl, r2, #4
 80056fe:	f04f 0b00 	mov.w	fp, #0
 8005702:	ea5a 030b 	orrs.w	r3, sl, fp
 8005706:	d00b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005708:	4bb4      	ldr	r3, [pc, #720]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800570e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	4ab0      	ldr	r2, [pc, #704]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571a:	430b      	orrs	r3, r1
 800571c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f002 0308 	and.w	r3, r2, #8
 800572c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005730:	2300      	movs	r3, #0
 8005732:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005736:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d00b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005740:	4ba6      	ldr	r3, [pc, #664]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005746:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	4aa2      	ldr	r2, [pc, #648]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005752:	430b      	orrs	r3, r1
 8005754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f002 0310 	and.w	r3, r2, #16
 8005764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005768:	2300      	movs	r3, #0
 800576a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800576e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d00b      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005778:	4b98      	ldr	r3, [pc, #608]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800577e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005788:	4a94      	ldr	r2, [pc, #592]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f002 0320 	and.w	r3, r2, #32
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80057b0:	4b8a      	ldr	r3, [pc, #552]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057b6:	f023 0107 	bic.w	r1, r3, #7
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c0:	4a86      	ldr	r2, [pc, #536]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c2:	430b      	orrs	r3, r1
 80057c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d00b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80057e8:	4b7c      	ldr	r3, [pc, #496]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80057f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f8:	4a78      	ldr	r2, [pc, #480]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800580c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005816:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d00b      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005820:	4b6e      	ldr	r3, [pc, #440]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005830:	4a6a      	ldr	r2, [pc, #424]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005832:	430b      	orrs	r3, r1
 8005834:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800584e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005852:	460b      	mov	r3, r1
 8005854:	4313      	orrs	r3, r2
 8005856:	d00b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005858:	4b60      	ldr	r3, [pc, #384]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800585e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	4a5c      	ldr	r2, [pc, #368]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586a:	430b      	orrs	r3, r1
 800586c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005886:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d00b      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005890:	4b52      	ldr	r3, [pc, #328]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005896:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800589a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800589e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a0:	4a4e      	ldr	r2, [pc, #312]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80058b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80058c2:	460b      	mov	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80058c8:	4b44      	ldr	r3, [pc, #272]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058ce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80058d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058d8:	4a40      	ldr	r2, [pc, #256]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d00b      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005900:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005906:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800590a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800590e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005910:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005912:	430b      	orrs	r3, r1
 8005914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800592e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005932:	460b      	mov	r3, r1
 8005934:	4313      	orrs	r3, r2
 8005936:	d00c      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005938:	4b28      	ldr	r3, [pc, #160]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800593a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800593e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594a:	4a24      	ldr	r2, [pc, #144]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594c:	430b      	orrs	r3, r1
 800594e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800595e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005960:	2300      	movs	r3, #0
 8005962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005964:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d04f      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800596e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	2b80      	cmp	r3, #128	@ 0x80
 8005978:	d02d      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d827      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800597e:	2b60      	cmp	r3, #96	@ 0x60
 8005980:	d02e      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005982:	2b60      	cmp	r3, #96	@ 0x60
 8005984:	d823      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005986:	2b40      	cmp	r3, #64	@ 0x40
 8005988:	d006      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800598a:	2b40      	cmp	r3, #64	@ 0x40
 800598c:	d81f      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005992:	2b20      	cmp	r3, #32
 8005994:	d011      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005996:	e01a      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005998:	4b10      	ldr	r3, [pc, #64]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	4a0f      	ldr	r2, [pc, #60]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059a4:	e01d      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059aa:	3308      	adds	r3, #8
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 fa17 	bl	8007de0 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059b8:	e013      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059be:	332c      	adds	r3, #44	@ 0x2c
 80059c0:	4618      	mov	r0, r3
 80059c2:	f002 faa5 	bl	8007f10 <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059cc:	e009      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059d4:	e005      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80059d6:	bf00      	nop
 80059d8:	e003      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80059da:	bf00      	nop
 80059dc:	46020c00 	.word	0x46020c00
        break;
 80059e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10d      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80059ea:	4bb6      	ldr	r3, [pc, #728]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059f0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80059f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fc:	4ab1      	ldr	r2, [pc, #708]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a0a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a24:	460b      	mov	r3, r1
 8005a26:	4313      	orrs	r3, r2
 8005a28:	d053      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a36:	d033      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d82c      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a42:	d02f      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a48:	d826      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4e:	d008      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a54:	d820      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5e:	d011      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005a60:	e01a      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a62:	4b98      	ldr	r3, [pc, #608]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	4a97      	ldr	r2, [pc, #604]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a6e:	e01a      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a74:	3308      	adds	r3, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f002 f9b2 	bl	8007de0 <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a82:	e010      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a88:	332c      	adds	r3, #44	@ 0x2c
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f002 fa40 	bl	8007f10 <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a96:	e006      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005aae:	4b85      	ldr	r3, [pc, #532]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ab4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac0:	4a80      	ldr	r2, [pc, #512]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ace:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ade:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ae4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d046      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005af6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005afa:	d028      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005afc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b00:	d821      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b06:	d022      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b0c:	d81b      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b12:	d01c      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b18:	d815      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b24:	d80f      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2e:	d00e      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005b30:	e009      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b36:	3308      	adds	r3, #8
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f002 f951 	bl	8007de0 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b58:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b5e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b6a:	4a56      	ldr	r2, [pc, #344]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b72:	e003      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d03f      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d81e      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005beb 	.word	0x08005beb
 8005bb0:	08005bc1 	.word	0x08005bc1
 8005bb4:	08005bcf 	.word	0x08005bcf
 8005bb8:	08005beb 	.word	0x08005beb
 8005bbc:	08005beb 	.word	0x08005beb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bc0:	4b40      	ldr	r3, [pc, #256]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bca:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005bcc:	e00e      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bd2:	332c      	adds	r3, #44	@ 0x2c
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 f99b 	bl	8007f10 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005bea:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005bf4:	4b33      	ldr	r3, [pc, #204]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bfa:	f023 0107 	bic.w	r1, r3, #7
 8005bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c06:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c26:	2300      	movs	r3, #0
 8005c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d04d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c40:	d028      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005c42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c46:	d821      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c4c:	d024      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005c4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c52:	d81b      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c58:	d00e      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c5e:	d815      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01b      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d110      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c6a:	4b16      	ldr	r3, [pc, #88]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	4a15      	ldr	r2, [pc, #84]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c76:	e012      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c7c:	332c      	adds	r3, #44	@ 0x2c
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f002 f946 	bl	8007f10 <RCCEx_PLL3_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c8a:	e008      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c92:	e004      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c94:	bf00      	nop
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c98:	bf00      	nop
 8005c9a:	e000      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d110      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cb8:	4a02      	ldr	r2, [pc, #8]	@ (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005cc0:	e006      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005cc2:	bf00      	nop
 8005cc4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ccc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cde:	2300      	movs	r3, #0
 8005ce0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f000 80b5 	beq.w	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d113      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	4b9a      	ldr	r3, [pc, #616]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d08:	4a98      	ldr	r2, [pc, #608]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d0a:	f043 0304 	orr.w	r3, r3, #4
 8005d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d12:	4b96      	ldr	r3, [pc, #600]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005d2a:	4b91      	ldr	r3, [pc, #580]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	4a90      	ldr	r2, [pc, #576]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d36:	f7fc fdbb 	bl	80028b0 <HAL_GetTick>
 8005d3a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d3e:	e00b      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d40:	f7fc fdb6 	bl	80028b0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d903      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d56:	e005      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d58:	4b85      	ldr	r3, [pc, #532]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ed      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005d64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d165      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d023      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01b      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d92:	4b76      	ldr	r3, [pc, #472]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da0:	4b72      	ldr	r3, [pc, #456]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005da6:	4a71      	ldr	r2, [pc, #452]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005db0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005db6:	4a6d      	ldr	r2, [pc, #436]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fc fd6b 	bl	80028b0 <HAL_GetTick>
 8005dda:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dde:	e00d      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fc fd66 	bl	80028b0 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d903      	bls.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005dfa:	e006      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0ea      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005e0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005e12:	4b56      	ldr	r3, [pc, #344]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e24:	4a51      	ldr	r2, [pc, #324]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e26:	430b      	orrs	r3, r1
 8005e28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005e2c:	e008      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e32:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e40:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d107      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e48:	4b48      	ldr	r3, [pc, #288]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e4e:	4a47      	ldr	r2, [pc, #284]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e66:	2300      	movs	r3, #0
 8005e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d042      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e80:	d022      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e86:	d81b      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e8c:	d011      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e92:	d815      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d019      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e9c:	d110      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 ff9b 	bl	8007de0 <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005eb0:	e00d      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ebc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ebe:	e006      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ec6:	e002      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005ecc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005ed6:	4b25      	ldr	r3, [pc, #148]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005edc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ee8:	4a20      	ldr	r2, [pc, #128]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005eea:	430b      	orrs	r3, r1
 8005eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ef6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f08:	2300      	movs	r3, #0
 8005f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f10:	460b      	mov	r3, r1
 8005f12:	4313      	orrs	r3, r2
 8005f14:	d032      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f22:	d00b      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f28:	d804      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f32:	d007      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005f3a:	e004      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005f44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d112      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005f4e:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f60:	4a02      	ldr	r2, [pc, #8]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f68:	e008      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005f6a:	bf00      	nop
 8005f6c:	46020c00 	.word	0x46020c00
 8005f70:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f92:	460b      	mov	r3, r1
 8005f94:	4313      	orrs	r3, r2
 8005f96:	d00c      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005f98:	4b98      	ldr	r3, [pc, #608]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f9e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005faa:	4a94      	ldr	r2, [pc, #592]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d019      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fdc:	4b87      	ldr	r3, [pc, #540]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	4a86      	ldr	r2, [pc, #536]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005fe8:	4b84      	ldr	r3, [pc, #528]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fee:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ffa:	4a80      	ldr	r2, [pc, #512]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800600e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006010:	2300      	movs	r3, #0
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006014:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d00c      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800601e:	4b77      	ldr	r3, [pc, #476]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006024:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800602c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006030:	4972      	ldr	r1, [pc, #456]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
 800604a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d00c      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006054:	4b69      	ldr	r3, [pc, #420]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800605a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006062:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006066:	4965      	ldr	r1, [pc, #404]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800606e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006084:	460b      	mov	r3, r1
 8006086:	4313      	orrs	r3, r2
 8006088:	d00c      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800608a:	4b5c      	ldr	r3, [pc, #368]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800608c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006090:	f023 0218 	bic.w	r2, r3, #24
 8006094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006098:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800609c:	4957      	ldr	r1, [pc, #348]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d032      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80060c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060cc:	d105      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ce:	4b4b      	ldr	r3, [pc, #300]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	4a4a      	ldr	r2, [pc, #296]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d8:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80060da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060e6:	d108      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ec:	3308      	adds	r3, #8
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fe76 	bl	8007de0 <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80060fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10d      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006102:	4b3e      	ldr	r3, [pc, #248]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006108:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800610c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006114:	4939      	ldr	r1, [pc, #228]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006122:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800613c:	460b      	mov	r3, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	d03a      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800614e:	d00e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006154:	d815      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d017      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800615a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800615e:	d110      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006160:	4b26      	ldr	r3, [pc, #152]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	4a25      	ldr	r2, [pc, #148]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800616a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800616c:	e00e      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800616e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006172:	3308      	adds	r3, #8
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fe33 	bl	8007de0 <RCCEx_PLL2_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006180:	e004      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800618a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800618c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006194:	4b19      	ldr	r3, [pc, #100]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800619a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800619e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a6:	4915      	ldr	r1, [pc, #84]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80061b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80061b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d00c      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80061de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061e6:	4905      	ldr	r1, [pc, #20]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80061ee:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	37e8      	adds	r7, #232	@ 0xe8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fc:	46020c00 	.word	0x46020c00

08006200 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006200:	b480      	push	{r7}
 8006202:	b089      	sub	sp, #36	@ 0x24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006208:	4ba6      	ldr	r3, [pc, #664]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800620a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006210:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006212:	4ba4      	ldr	r3, [pc, #656]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800621c:	4ba1      	ldr	r3, [pc, #644]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	3301      	adds	r3, #1
 8006228:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800622a:	4b9e      	ldr	r3, [pc, #632]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006236:	4b9b      	ldr	r3, [pc, #620]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	08db      	lsrs	r3, r3, #3
 800623c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d062      	beq.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b03      	cmp	r3, #3
 800625c:	f200 8081 	bhi.w	8006362 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d024      	beq.n	80062b0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d17a      	bne.n	8006362 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80064a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b89      	ldr	r3, [pc, #548]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800628e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006292:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ae:	e08f      	b.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062b0:	4b7c      	ldr	r3, [pc, #496]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80062bc:	4b79      	ldr	r3, [pc, #484]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	0f1b      	lsrs	r3, r3, #28
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80062c8:	4b76      	ldr	r3, [pc, #472]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	0f1b      	lsrs	r3, r3, #28
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	4a76      	ldr	r2, [pc, #472]	@ (80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80062d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006300:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006310:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800631c:	e058      	b.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006328:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800632c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006330:	4b5c      	ldr	r3, [pc, #368]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006340:	ed97 6a02 	vldr	s12, [r7, #8]
 8006344:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006348:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800634c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006354:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006360:	e036      	b.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006362:	4b50      	ldr	r3, [pc, #320]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800636e:	4b4d      	ldr	r3, [pc, #308]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	0f1b      	lsrs	r3, r3, #28
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	e006      	b.n	8006388 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800637a:	4b4a      	ldr	r3, [pc, #296]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800637c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	0f1b      	lsrs	r3, r3, #28
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	4a49      	ldr	r2, [pc, #292]	@ (80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800638a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80063b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80063d0:	4b34      	ldr	r3, [pc, #208]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063dc:	4b31      	ldr	r3, [pc, #196]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e0:	0a5b      	lsrs	r3, r3, #9
 80063e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80063ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006402:	ee17 2a90 	vmov	r2, s15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800641e:	4b21      	ldr	r3, [pc, #132]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006434:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006438:	edd7 6a07 	vldr	s13, [r7, #28]
 800643c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006444:	ee17 2a90 	vmov	r2, s15
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006454:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d017      	beq.n	8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006460:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006476:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800647a:	edd7 6a07 	vldr	s13, [r7, #28]
 800647e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006486:	ee17 2a90 	vmov	r2, s15
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800648e:	e002      	b.n	8006496 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
}
 8006496:	bf00      	nop
 8006498:	3724      	adds	r7, #36	@ 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	46020c00 	.word	0x46020c00
 80064a8:	4b742400 	.word	0x4b742400
 80064ac:	46000000 	.word	0x46000000
 80064b0:	08009a78 	.word	0x08009a78

080064b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b089      	sub	sp, #36	@ 0x24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80064bc:	4ba6      	ldr	r3, [pc, #664]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80064c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80064d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	3301      	adds	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80064de:	4b9e      	ldr	r3, [pc, #632]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80064ea:	4b9b      	ldr	r3, [pc, #620]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d062      	beq.n	80065d2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b03      	cmp	r3, #3
 8006510:	f200 8081 	bhi.w	8006616 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d024      	beq.n	8006564 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d17a      	bne.n	8006616 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800675c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006532:	4b89      	ldr	r3, [pc, #548]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006542:	ed97 6a02 	vldr	s12, [r7, #8]
 8006546:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006760 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006556:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006562:	e08f      	b.n	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006564:	4b7c      	ldr	r3, [pc, #496]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006570:	4b79      	ldr	r3, [pc, #484]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	0f1b      	lsrs	r3, r3, #28
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	e006      	b.n	800658a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800657c:	4b76      	ldr	r3, [pc, #472]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800657e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	0f1b      	lsrs	r3, r3, #28
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	4a76      	ldr	r2, [pc, #472]	@ (8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800658c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80065b4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006760 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065d0:	e058      	b.n	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065dc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800675c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80065e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e4:	4b5c      	ldr	r3, [pc, #368]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80065f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80065f8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006760 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006600:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006608:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800660c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006614:	e036      	b.n	8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006616:	4b50      	ldr	r3, [pc, #320]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006622:	4b4d      	ldr	r3, [pc, #308]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	0f1b      	lsrs	r3, r3, #28
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	e006      	b.n	800663c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800662e:	4b4a      	ldr	r3, [pc, #296]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	0f1b      	lsrs	r3, r3, #28
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	4a49      	ldr	r2, [pc, #292]	@ (8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800663e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006760 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006682:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006684:	4b34      	ldr	r3, [pc, #208]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d017      	beq.n	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006690:	4b31      	ldr	r3, [pc, #196]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006694:	0a5b      	lsrs	r3, r3, #9
 8006696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80066a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b6:	ee17 2a90 	vmov	r2, s15
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80066c6:	4b24      	ldr	r3, [pc, #144]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d017      	beq.n	8006702 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066d2:	4b21      	ldr	r3, [pc, #132]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80066e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f8:	ee17 2a90 	vmov	r2, s15
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	e002      	b.n	8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006708:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d017      	beq.n	8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006714:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	0e1b      	lsrs	r3, r3, #24
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800672a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800672e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673a:	ee17 2a90 	vmov	r2, s15
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006742:	e002      	b.n	800674a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
}
 800674a:	bf00      	nop
 800674c:	3724      	adds	r7, #36	@ 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	46020c00 	.word	0x46020c00
 800675c:	4b742400 	.word	0x4b742400
 8006760:	46000000 	.word	0x46000000
 8006764:	08009a78 	.word	0x08009a78

08006768 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	@ 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006770:	4ba6      	ldr	r3, [pc, #664]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006778:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800677a:	4ba4      	ldr	r3, [pc, #656]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006784:	4ba1      	ldr	r3, [pc, #644]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	3301      	adds	r3, #1
 8006790:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006792:	4b9e      	ldr	r3, [pc, #632]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800679e:	4b9b      	ldr	r3, [pc, #620]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a2:	08db      	lsrs	r3, r3, #3
 80067a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d062      	beq.n	8006886 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	f200 8081 	bhi.w	80068ca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d024      	beq.n	8006818 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d17a      	bne.n	80068ca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e6:	4b89      	ldr	r3, [pc, #548]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006802:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800680e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006812:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006816:	e08f      	b.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006818:	4b7c      	ldr	r3, [pc, #496]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006824:	4b79      	ldr	r3, [pc, #484]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	0f1b      	lsrs	r3, r3, #28
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	e006      	b.n	800683e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006830:	4b76      	ldr	r3, [pc, #472]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	0f1b      	lsrs	r3, r3, #28
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	4a76      	ldr	r2, [pc, #472]	@ (8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006864:	ed97 6a02 	vldr	s12, [r7, #8]
 8006868:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800686c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006878:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800687c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006884:	e058      	b.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006890:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006898:	4b5c      	ldr	r3, [pc, #368]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800689a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	ee07 3a90 	vmov	s15, r3
 80068a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80068a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80068b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80068c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c8:	e036      	b.n	8006938 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068ca:	4b50      	ldr	r3, [pc, #320]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80068d6:	4b4d      	ldr	r3, [pc, #308]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	0f1b      	lsrs	r3, r3, #28
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80068e2:	4b4a      	ldr	r3, [pc, #296]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	0f1b      	lsrs	r3, r3, #28
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	4a49      	ldr	r2, [pc, #292]	@ (8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80068f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006916:	ed97 6a02 	vldr	s12, [r7, #8]
 800691a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800691e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800692a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800692e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006936:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006938:	4b34      	ldr	r3, [pc, #208]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d017      	beq.n	8006974 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006944:	4b31      	ldr	r3, [pc, #196]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006948:	0a5b      	lsrs	r3, r3, #9
 800694a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800695a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800695e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696a:	ee17 2a90 	vmov	r2, s15
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e002      	b.n	800697a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800697a:	4b24      	ldr	r3, [pc, #144]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d017      	beq.n	80069b6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006986:	4b21      	ldr	r3, [pc, #132]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800699c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ac:	ee17 2a90 	vmov	r2, s15
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80069bc:	4b13      	ldr	r3, [pc, #76]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069c8:	4b10      	ldr	r3, [pc, #64]	@ (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069cc:	0e1b      	lsrs	r3, r3, #24
 80069ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80069da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ee:	ee17 2a90 	vmov	r2, s15
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069f6:	e002      	b.n	80069fe <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
}
 80069fe:	bf00      	nop
 8006a00:	3724      	adds	r7, #36	@ 0x24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	46020c00 	.word	0x46020c00
 8006a10:	4b742400 	.word	0x4b742400
 8006a14:	46000000 	.word	0x46000000
 8006a18:	08009a78 	.word	0x08009a78

08006a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	@ 0x38
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	d145      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a32:	4ba7      	ldr	r3, [pc, #668]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d108      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a52:	d104      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	f001 b9b3 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6c:	d114      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a74:	d110      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a76:	4b96      	ldr	r3, [pc, #600]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a86:	23fa      	movs	r3, #250	@ 0xfa
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a8a:	f001 b99b 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a94:	f001 b996 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a98:	4b8d      	ldr	r3, [pc, #564]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa4:	d107      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aac:	d103      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006aae:	4b89      	ldr	r3, [pc, #548]	@ (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab2:	f001 b987 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aba:	f001 b983 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	d151      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006aca:	4b81      	ldr	r3, [pc, #516]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ad0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006ad4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b80      	cmp	r3, #128	@ 0x80
 8006ada:	d035      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	2b80      	cmp	r3, #128	@ 0x80
 8006ae0:	d841      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	2b60      	cmp	r3, #96	@ 0x60
 8006ae6:	d02a      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	2b60      	cmp	r3, #96	@ 0x60
 8006aec:	d83b      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	2b40      	cmp	r3, #64	@ 0x40
 8006af2:	d009      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d835      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d012      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006b06:	e02e      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fb77 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b16:	f001 b955 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff fcc8 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b28:	f001 b94c 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2c:	f107 030c 	add.w	r3, r7, #12
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fe19 	bl	8006768 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b3a:	f001 b943 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b44:	f001 b93e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b48:	4b61      	ldr	r3, [pc, #388]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b54:	d103      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006b56:	4b60      	ldr	r3, [pc, #384]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b5a:	f001 b933 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b62:	f001 b92f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b6a:	f001 b92b 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b72:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006b76:	430b      	orrs	r3, r1
 8006b78:	d158      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b7a:	4b55      	ldr	r3, [pc, #340]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d03b      	beq.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b94:	d846      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b9c:	d02e      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba4:	d83e      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bac:	d00b      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb4:	d836      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006bc4:	e02e      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fb18 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd4:	f001 b8f6 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd8:	f107 0318 	add.w	r3, r7, #24
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fc69 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be6:	f001 b8ed 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fdba 	bl	8006768 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bf8:	f001 b8e4 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bfc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c02:	f001 b8df 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c06:	4b32      	ldr	r3, [pc, #200]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c12:	d103      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006c14:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c18:	f001 b8d4 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c20:	f001 b8d0 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c28:	f001 b8cc 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c30:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c34:	430b      	orrs	r3, r1
 8006c36:	d126      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006c38:	4b25      	ldr	r3, [pc, #148]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006c44:	4b22      	ldr	r3, [pc, #136]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c50:	d106      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006c58:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5c:	f001 b8b2 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006c60:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c74:	d103      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006c76:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	f001 b8a3 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c82:	f001 b89f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	d16e      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c92:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c98:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ca4:	d03d      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cac:	d85c      	bhi.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb4:	d014      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cbc:	d854      	bhi.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01f      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cca:	d012      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006ccc:	e04c      	b.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006cce:	bf00      	nop
 8006cd0:	46020c00 	.word	0x46020c00
 8006cd4:	0007a120 	.word	0x0007a120
 8006cd8:	00f42400 	.word	0x00f42400
 8006cdc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fa8b 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cee:	f001 b869 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf2:	f107 0318 	add.w	r3, r7, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fbdc 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d00:	f001 b860 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d04:	4ba7      	ldr	r3, [pc, #668]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d10:	d103      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006d12:	4ba5      	ldr	r3, [pc, #660]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d16:	f001 b855 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d1e:	f001 b851 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d22:	4ba0      	ldr	r3, [pc, #640]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d118      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d2e:	4b9d      	ldr	r3, [pc, #628]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006d3a:	4b9a      	ldr	r3, [pc, #616]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	0e1b      	lsrs	r3, r3, #24
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	e006      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006d46:	4b97      	ldr	r3, [pc, #604]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	4a95      	ldr	r2, [pc, #596]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d5c:	f001 b832 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d64:	f001 b82e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d6c:	f001 b82a 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	d17f      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d7c:	4b89      	ldr	r3, [pc, #548]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d86:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d165      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006d8e:	4b85      	ldr	r3, [pc, #532]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d94:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006d98:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006da0:	d034      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006da8:	d853      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db0:	d00b      	beq.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db8:	d84b      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d016      	beq.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dc6:	d009      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006dc8:	e043      	b.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fa16 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006dd8:	f000 bff4 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ddc:	f107 0318 	add.w	r3, r7, #24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fb67 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006dea:	f000 bfeb 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006dee:	4b6d      	ldr	r3, [pc, #436]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfa:	d103      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006e00:	f000 bfe0 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e08:	f000 bfdc 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e0c:	4b65      	ldr	r3, [pc, #404]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d118      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e18:	4b62      	ldr	r3, [pc, #392]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006e24:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	e006      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006e30:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	0e1b      	lsrs	r3, r3, #24
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006e46:	f000 bfbd 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e4e:	f000 bfb9 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006e56:	f000 bfb5 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e60:	d108      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f9ca 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e70:	f000 bfa8 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e78:	f000 bfa4 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e80:	1e51      	subs	r1, r2, #1
 8006e82:	430b      	orrs	r3, r1
 8006e84:	d136      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e86:	4b47      	ldr	r3, [pc, #284]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006e98:	f7fe fb44 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 8006e9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e9e:	f000 bf91 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d104      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ea8:	f7fe fa0c 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8006eac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eae:	f000 bf89 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ebe:	d106      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d103      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eca:	f000 bf7b 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006ece:	4b35      	ldr	r3, [pc, #212]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d107      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d104      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee8:	f000 bf6c 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	f000 bf68 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef8:	1e91      	subs	r1, r2, #2
 8006efa:	430b      	orrs	r3, r1
 8006efc:	d136      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006efe:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f04:	f003 030c 	and.w	r3, r3, #12
 8006f08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d104      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f10:	f7fe faf4 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8006f14:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f16:	f000 bf55 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d104      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f20:	f7fe f9d0 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8006f24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f26:	f000 bf4d 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f36:	d106      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d103      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f42:	f000 bf3f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006f46:	4b17      	ldr	r3, [pc, #92]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d107      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d104      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f60:	f000 bf30 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f68:	f000 bf2c 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f70:	1f11      	subs	r1, r2, #4
 8006f72:	430b      	orrs	r3, r1
 8006f74:	d13f      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f88:	f7fe fab8 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8006f8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f8e:	f000 bf19 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d10d      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f98:	f7fe f994 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8006f9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f9e:	f000 bf11 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006fa2:	bf00      	nop
 8006fa4:	46020c00 	.word	0x46020c00
 8006fa8:	02dc6c00 	.word	0x02dc6c00
 8006fac:	08009a78 	.word	0x08009a78
 8006fb0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006fb4:	4ba6      	ldr	r3, [pc, #664]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d103      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006fc8:	4ba2      	ldr	r3, [pc, #648]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fcc:	f000 befa 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006fd0:	4b9f      	ldr	r3, [pc, #636]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	2b30      	cmp	r3, #48	@ 0x30
 8006fe2:	d104      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fea:	f000 beeb 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff2:	f000 bee7 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffa:	f1a2 0108 	sub.w	r1, r2, #8
 8006ffe:	430b      	orrs	r3, r1
 8007000:	d136      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007002:	4b93      	ldr	r3, [pc, #588]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007008:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007014:	f7fe fa72 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007018:	6378      	str	r0, [r7, #52]	@ 0x34
 800701a:	f000 bed3 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	2b40      	cmp	r3, #64	@ 0x40
 8007022:	d104      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007024:	f7fe f94e 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007028:	6378      	str	r0, [r7, #52]	@ 0x34
 800702a:	f000 becb 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800702e:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	2b80      	cmp	r3, #128	@ 0x80
 8007040:	d103      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007042:	4b84      	ldr	r3, [pc, #528]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
 8007046:	f000 bebd 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800704a:	4b81      	ldr	r3, [pc, #516]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800704c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b02      	cmp	r3, #2
 8007056:	d107      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	2bc0      	cmp	r3, #192	@ 0xc0
 800705c:	d104      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
 8007064:	f000 beae 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	f000 beaa 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	f1a2 0110 	sub.w	r1, r2, #16
 8007078:	430b      	orrs	r3, r1
 800707a:	d139      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800707c:	4b74      	ldr	r3, [pc, #464]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800707e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800708e:	f7fe fa35 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007092:	6378      	str	r0, [r7, #52]	@ 0x34
 8007094:	f000 be96 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800709e:	d104      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070a0:	f7fe f910 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80070a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070a6:	f000 be8d 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80070aa:	4b69      	ldr	r3, [pc, #420]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070be:	d103      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80070c0:	4b64      	ldr	r3, [pc, #400]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c4:	f000 be7e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80070c8:	4b61      	ldr	r3, [pc, #388]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d108      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070dc:	d104      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e4:	f000 be6e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ec:	f000 be6a 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	f1a2 0120 	sub.w	r1, r2, #32
 80070f8:	430b      	orrs	r3, r1
 80070fa:	d158      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80070fc:	4b54      	ldr	r3, [pc, #336]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800710e:	f7fe fa1d 	bl	800554c <HAL_RCC_GetPCLK3Freq>
 8007112:	6378      	str	r0, [r7, #52]	@ 0x34
 8007114:	f000 be56 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	2b01      	cmp	r3, #1
 800711c:	d104      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800711e:	f7fe f8d1 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007122:	6378      	str	r0, [r7, #52]	@ 0x34
 8007124:	f000 be4e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007128:	4b49      	ldr	r3, [pc, #292]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007134:	d106      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	2b02      	cmp	r3, #2
 800713a:	d103      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800713c:	4b45      	ldr	r3, [pc, #276]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	f000 be40 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007144:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d107      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b03      	cmp	r3, #3
 8007156:	d104      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
 800715e:	f000 be31 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007162:	4b3b      	ldr	r3, [pc, #236]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b20      	cmp	r3, #32
 800716c:	d11b      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	2b04      	cmp	r3, #4
 8007172:	d118      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007174:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007180:	4b33      	ldr	r3, [pc, #204]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	0e1b      	lsrs	r3, r3, #24
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	e006      	b.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800718c:	4b30      	ldr	r3, [pc, #192]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800718e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4a2f      	ldr	r2, [pc, #188]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a2:	f000 be0f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071aa:	f000 be0b 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80071ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80071b6:	430b      	orrs	r3, r1
 80071b8:	d172      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80071ba:	4b25      	ldr	r3, [pc, #148]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80071c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071cc:	d104      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071ce:	f7fe f879 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80071d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80071d4:	f000 bdf6 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071de:	d108      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e0:	f107 0318 	add.w	r3, r7, #24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff f965 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ee:	f000 bde9 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80071f8:	f7fe f966 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 80071fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80071fe:	f000 bde1 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007208:	d128      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800720a:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b20      	cmp	r3, #32
 8007214:	d118      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007216:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007222:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	e006      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800722e:	4b08      	ldr	r3, [pc, #32]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	0e1b      	lsrs	r3, r3, #24
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	4a06      	ldr	r2, [pc, #24]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800723e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
 8007244:	f000 bdbe 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
 800724c:	f000 bdba 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007250:	46020c00 	.word	0x46020c00
 8007254:	00f42400 	.word	0x00f42400
 8007258:	08009a78 	.word	0x08009a78
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800725c:	4baf      	ldr	r3, [pc, #700]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007268:	d107      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007270:	d103      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8007272:	4bab      	ldr	r3, [pc, #684]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
 8007276:	f000 bda5 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800727a:	4ba8      	ldr	r3, [pc, #672]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800728e:	d103      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007290:	4ba3      	ldr	r3, [pc, #652]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
 8007294:	f000 bd96 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
 800729c:	f000 bd92 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80072a8:	430b      	orrs	r3, r1
 80072aa:	d158      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80072ac:	4b9b      	ldr	r3, [pc, #620]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d84b      	bhi.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80072be:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072fd 	.word	0x080072fd
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072eb 	.word	0x080072eb
 80072d0:	08007307 	.word	0x08007307
 80072d4:	08007311 	.word	0x08007311
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe ff8f 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e6:	f000 bd6d 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fa3a 	bl	8006768 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f8:	f000 bd64 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80072fc:	f7fe f8e4 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 8007300:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007302:	f000 bd5f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007306:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800730c:	f000 bd5a 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007310:	4b82      	ldr	r3, [pc, #520]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b20      	cmp	r3, #32
 800731a:	d118      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800731c:	4b7f      	ldr	r3, [pc, #508]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007328:	4b7c      	ldr	r3, [pc, #496]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	0e1b      	lsrs	r3, r3, #24
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	e006      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007334:	4b79      	ldr	r3, [pc, #484]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	4a78      	ldr	r2, [pc, #480]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800734a:	f000 bd3b 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007352:	f000 bd37 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800735a:	f000 bd33 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800735e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007362:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007366:	430b      	orrs	r3, r1
 8007368:	d167      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800736a:	4b6c      	ldr	r3, [pc, #432]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800736c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007370:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800737c:	d036      	beq.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007384:	d855      	bhi.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800738c:	d029      	beq.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007394:	d84d      	bhi.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800739c:	d013      	beq.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073a4:	d845      	bhi.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d015      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b2:	d13e      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ff21 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073c2:	f000 bcff 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff f9cc 	bl	8006768 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d4:	f000 bcf6 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80073d8:	f7fe f876 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 80073dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80073de:	f000 bcf1 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e8:	f000 bcec 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073ec:	4b4b      	ldr	r3, [pc, #300]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d118      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073f8:	4b48      	ldr	r3, [pc, #288]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8007404:	4b45      	ldr	r3, [pc, #276]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	e006      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007410:	4b42      	ldr	r3, [pc, #264]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	0e1b      	lsrs	r3, r3, #24
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a41      	ldr	r2, [pc, #260]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007426:	f000 bccd 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800742e:	f000 bcc9 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007436:	f000 bcc5 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800743a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007442:	430b      	orrs	r3, r1
 8007444:	d14c      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007446:	4b35      	ldr	r3, [pc, #212]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800744c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007450:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d104      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fe f850 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 800745c:	6378      	str	r0, [r7, #52]	@ 0x34
 800745e:	f000 bcb1 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007468:	d104      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800746a:	f7fd ff2b 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 800746e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007470:	f000 bca8 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007474:	4b29      	ldr	r3, [pc, #164]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800747c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007480:	d107      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007488:	d103      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800748a:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
 800748e:	f000 bc99 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007492:	4b22      	ldr	r3, [pc, #136]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b20      	cmp	r3, #32
 800749c:	d11c      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a4:	d118      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074a6:	4b1d      	ldr	r3, [pc, #116]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80074b2:	4b1a      	ldr	r3, [pc, #104]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	0e1b      	lsrs	r3, r3, #24
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	e006      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80074be:	4b17      	ldr	r3, [pc, #92]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80074ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d4:	f000 bc76 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
 80074dc:	f000 bc72 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80074e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80074e8:	430b      	orrs	r3, r1
 80074ea:	d153      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80074ec:	4b0b      	ldr	r3, [pc, #44]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fd fffd 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007502:	6378      	str	r0, [r7, #52]	@ 0x34
 8007504:	f000 bc5e 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750e:	d10b      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007510:	f7fd fed8 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007514:	6378      	str	r0, [r7, #52]	@ 0x34
 8007516:	f000 bc55 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800751a:	bf00      	nop
 800751c:	46020c00 	.word	0x46020c00
 8007520:	00f42400 	.word	0x00f42400
 8007524:	08009a78 	.word	0x08009a78
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007528:	4ba1      	ldr	r3, [pc, #644]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d107      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800753c:	d103      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800753e:	4b9d      	ldr	r3, [pc, #628]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
 8007542:	f000 bc3f 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007546:	4b9a      	ldr	r3, [pc, #616]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b20      	cmp	r3, #32
 8007550:	d11c      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007558:	d118      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800755a:	4b95      	ldr	r3, [pc, #596]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8007566:	4b92      	ldr	r3, [pc, #584]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	0e1b      	lsrs	r3, r3, #24
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	e006      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007572:	4b8f      	ldr	r3, [pc, #572]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	0e1b      	lsrs	r3, r3, #24
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	4a8d      	ldr	r2, [pc, #564]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
 8007588:	f000 bc1c 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007590:	f000 bc18 	b.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007598:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800759c:	430b      	orrs	r3, r1
 800759e:	d151      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80075a0:	4b83      	ldr	r3, [pc, #524]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80075b0:	d024      	beq.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80075b6:	d842      	bhi.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	2b80      	cmp	r3, #128	@ 0x80
 80075bc:	d00d      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d83c      	bhi.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b40      	cmp	r3, #64	@ 0x40
 80075ce:	d011      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80075d0:	e035      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80075d2:	f7fd ffbb 	bl	800554c <HAL_RCC_GetPCLK3Freq>
 80075d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075d8:	e3f4      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075da:	4b75      	ldr	r3, [pc, #468]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e6:	d102      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80075e8:	4b72      	ldr	r3, [pc, #456]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075ec:	e3ea      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f2:	e3e7      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80075f4:	f7fd fe66 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80075f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075fa:	e3e3      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075fc:	4b6c      	ldr	r3, [pc, #432]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d117      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007608:	4b69      	ldr	r3, [pc, #420]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8007614:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	e006      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007620:	4b63      	ldr	r3, [pc, #396]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007626:	041b      	lsls	r3, r3, #16
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	4a62      	ldr	r2, [pc, #392]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007634:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007636:	e3c5      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800763c:	e3c2      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007642:	e3bf      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007648:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800764c:	430b      	orrs	r3, r1
 800764e:	d147      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007650:	4b57      	ldr	r3, [pc, #348]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007656:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800765a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007662:	f7fd ff4b 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007666:	6378      	str	r0, [r7, #52]	@ 0x34
 8007668:	e3ac      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007670:	d103      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007672:	f7fd fe27 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007676:	6378      	str	r0, [r7, #52]	@ 0x34
 8007678:	e3a4      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800767a:	4b4d      	ldr	r3, [pc, #308]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007686:	d106      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800768e:	d102      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8007690:	4b48      	ldr	r3, [pc, #288]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007692:	637b      	str	r3, [r7, #52]	@ 0x34
 8007694:	e396      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007696:	4b46      	ldr	r3, [pc, #280]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d11b      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80076a8:	d117      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076aa:	4b41      	ldr	r3, [pc, #260]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80076b6:	4b3e      	ldr	r3, [pc, #248]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	0e1b      	lsrs	r3, r3, #24
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80076c2:	4b3b      	ldr	r3, [pc, #236]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	0e1b      	lsrs	r3, r3, #24
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	4a39      	ldr	r2, [pc, #228]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80076d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d8:	e374      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076de:	e371      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80076e8:	430b      	orrs	r3, r1
 80076ea:	d16a      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80076ec:	4b30      	ldr	r3, [pc, #192]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d120      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076fe:	4b2c      	ldr	r3, [pc, #176]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b20      	cmp	r3, #32
 8007708:	d117      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800770a:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8007716:	4b26      	ldr	r3, [pc, #152]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	e006      	b.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007722:	4b23      	ldr	r3, [pc, #140]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	0e1b      	lsrs	r3, r3, #24
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	4a21      	ldr	r2, [pc, #132]	@ (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
 8007738:	e344      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
 800773e:	e341      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007740:	4b1b      	ldr	r3, [pc, #108]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800774a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800774e:	d112      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007756:	d10e      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007758:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800775a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800775e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007766:	d102      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007768:	23fa      	movs	r3, #250	@ 0xfa
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800776c:	e32a      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800776e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007774:	e326      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007776:	4b0e      	ldr	r3, [pc, #56]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007782:	d106      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800778a:	d102      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800778c:	4b09      	ldr	r3, [pc, #36]	@ (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007790:	e318      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007792:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b02      	cmp	r3, #2
 800779e:	d10d      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077a6:	d109      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80077a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ae:	e309      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80077b0:	46020c00 	.word	0x46020c00
 80077b4:	00f42400 	.word	0x00f42400
 80077b8:	08009a78 	.word	0x08009a78
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c0:	e300      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80077c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077ca:	430b      	orrs	r3, r1
 80077cc:	d164      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077ce:	4ba2      	ldr	r3, [pc, #648]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d120      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077e0:	4b9d      	ldr	r3, [pc, #628]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d117      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077ec:	4b9a      	ldr	r3, [pc, #616]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80077f8:	4b97      	ldr	r3, [pc, #604]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	e006      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007804:	4b94      	ldr	r3, [pc, #592]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800780a:	041b      	lsls	r3, r3, #16
 800780c:	0e1b      	lsrs	r3, r3, #24
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	4a92      	ldr	r2, [pc, #584]	@ (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007818:	637b      	str	r3, [r7, #52]	@ 0x34
 800781a:	e2d3      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007820:	e2d0      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007822:	4b8d      	ldr	r3, [pc, #564]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007830:	d112      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007838:	d10e      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800783a:	4b87      	ldr	r3, [pc, #540]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800783c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007848:	d102      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800784a:	23fa      	movs	r3, #250	@ 0xfa
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800784e:	e2b9      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007850:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007854:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007856:	e2b5      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007858:	4b7f      	ldr	r3, [pc, #508]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007864:	d106      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786c:	d102      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800786e:	4b7c      	ldr	r3, [pc, #496]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007870:	637b      	str	r3, [r7, #52]	@ 0x34
 8007872:	e2a7      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007874:	4b78      	ldr	r3, [pc, #480]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b02      	cmp	r3, #2
 8007880:	d107      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007888:	d103      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800788a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007890:	e298      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34
 8007896:	e295      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80078a0:	430b      	orrs	r3, r1
 80078a2:	d147      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80078ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078b6:	f7fd fe21 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80078ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80078bc:	e282      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80078be:	4b66      	ldr	r3, [pc, #408]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078cc:	d112      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078d4:	d10e      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078d6:	4b60      	ldr	r3, [pc, #384]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e4:	d102      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80078e6:	23fa      	movs	r3, #250	@ 0xfa
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078ea:	e26b      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80078ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078f2:	e267      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80078f4:	4b58      	ldr	r3, [pc, #352]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007908:	d102      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800790a:	4b55      	ldr	r3, [pc, #340]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
 800790e:	e259      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007910:	4b51      	ldr	r3, [pc, #324]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b02      	cmp	r3, #2
 800791c:	d107      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007924:	d103      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800792a:	637b      	str	r3, [r7, #52]	@ 0x34
 800792c:	e24a      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
 8007932:	e247      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007938:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800793c:	430b      	orrs	r3, r1
 800793e:	d12d      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007940:	4b45      	ldr	r3, [pc, #276]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007946:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800794c:	4b42      	ldr	r3, [pc, #264]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007958:	d105      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007960:	4b3f      	ldr	r3, [pc, #252]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
 8007964:	e22e      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800796c:	d107      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800796e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fc44 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
 800797c:	e222      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007984:	d107      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007986:	f107 0318 	add.w	r3, r7, #24
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fd92 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
 8007994:	e216      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	@ 0x34
 800799a:	e213      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800799c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80079a4:	430b      	orrs	r3, r1
 80079a6:	d15d      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80079a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079b2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079ba:	d028      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079c2:	d845      	bhi.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ca:	d013      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079d2:	d83d      	bhi.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e0:	d004      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80079e2:	e035      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fd fd9e 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 80079e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079ea:	e1eb      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079ec:	f7fd fc6a 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80079f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079f2:	e1e7      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f4:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007a02:	4b17      	ldr	r3, [pc, #92]	@ (8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a06:	e1dd      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a0c:	e1da      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a0e:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d117      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8007a26:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	0e1b      	lsrs	r3, r3, #24
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	e006      	b.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007a32:	4b09      	ldr	r3, [pc, #36]	@ (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	0e1b      	lsrs	r3, r3, #24
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	4a06      	ldr	r2, [pc, #24]	@ (8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a48:	e1bc      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4e:	e1b9      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a54:	e1b6      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007a56:	bf00      	nop
 8007a58:	46020c00 	.word	0x46020c00
 8007a5c:	08009a78 	.word	0x08009a78
 8007a60:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a68:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	d156      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a70:	4ba5      	ldr	r3, [pc, #660]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a7a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a82:	d028      	beq.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a8a:	d845      	bhi.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a92:	d013      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a9a:	d83d      	bhi.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa8:	d004      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007aaa:	e035      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007aac:	f7fd fd26 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8007ab0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007ab2:	e187      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ab4:	f7fd fc06 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007ab8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007aba:	e183      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007abc:	4b92      	ldr	r3, [pc, #584]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac8:	d102      	bne.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007aca:	4b90      	ldr	r3, [pc, #576]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007acc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ace:	e179      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad4:	e176      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d117      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ae2:	4b89      	ldr	r3, [pc, #548]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007aee:	4b86      	ldr	r3, [pc, #536]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	f003 030f 	and.w	r3, r3, #15
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007afa:	4b83      	ldr	r3, [pc, #524]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	0e1b      	lsrs	r3, r3, #24
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	4a81      	ldr	r2, [pc, #516]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b10:	e158      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b16:	e155      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b1c:	e152      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007b26:	430b      	orrs	r3, r1
 8007b28:	d177      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007b2a:	4b77      	ldr	r3, [pc, #476]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b30:	f003 0318 	and.w	r3, r3, #24
 8007b34:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	2b18      	cmp	r3, #24
 8007b3a:	d86b      	bhi.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007ba9 	.word	0x08007ba9
 8007b48:	08007c15 	.word	0x08007c15
 8007b4c:	08007c15 	.word	0x08007c15
 8007b50:	08007c15 	.word	0x08007c15
 8007b54:	08007c15 	.word	0x08007c15
 8007b58:	08007c15 	.word	0x08007c15
 8007b5c:	08007c15 	.word	0x08007c15
 8007b60:	08007c15 	.word	0x08007c15
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007c15 	.word	0x08007c15
 8007b6c:	08007c15 	.word	0x08007c15
 8007b70:	08007c15 	.word	0x08007c15
 8007b74:	08007c15 	.word	0x08007c15
 8007b78:	08007c15 	.word	0x08007c15
 8007b7c:	08007c15 	.word	0x08007c15
 8007b80:	08007c15 	.word	0x08007c15
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007c15 	.word	0x08007c15
 8007b8c:	08007c15 	.word	0x08007c15
 8007b90:	08007c15 	.word	0x08007c15
 8007b94:	08007c15 	.word	0x08007c15
 8007b98:	08007c15 	.word	0x08007c15
 8007b9c:	08007c15 	.word	0x08007c15
 8007ba0:	08007c15 	.word	0x08007c15
 8007ba4:	08007bd3 	.word	0x08007bd3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007ba8:	f7fd fcd0 	bl	800554c <HAL_RCC_GetPCLK3Freq>
 8007bac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bae:	e109      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007bb0:	f7fd fb88 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007bb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bb6:	e105      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bb8:	4b53      	ldr	r3, [pc, #332]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc4:	d102      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007bc6:	4b51      	ldr	r3, [pc, #324]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bca:	e0fb      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd0:	e0f8      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d117      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bde:	4b4a      	ldr	r3, [pc, #296]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007bea:	4b47      	ldr	r3, [pc, #284]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	0e1b      	lsrs	r3, r3, #24
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	e006      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007bf6:	4b44      	ldr	r3, [pc, #272]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bfc:	041b      	lsls	r3, r3, #16
 8007bfe:	0e1b      	lsrs	r3, r3, #24
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	4a42      	ldr	r2, [pc, #264]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c0c:	e0da      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c12:	e0d7      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c18:	e0d4      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007c22:	430b      	orrs	r3, r1
 8007c24:	d155      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007c26:	4b38      	ldr	r3, [pc, #224]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c38:	d013      	beq.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c40:	d844      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c48:	d013      	beq.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c50:	d83c      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d014      	beq.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c5e:	d014      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007c60:	e034      	b.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fc24 	bl	80064b4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c70:	e0a8      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fac2 	bl	8006200 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c80:	e0a0      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c82:	f7fd fb1f 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8007c86:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c88:	e09c      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d117      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c96:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d005      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007ca2:	4b19      	ldr	r3, [pc, #100]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	0e1b      	lsrs	r3, r3, #24
 8007ca8:	f003 030f 	and.w	r3, r3, #15
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007cae:	4b16      	ldr	r3, [pc, #88]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	0e1b      	lsrs	r3, r3, #24
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	4a14      	ldr	r2, [pc, #80]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007cc4:	e07e      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cca:	e07b      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd0:	e078      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	d138      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007cde:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ce8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007cea:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d04:	e05e      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007d06:	bf00      	nop
 8007d08:	46020c00 	.word	0x46020c00
 8007d0c:	00f42400 	.word	0x00f42400
 8007d10:	08009a78 	.word	0x08009a78
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d22:	d112      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2a:	d10e      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d2c:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007d3c:	23fa      	movs	r3, #250	@ 0xfa
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d40:	e040      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007d42:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007d48:	e03c      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4e:	e039      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	d131      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007d68:	4b19      	ldr	r3, [pc, #100]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d74:	d105      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007d7c:	4b15      	ldr	r3, [pc, #84]	@ (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d80:	e020      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007d82:	4b13      	ldr	r3, [pc, #76]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d8e:	d106      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d96:	d102      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007d98:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9c:	e012      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007daa:	d106      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db2:	d102      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007db4:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db8:	e004      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	e001      	b.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3738      	adds	r7, #56	@ 0x38
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	46020c00 	.word	0x46020c00
 8007dd4:	02dc6c00 	.word	0x02dc6c00
 8007dd8:	016e3600 	.word	0x016e3600
 8007ddc:	00f42400 	.word	0x00f42400

08007de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007de8:	4b47      	ldr	r3, [pc, #284]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a46      	ldr	r2, [pc, #280]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007dee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007df2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007df4:	f7fa fd5c 	bl	80028b0 <HAL_GetTick>
 8007df8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dfa:	e008      	b.n	8007e0e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dfc:	f7fa fd58 	bl	80028b0 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e077      	b.n	8007efe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1f0      	bne.n	8007dfc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6811      	ldr	r1, [r2, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	3a01      	subs	r2, #1
 8007e30:	0212      	lsls	r2, r2, #8
 8007e32:	430a      	orrs	r2, r1
 8007e34:	4934      	ldr	r1, [pc, #208]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007e3a:	4b33      	ldr	r3, [pc, #204]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e3e:	4b33      	ldr	r3, [pc, #204]	@ (8007f0c <RCCEx_PLL2_Config+0x12c>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
 8007e46:	3a01      	subs	r2, #1
 8007e48:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	68d2      	ldr	r2, [r2, #12]
 8007e50:	3a01      	subs	r2, #1
 8007e52:	0252      	lsls	r2, r2, #9
 8007e54:	b292      	uxth	r2, r2
 8007e56:	4311      	orrs	r1, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6912      	ldr	r2, [r2, #16]
 8007e5c:	3a01      	subs	r2, #1
 8007e5e:	0412      	lsls	r2, r2, #16
 8007e60:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007e64:	4311      	orrs	r1, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6952      	ldr	r2, [r2, #20]
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	0612      	lsls	r2, r2, #24
 8007e6e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007e72:	430a      	orrs	r2, r1
 8007e74:	4924      	ldr	r1, [pc, #144]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e7a:	4b23      	ldr	r3, [pc, #140]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	f023 020c 	bic.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	4920      	ldr	r1, [pc, #128]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	491c      	ldr	r1, [pc, #112]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ea0:	f023 0310 	bic.w	r3, r3, #16
 8007ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ea6:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	69d2      	ldr	r2, [r2, #28]
 8007eb6:	00d2      	lsls	r2, r2, #3
 8007eb8:	4913      	ldr	r1, [pc, #76]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec2:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ec4:	f043 0310 	orr.w	r3, r3, #16
 8007ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007eca:	4b0f      	ldr	r3, [pc, #60]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a0e      	ldr	r2, [pc, #56]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ed0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ed4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ed6:	f7fa fceb 	bl	80028b0 <HAL_GetTick>
 8007eda:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007edc:	e008      	b.n	8007ef0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ede:	f7fa fce7 	bl	80028b0 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e006      	b.n	8007efe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ef0:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <RCCEx_PLL2_Config+0x128>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f0      	beq.n	8007ede <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0

}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	46020c00 	.word	0x46020c00
 8007f0c:	80800000 	.word	0x80800000

08007f10 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007f18:	4b47      	ldr	r3, [pc, #284]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a46      	ldr	r2, [pc, #280]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f24:	f7fa fcc4 	bl	80028b0 <HAL_GetTick>
 8007f28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f2a:	e008      	b.n	8007f3e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f2c:	f7fa fcc0 	bl	80028b0 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e077      	b.n	800802e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f0      	bne.n	8007f2c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6852      	ldr	r2, [r2, #4]
 8007f5e:	3a01      	subs	r2, #1
 8007f60:	0212      	lsls	r2, r2, #8
 8007f62:	430a      	orrs	r2, r1
 8007f64:	4934      	ldr	r1, [pc, #208]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	630b      	str	r3, [r1, #48]	@ 0x30
 8007f6a:	4b33      	ldr	r3, [pc, #204]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f6e:	4b33      	ldr	r3, [pc, #204]	@ (800803c <RCCEx_PLL3_Config+0x12c>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6892      	ldr	r2, [r2, #8]
 8007f76:	3a01      	subs	r2, #1
 8007f78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68d2      	ldr	r2, [r2, #12]
 8007f80:	3a01      	subs	r2, #1
 8007f82:	0252      	lsls	r2, r2, #9
 8007f84:	b292      	uxth	r2, r2
 8007f86:	4311      	orrs	r1, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6912      	ldr	r2, [r2, #16]
 8007f8c:	3a01      	subs	r2, #1
 8007f8e:	0412      	lsls	r2, r2, #16
 8007f90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f94:	4311      	orrs	r1, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6952      	ldr	r2, [r2, #20]
 8007f9a:	3a01      	subs	r2, #1
 8007f9c:	0612      	lsls	r2, r2, #24
 8007f9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	4924      	ldr	r1, [pc, #144]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007faa:	4b23      	ldr	r3, [pc, #140]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fae:	f023 020c 	bic.w	r2, r3, #12
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	4920      	ldr	r1, [pc, #128]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	491c      	ldr	r1, [pc, #112]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007fca:	4b1b      	ldr	r3, [pc, #108]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	4a1a      	ldr	r2, [pc, #104]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fd0:	f023 0310 	bic.w	r3, r3, #16
 8007fd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fd6:	4b18      	ldr	r3, [pc, #96]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fde:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	69d2      	ldr	r2, [r2, #28]
 8007fe6:	00d2      	lsls	r2, r2, #3
 8007fe8:	4913      	ldr	r1, [pc, #76]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007fee:	4b12      	ldr	r3, [pc, #72]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff2:	4a11      	ldr	r2, [pc, #68]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007ff4:	f043 0310 	orr.w	r3, r3, #16
 8007ff8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8008000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008004:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008006:	f7fa fc53 	bl	80028b0 <HAL_GetTick>
 800800a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800800c:	e008      	b.n	8008020 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800800e:	f7fa fc4f 	bl	80028b0 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d901      	bls.n	8008020 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e006      	b.n	800802e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008020:	4b05      	ldr	r3, [pc, #20]	@ (8008038 <RCCEx_PLL3_Config+0x128>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0f0      	beq.n	800800e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	46020c00 	.word	0x46020c00
 800803c:	80800000 	.word	0x80800000

08008040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e042      	b.n	80080d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7f8 fecf 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	@ 0x24
 800806e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa68 	bl	8008560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8c3 	bl	800821c <UART_SetConfig>
 8008096:	4603      	mov	r3, r0
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e01b      	b.n	80080d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fae7 	bl	80086a4 <UART_CheckIdleState>
 80080d6:	4603      	mov	r3, r0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	@ 0x28
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	f040 808b 	bne.w	8008212 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_UART_Transmit+0x28>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e083      	b.n	8008214 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008116:	2b80      	cmp	r3, #128	@ 0x80
 8008118:	d107      	bne.n	800812a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008128:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2221      	movs	r2, #33	@ 0x21
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800813a:	f7fa fbb9 	bl	80028b0 <HAL_GetTick>
 800813e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008158:	d108      	bne.n	800816c <HAL_UART_Transmit+0x8c>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	e003      	b.n	8008174 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008174:	e030      	b.n	80081d8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2200      	movs	r2, #0
 800817e:	2180      	movs	r1, #128	@ 0x80
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fb39 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e03d      	b.n	8008214 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	3302      	adds	r3, #2
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	e007      	b.n	80081c6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1c8      	bne.n	8008176 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2200      	movs	r2, #0
 80081ec:	2140      	movs	r1, #64	@ 0x40
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fb02 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e006      	b.n	8008214 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e000      	b.n	8008214 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008212:	2302      	movs	r3, #2
  }
}
 8008214:	4618      	mov	r0, r3
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800821c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008220:	b094      	sub	sp, #80	@ 0x50
 8008222:	af00      	add	r7, sp, #0
 8008224:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	4b7e      	ldr	r3, [pc, #504]	@ (800842c <UART_SetConfig+0x210>)
 8008232:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	431a      	orrs	r2, r3
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	431a      	orrs	r2, r3
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4977      	ldr	r1, [pc, #476]	@ (8008430 <UART_SetConfig+0x214>)
 8008254:	4019      	ands	r1, r3
 8008256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825c:	430b      	orrs	r3, r1
 800825e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826c:	68d9      	ldr	r1, [r3, #12]
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	ea40 0301 	orr.w	r3, r0, r1
 8008276:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b6a      	ldr	r3, [pc, #424]	@ (800842c <UART_SetConfig+0x210>)
 8008284:	429a      	cmp	r2, r3
 8008286:	d009      	beq.n	800829c <UART_SetConfig+0x80>
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b69      	ldr	r3, [pc, #420]	@ (8008434 <UART_SetConfig+0x218>)
 800828e:	429a      	cmp	r2, r3
 8008290:	d004      	beq.n	800829c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008298:	4313      	orrs	r3, r2
 800829a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80082a6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ba:	f023 000f 	bic.w	r0, r3, #15
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80082c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	ea40 0301 	orr.w	r3, r0, r1
 80082ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b59      	ldr	r3, [pc, #356]	@ (8008438 <UART_SetConfig+0x21c>)
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d102      	bne.n	80082dc <UART_SetConfig+0xc0>
 80082d6:	2301      	movs	r3, #1
 80082d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082da:	e029      	b.n	8008330 <UART_SetConfig+0x114>
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b56      	ldr	r3, [pc, #344]	@ (800843c <UART_SetConfig+0x220>)
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d102      	bne.n	80082ec <UART_SetConfig+0xd0>
 80082e6:	2302      	movs	r3, #2
 80082e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082ea:	e021      	b.n	8008330 <UART_SetConfig+0x114>
 80082ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4b53      	ldr	r3, [pc, #332]	@ (8008440 <UART_SetConfig+0x224>)
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d102      	bne.n	80082fc <UART_SetConfig+0xe0>
 80082f6:	2304      	movs	r3, #4
 80082f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082fa:	e019      	b.n	8008330 <UART_SetConfig+0x114>
 80082fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b50      	ldr	r3, [pc, #320]	@ (8008444 <UART_SetConfig+0x228>)
 8008302:	429a      	cmp	r2, r3
 8008304:	d102      	bne.n	800830c <UART_SetConfig+0xf0>
 8008306:	2308      	movs	r3, #8
 8008308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800830a:	e011      	b.n	8008330 <UART_SetConfig+0x114>
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b4d      	ldr	r3, [pc, #308]	@ (8008448 <UART_SetConfig+0x22c>)
 8008312:	429a      	cmp	r2, r3
 8008314:	d102      	bne.n	800831c <UART_SetConfig+0x100>
 8008316:	2310      	movs	r3, #16
 8008318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800831a:	e009      	b.n	8008330 <UART_SetConfig+0x114>
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b42      	ldr	r3, [pc, #264]	@ (800842c <UART_SetConfig+0x210>)
 8008322:	429a      	cmp	r2, r3
 8008324:	d102      	bne.n	800832c <UART_SetConfig+0x110>
 8008326:	2320      	movs	r3, #32
 8008328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800832a:	e001      	b.n	8008330 <UART_SetConfig+0x114>
 800832c:	2300      	movs	r3, #0
 800832e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b3d      	ldr	r3, [pc, #244]	@ (800842c <UART_SetConfig+0x210>)
 8008336:	429a      	cmp	r2, r3
 8008338:	d005      	beq.n	8008346 <UART_SetConfig+0x12a>
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4b3d      	ldr	r3, [pc, #244]	@ (8008434 <UART_SetConfig+0x218>)
 8008340:	429a      	cmp	r2, r3
 8008342:	f040 8085 	bne.w	8008450 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008348:	2200      	movs	r2, #0
 800834a:	623b      	str	r3, [r7, #32]
 800834c:	627a      	str	r2, [r7, #36]	@ 0x24
 800834e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008352:	f7fe fb63 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8008356:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 80e8 	beq.w	8008530 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	4a39      	ldr	r2, [pc, #228]	@ (800844c <UART_SetConfig+0x230>)
 8008366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800836a:	461a      	mov	r2, r3
 800836c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800836e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008380:	429a      	cmp	r2, r3
 8008382:	d305      	bcc.n	8008390 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800838a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800838c:	429a      	cmp	r2, r3
 800838e:	d903      	bls.n	8008398 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008396:	e048      	b.n	800842a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800839a:	2200      	movs	r2, #0
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	61fa      	str	r2, [r7, #28]
 80083a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	4a29      	ldr	r2, [pc, #164]	@ (800844c <UART_SetConfig+0x230>)
 80083a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2200      	movs	r2, #0
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	617a      	str	r2, [r7, #20]
 80083b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80083b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083ba:	f7f7 ff5d 	bl	8000278 <__aeabi_uldivmod>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	020b      	lsls	r3, r1, #8
 80083d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083d4:	0202      	lsls	r2, r0, #8
 80083d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083d8:	6849      	ldr	r1, [r1, #4]
 80083da:	0849      	lsrs	r1, r1, #1
 80083dc:	2000      	movs	r0, #0
 80083de:	460c      	mov	r4, r1
 80083e0:	4605      	mov	r5, r0
 80083e2:	eb12 0804 	adds.w	r8, r2, r4
 80083e6:	eb43 0905 	adc.w	r9, r3, r5
 80083ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	60fa      	str	r2, [r7, #12]
 80083f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f7 ff3c 	bl	8000278 <__aeabi_uldivmod>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4613      	mov	r3, r2
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800840e:	d308      	bcc.n	8008422 <UART_SetConfig+0x206>
 8008410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008416:	d204      	bcs.n	8008422 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800841e:	60da      	str	r2, [r3, #12]
 8008420:	e003      	b.n	800842a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008428:	e082      	b.n	8008530 <UART_SetConfig+0x314>
 800842a:	e081      	b.n	8008530 <UART_SetConfig+0x314>
 800842c:	46002400 	.word	0x46002400
 8008430:	cfff69f3 	.word	0xcfff69f3
 8008434:	56002400 	.word	0x56002400
 8008438:	40013800 	.word	0x40013800
 800843c:	40004400 	.word	0x40004400
 8008440:	40004800 	.word	0x40004800
 8008444:	40004c00 	.word	0x40004c00
 8008448:	40005000 	.word	0x40005000
 800844c:	08009b38 	.word	0x08009b38
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008458:	d13c      	bne.n	80084d4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800845a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800845c:	2200      	movs	r2, #0
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008466:	f7fe fad9 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 800846a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800846c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d05e      	beq.n	8008530 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	4a39      	ldr	r2, [pc, #228]	@ (800855c <UART_SetConfig+0x340>)
 8008478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800847c:	461a      	mov	r2, r3
 800847e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008480:	fbb3 f3f2 	udiv	r3, r3, r2
 8008484:	005a      	lsls	r2, r3, #1
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	441a      	add	r2, r3
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849a:	2b0f      	cmp	r3, #15
 800849c:	d916      	bls.n	80084cc <UART_SetConfig+0x2b0>
 800849e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a4:	d212      	bcs.n	80084cc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f023 030f 	bic.w	r3, r3, #15
 80084ae:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80084be:	4313      	orrs	r3, r2
 80084c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80084c8:	60da      	str	r2, [r3, #12]
 80084ca:	e031      	b.n	8008530 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80084d2:	e02d      	b.n	8008530 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d6:	2200      	movs	r2, #0
 80084d8:	469a      	mov	sl, r3
 80084da:	4693      	mov	fp, r2
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	f7fe fa9c 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 80084e4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80084e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d021      	beq.n	8008530 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f0:	4a1a      	ldr	r2, [pc, #104]	@ (800855c <UART_SetConfig+0x340>)
 80084f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80084fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	441a      	add	r2, r3
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	fbb2 f3f3 	udiv	r3, r2, r3
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008512:	2b0f      	cmp	r3, #15
 8008514:	d909      	bls.n	800852a <UART_SetConfig+0x30e>
 8008516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851c:	d205      	bcs.n	800852a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800851e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008520:	b29a      	uxth	r2, r3
 8008522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60da      	str	r2, [r3, #12]
 8008528:	e002      	b.n	8008530 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	2201      	movs	r2, #1
 8008534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	2201      	movs	r2, #1
 800853c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	2200      	movs	r2, #0
 8008544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	2200      	movs	r2, #0
 800854a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800854c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008550:	4618      	mov	r0, r3
 8008552:	3750      	adds	r7, #80	@ 0x50
 8008554:	46bd      	mov	sp, r7
 8008556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800855a:	bf00      	nop
 800855c:	08009b38 	.word	0x08009b38

08008560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01a      	beq.n	8008676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800865e:	d10a      	bne.n	8008676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	605a      	str	r2, [r3, #4]
  }
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b098      	sub	sp, #96	@ 0x60
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086b4:	f7fa f8fc 	bl	80028b0 <HAL_GetTick>
 80086b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d12f      	bne.n	8008728 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d0:	2200      	movs	r2, #0
 80086d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f88e 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d022      	beq.n	8008728 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008700:	647b      	str	r3, [r7, #68]	@ 0x44
 8008702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800870e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e6      	bne.n	80086e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e063      	b.n	80087f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d149      	bne.n	80087ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008736:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800873e:	2200      	movs	r2, #0
 8008740:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f857 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d03c      	beq.n	80087ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	623b      	str	r3, [r7, #32]
   return(result);
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008770:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e6      	bne.n	8008750 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3308      	adds	r3, #8
 8008788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	60fb      	str	r3, [r7, #12]
   return(result);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a2:	61fa      	str	r2, [r7, #28]
 80087a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	69b9      	ldr	r1, [r7, #24]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	617b      	str	r3, [r7, #20]
   return(result);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e5      	bne.n	8008782 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e012      	b.n	80087f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3758      	adds	r7, #88	@ 0x58
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	4613      	mov	r3, r2
 8008806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008808:	e04f      	b.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008810:	d04b      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008812:	f7fa f84d 	bl	80028b0 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	429a      	cmp	r2, r3
 8008820:	d302      	bcc.n	8008828 <UART_WaitOnFlagUntilTimeout+0x30>
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e04e      	b.n	80088ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0304 	and.w	r3, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	d037      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b80      	cmp	r3, #128	@ 0x80
 800883e:	d034      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b40      	cmp	r3, #64	@ 0x40
 8008844:	d031      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f003 0308 	and.w	r3, r3, #8
 8008850:	2b08      	cmp	r3, #8
 8008852:	d110      	bne.n	8008876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2208      	movs	r2, #8
 800885a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f838 	bl	80088d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2208      	movs	r2, #8
 8008866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e029      	b.n	80088ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008884:	d111      	bne.n	80088aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800888e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 f81e 	bl	80088d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e00f      	b.n	80088ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4013      	ands	r3, r2
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	bf0c      	ite	eq
 80088ba:	2301      	moveq	r3, #1
 80088bc:	2300      	movne	r3, #0
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d0a0      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b095      	sub	sp, #84	@ 0x54
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e6      	bne.n	80088da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	61fb      	str	r3, [r7, #28]
   return(result);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008922:	f023 0301 	bic.w	r3, r3, #1
 8008926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3308      	adds	r3, #8
 800892e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008938:	e841 2300 	strex	r3, r2, [r1]
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e3      	bne.n	800890c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d118      	bne.n	800897e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	60bb      	str	r3, [r7, #8]
   return(result);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f023 0310 	bic.w	r3, r3, #16
 8008960:	647b      	str	r3, [r7, #68]	@ 0x44
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	613b      	str	r3, [r7, #16]
   return(result);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e6      	bne.n	800894c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008992:	bf00      	nop
 8008994:	3754      	adds	r7, #84	@ 0x54
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e027      	b.n	8008a04 <HAL_UARTEx_DisableFifoMode+0x66>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2224      	movs	r2, #36	@ 0x24
 80089c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0201 	bic.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e02d      	b.n	8008a84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2224      	movs	r2, #36	@ 0x24
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f84f 	bl	8008b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e02d      	b.n	8008b00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2224      	movs	r2, #36	@ 0x24
 8008ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f811 	bl	8008b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d108      	bne.n	8008b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b28:	e031      	b.n	8008b8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b2e:	2308      	movs	r3, #8
 8008b30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	0e5b      	lsrs	r3, r3, #25
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	0f5b      	lsrs	r3, r3, #29
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	7b3a      	ldrb	r2, [r7, #12]
 8008b56:	4911      	ldr	r1, [pc, #68]	@ (8008b9c <UARTEx_SetNbDataToProcess+0x94>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b5e:	7b3a      	ldrb	r2, [r7, #12]
 8008b60:	490f      	ldr	r1, [pc, #60]	@ (8008ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8008b62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	7b7a      	ldrb	r2, [r7, #13]
 8008b74:	4909      	ldr	r1, [pc, #36]	@ (8008b9c <UARTEx_SetNbDataToProcess+0x94>)
 8008b76:	5c8a      	ldrb	r2, [r1, r2]
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b7c:	7b7a      	ldrb	r2, [r7, #13]
 8008b7e:	4908      	ldr	r1, [pc, #32]	@ (8008ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8008b80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	08009b50 	.word	0x08009b50
 8008ba0:	08009b58 	.word	0x08009b58

08008ba4 <std>:
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	4604      	mov	r4, r0
 8008baa:	6083      	str	r3, [r0, #8]
 8008bac:	8181      	strh	r1, [r0, #12]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb2:	81c2      	strh	r2, [r0, #14]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	6183      	str	r3, [r0, #24]
 8008bb8:	e9c0 3300 	strd	r3, r3, [r0]
 8008bbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bc0:	305c      	adds	r0, #92	@ 0x5c
 8008bc2:	f000 f906 	bl	8008dd2 <memset>
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x58>)
 8008bc8:	6224      	str	r4, [r4, #32]
 8008bca:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <std+0x5c>)
 8008bce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008c04 <std+0x60>)
 8008bd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <std+0x64>)
 8008bd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c0c <std+0x68>)
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	d006      	beq.n	8008bec <std+0x48>
 8008bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008be2:	4294      	cmp	r4, r2
 8008be4:	d002      	beq.n	8008bec <std+0x48>
 8008be6:	33d0      	adds	r3, #208	@ 0xd0
 8008be8:	429c      	cmp	r4, r3
 8008bea:	d105      	bne.n	8008bf8 <std+0x54>
 8008bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf4:	f000 b966 	b.w	8008ec4 <__retarget_lock_init_recursive>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08008d4d 	.word	0x08008d4d
 8008c00:	08008d6f 	.word	0x08008d6f
 8008c04:	08008da7 	.word	0x08008da7
 8008c08:	08008dcb 	.word	0x08008dcb
 8008c0c:	200001c0 	.word	0x200001c0

08008c10 <stdio_exit_handler>:
 8008c10:	4a02      	ldr	r2, [pc, #8]	@ (8008c1c <stdio_exit_handler+0xc>)
 8008c12:	4903      	ldr	r1, [pc, #12]	@ (8008c20 <stdio_exit_handler+0x10>)
 8008c14:	4803      	ldr	r0, [pc, #12]	@ (8008c24 <stdio_exit_handler+0x14>)
 8008c16:	f000 b869 	b.w	8008cec <_fwalk_sglue>
 8008c1a:	bf00      	nop
 8008c1c:	2000000c 	.word	0x2000000c
 8008c20:	0800976d 	.word	0x0800976d
 8008c24:	2000001c 	.word	0x2000001c

08008c28 <cleanup_stdio>:
 8008c28:	6841      	ldr	r1, [r0, #4]
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <cleanup_stdio+0x34>)
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	d001      	beq.n	8008c38 <cleanup_stdio+0x10>
 8008c34:	f000 fd9a 	bl	800976c <_fflush_r>
 8008c38:	68a1      	ldr	r1, [r4, #8]
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <cleanup_stdio+0x38>)
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <cleanup_stdio+0x1e>
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fd93 	bl	800976c <_fflush_r>
 8008c46:	68e1      	ldr	r1, [r4, #12]
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <cleanup_stdio+0x3c>)
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d004      	beq.n	8008c58 <cleanup_stdio+0x30>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c54:	f000 bd8a 	b.w	800976c <_fflush_r>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200001c0 	.word	0x200001c0
 8008c60:	20000228 	.word	0x20000228
 8008c64:	20000290 	.word	0x20000290

08008c68 <global_stdio_init.part.0>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c98 <global_stdio_init.part.0+0x30>)
 8008c6c:	2104      	movs	r1, #4
 8008c6e:	4c0b      	ldr	r4, [pc, #44]	@ (8008c9c <global_stdio_init.part.0+0x34>)
 8008c70:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca0 <global_stdio_init.part.0+0x38>)
 8008c72:	4620      	mov	r0, r4
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7ff ff94 	bl	8008ba4 <std>
 8008c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c80:	2201      	movs	r2, #1
 8008c82:	2109      	movs	r1, #9
 8008c84:	f7ff ff8e 	bl	8008ba4 <std>
 8008c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	2112      	movs	r1, #18
 8008c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c94:	f7ff bf86 	b.w	8008ba4 <std>
 8008c98:	200002f8 	.word	0x200002f8
 8008c9c:	200001c0 	.word	0x200001c0
 8008ca0:	08008c11 	.word	0x08008c11

08008ca4 <__sfp_lock_acquire>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__sfp_lock_acquire+0x8>)
 8008ca6:	f000 b90e 	b.w	8008ec6 <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	20000301 	.word	0x20000301

08008cb0 <__sfp_lock_release>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__sfp_lock_release+0x8>)
 8008cb2:	f000 b909 	b.w	8008ec8 <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	20000301 	.word	0x20000301

08008cbc <__sinit>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7ff fff0 	bl	8008ca4 <__sfp_lock_acquire>
 8008cc4:	6a23      	ldr	r3, [r4, #32]
 8008cc6:	b11b      	cbz	r3, 8008cd0 <__sinit+0x14>
 8008cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ccc:	f7ff bff0 	b.w	8008cb0 <__sfp_lock_release>
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__sinit+0x28>)
 8008cd2:	6223      	str	r3, [r4, #32]
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <__sinit+0x2c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f5      	bne.n	8008cc8 <__sinit+0xc>
 8008cdc:	f7ff ffc4 	bl	8008c68 <global_stdio_init.part.0>
 8008ce0:	e7f2      	b.n	8008cc8 <__sinit+0xc>
 8008ce2:	bf00      	nop
 8008ce4:	08008c29 	.word	0x08008c29
 8008ce8:	200002f8 	.word	0x200002f8

08008cec <_fwalk_sglue>:
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008d00:	d505      	bpl.n	8008d0e <_fwalk_sglue+0x22>
 8008d02:	6824      	ldr	r4, [r4, #0]
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d1f7      	bne.n	8008cf8 <_fwalk_sglue+0xc>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d907      	bls.n	8008d24 <_fwalk_sglue+0x38>
 8008d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	d003      	beq.n	8008d24 <_fwalk_sglue+0x38>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4638      	mov	r0, r7
 8008d20:	47c0      	blx	r8
 8008d22:	4306      	orrs	r6, r0
 8008d24:	3568      	adds	r5, #104	@ 0x68
 8008d26:	e7e9      	b.n	8008cfc <_fwalk_sglue+0x10>

08008d28 <iprintf>:
 8008d28:	b40f      	push	{r0, r1, r2, r3}
 8008d2a:	b507      	push	{r0, r1, r2, lr}
 8008d2c:	4906      	ldr	r1, [pc, #24]	@ (8008d48 <iprintf+0x20>)
 8008d2e:	ab04      	add	r3, sp, #16
 8008d30:	6808      	ldr	r0, [r1, #0]
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	6881      	ldr	r1, [r0, #8]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	f000 f9e9 	bl	8009110 <_vfiprintf_r>
 8008d3e:	b003      	add	sp, #12
 8008d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d44:	b004      	add	sp, #16
 8008d46:	4770      	bx	lr
 8008d48:	20000018 	.word	0x20000018

08008d4c <__sread>:
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	460c      	mov	r4, r1
 8008d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d54:	f000 f868 	bl	8008e28 <_read_r>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	bfab      	itete	ge
 8008d5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d60:	181b      	addge	r3, r3, r0
 8008d62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d66:	bfac      	ite	ge
 8008d68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d6a:	81a3      	strhlt	r3, [r4, #12]
 8008d6c:	bd10      	pop	{r4, pc}

08008d6e <__swrite>:
 8008d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	461f      	mov	r7, r3
 8008d74:	898b      	ldrh	r3, [r1, #12]
 8008d76:	4605      	mov	r5, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	05db      	lsls	r3, r3, #23
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	d505      	bpl.n	8008d8c <__swrite+0x1e>
 8008d80:	2302      	movs	r3, #2
 8008d82:	2200      	movs	r2, #0
 8008d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d88:	f000 f83c 	bl	8008e04 <_lseek_r>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	4632      	mov	r2, r6
 8008d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d94:	4628      	mov	r0, r5
 8008d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	f000 b853 	b.w	8008e4c <_write_r>

08008da6 <__sseek>:
 8008da6:	b510      	push	{r4, lr}
 8008da8:	460c      	mov	r4, r1
 8008daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dae:	f000 f829 	bl	8008e04 <_lseek_r>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	bf15      	itete	ne
 8008db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dc2:	81a3      	strheq	r3, [r4, #12]
 8008dc4:	bf18      	it	ne
 8008dc6:	81a3      	strhne	r3, [r4, #12]
 8008dc8:	bd10      	pop	{r4, pc}

08008dca <__sclose>:
 8008dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dce:	f000 b809 	b.w	8008de4 <_close_r>

08008dd2 <memset>:
 8008dd2:	4402      	add	r2, r0
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d100      	bne.n	8008ddc <memset+0xa>
 8008dda:	4770      	bx	lr
 8008ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8008de0:	e7f9      	b.n	8008dd6 <memset+0x4>
	...

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4d05      	ldr	r5, [pc, #20]	@ (8008e00 <_close_r+0x1c>)
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f8 f8c6 	bl	8000f80 <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	200002fc 	.word	0x200002fc

08008e04 <_lseek_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4604      	mov	r4, r0
 8008e08:	4d06      	ldr	r5, [pc, #24]	@ (8008e24 <_lseek_r+0x20>)
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f8 f8db 	bl	8000fce <_lseek>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_lseek_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_lseek_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	200002fc 	.word	0x200002fc

08008e28 <_read_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4d06      	ldr	r5, [pc, #24]	@ (8008e48 <_read_r+0x20>)
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f8 f885 	bl	8000f46 <_read>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_read_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_read_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	200002fc 	.word	0x200002fc

08008e4c <_write_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_write_r+0x20>)
 8008e52:	4608      	mov	r0, r1
 8008e54:	4611      	mov	r1, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	602a      	str	r2, [r5, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f7f7 ff9e 	bl	8000d9c <_write>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_write_r+0x1e>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_write_r+0x1e>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	200002fc 	.word	0x200002fc

08008e70 <__errno>:
 8008e70:	4b01      	ldr	r3, [pc, #4]	@ (8008e78 <__errno+0x8>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000018 	.word	0x20000018

08008e7c <__libc_init_array>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8008eb4 <__libc_init_array+0x38>)
 8008e80:	2600      	movs	r6, #0
 8008e82:	4c0d      	ldr	r4, [pc, #52]	@ (8008eb8 <__libc_init_array+0x3c>)
 8008e84:	1b64      	subs	r4, r4, r5
 8008e86:	10a4      	asrs	r4, r4, #2
 8008e88:	42a6      	cmp	r6, r4
 8008e8a:	d109      	bne.n	8008ea0 <__libc_init_array+0x24>
 8008e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8008ebc <__libc_init_array+0x40>)
 8008e8e:	2600      	movs	r6, #0
 8008e90:	4c0b      	ldr	r4, [pc, #44]	@ (8008ec0 <__libc_init_array+0x44>)
 8008e92:	f000 fdc9 	bl	8009a28 <_init>
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	42a6      	cmp	r6, r4
 8008e9c:	d105      	bne.n	8008eaa <__libc_init_array+0x2e>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	4798      	blx	r3
 8008ea8:	e7ee      	b.n	8008e88 <__libc_init_array+0xc>
 8008eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eae:	3601      	adds	r6, #1
 8008eb0:	4798      	blx	r3
 8008eb2:	e7f2      	b.n	8008e9a <__libc_init_array+0x1e>
 8008eb4:	08009b9c 	.word	0x08009b9c
 8008eb8:	08009b9c 	.word	0x08009b9c
 8008ebc:	08009b9c 	.word	0x08009b9c
 8008ec0:	08009ba0 	.word	0x08009ba0

08008ec4 <__retarget_lock_init_recursive>:
 8008ec4:	4770      	bx	lr

08008ec6 <__retarget_lock_acquire_recursive>:
 8008ec6:	4770      	bx	lr

08008ec8 <__retarget_lock_release_recursive>:
 8008ec8:	4770      	bx	lr
	...

08008ecc <_free_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4605      	mov	r5, r0
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	d041      	beq.n	8008f58 <_free_r+0x8c>
 8008ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed8:	1f0c      	subs	r4, r1, #4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bfb8      	it	lt
 8008ede:	18e4      	addlt	r4, r4, r3
 8008ee0:	f000 f8e0 	bl	80090a4 <__malloc_lock>
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f5c <_free_r+0x90>)
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	b933      	cbnz	r3, 8008ef8 <_free_r+0x2c>
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	4628      	mov	r0, r5
 8008ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef4:	f000 b8dc 	b.w	80090b0 <__malloc_unlock>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d908      	bls.n	8008f0e <_free_r+0x42>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	1821      	adds	r1, r4, r0
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf01      	itttt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	1809      	addeq	r1, r1, r0
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	e7ed      	b.n	8008eea <_free_r+0x1e>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b10b      	cbz	r3, 8008f18 <_free_r+0x4c>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d9fa      	bls.n	8008f0e <_free_r+0x42>
 8008f18:	6811      	ldr	r1, [r2, #0]
 8008f1a:	1850      	adds	r0, r2, r1
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d10b      	bne.n	8008f38 <_free_r+0x6c>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	4401      	add	r1, r0
 8008f24:	1850      	adds	r0, r2, r1
 8008f26:	6011      	str	r1, [r2, #0]
 8008f28:	4283      	cmp	r3, r0
 8008f2a:	d1e0      	bne.n	8008eee <_free_r+0x22>
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4408      	add	r0, r1
 8008f32:	6053      	str	r3, [r2, #4]
 8008f34:	6010      	str	r0, [r2, #0]
 8008f36:	e7da      	b.n	8008eee <_free_r+0x22>
 8008f38:	d902      	bls.n	8008f40 <_free_r+0x74>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	e7d6      	b.n	8008eee <_free_r+0x22>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf02      	ittt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	bf08      	it	eq
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	6054      	str	r4, [r2, #4]
 8008f56:	e7ca      	b.n	8008eee <_free_r+0x22>
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000308 	.word	0x20000308

08008f60 <sbrk_aligned>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4e0f      	ldr	r6, [pc, #60]	@ (8008fa0 <sbrk_aligned+0x40>)
 8008f64:	460c      	mov	r4, r1
 8008f66:	4605      	mov	r5, r0
 8008f68:	6831      	ldr	r1, [r6, #0]
 8008f6a:	b911      	cbnz	r1, 8008f72 <sbrk_aligned+0x12>
 8008f6c:	f000 fcba 	bl	80098e4 <_sbrk_r>
 8008f70:	6030      	str	r0, [r6, #0]
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 fcb5 	bl	80098e4 <_sbrk_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d103      	bne.n	8008f86 <sbrk_aligned+0x26>
 8008f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f82:	4620      	mov	r0, r4
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	1cc4      	adds	r4, r0, #3
 8008f88:	f024 0403 	bic.w	r4, r4, #3
 8008f8c:	42a0      	cmp	r0, r4
 8008f8e:	d0f8      	beq.n	8008f82 <sbrk_aligned+0x22>
 8008f90:	1a21      	subs	r1, r4, r0
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 fca6 	bl	80098e4 <_sbrk_r>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d1f2      	bne.n	8008f82 <sbrk_aligned+0x22>
 8008f9c:	e7ef      	b.n	8008f7e <sbrk_aligned+0x1e>
 8008f9e:	bf00      	nop
 8008fa0:	20000304 	.word	0x20000304

08008fa4 <_malloc_r>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	1ccd      	adds	r5, r1, #3
 8008faa:	4606      	mov	r6, r0
 8008fac:	f025 0503 	bic.w	r5, r5, #3
 8008fb0:	3508      	adds	r5, #8
 8008fb2:	2d0c      	cmp	r5, #12
 8008fb4:	bf38      	it	cc
 8008fb6:	250c      	movcc	r5, #12
 8008fb8:	2d00      	cmp	r5, #0
 8008fba:	db01      	blt.n	8008fc0 <_malloc_r+0x1c>
 8008fbc:	42a9      	cmp	r1, r5
 8008fbe:	d904      	bls.n	8008fca <_malloc_r+0x26>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	6033      	str	r3, [r6, #0]
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090a0 <_malloc_r+0xfc>
 8008fce:	f000 f869 	bl	80090a4 <__malloc_lock>
 8008fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd6:	461c      	mov	r4, r3
 8008fd8:	bb44      	cbnz	r4, 800902c <_malloc_r+0x88>
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff ffbf 	bl	8008f60 <sbrk_aligned>
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	d158      	bne.n	800909a <_malloc_r+0xf6>
 8008fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8008fec:	4627      	mov	r7, r4
 8008fee:	2f00      	cmp	r7, #0
 8008ff0:	d143      	bne.n	800907a <_malloc_r+0xd6>
 8008ff2:	2c00      	cmp	r4, #0
 8008ff4:	d04b      	beq.n	800908e <_malloc_r+0xea>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	eb04 0903 	add.w	r9, r4, r3
 8009000:	f000 fc70 	bl	80098e4 <_sbrk_r>
 8009004:	4581      	cmp	r9, r0
 8009006:	d142      	bne.n	800908e <_malloc_r+0xea>
 8009008:	6821      	ldr	r1, [r4, #0]
 800900a:	4630      	mov	r0, r6
 800900c:	1a6d      	subs	r5, r5, r1
 800900e:	4629      	mov	r1, r5
 8009010:	f7ff ffa6 	bl	8008f60 <sbrk_aligned>
 8009014:	3001      	adds	r0, #1
 8009016:	d03a      	beq.n	800908e <_malloc_r+0xea>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	442b      	add	r3, r5
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	f8d8 3000 	ldr.w	r3, [r8]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	bb62      	cbnz	r2, 8009080 <_malloc_r+0xdc>
 8009026:	f8c8 7000 	str.w	r7, [r8]
 800902a:	e00f      	b.n	800904c <_malloc_r+0xa8>
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	1b52      	subs	r2, r2, r5
 8009030:	d420      	bmi.n	8009074 <_malloc_r+0xd0>
 8009032:	2a0b      	cmp	r2, #11
 8009034:	d917      	bls.n	8009066 <_malloc_r+0xc2>
 8009036:	1961      	adds	r1, r4, r5
 8009038:	42a3      	cmp	r3, r4
 800903a:	6025      	str	r5, [r4, #0]
 800903c:	bf18      	it	ne
 800903e:	6059      	strne	r1, [r3, #4]
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	bf08      	it	eq
 8009044:	f8c8 1000 	streq.w	r1, [r8]
 8009048:	5162      	str	r2, [r4, r5]
 800904a:	604b      	str	r3, [r1, #4]
 800904c:	4630      	mov	r0, r6
 800904e:	f000 f82f 	bl	80090b0 <__malloc_unlock>
 8009052:	f104 000b 	add.w	r0, r4, #11
 8009056:	1d23      	adds	r3, r4, #4
 8009058:	f020 0007 	bic.w	r0, r0, #7
 800905c:	1ac2      	subs	r2, r0, r3
 800905e:	bf1c      	itt	ne
 8009060:	1a1b      	subne	r3, r3, r0
 8009062:	50a3      	strne	r3, [r4, r2]
 8009064:	e7af      	b.n	8008fc6 <_malloc_r+0x22>
 8009066:	6862      	ldr	r2, [r4, #4]
 8009068:	42a3      	cmp	r3, r4
 800906a:	bf0c      	ite	eq
 800906c:	f8c8 2000 	streq.w	r2, [r8]
 8009070:	605a      	strne	r2, [r3, #4]
 8009072:	e7eb      	b.n	800904c <_malloc_r+0xa8>
 8009074:	4623      	mov	r3, r4
 8009076:	6864      	ldr	r4, [r4, #4]
 8009078:	e7ae      	b.n	8008fd8 <_malloc_r+0x34>
 800907a:	463c      	mov	r4, r7
 800907c:	687f      	ldr	r7, [r7, #4]
 800907e:	e7b6      	b.n	8008fee <_malloc_r+0x4a>
 8009080:	461a      	mov	r2, r3
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	42a3      	cmp	r3, r4
 8009086:	d1fb      	bne.n	8009080 <_malloc_r+0xdc>
 8009088:	2300      	movs	r3, #0
 800908a:	6053      	str	r3, [r2, #4]
 800908c:	e7de      	b.n	800904c <_malloc_r+0xa8>
 800908e:	230c      	movs	r3, #12
 8009090:	4630      	mov	r0, r6
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	f000 f80c 	bl	80090b0 <__malloc_unlock>
 8009098:	e794      	b.n	8008fc4 <_malloc_r+0x20>
 800909a:	6005      	str	r5, [r0, #0]
 800909c:	e7d6      	b.n	800904c <_malloc_r+0xa8>
 800909e:	bf00      	nop
 80090a0:	20000308 	.word	0x20000308

080090a4 <__malloc_lock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	@ (80090ac <__malloc_lock+0x8>)
 80090a6:	f7ff bf0e 	b.w	8008ec6 <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000300 	.word	0x20000300

080090b0 <__malloc_unlock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	@ (80090b8 <__malloc_unlock+0x8>)
 80090b2:	f7ff bf09 	b.w	8008ec8 <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	20000300 	.word	0x20000300

080090bc <__sfputc_r>:
 80090bc:	6893      	ldr	r3, [r2, #8]
 80090be:	3b01      	subs	r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	6093      	str	r3, [r2, #8]
 80090c4:	b410      	push	{r4}
 80090c6:	da08      	bge.n	80090da <__sfputc_r+0x1e>
 80090c8:	6994      	ldr	r4, [r2, #24]
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	db01      	blt.n	80090d2 <__sfputc_r+0x16>
 80090ce:	290a      	cmp	r1, #10
 80090d0:	d103      	bne.n	80090da <__sfputc_r+0x1e>
 80090d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090d6:	f000 bb71 	b.w	80097bc <__swbuf_r>
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	1c58      	adds	r0, r3, #1
 80090de:	6010      	str	r0, [r2, #0]
 80090e0:	4608      	mov	r0, r1
 80090e2:	7019      	strb	r1, [r3, #0]
 80090e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <__sfputs_r>:
 80090ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	4614      	mov	r4, r2
 80090f2:	18d5      	adds	r5, r2, r3
 80090f4:	42ac      	cmp	r4, r5
 80090f6:	d101      	bne.n	80090fc <__sfputs_r+0x12>
 80090f8:	2000      	movs	r0, #0
 80090fa:	e007      	b.n	800910c <__sfputs_r+0x22>
 80090fc:	463a      	mov	r2, r7
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ffda 	bl	80090bc <__sfputc_r>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d1f3      	bne.n	80090f4 <__sfputs_r+0xa>
 800910c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009110 <_vfiprintf_r>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	460d      	mov	r5, r1
 8009116:	b09d      	sub	sp, #116	@ 0x74
 8009118:	4614      	mov	r4, r2
 800911a:	4698      	mov	r8, r3
 800911c:	4606      	mov	r6, r0
 800911e:	b118      	cbz	r0, 8009128 <_vfiprintf_r+0x18>
 8009120:	6a03      	ldr	r3, [r0, #32]
 8009122:	b90b      	cbnz	r3, 8009128 <_vfiprintf_r+0x18>
 8009124:	f7ff fdca 	bl	8008cbc <__sinit>
 8009128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800912a:	07d9      	lsls	r1, r3, #31
 800912c:	d405      	bmi.n	800913a <_vfiprintf_r+0x2a>
 800912e:	89ab      	ldrh	r3, [r5, #12]
 8009130:	059a      	lsls	r2, r3, #22
 8009132:	d402      	bmi.n	800913a <_vfiprintf_r+0x2a>
 8009134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009136:	f7ff fec6 	bl	8008ec6 <__retarget_lock_acquire_recursive>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	071b      	lsls	r3, r3, #28
 800913e:	d501      	bpl.n	8009144 <_vfiprintf_r+0x34>
 8009140:	692b      	ldr	r3, [r5, #16]
 8009142:	b99b      	cbnz	r3, 800916c <_vfiprintf_r+0x5c>
 8009144:	4629      	mov	r1, r5
 8009146:	4630      	mov	r0, r6
 8009148:	f000 fb76 	bl	8009838 <__swsetup_r>
 800914c:	b170      	cbz	r0, 800916c <_vfiprintf_r+0x5c>
 800914e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009150:	07dc      	lsls	r4, r3, #31
 8009152:	d504      	bpl.n	800915e <_vfiprintf_r+0x4e>
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	b01d      	add	sp, #116	@ 0x74
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	0598      	lsls	r0, r3, #22
 8009162:	d4f7      	bmi.n	8009154 <_vfiprintf_r+0x44>
 8009164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009166:	f7ff feaf 	bl	8008ec8 <__retarget_lock_release_recursive>
 800916a:	e7f3      	b.n	8009154 <_vfiprintf_r+0x44>
 800916c:	2300      	movs	r3, #0
 800916e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009172:	f04f 0901 	mov.w	r9, #1
 8009176:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800932c <_vfiprintf_r+0x21c>
 800917a:	9309      	str	r3, [sp, #36]	@ 0x24
 800917c:	2320      	movs	r3, #32
 800917e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009182:	2330      	movs	r3, #48	@ 0x30
 8009184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009188:	4623      	mov	r3, r4
 800918a:	469a      	mov	sl, r3
 800918c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009190:	b10a      	cbz	r2, 8009196 <_vfiprintf_r+0x86>
 8009192:	2a25      	cmp	r2, #37	@ 0x25
 8009194:	d1f9      	bne.n	800918a <_vfiprintf_r+0x7a>
 8009196:	ebba 0b04 	subs.w	fp, sl, r4
 800919a:	d00b      	beq.n	80091b4 <_vfiprintf_r+0xa4>
 800919c:	465b      	mov	r3, fp
 800919e:	4622      	mov	r2, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7ff ffa1 	bl	80090ea <__sfputs_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	f000 80a7 	beq.w	80092fc <_vfiprintf_r+0x1ec>
 80091ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b0:	445a      	add	r2, fp
 80091b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b4:	f89a 3000 	ldrb.w	r3, [sl]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 809f 	beq.w	80092fc <_vfiprintf_r+0x1ec>
 80091be:	2300      	movs	r3, #0
 80091c0:	f04f 32ff 	mov.w	r2, #4294967295
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	9307      	str	r3, [sp, #28]
 80091cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d6:	4654      	mov	r4, sl
 80091d8:	2205      	movs	r2, #5
 80091da:	4854      	ldr	r0, [pc, #336]	@ (800932c <_vfiprintf_r+0x21c>)
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	f000 fb90 	bl	8009904 <memchr>
 80091e4:	9a04      	ldr	r2, [sp, #16]
 80091e6:	b9d8      	cbnz	r0, 8009220 <_vfiprintf_r+0x110>
 80091e8:	06d1      	lsls	r1, r2, #27
 80091ea:	bf44      	itt	mi
 80091ec:	2320      	movmi	r3, #32
 80091ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f2:	0713      	lsls	r3, r2, #28
 80091f4:	bf44      	itt	mi
 80091f6:	232b      	movmi	r3, #43	@ 0x2b
 80091f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009200:	2b2a      	cmp	r3, #42	@ 0x2a
 8009202:	d015      	beq.n	8009230 <_vfiprintf_r+0x120>
 8009204:	9a07      	ldr	r2, [sp, #28]
 8009206:	4654      	mov	r4, sl
 8009208:	2000      	movs	r0, #0
 800920a:	f04f 0c0a 	mov.w	ip, #10
 800920e:	4621      	mov	r1, r4
 8009210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009214:	3b30      	subs	r3, #48	@ 0x30
 8009216:	2b09      	cmp	r3, #9
 8009218:	d94b      	bls.n	80092b2 <_vfiprintf_r+0x1a2>
 800921a:	b1b0      	cbz	r0, 800924a <_vfiprintf_r+0x13a>
 800921c:	9207      	str	r2, [sp, #28]
 800921e:	e014      	b.n	800924a <_vfiprintf_r+0x13a>
 8009220:	eba0 0308 	sub.w	r3, r0, r8
 8009224:	46a2      	mov	sl, r4
 8009226:	fa09 f303 	lsl.w	r3, r9, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	e7d2      	b.n	80091d6 <_vfiprintf_r+0xc6>
 8009230:	9b03      	ldr	r3, [sp, #12]
 8009232:	1d19      	adds	r1, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	9103      	str	r1, [sp, #12]
 800923a:	bfbb      	ittet	lt
 800923c:	425b      	neglt	r3, r3
 800923e:	f042 0202 	orrlt.w	r2, r2, #2
 8009242:	9307      	strge	r3, [sp, #28]
 8009244:	9307      	strlt	r3, [sp, #28]
 8009246:	bfb8      	it	lt
 8009248:	9204      	strlt	r2, [sp, #16]
 800924a:	7823      	ldrb	r3, [r4, #0]
 800924c:	2b2e      	cmp	r3, #46	@ 0x2e
 800924e:	d10a      	bne.n	8009266 <_vfiprintf_r+0x156>
 8009250:	7863      	ldrb	r3, [r4, #1]
 8009252:	2b2a      	cmp	r3, #42	@ 0x2a
 8009254:	d132      	bne.n	80092bc <_vfiprintf_r+0x1ac>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	3402      	adds	r4, #2
 800925a:	1d1a      	adds	r2, r3, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800933c <_vfiprintf_r+0x22c>
 800926a:	2203      	movs	r2, #3
 800926c:	7821      	ldrb	r1, [r4, #0]
 800926e:	4650      	mov	r0, sl
 8009270:	f000 fb48 	bl	8009904 <memchr>
 8009274:	b138      	cbz	r0, 8009286 <_vfiprintf_r+0x176>
 8009276:	eba0 000a 	sub.w	r0, r0, sl
 800927a:	2240      	movs	r2, #64	@ 0x40
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	3401      	adds	r4, #1
 8009280:	4082      	lsls	r2, r0
 8009282:	4313      	orrs	r3, r2
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928a:	2206      	movs	r2, #6
 800928c:	4828      	ldr	r0, [pc, #160]	@ (8009330 <_vfiprintf_r+0x220>)
 800928e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009292:	f000 fb37 	bl	8009904 <memchr>
 8009296:	2800      	cmp	r0, #0
 8009298:	d03f      	beq.n	800931a <_vfiprintf_r+0x20a>
 800929a:	4b26      	ldr	r3, [pc, #152]	@ (8009334 <_vfiprintf_r+0x224>)
 800929c:	bb1b      	cbnz	r3, 80092e6 <_vfiprintf_r+0x1d6>
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	3307      	adds	r3, #7
 80092a2:	f023 0307 	bic.w	r3, r3, #7
 80092a6:	3308      	adds	r3, #8
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ac:	443b      	add	r3, r7
 80092ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b0:	e76a      	b.n	8009188 <_vfiprintf_r+0x78>
 80092b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b6:	460c      	mov	r4, r1
 80092b8:	2001      	movs	r0, #1
 80092ba:	e7a8      	b.n	800920e <_vfiprintf_r+0xfe>
 80092bc:	2300      	movs	r3, #0
 80092be:	3401      	adds	r4, #1
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4619      	mov	r1, r3
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	4620      	mov	r0, r4
 80092ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ce:	3a30      	subs	r2, #48	@ 0x30
 80092d0:	2a09      	cmp	r2, #9
 80092d2:	d903      	bls.n	80092dc <_vfiprintf_r+0x1cc>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0c6      	beq.n	8009266 <_vfiprintf_r+0x156>
 80092d8:	9105      	str	r1, [sp, #20]
 80092da:	e7c4      	b.n	8009266 <_vfiprintf_r+0x156>
 80092dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e0:	4604      	mov	r4, r0
 80092e2:	2301      	movs	r3, #1
 80092e4:	e7f0      	b.n	80092c8 <_vfiprintf_r+0x1b8>
 80092e6:	ab03      	add	r3, sp, #12
 80092e8:	462a      	mov	r2, r5
 80092ea:	a904      	add	r1, sp, #16
 80092ec:	4630      	mov	r0, r6
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4b11      	ldr	r3, [pc, #68]	@ (8009338 <_vfiprintf_r+0x228>)
 80092f2:	f3af 8000 	nop.w
 80092f6:	4607      	mov	r7, r0
 80092f8:	1c78      	adds	r0, r7, #1
 80092fa:	d1d6      	bne.n	80092aa <_vfiprintf_r+0x19a>
 80092fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092fe:	07d9      	lsls	r1, r3, #31
 8009300:	d405      	bmi.n	800930e <_vfiprintf_r+0x1fe>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	059a      	lsls	r2, r3, #22
 8009306:	d402      	bmi.n	800930e <_vfiprintf_r+0x1fe>
 8009308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800930a:	f7ff fddd 	bl	8008ec8 <__retarget_lock_release_recursive>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	065b      	lsls	r3, r3, #25
 8009312:	f53f af1f 	bmi.w	8009154 <_vfiprintf_r+0x44>
 8009316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009318:	e71e      	b.n	8009158 <_vfiprintf_r+0x48>
 800931a:	ab03      	add	r3, sp, #12
 800931c:	462a      	mov	r2, r5
 800931e:	a904      	add	r1, sp, #16
 8009320:	4630      	mov	r0, r6
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <_vfiprintf_r+0x228>)
 8009326:	f000 f87d 	bl	8009424 <_printf_i>
 800932a:	e7e4      	b.n	80092f6 <_vfiprintf_r+0x1e6>
 800932c:	08009b60 	.word	0x08009b60
 8009330:	08009b6a 	.word	0x08009b6a
 8009334:	00000000 	.word	0x00000000
 8009338:	080090eb 	.word	0x080090eb
 800933c:	08009b66 	.word	0x08009b66

08009340 <_printf_common>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	4616      	mov	r6, r2
 8009346:	4698      	mov	r8, r3
 8009348:	688a      	ldr	r2, [r1, #8]
 800934a:	4607      	mov	r7, r0
 800934c:	690b      	ldr	r3, [r1, #16]
 800934e:	460c      	mov	r4, r1
 8009350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009354:	4293      	cmp	r3, r2
 8009356:	bfb8      	it	lt
 8009358:	4613      	movlt	r3, r2
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009360:	b10a      	cbz	r2, 8009366 <_printf_common+0x26>
 8009362:	3301      	adds	r3, #1
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	0699      	lsls	r1, r3, #26
 800936a:	bf42      	ittt	mi
 800936c:	6833      	ldrmi	r3, [r6, #0]
 800936e:	3302      	addmi	r3, #2
 8009370:	6033      	strmi	r3, [r6, #0]
 8009372:	6825      	ldr	r5, [r4, #0]
 8009374:	f015 0506 	ands.w	r5, r5, #6
 8009378:	d106      	bne.n	8009388 <_printf_common+0x48>
 800937a:	f104 0a19 	add.w	sl, r4, #25
 800937e:	68e3      	ldr	r3, [r4, #12]
 8009380:	6832      	ldr	r2, [r6, #0]
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	42ab      	cmp	r3, r5
 8009386:	dc2b      	bgt.n	80093e0 <_printf_common+0xa0>
 8009388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	3b00      	subs	r3, #0
 8009390:	bf18      	it	ne
 8009392:	2301      	movne	r3, #1
 8009394:	0692      	lsls	r2, r2, #26
 8009396:	d430      	bmi.n	80093fa <_printf_common+0xba>
 8009398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800939c:	4641      	mov	r1, r8
 800939e:	4638      	mov	r0, r7
 80093a0:	47c8      	blx	r9
 80093a2:	3001      	adds	r0, #1
 80093a4:	d023      	beq.n	80093ee <_printf_common+0xae>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	341a      	adds	r4, #26
 80093aa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80093ae:	f003 0306 	and.w	r3, r3, #6
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	bf0a      	itet	eq
 80093b6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80093ba:	2500      	movne	r5, #0
 80093bc:	6833      	ldreq	r3, [r6, #0]
 80093be:	f04f 0600 	mov.w	r6, #0
 80093c2:	bf08      	it	eq
 80093c4:	1aed      	subeq	r5, r5, r3
 80093c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80093ca:	bf08      	it	eq
 80093cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d0:	4293      	cmp	r3, r2
 80093d2:	bfc4      	itt	gt
 80093d4:	1a9b      	subgt	r3, r3, r2
 80093d6:	18ed      	addgt	r5, r5, r3
 80093d8:	42b5      	cmp	r5, r6
 80093da:	d11a      	bne.n	8009412 <_printf_common+0xd2>
 80093dc:	2000      	movs	r0, #0
 80093de:	e008      	b.n	80093f2 <_printf_common+0xb2>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4652      	mov	r2, sl
 80093e4:	4641      	mov	r1, r8
 80093e6:	4638      	mov	r0, r7
 80093e8:	47c8      	blx	r9
 80093ea:	3001      	adds	r0, #1
 80093ec:	d103      	bne.n	80093f6 <_printf_common+0xb6>
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7c1      	b.n	800937e <_printf_common+0x3e>
 80093fa:	18e1      	adds	r1, r4, r3
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	2030      	movs	r0, #48	@ 0x30
 8009400:	3302      	adds	r3, #2
 8009402:	4422      	add	r2, r4
 8009404:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800940c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009410:	e7c2      	b.n	8009398 <_printf_common+0x58>
 8009412:	2301      	movs	r3, #1
 8009414:	4622      	mov	r2, r4
 8009416:	4641      	mov	r1, r8
 8009418:	4638      	mov	r0, r7
 800941a:	47c8      	blx	r9
 800941c:	3001      	adds	r0, #1
 800941e:	d0e6      	beq.n	80093ee <_printf_common+0xae>
 8009420:	3601      	adds	r6, #1
 8009422:	e7d9      	b.n	80093d8 <_printf_common+0x98>

08009424 <_printf_i>:
 8009424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	7e0f      	ldrb	r7, [r1, #24]
 800942a:	4691      	mov	r9, r2
 800942c:	4680      	mov	r8, r0
 800942e:	460c      	mov	r4, r1
 8009430:	2f78      	cmp	r7, #120	@ 0x78
 8009432:	469a      	mov	sl, r3
 8009434:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800943a:	d807      	bhi.n	800944c <_printf_i+0x28>
 800943c:	2f62      	cmp	r7, #98	@ 0x62
 800943e:	d80a      	bhi.n	8009456 <_printf_i+0x32>
 8009440:	2f00      	cmp	r7, #0
 8009442:	f000 80d2 	beq.w	80095ea <_printf_i+0x1c6>
 8009446:	2f58      	cmp	r7, #88	@ 0x58
 8009448:	f000 80b9 	beq.w	80095be <_printf_i+0x19a>
 800944c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009454:	e03a      	b.n	80094cc <_printf_i+0xa8>
 8009456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800945a:	2b15      	cmp	r3, #21
 800945c:	d8f6      	bhi.n	800944c <_printf_i+0x28>
 800945e:	a101      	add	r1, pc, #4	@ (adr r1, 8009464 <_printf_i+0x40>)
 8009460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094d1 	.word	0x080094d1
 800946c:	0800944d 	.word	0x0800944d
 8009470:	0800944d 	.word	0x0800944d
 8009474:	0800944d 	.word	0x0800944d
 8009478:	0800944d 	.word	0x0800944d
 800947c:	080094d1 	.word	0x080094d1
 8009480:	0800944d 	.word	0x0800944d
 8009484:	0800944d 	.word	0x0800944d
 8009488:	0800944d 	.word	0x0800944d
 800948c:	0800944d 	.word	0x0800944d
 8009490:	080095d1 	.word	0x080095d1
 8009494:	080094fb 	.word	0x080094fb
 8009498:	0800958b 	.word	0x0800958b
 800949c:	0800944d 	.word	0x0800944d
 80094a0:	0800944d 	.word	0x0800944d
 80094a4:	080095f3 	.word	0x080095f3
 80094a8:	0800944d 	.word	0x0800944d
 80094ac:	080094fb 	.word	0x080094fb
 80094b0:	0800944d 	.word	0x0800944d
 80094b4:	0800944d 	.word	0x0800944d
 80094b8:	08009593 	.word	0x08009593
 80094bc:	6833      	ldr	r3, [r6, #0]
 80094be:	1d1a      	adds	r2, r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6032      	str	r2, [r6, #0]
 80094c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094cc:	2301      	movs	r3, #1
 80094ce:	e09d      	b.n	800960c <_printf_i+0x1e8>
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	6820      	ldr	r0, [r4, #0]
 80094d4:	1d19      	adds	r1, r3, #4
 80094d6:	6031      	str	r1, [r6, #0]
 80094d8:	0606      	lsls	r6, r0, #24
 80094da:	d501      	bpl.n	80094e0 <_printf_i+0xbc>
 80094dc:	681d      	ldr	r5, [r3, #0]
 80094de:	e003      	b.n	80094e8 <_printf_i+0xc4>
 80094e0:	0645      	lsls	r5, r0, #25
 80094e2:	d5fb      	bpl.n	80094dc <_printf_i+0xb8>
 80094e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	da03      	bge.n	80094f4 <_printf_i+0xd0>
 80094ec:	232d      	movs	r3, #45	@ 0x2d
 80094ee:	426d      	negs	r5, r5
 80094f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094f4:	4859      	ldr	r0, [pc, #356]	@ (800965c <_printf_i+0x238>)
 80094f6:	230a      	movs	r3, #10
 80094f8:	e011      	b.n	800951e <_printf_i+0xfa>
 80094fa:	6821      	ldr	r1, [r4, #0]
 80094fc:	6833      	ldr	r3, [r6, #0]
 80094fe:	0608      	lsls	r0, r1, #24
 8009500:	f853 5b04 	ldr.w	r5, [r3], #4
 8009504:	d402      	bmi.n	800950c <_printf_i+0xe8>
 8009506:	0649      	lsls	r1, r1, #25
 8009508:	bf48      	it	mi
 800950a:	b2ad      	uxthmi	r5, r5
 800950c:	2f6f      	cmp	r7, #111	@ 0x6f
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	4852      	ldr	r0, [pc, #328]	@ (800965c <_printf_i+0x238>)
 8009512:	bf14      	ite	ne
 8009514:	230a      	movne	r3, #10
 8009516:	2308      	moveq	r3, #8
 8009518:	2100      	movs	r1, #0
 800951a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800951e:	6866      	ldr	r6, [r4, #4]
 8009520:	2e00      	cmp	r6, #0
 8009522:	60a6      	str	r6, [r4, #8]
 8009524:	bfa2      	ittt	ge
 8009526:	6821      	ldrge	r1, [r4, #0]
 8009528:	f021 0104 	bicge.w	r1, r1, #4
 800952c:	6021      	strge	r1, [r4, #0]
 800952e:	b90d      	cbnz	r5, 8009534 <_printf_i+0x110>
 8009530:	2e00      	cmp	r6, #0
 8009532:	d04b      	beq.n	80095cc <_printf_i+0x1a8>
 8009534:	4616      	mov	r6, r2
 8009536:	fbb5 f1f3 	udiv	r1, r5, r3
 800953a:	fb03 5711 	mls	r7, r3, r1, r5
 800953e:	5dc7      	ldrb	r7, [r0, r7]
 8009540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009544:	462f      	mov	r7, r5
 8009546:	460d      	mov	r5, r1
 8009548:	42bb      	cmp	r3, r7
 800954a:	d9f4      	bls.n	8009536 <_printf_i+0x112>
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10b      	bne.n	8009568 <_printf_i+0x144>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07df      	lsls	r7, r3, #31
 8009554:	d508      	bpl.n	8009568 <_printf_i+0x144>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	4299      	cmp	r1, r3
 800955c:	bfde      	ittt	le
 800955e:	2330      	movle	r3, #48	@ 0x30
 8009560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009564:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009568:	1b92      	subs	r2, r2, r6
 800956a:	6122      	str	r2, [r4, #16]
 800956c:	464b      	mov	r3, r9
 800956e:	aa03      	add	r2, sp, #12
 8009570:	4621      	mov	r1, r4
 8009572:	4640      	mov	r0, r8
 8009574:	f8cd a000 	str.w	sl, [sp]
 8009578:	f7ff fee2 	bl	8009340 <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	d14a      	bne.n	8009616 <_printf_i+0x1f2>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b004      	add	sp, #16
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	2778      	movs	r7, #120	@ 0x78
 8009594:	4832      	ldr	r0, [pc, #200]	@ (8009660 <_printf_i+0x23c>)
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800959c:	061f      	lsls	r7, r3, #24
 800959e:	6831      	ldr	r1, [r6, #0]
 80095a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80095a4:	d402      	bmi.n	80095ac <_printf_i+0x188>
 80095a6:	065f      	lsls	r7, r3, #25
 80095a8:	bf48      	it	mi
 80095aa:	b2ad      	uxthmi	r5, r5
 80095ac:	6031      	str	r1, [r6, #0]
 80095ae:	07d9      	lsls	r1, r3, #31
 80095b0:	bf44      	itt	mi
 80095b2:	f043 0320 	orrmi.w	r3, r3, #32
 80095b6:	6023      	strmi	r3, [r4, #0]
 80095b8:	b11d      	cbz	r5, 80095c2 <_printf_i+0x19e>
 80095ba:	2310      	movs	r3, #16
 80095bc:	e7ac      	b.n	8009518 <_printf_i+0xf4>
 80095be:	4827      	ldr	r0, [pc, #156]	@ (800965c <_printf_i+0x238>)
 80095c0:	e7e9      	b.n	8009596 <_printf_i+0x172>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	f023 0320 	bic.w	r3, r3, #32
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	e7f6      	b.n	80095ba <_printf_i+0x196>
 80095cc:	4616      	mov	r6, r2
 80095ce:	e7bd      	b.n	800954c <_printf_i+0x128>
 80095d0:	6833      	ldr	r3, [r6, #0]
 80095d2:	6825      	ldr	r5, [r4, #0]
 80095d4:	1d18      	adds	r0, r3, #4
 80095d6:	6961      	ldr	r1, [r4, #20]
 80095d8:	6030      	str	r0, [r6, #0]
 80095da:	062e      	lsls	r6, r5, #24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	d501      	bpl.n	80095e4 <_printf_i+0x1c0>
 80095e0:	6019      	str	r1, [r3, #0]
 80095e2:	e002      	b.n	80095ea <_printf_i+0x1c6>
 80095e4:	0668      	lsls	r0, r5, #25
 80095e6:	d5fb      	bpl.n	80095e0 <_printf_i+0x1bc>
 80095e8:	8019      	strh	r1, [r3, #0]
 80095ea:	2300      	movs	r3, #0
 80095ec:	4616      	mov	r6, r2
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	e7bc      	b.n	800956c <_printf_i+0x148>
 80095f2:	6833      	ldr	r3, [r6, #0]
 80095f4:	2100      	movs	r1, #0
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	6032      	str	r2, [r6, #0]
 80095fa:	681e      	ldr	r6, [r3, #0]
 80095fc:	6862      	ldr	r2, [r4, #4]
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f980 	bl	8009904 <memchr>
 8009604:	b108      	cbz	r0, 800960a <_printf_i+0x1e6>
 8009606:	1b80      	subs	r0, r0, r6
 8009608:	6060      	str	r0, [r4, #4]
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	2300      	movs	r3, #0
 8009610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009614:	e7aa      	b.n	800956c <_printf_i+0x148>
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d0ad      	beq.n	8009580 <_printf_i+0x15c>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	079b      	lsls	r3, r3, #30
 8009628:	d413      	bmi.n	8009652 <_printf_i+0x22e>
 800962a:	68e0      	ldr	r0, [r4, #12]
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	4298      	cmp	r0, r3
 8009630:	bfb8      	it	lt
 8009632:	4618      	movlt	r0, r3
 8009634:	e7a6      	b.n	8009584 <_printf_i+0x160>
 8009636:	2301      	movs	r3, #1
 8009638:	4632      	mov	r2, r6
 800963a:	4649      	mov	r1, r9
 800963c:	4640      	mov	r0, r8
 800963e:	47d0      	blx	sl
 8009640:	3001      	adds	r0, #1
 8009642:	d09d      	beq.n	8009580 <_printf_i+0x15c>
 8009644:	3501      	adds	r5, #1
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	9903      	ldr	r1, [sp, #12]
 800964a:	1a5b      	subs	r3, r3, r1
 800964c:	42ab      	cmp	r3, r5
 800964e:	dcf2      	bgt.n	8009636 <_printf_i+0x212>
 8009650:	e7eb      	b.n	800962a <_printf_i+0x206>
 8009652:	2500      	movs	r5, #0
 8009654:	f104 0619 	add.w	r6, r4, #25
 8009658:	e7f5      	b.n	8009646 <_printf_i+0x222>
 800965a:	bf00      	nop
 800965c:	08009b71 	.word	0x08009b71
 8009660:	08009b82 	.word	0x08009b82

08009664 <__sflush_r>:
 8009664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966c:	0716      	lsls	r6, r2, #28
 800966e:	4605      	mov	r5, r0
 8009670:	460c      	mov	r4, r1
 8009672:	d454      	bmi.n	800971e <__sflush_r+0xba>
 8009674:	684b      	ldr	r3, [r1, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dc02      	bgt.n	8009680 <__sflush_r+0x1c>
 800967a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	dd48      	ble.n	8009712 <__sflush_r+0xae>
 8009680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009682:	2e00      	cmp	r6, #0
 8009684:	d045      	beq.n	8009712 <__sflush_r+0xae>
 8009686:	2300      	movs	r3, #0
 8009688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800968c:	682f      	ldr	r7, [r5, #0]
 800968e:	6a21      	ldr	r1, [r4, #32]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	d030      	beq.n	80096f6 <__sflush_r+0x92>
 8009694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	0759      	lsls	r1, r3, #29
 800969a:	d505      	bpl.n	80096a8 <__sflush_r+0x44>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096a2:	b10b      	cbz	r3, 80096a8 <__sflush_r+0x44>
 80096a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096ac:	6a21      	ldr	r1, [r4, #32]
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b0      	blx	r6
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	d106      	bne.n	80096c6 <__sflush_r+0x62>
 80096b8:	6829      	ldr	r1, [r5, #0]
 80096ba:	291d      	cmp	r1, #29
 80096bc:	d82b      	bhi.n	8009716 <__sflush_r+0xb2>
 80096be:	4a2a      	ldr	r2, [pc, #168]	@ (8009768 <__sflush_r+0x104>)
 80096c0:	410a      	asrs	r2, r1
 80096c2:	07d6      	lsls	r6, r2, #31
 80096c4:	d427      	bmi.n	8009716 <__sflush_r+0xb2>
 80096c6:	2200      	movs	r2, #0
 80096c8:	04d9      	lsls	r1, r3, #19
 80096ca:	6062      	str	r2, [r4, #4]
 80096cc:	6922      	ldr	r2, [r4, #16]
 80096ce:	6022      	str	r2, [r4, #0]
 80096d0:	d504      	bpl.n	80096dc <__sflush_r+0x78>
 80096d2:	1c42      	adds	r2, r0, #1
 80096d4:	d101      	bne.n	80096da <__sflush_r+0x76>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b903      	cbnz	r3, 80096dc <__sflush_r+0x78>
 80096da:	6560      	str	r0, [r4, #84]	@ 0x54
 80096dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096de:	602f      	str	r7, [r5, #0]
 80096e0:	b1b9      	cbz	r1, 8009712 <__sflush_r+0xae>
 80096e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096e6:	4299      	cmp	r1, r3
 80096e8:	d002      	beq.n	80096f0 <__sflush_r+0x8c>
 80096ea:	4628      	mov	r0, r5
 80096ec:	f7ff fbee 	bl	8008ecc <_free_r>
 80096f0:	2300      	movs	r3, #0
 80096f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f4:	e00d      	b.n	8009712 <__sflush_r+0xae>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	4602      	mov	r2, r0
 80096fe:	1c50      	adds	r0, r2, #1
 8009700:	d1c9      	bne.n	8009696 <__sflush_r+0x32>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c6      	beq.n	8009696 <__sflush_r+0x32>
 8009708:	2b1d      	cmp	r3, #29
 800970a:	d001      	beq.n	8009710 <__sflush_r+0xac>
 800970c:	2b16      	cmp	r3, #22
 800970e:	d11d      	bne.n	800974c <__sflush_r+0xe8>
 8009710:	602f      	str	r7, [r5, #0]
 8009712:	2000      	movs	r0, #0
 8009714:	e021      	b.n	800975a <__sflush_r+0xf6>
 8009716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971a:	b21b      	sxth	r3, r3
 800971c:	e01a      	b.n	8009754 <__sflush_r+0xf0>
 800971e:	690f      	ldr	r7, [r1, #16]
 8009720:	2f00      	cmp	r7, #0
 8009722:	d0f6      	beq.n	8009712 <__sflush_r+0xae>
 8009724:	0793      	lsls	r3, r2, #30
 8009726:	680e      	ldr	r6, [r1, #0]
 8009728:	600f      	str	r7, [r1, #0]
 800972a:	bf0c      	ite	eq
 800972c:	694b      	ldreq	r3, [r1, #20]
 800972e:	2300      	movne	r3, #0
 8009730:	eba6 0807 	sub.w	r8, r6, r7
 8009734:	608b      	str	r3, [r1, #8]
 8009736:	f1b8 0f00 	cmp.w	r8, #0
 800973a:	ddea      	ble.n	8009712 <__sflush_r+0xae>
 800973c:	4643      	mov	r3, r8
 800973e:	463a      	mov	r2, r7
 8009740:	6a21      	ldr	r1, [r4, #32]
 8009742:	4628      	mov	r0, r5
 8009744:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009746:	47b0      	blx	r6
 8009748:	2800      	cmp	r0, #0
 800974a:	dc08      	bgt.n	800975e <__sflush_r+0xfa>
 800974c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975e:	4407      	add	r7, r0
 8009760:	eba8 0800 	sub.w	r8, r8, r0
 8009764:	e7e7      	b.n	8009736 <__sflush_r+0xd2>
 8009766:	bf00      	nop
 8009768:	dfbffffe 	.word	0xdfbffffe

0800976c <_fflush_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	690b      	ldr	r3, [r1, #16]
 8009770:	4605      	mov	r5, r0
 8009772:	460c      	mov	r4, r1
 8009774:	b913      	cbnz	r3, 800977c <_fflush_r+0x10>
 8009776:	2500      	movs	r5, #0
 8009778:	4628      	mov	r0, r5
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	b118      	cbz	r0, 8009786 <_fflush_r+0x1a>
 800977e:	6a03      	ldr	r3, [r0, #32]
 8009780:	b90b      	cbnz	r3, 8009786 <_fflush_r+0x1a>
 8009782:	f7ff fa9b 	bl	8008cbc <__sinit>
 8009786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f3      	beq.n	8009776 <_fflush_r+0xa>
 800978e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009790:	07d0      	lsls	r0, r2, #31
 8009792:	d404      	bmi.n	800979e <_fflush_r+0x32>
 8009794:	0599      	lsls	r1, r3, #22
 8009796:	d402      	bmi.n	800979e <_fflush_r+0x32>
 8009798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800979a:	f7ff fb94 	bl	8008ec6 <__retarget_lock_acquire_recursive>
 800979e:	4628      	mov	r0, r5
 80097a0:	4621      	mov	r1, r4
 80097a2:	f7ff ff5f 	bl	8009664 <__sflush_r>
 80097a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097a8:	4605      	mov	r5, r0
 80097aa:	07da      	lsls	r2, r3, #31
 80097ac:	d4e4      	bmi.n	8009778 <_fflush_r+0xc>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	059b      	lsls	r3, r3, #22
 80097b2:	d4e1      	bmi.n	8009778 <_fflush_r+0xc>
 80097b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097b6:	f7ff fb87 	bl	8008ec8 <__retarget_lock_release_recursive>
 80097ba:	e7dd      	b.n	8009778 <_fflush_r+0xc>

080097bc <__swbuf_r>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	460e      	mov	r6, r1
 80097c0:	4614      	mov	r4, r2
 80097c2:	4605      	mov	r5, r0
 80097c4:	b118      	cbz	r0, 80097ce <__swbuf_r+0x12>
 80097c6:	6a03      	ldr	r3, [r0, #32]
 80097c8:	b90b      	cbnz	r3, 80097ce <__swbuf_r+0x12>
 80097ca:	f7ff fa77 	bl	8008cbc <__sinit>
 80097ce:	69a3      	ldr	r3, [r4, #24]
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	071a      	lsls	r2, r3, #28
 80097d6:	d501      	bpl.n	80097dc <__swbuf_r+0x20>
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b943      	cbnz	r3, 80097ee <__swbuf_r+0x32>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f82a 	bl	8009838 <__swsetup_r>
 80097e4:	b118      	cbz	r0, 80097ee <__swbuf_r+0x32>
 80097e6:	f04f 37ff 	mov.w	r7, #4294967295
 80097ea:	4638      	mov	r0, r7
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	b2f6      	uxtb	r6, r6
 80097f2:	6922      	ldr	r2, [r4, #16]
 80097f4:	4637      	mov	r7, r6
 80097f6:	1a98      	subs	r0, r3, r2
 80097f8:	6963      	ldr	r3, [r4, #20]
 80097fa:	4283      	cmp	r3, r0
 80097fc:	dc05      	bgt.n	800980a <__swbuf_r+0x4e>
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f7ff ffb3 	bl	800976c <_fflush_r>
 8009806:	2800      	cmp	r0, #0
 8009808:	d1ed      	bne.n	80097e6 <__swbuf_r+0x2a>
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	3b01      	subs	r3, #1
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	701e      	strb	r6, [r3, #0]
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	6962      	ldr	r2, [r4, #20]
 800981c:	429a      	cmp	r2, r3
 800981e:	d004      	beq.n	800982a <__swbuf_r+0x6e>
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	07db      	lsls	r3, r3, #31
 8009824:	d5e1      	bpl.n	80097ea <__swbuf_r+0x2e>
 8009826:	2e0a      	cmp	r6, #10
 8009828:	d1df      	bne.n	80097ea <__swbuf_r+0x2e>
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f7ff ff9d 	bl	800976c <_fflush_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	d0d9      	beq.n	80097ea <__swbuf_r+0x2e>
 8009836:	e7d6      	b.n	80097e6 <__swbuf_r+0x2a>

08009838 <__swsetup_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4b29      	ldr	r3, [pc, #164]	@ (80098e0 <__swsetup_r+0xa8>)
 800983c:	4605      	mov	r5, r0
 800983e:	460c      	mov	r4, r1
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	b118      	cbz	r0, 800984c <__swsetup_r+0x14>
 8009844:	6a03      	ldr	r3, [r0, #32]
 8009846:	b90b      	cbnz	r3, 800984c <__swsetup_r+0x14>
 8009848:	f7ff fa38 	bl	8008cbc <__sinit>
 800984c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009850:	0719      	lsls	r1, r3, #28
 8009852:	d422      	bmi.n	800989a <__swsetup_r+0x62>
 8009854:	06da      	lsls	r2, r3, #27
 8009856:	d407      	bmi.n	8009868 <__swsetup_r+0x30>
 8009858:	2209      	movs	r2, #9
 800985a:	602a      	str	r2, [r5, #0]
 800985c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	e033      	b.n	80098d0 <__swsetup_r+0x98>
 8009868:	0758      	lsls	r0, r3, #29
 800986a:	d512      	bpl.n	8009892 <__swsetup_r+0x5a>
 800986c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800986e:	b141      	cbz	r1, 8009882 <__swsetup_r+0x4a>
 8009870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <__swsetup_r+0x46>
 8009878:	4628      	mov	r0, r5
 800987a:	f7ff fb27 	bl	8008ecc <_free_r>
 800987e:	2300      	movs	r3, #0
 8009880:	6363      	str	r3, [r4, #52]	@ 0x34
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	2300      	movs	r3, #0
 800988c:	6063      	str	r3, [r4, #4]
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f043 0308 	orr.w	r3, r3, #8
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	b94b      	cbnz	r3, 80098b2 <__swsetup_r+0x7a>
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a8:	d003      	beq.n	80098b2 <__swsetup_r+0x7a>
 80098aa:	4621      	mov	r1, r4
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 f85c 	bl	800996a <__smakebuf_r>
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	f013 0201 	ands.w	r2, r3, #1
 80098ba:	d00a      	beq.n	80098d2 <__swsetup_r+0x9a>
 80098bc:	2200      	movs	r2, #0
 80098be:	60a2      	str	r2, [r4, #8]
 80098c0:	6962      	ldr	r2, [r4, #20]
 80098c2:	4252      	negs	r2, r2
 80098c4:	61a2      	str	r2, [r4, #24]
 80098c6:	6922      	ldr	r2, [r4, #16]
 80098c8:	b942      	cbnz	r2, 80098dc <__swsetup_r+0xa4>
 80098ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098ce:	d1c5      	bne.n	800985c <__swsetup_r+0x24>
 80098d0:	bd38      	pop	{r3, r4, r5, pc}
 80098d2:	0799      	lsls	r1, r3, #30
 80098d4:	bf58      	it	pl
 80098d6:	6962      	ldrpl	r2, [r4, #20]
 80098d8:	60a2      	str	r2, [r4, #8]
 80098da:	e7f4      	b.n	80098c6 <__swsetup_r+0x8e>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7f7      	b.n	80098d0 <__swsetup_r+0x98>
 80098e0:	20000018 	.word	0x20000018

080098e4 <_sbrk_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	2300      	movs	r3, #0
 80098e8:	4d05      	ldr	r5, [pc, #20]	@ (8009900 <_sbrk_r+0x1c>)
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f7 fb7a 	bl	8000fe8 <_sbrk>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_sbrk_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_sbrk_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	200002fc 	.word	0x200002fc

08009904 <memchr>:
 8009904:	b2c9      	uxtb	r1, r1
 8009906:	4603      	mov	r3, r0
 8009908:	4402      	add	r2, r0
 800990a:	b510      	push	{r4, lr}
 800990c:	4293      	cmp	r3, r2
 800990e:	4618      	mov	r0, r3
 8009910:	d101      	bne.n	8009916 <memchr+0x12>
 8009912:	2000      	movs	r0, #0
 8009914:	e003      	b.n	800991e <memchr+0x1a>
 8009916:	7804      	ldrb	r4, [r0, #0]
 8009918:	3301      	adds	r3, #1
 800991a:	428c      	cmp	r4, r1
 800991c:	d1f6      	bne.n	800990c <memchr+0x8>
 800991e:	bd10      	pop	{r4, pc}

08009920 <__swhatbuf_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	460c      	mov	r4, r1
 8009924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009928:	b096      	sub	sp, #88	@ 0x58
 800992a:	4615      	mov	r5, r2
 800992c:	2900      	cmp	r1, #0
 800992e:	461e      	mov	r6, r3
 8009930:	da0c      	bge.n	800994c <__swhatbuf_r+0x2c>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	2100      	movs	r1, #0
 8009936:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800993a:	bf14      	ite	ne
 800993c:	2340      	movne	r3, #64	@ 0x40
 800993e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009942:	2000      	movs	r0, #0
 8009944:	6031      	str	r1, [r6, #0]
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	b016      	add	sp, #88	@ 0x58
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	466a      	mov	r2, sp
 800994e:	f000 f849 	bl	80099e4 <_fstat_r>
 8009952:	2800      	cmp	r0, #0
 8009954:	dbed      	blt.n	8009932 <__swhatbuf_r+0x12>
 8009956:	9901      	ldr	r1, [sp, #4]
 8009958:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800995c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009960:	4259      	negs	r1, r3
 8009962:	4159      	adcs	r1, r3
 8009964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009968:	e7eb      	b.n	8009942 <__swhatbuf_r+0x22>

0800996a <__smakebuf_r>:
 800996a:	898b      	ldrh	r3, [r1, #12]
 800996c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996e:	079d      	lsls	r5, r3, #30
 8009970:	4606      	mov	r6, r0
 8009972:	460c      	mov	r4, r1
 8009974:	d507      	bpl.n	8009986 <__smakebuf_r+0x1c>
 8009976:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	2301      	movs	r3, #1
 8009980:	6163      	str	r3, [r4, #20]
 8009982:	b003      	add	sp, #12
 8009984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009986:	ab01      	add	r3, sp, #4
 8009988:	466a      	mov	r2, sp
 800998a:	f7ff ffc9 	bl	8009920 <__swhatbuf_r>
 800998e:	9f00      	ldr	r7, [sp, #0]
 8009990:	4605      	mov	r5, r0
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7ff fb05 	bl	8008fa4 <_malloc_r>
 800999a:	b948      	cbnz	r0, 80099b0 <__smakebuf_r+0x46>
 800999c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a0:	059a      	lsls	r2, r3, #22
 80099a2:	d4ee      	bmi.n	8009982 <__smakebuf_r+0x18>
 80099a4:	f023 0303 	bic.w	r3, r3, #3
 80099a8:	f043 0302 	orr.w	r3, r3, #2
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	e7e2      	b.n	8009976 <__smakebuf_r+0xc>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099c0:	b15b      	cbz	r3, 80099da <__smakebuf_r+0x70>
 80099c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c6:	4630      	mov	r0, r6
 80099c8:	f000 f81e 	bl	8009a08 <_isatty_r>
 80099cc:	b128      	cbz	r0, 80099da <__smakebuf_r+0x70>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	f043 0301 	orr.w	r3, r3, #1
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	431d      	orrs	r5, r3
 80099de:	81a5      	strh	r5, [r4, #12]
 80099e0:	e7cf      	b.n	8009982 <__smakebuf_r+0x18>
	...

080099e4 <_fstat_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	2300      	movs	r3, #0
 80099e8:	4d06      	ldr	r5, [pc, #24]	@ (8009a04 <_fstat_r+0x20>)
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	f7f7 fad1 	bl	8000f98 <_fstat>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d102      	bne.n	8009a00 <_fstat_r+0x1c>
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	b103      	cbz	r3, 8009a00 <_fstat_r+0x1c>
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	bd38      	pop	{r3, r4, r5, pc}
 8009a02:	bf00      	nop
 8009a04:	200002fc 	.word	0x200002fc

08009a08 <_isatty_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4d05      	ldr	r5, [pc, #20]	@ (8009a24 <_isatty_r+0x1c>)
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	602b      	str	r3, [r5, #0]
 8009a14:	f7f7 fad0 	bl	8000fb8 <_isatty>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_isatty_r+0x1a>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_isatty_r+0x1a>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	200002fc 	.word	0x200002fc

08009a28 <_init>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr

08009a34 <_fini>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr
