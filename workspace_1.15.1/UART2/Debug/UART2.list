
UART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  080041d0  080041d0  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d0  080041d0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000051d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080041d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000018  080041f0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080041f0  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4ca  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d29  00000000  00000000  0001150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00013238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000677  00000000  00000000  00013a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145f0  00000000  00000000  0001410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7b4  00000000  00000000  000286ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080697  00000000  00000000  00033eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b454a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c9c  00000000  00000000  000b4590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004130 	.word	0x08004130

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08004130 	.word	0x08004130

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a09      	ldr	r2, [pc, #36]	@ (8000430 <HAL_UART_RxCpltCallback+0x34>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d100      	bne.n	8000410 <HAL_UART_RxCpltCallback+0x14>
		__NOP();
 800040e:	46c0      	nop			@ (mov r8, r8)
	}
	if(huart->Instance==USART2){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <HAL_UART_RxCpltCallback+0x38>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d105      	bne.n	8000426 <HAL_UART_RxCpltCallback+0x2a>
	  HAL_UART_Receive_IT(&huart2, buffer_rx, 1);
 800041a:	4907      	ldr	r1, [pc, #28]	@ (8000438 <HAL_UART_RxCpltCallback+0x3c>)
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <HAL_UART_RxCpltCallback+0x40>)
 800041e:	2201      	movs	r2, #1
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fdb9 	bl	8001f98 <HAL_UART_Receive_IT>
	}
}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	40013800 	.word	0x40013800
 8000434:	40004400 	.word	0x40004400
 8000438:	2000015c 	.word	0x2000015c
 800043c:	200000c8 	.word	0x200000c8

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 faa8 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f828 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f90a 	bl	8000664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000450:	f000 f8ba 	bl	80005c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000454:	f000 f86a 	bl	800052c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buffer_rx, 10);
 8000458:	490c      	ldr	r1, [pc, #48]	@ (800048c <main+0x4c>)
 800045a:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <main+0x50>)
 800045c:	220a      	movs	r2, #10
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fd9a 	bl	8001f98 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, buffer_tx, 10);
 8000464:	490b      	ldr	r1, [pc, #44]	@ (8000494 <main+0x54>)
 8000466:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <main+0x50>)
 8000468:	220a      	movs	r2, #10
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fcec 	bl	8001e48 <HAL_UART_Transmit_IT>
  HAL_UART_Transmit_IT(&huart2, buffer_tx, 10);
 8000470:	4908      	ldr	r1, [pc, #32]	@ (8000494 <main+0x54>)
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <main+0x58>)
 8000474:	220a      	movs	r2, #10
 8000476:	0018      	movs	r0, r3
 8000478:	f001 fce6 	bl	8001e48 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, buffer_rx, 1);
 800047c:	4903      	ldr	r1, [pc, #12]	@ (800048c <main+0x4c>)
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <main+0x58>)
 8000480:	2201      	movs	r2, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fd88 	bl	8001f98 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	e7fd      	b.n	8000488 <main+0x48>
 800048c:	2000015c 	.word	0x2000015c
 8000490:	20000034 	.word	0x20000034
 8000494:	20000000 	.word	0x20000000
 8000498:	200000c8 	.word	0x200000c8

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b093      	sub	sp, #76	@ 0x4c
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	2414      	movs	r4, #20
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2334      	movs	r3, #52	@ 0x34
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f003 fe13 	bl	80040d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	2310      	movs	r3, #16
 80004b8:	001a      	movs	r2, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	f003 fe0c 	bl	80040d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c0:	2380      	movs	r3, #128	@ 0x80
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe2f 	bl	8001128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2202      	movs	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2280      	movs	r2, #128	@ 0x80
 80004d4:	0052      	lsls	r2, r2, #1
 80004d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2240      	movs	r2, #64	@ 0x40
 80004e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fe67 	bl	80011c0 <HAL_RCC_OscConfig>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004f6:	f000 f905 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2207      	movs	r2, #7
 80004fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2100      	movs	r1, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f962 	bl	80017e0 <HAL_RCC_ClockConfig>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000520:	f000 f8f0 	bl	8000704 <Error_Handler>
  }
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b013      	add	sp, #76	@ 0x4c
 800052a:	bd90      	pop	{r4, r7, pc}

0800052c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000530:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000532:	4a24      	ldr	r2, [pc, #144]	@ (80005c4 <MX_USART1_UART_Init+0x98>)
 8000534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000536:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000538:	22e1      	movs	r2, #225	@ 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fc10 	bl	8001d9c <HAL_UART_Init>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000580:	f000 f8c0 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000586:	2100      	movs	r1, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f003 fcc5 	bl	8003f18 <HAL_UARTEx_SetTxFifoThreshold>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000592:	f000 f8b7 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000598:	2100      	movs	r1, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f003 fcfc 	bl	8003f98 <HAL_UARTEx_SetRxFifoThreshold>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005a4:	f000 f8ae 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fc7a 	bl	8003ea4 <HAL_UARTEx_DisableFifoMode>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f8a6 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000034 	.word	0x20000034
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005ce:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <MX_USART2_UART_Init+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005d4:	22e1      	movs	r2, #225	@ 0xe1
 80005d6:	0252      	lsls	r2, r2, #9
 80005d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_USART2_UART_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <MX_USART2_UART_Init+0x94>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fbc2 	bl	8001d9c <HAL_UART_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800061c:	f000 f872 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fc77 	bl	8003f18 <HAL_UARTEx_SetTxFifoThreshold>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800062e:	f000 f869 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000632:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f003 fcae 	bl	8003f98 <HAL_UARTEx_SetRxFifoThreshold>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000640:	f000 f860 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <MX_USART2_UART_Init+0x94>)
 8000646:	0018      	movs	r0, r3
 8000648:	f003 fc2c 	bl	8003ea4 <HAL_UARTEx_DisableFifoMode>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000650:	f000 f858 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	200000c8 	.word	0x200000c8
 8000660:	40004400 	.word	0x40004400

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b089      	sub	sp, #36	@ 0x24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	240c      	movs	r4, #12
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f003 fd2f 	bl	80040d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <MX_GPIO_Init+0x9c>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000680:	2104      	movs	r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068a:	2204      	movs	r2, #4
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_GPIO_Init+0x9c>)
 8000698:	2120      	movs	r1, #32
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	2220      	movs	r2, #32
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_GPIO_Init+0x9c>)
 80006b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006c2:	23a0      	movs	r3, #160	@ 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fd0e 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2220      	movs	r2, #32
 80006d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	23a0      	movs	r3, #160	@ 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fb96 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b009      	add	sp, #36	@ 0x24
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <HAL_MspInit+0x4c>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_MspInit+0x4c>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <HAL_MspInit+0x4c>)
 8000730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <HAL_MspInit+0x4c>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0549      	lsls	r1, r1, #21
 8000738:	430a      	orrs	r2, r1
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <HAL_MspInit+0x4c>)
 800073e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800074a:	23c0      	movs	r3, #192	@ 0xc0
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f9a8 	bl	8000aa4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b093      	sub	sp, #76	@ 0x4c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2334      	movs	r3, #52	@ 0x34
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f003 fcb0 	bl	80040d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	2418      	movs	r4, #24
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	231c      	movs	r3, #28
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f003 fca8 	bl	80040d8 <memset>
  if(huart->Instance==USART1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a4d      	ldr	r2, [pc, #308]	@ (80008c4 <HAL_UART_MspInit+0x164>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d146      	bne.n	8000820 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f9c7 	bl	8001b34 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007aa:	f7ff ffab 	bl	8000704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ae:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b2:	4b45      	ldr	r3, [pc, #276]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007b4:	2180      	movs	r1, #128	@ 0x80
 80007b6:	01c9      	lsls	r1, r1, #7
 80007b8:	430a      	orrs	r2, r1
 80007ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80007bc:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	01db      	lsls	r3, r3, #7
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ce:	4b3e      	ldr	r3, [pc, #248]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007d0:	2104      	movs	r1, #4
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007da:	2204      	movs	r2, #4
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007e2:	2134      	movs	r1, #52	@ 0x34
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2230      	movs	r2, #48	@ 0x30
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	187b      	adds	r3, r7, r1
 8000804:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <HAL_UART_MspInit+0x16c>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f000 fb0b 	bl	8000e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	201b      	movs	r0, #27
 8000814:	f000 fa08 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000818:	201b      	movs	r0, #27
 800081a:	f000 fa1a 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081e:	e04c      	b.n	80008ba <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2a      	ldr	r2, [pc, #168]	@ (80008d0 <HAL_UART_MspInit+0x170>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d147      	bne.n	80008ba <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800082a:	2118      	movs	r1, #24
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2202      	movs	r2, #2
 8000830:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	187b      	adds	r3, r7, r1
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f97a 	bl	8001b34 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000844:	f7ff ff5e 	bl	8000704 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 800084a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	0289      	lsls	r1, r1, #10
 8000852:	430a      	orrs	r2, r1
 8000854:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 8000858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800085a:	2380      	movs	r3, #128	@ 0x80
 800085c:	029b      	lsls	r3, r3, #10
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 8000866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 800086a:	2101      	movs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <HAL_UART_MspInit+0x168>)
 8000872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000874:	2201      	movs	r2, #1
 8000876:	4013      	ands	r3, r2
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087c:	2134      	movs	r1, #52	@ 0x34
 800087e:	187b      	adds	r3, r7, r1
 8000880:	220c      	movs	r2, #12
 8000882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2201      	movs	r2, #1
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	187a      	adds	r2, r7, r1
 800089e:	23a0      	movs	r3, #160	@ 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fabd 	bl	8000e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f000 f9ba 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f000 f9cc 	bl	8000c52 <HAL_NVIC_EnableIRQ>
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b013      	add	sp, #76	@ 0x4c
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	50000800 	.word	0x50000800
 80008d0:	40004400 	.word	0x40004400

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f8b6 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <USART1_IRQHandler+0x14>)
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fb9a 	bl	8002048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000034 	.word	0x20000034

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <USART2_IRQHandler+0x14>)
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fb8e 	bl	8002048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	200000c8 	.word	0x200000c8

08000938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000948:	f7ff fff6 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000972:	f003 fbb9 	bl	80040e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000976:	f7ff fd63 	bl	8000440 <main>

0800097a <LoopForever>:

LoopForever:
  b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000988:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 800098c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000990:	2000016c 	.word	0x2000016c

08000994 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_IRQHandler>
	...

08000998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_Init+0x3c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_Init+0x3c>)
 80009aa:	2180      	movs	r1, #128	@ 0x80
 80009ac:	0049      	lsls	r1, r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f810 	bl	80009d8 <HAL_InitTick>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d003      	beq.n	80009c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e001      	b.n	80009c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fea4 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <HAL_InitTick+0x88>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d02b      	beq.n	8000a48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <HAL_InitTick+0x8c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_InitTick+0x88>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	@ 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb7f 	bl	8000100 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb7a 	bl	8000100 <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f92f 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d112      	bne.n	8000a3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d80a      	bhi.n	8000a34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f8fe 	bl	8000c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_InitTick+0x90>)
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e00d      	b.n	8000a50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e008      	b.n	8000a50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e003      	b.n	8000a50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b005      	add	sp, #20
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000014 	.word	0x20000014
 8000a64:	2000000c 	.word	0x2000000c
 8000a68:	20000010 	.word	0x20000010

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	001a      	movs	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	18d2      	adds	r2, r2, r3
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	20000168 	.word	0x20000168

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	@ (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	20000168 	.word	0x20000168

08000aa4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a06      	ldr	r2, [pc, #24]	@ (8000acc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	fffff9ff 	.word	0xfffff9ff

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ae2:	d809      	bhi.n	8000af8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	231f      	movs	r3, #31
 8000aec:	401a      	ands	r2, r3
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <__NVIC_EnableIRQ+0x30>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	4091      	lsls	r1, r2
 8000af4:	000a      	movs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b18:	d828      	bhi.n	8000b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	33c0      	adds	r3, #192	@ 0xc0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	589b      	ldr	r3, [r3, r2]
 8000b2a:	1dfa      	adds	r2, r7, #7
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	0011      	movs	r1, r2
 8000b30:	2203      	movs	r2, #3
 8000b32:	400a      	ands	r2, r1
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	21ff      	movs	r1, #255	@ 0xff
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	401a      	ands	r2, r3
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2303      	movs	r3, #3
 8000b52:	4003      	ands	r3, r0
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	481f      	ldr	r0, [pc, #124]	@ (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	430a      	orrs	r2, r1
 8000b64:	33c0      	adds	r3, #192	@ 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b6a:	e031      	b.n	8000bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <__NVIC_SetPriority+0xd8>)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0019      	movs	r1, r3
 8000b74:	230f      	movs	r3, #15
 8000b76:	400b      	ands	r3, r1
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3306      	adds	r3, #6
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	3304      	adds	r3, #4
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	@ 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	@ 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001c      	movs	r4, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4023      	ands	r3, r4
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	3306      	adds	r3, #6
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	18c3      	adds	r3, r0, r3
 8000bcc:	3304      	adds	r3, #4
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	045b      	lsls	r3, r3, #17
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d301      	bcc.n	8000bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e010      	b.n	8000c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <SysTick_Config+0x44>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2103      	movs	r1, #3
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff7c 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x44>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x44>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	210f      	movs	r1, #15
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	1c02      	adds	r2, r0, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	0002      	movs	r2, r0
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff33 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ffaf 	bl	8000be0 <SysTick_Config>
 8000c82:	0003      	movs	r3, r0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e050      	b.n	8000d40 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2225      	movs	r2, #37	@ 0x25
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d008      	beq.n	8000cbc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2204      	movs	r2, #4
 8000cae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2224      	movs	r2, #36	@ 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e041      	b.n	8000d40 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	210e      	movs	r1, #14
 8000cc8:	438a      	bics	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	491c      	ldr	r1, [pc, #112]	@ (8000d48 <HAL_DMA_Abort+0xbc>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_DMA_Abort+0xc0>)
 8000cee:	6859      	ldr	r1, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	221c      	movs	r2, #28
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_DMA_Abort+0xc0>)
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00c      	beq.n	8000d2e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d1e:	490a      	ldr	r1, [pc, #40]	@ (8000d48 <HAL_DMA_Abort+0xbc>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2225      	movs	r2, #37	@ 0x25
 8000d32:	2101      	movs	r1, #1
 8000d34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2224      	movs	r2, #36	@ 0x24
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	fffffeff 	.word	0xfffffeff
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d58:	210f      	movs	r1, #15
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2225      	movs	r2, #37	@ 0x25
 8000d64:	5c9b      	ldrb	r3, [r3, r2]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d006      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e049      	b.n	8000e0e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	210e      	movs	r1, #14
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	491d      	ldr	r1, [pc, #116]	@ (8000e1c <HAL_DMA_Abort_IT+0xcc>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <HAL_DMA_Abort_IT+0xd0>)
 8000dac:	6859      	ldr	r1, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	221c      	movs	r2, #28
 8000db4:	4013      	ands	r3, r2
 8000db6:	2201      	movs	r2, #1
 8000db8:	409a      	lsls	r2, r3
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_DMA_Abort_IT+0xd0>)
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000dc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00c      	beq.n	8000dec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ddc:	490f      	ldr	r1, [pc, #60]	@ (8000e1c <HAL_DMA_Abort_IT+0xcc>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000dea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2225      	movs	r2, #37	@ 0x25
 8000df0:	2101      	movs	r1, #1
 8000df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2224      	movs	r2, #36	@ 0x24
 8000df8:	2100      	movs	r1, #0
 8000dfa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	4798      	blx	r3
    }
  }
  return status;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	781b      	ldrb	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	fffffeff 	.word	0xfffffeff
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e147      	b.n	80010c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x28>
 8000e4a:	e138      	b.n	80010be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	58d3      	ldr	r3, [r2, r3]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2207      	movs	r2, #7
 8000f20:	4013      	ands	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2107      	movs	r1, #7
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	6939      	ldr	r1, [r7, #16]
 8000f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	401a      	ands	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	23c0      	movs	r3, #192	@ 0xc0
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d100      	bne.n	8000f98 <HAL_GPIO_Init+0x174>
 8000f96:	e092      	b.n	80010be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f98:	4a50      	ldr	r2, [pc, #320]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3318      	adds	r3, #24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	589b      	ldr	r3, [r3, r2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	220f      	movs	r2, #15
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	23a0      	movs	r3, #160	@ 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x1ca>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a45      	ldr	r2, [pc, #276]	@ (80010e0 <HAL_GPIO_Init+0x2bc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x1c6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a44      	ldr	r2, [pc, #272]	@ (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x1c2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a43      	ldr	r2, [pc, #268]	@ (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x1be>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	00d2      	lsls	r2, r2, #3
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001000:	4936      	ldr	r1, [pc, #216]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3318      	adds	r3, #24
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800100e:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	035b      	lsls	r3, r3, #13
 8001026:	4013      	ands	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	039b      	lsls	r3, r3, #14
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8001064:	2384      	movs	r3, #132	@ 0x84
 8001066:	58d3      	ldr	r3, [r2, r3]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43da      	mvns	r2, r3
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	4013      	ands	r3, r2
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001088:	4914      	ldr	r1, [pc, #80]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 800108a:	2284      	movs	r2, #132	@ 0x84
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	025b      	lsls	r3, r3, #9
 80010aa:	4013      	ands	r3, r2
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b6:	4909      	ldr	r1, [pc, #36]	@ (80010dc <HAL_GPIO_Init+0x2b8>)
 80010b8:	2280      	movs	r2, #128	@ 0x80
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	40da      	lsrs	r2, r3
 80010cc:	1e13      	subs	r3, r2, #0
 80010ce:	d000      	beq.n	80010d2 <HAL_GPIO_Init+0x2ae>
 80010d0:	e6b0      	b.n	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b006      	add	sp, #24
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021800 	.word	0x40021800
 80010e0:	50000400 	.word	0x50000400
 80010e4:	50000800 	.word	0x50000800
 80010e8:	50000c00 	.word	0x50000c00

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	0008      	movs	r0, r1
 80010f6:	0011      	movs	r1, r2
 80010f8:	1cbb      	adds	r3, r7, #2
 80010fa:	1c02      	adds	r2, r0, #0
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	1c7b      	adds	r3, r7, #1
 8001100:	1c0a      	adds	r2, r1, #0
 8001102:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	429a      	cmp	r2, r3
 800114a:	d11f      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	0013      	movs	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	189b      	adds	r3, r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4912      	ldr	r1, [pc, #72]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7fe ffd0 	bl	8000100 <__udivsi3>
 8001160:	0003      	movs	r3, r0
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001166:	e008      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e001      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e009      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	401a      	ands	r2, r3
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	429a      	cmp	r2, r3
 800118a:	d0ed      	beq.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	40007000 	.word	0x40007000
 800119c:	fffff9ff 	.word	0xfffff9ff
 80011a0:	2000000c 	.word	0x2000000c
 80011a4:	000f4240 	.word	0x000f4240

080011a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	23e0      	movs	r3, #224	@ 0xe0
 80011b2:	01db      	lsls	r3, r3, #7
 80011b4:	4013      	ands	r3, r2
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e2f3      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x1e>
 80011dc:	e07c      	b.n	80012d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4bc3      	ldr	r3, [pc, #780]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2238      	movs	r2, #56	@ 0x38
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e8:	4bc0      	ldr	r3, [pc, #768]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2203      	movs	r2, #3
 80011ee:	4013      	ands	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_OscConfig+0x3e>
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d002      	beq.n	8001204 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d10b      	bne.n	800121c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4bb9      	ldr	r3, [pc, #740]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d062      	beq.n	80012d6 <HAL_RCC_OscConfig+0x116>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d15e      	bne.n	80012d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e2ce      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	429a      	cmp	r2, r3
 8001226:	d107      	bne.n	8001238 <HAL_RCC_OscConfig+0x78>
 8001228:	4bb0      	ldr	r3, [pc, #704]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4baf      	ldr	r3, [pc, #700]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800122e:	2180      	movs	r1, #128	@ 0x80
 8001230:	0249      	lsls	r1, r1, #9
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e020      	b.n	800127a <HAL_RCC_OscConfig+0xba>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	23a0      	movs	r3, #160	@ 0xa0
 800123e:	02db      	lsls	r3, r3, #11
 8001240:	429a      	cmp	r2, r3
 8001242:	d10e      	bne.n	8001262 <HAL_RCC_OscConfig+0xa2>
 8001244:	4ba9      	ldr	r3, [pc, #676]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4ba8      	ldr	r3, [pc, #672]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	02c9      	lsls	r1, r1, #11
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	4ba6      	ldr	r3, [pc, #664]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4ba5      	ldr	r3, [pc, #660]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001258:	2180      	movs	r1, #128	@ 0x80
 800125a:	0249      	lsls	r1, r1, #9
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e00b      	b.n	800127a <HAL_RCC_OscConfig+0xba>
 8001262:	4ba2      	ldr	r3, [pc, #648]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4ba1      	ldr	r3, [pc, #644]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001268:	49a1      	ldr	r1, [pc, #644]	@ (80014f0 <HAL_RCC_OscConfig+0x330>)
 800126a:	400a      	ands	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4b9f      	ldr	r3, [pc, #636]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b9e      	ldr	r3, [pc, #632]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001274:	499f      	ldr	r1, [pc, #636]	@ (80014f4 <HAL_RCC_OscConfig+0x334>)
 8001276:	400a      	ands	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d014      	beq.n	80012ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fc05 	bl	8000a90 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc00 	bl	8000a90 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e28d      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	4b93      	ldr	r3, [pc, #588]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xcc>
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbf0 	bl	8000a90 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fbeb 	bl	8000a90 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	@ 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e278      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c8:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0xf6>
 80012d4:	e000      	b.n	80012d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x124>
 80012e2:	e099      	b.n	8001418 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e4:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2238      	movs	r2, #56	@ 0x38
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ee:	4b7f      	ldr	r3, [pc, #508]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x144>
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d002      	beq.n	800130a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d135      	bne.n	8001376 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4013      	ands	r3, r2
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x162>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e24b      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b72      	ldr	r3, [pc, #456]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a74      	ldr	r2, [pc, #464]	@ (80014f8 <HAL_RCC_OscConfig+0x338>)
 8001328:	4013      	ands	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	021a      	lsls	r2, r3, #8
 8001332:	4b6e      	ldr	r3, [pc, #440]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d112      	bne.n	8001364 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800133e:	4b6b      	ldr	r3, [pc, #428]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	@ (80014fc <HAL_RCC_OscConfig+0x33c>)
 8001344:	4013      	ands	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	4b67      	ldr	r3, [pc, #412]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001352:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0adb      	lsrs	r3, r3, #11
 8001358:	2207      	movs	r2, #7
 800135a:	4013      	ands	r3, r2
 800135c:	4a68      	ldr	r2, [pc, #416]	@ (8001500 <HAL_RCC_OscConfig+0x340>)
 800135e:	40da      	lsrs	r2, r3
 8001360:	4b68      	ldr	r3, [pc, #416]	@ (8001504 <HAL_RCC_OscConfig+0x344>)
 8001362:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001364:	4b68      	ldr	r3, [pc, #416]	@ (8001508 <HAL_RCC_OscConfig+0x348>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fb35 	bl	80009d8 <HAL_InitTick>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d051      	beq.n	8001416 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e221      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d030      	beq.n	80013e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800137e:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5e      	ldr	r2, [pc, #376]	@ (80014fc <HAL_RCC_OscConfig+0x33c>)
 8001384:	4013      	ands	r3, r2
 8001386:	0019      	movs	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	4b57      	ldr	r3, [pc, #348]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b56      	ldr	r3, [pc, #344]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b55      	ldr	r3, [pc, #340]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	0049      	lsls	r1, r1, #1
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb76 	bl	8000a90 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fb71 	bl	8000a90 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1fe      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013bc:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4013      	ands	r3, r2
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b48      	ldr	r3, [pc, #288]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x338>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	021a      	lsls	r2, r3, #8
 80013d8:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e01b      	b.n	8001418 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80013e6:	4949      	ldr	r1, [pc, #292]	@ (800150c <HAL_RCC_OscConfig+0x34c>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb50 	bl	8000a90 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fb4b 	bl	8000a90 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1d8      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4013      	ands	r3, r2
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x236>
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001416:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2208      	movs	r2, #8
 800141e:	4013      	ands	r3, r2
 8001420:	d047      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2238      	movs	r2, #56	@ 0x38
 8001428:	4013      	ands	r3, r2
 800142a:	2b18      	cmp	r3, #24
 800142c:	d10a      	bne.n	8001444 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d03c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d138      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e1ba      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d019      	beq.n	8001480 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 800144e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb1a 	bl	8000a90 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fb15 	bl	8000a90 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e1a2      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001478:	2202      	movs	r2, #2
 800147a:	4013      	ands	r3, r2
 800147c:	d0f1      	beq.n	8001462 <HAL_RCC_OscConfig+0x2a2>
 800147e:	e018      	b.n	80014b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001482:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb00 	bl	8000a90 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001496:	f7ff fafb 	bl	8000a90 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e188      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d1f1      	bne.n	8001496 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2204      	movs	r2, #4
 80014b8:	4013      	ands	r3, r2
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x2fe>
 80014bc:	e0c6      	b.n	800164c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014be:	231f      	movs	r3, #31
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2238      	movs	r2, #56	@ 0x38
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d11e      	bne.n	8001510 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x32c>)
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x31e>
 80014dc:	e0b6      	b.n	800164c <HAL_RCC_OscConfig+0x48c>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d000      	beq.n	80014e8 <HAL_RCC_OscConfig+0x328>
 80014e6:	e0b1      	b.n	800164c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e166      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	fffeffff 	.word	0xfffeffff
 80014f4:	fffbffff 	.word	0xfffbffff
 80014f8:	ffff80ff 	.word	0xffff80ff
 80014fc:	ffffc7ff 	.word	0xffffc7ff
 8001500:	00f42400 	.word	0x00f42400
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000010 	.word	0x20000010
 800150c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001510:	4bac      	ldr	r3, [pc, #688]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	4013      	ands	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x360>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x362>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d011      	beq.n	800154a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4ba7      	ldr	r3, [pc, #668]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152a:	4ba6      	ldr	r3, [pc, #664]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	0549      	lsls	r1, r1, #21
 8001530:	430a      	orrs	r2, r1
 8001532:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001534:	4ba3      	ldr	r3, [pc, #652]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	055b      	lsls	r3, r3, #21
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001542:	231f      	movs	r3, #31
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154a:	4b9f      	ldr	r3, [pc, #636]	@ (80017c8 <HAL_RCC_OscConfig+0x608>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4013      	ands	r3, r2
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001556:	4b9c      	ldr	r3, [pc, #624]	@ (80017c8 <HAL_RCC_OscConfig+0x608>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b9b      	ldr	r3, [pc, #620]	@ (80017c8 <HAL_RCC_OscConfig+0x608>)
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	0049      	lsls	r1, r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001564:	f7ff fa94 	bl	8000a90 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fa8f 	bl	8000a90 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e11c      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001580:	4b91      	ldr	r3, [pc, #580]	@ (80017c8 <HAL_RCC_OscConfig+0x608>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3e2>
 8001594:	4b8b      	ldr	r3, [pc, #556]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001596:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001598:	4b8a      	ldr	r3, [pc, #552]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x41c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x404>
 80015aa:	4b86      	ldr	r3, [pc, #536]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ae:	4b85      	ldr	r3, [pc, #532]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015b0:	2104      	movs	r1, #4
 80015b2:	430a      	orrs	r2, r1
 80015b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015b6:	4b83      	ldr	r3, [pc, #524]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ba:	4b82      	ldr	r3, [pc, #520]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015bc:	2101      	movs	r1, #1
 80015be:	430a      	orrs	r2, r1
 80015c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x41c>
 80015c4:	4b7f      	ldr	r3, [pc, #508]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015c8:	4b7e      	ldr	r3, [pc, #504]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	438a      	bics	r2, r1
 80015ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015d4:	4b7b      	ldr	r3, [pc, #492]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80015d6:	2104      	movs	r1, #4
 80015d8:	438a      	bics	r2, r1
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d014      	beq.n	800160e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa54 	bl	8000a90 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ec:	e009      	b.n	8001602 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fa4f 	bl	8000a90 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a74      	ldr	r2, [pc, #464]	@ (80017cc <HAL_RCC_OscConfig+0x60c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0db      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	4b70      	ldr	r3, [pc, #448]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x42e>
 800160c:	e013      	b.n	8001636 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fa3f 	bl	8000a90 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001616:	e009      	b.n	800162c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fa3a 	bl	8000a90 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4a6a      	ldr	r2, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x60c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0c6      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800162c:	4b65      	ldr	r3, [pc, #404]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001636:	231f      	movs	r3, #31
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b60      	ldr	r3, [pc, #384]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001644:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001646:	4962      	ldr	r1, [pc, #392]	@ (80017d0 <HAL_RCC_OscConfig+0x610>)
 8001648:	400a      	ands	r2, r1
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x496>
 8001654:	e0b0      	b.n	80017b8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2238      	movs	r2, #56	@ 0x38
 800165c:	4013      	ands	r3, r2
 800165e:	2b10      	cmp	r3, #16
 8001660:	d100      	bne.n	8001664 <HAL_RCC_OscConfig+0x4a4>
 8001662:	e078      	b.n	8001756 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d153      	bne.n	8001714 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b55      	ldr	r3, [pc, #340]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b54      	ldr	r3, [pc, #336]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001672:	4958      	ldr	r1, [pc, #352]	@ (80017d4 <HAL_RCC_OscConfig+0x614>)
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa0a 	bl	8000a90 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fa05 	bl	8000a90 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e092      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	4b4b      	ldr	r3, [pc, #300]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	049b      	lsls	r3, r3, #18
 800169c:	4013      	ands	r3, r2
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a0:	4b48      	ldr	r3, [pc, #288]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	@ (80017d8 <HAL_RCC_OscConfig+0x618>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	431a      	orrs	r2, r3
 80016c8:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0449      	lsls	r1, r1, #17
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	0549      	lsls	r1, r1, #21
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff f9d1 	bl	8000a90 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff f9cc 	bl	8000a90 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e059      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x534>
 8001712:	e051      	b.n	80017b8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800171a:	492e      	ldr	r1, [pc, #184]	@ (80017d4 <HAL_RCC_OscConfig+0x614>)
 800171c:	400a      	ands	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff f9b6 	bl	8000a90 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff f9b1 	bl	8000a90 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e03e      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	049b      	lsls	r3, r3, #18
 8001744:	4013      	ands	r3, r2
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 800174e:	4923      	ldr	r1, [pc, #140]	@ (80017dc <HAL_RCC_OscConfig+0x61c>)
 8001750:	400a      	ands	r2, r1
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	e030      	b.n	80017b8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e02b      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2203      	movs	r2, #3
 800176c:	401a      	ands	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	429a      	cmp	r2, r3
 8001774:	d11e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2270      	movs	r2, #112	@ 0x70
 800177a:	401a      	ands	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d117      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	23fe      	movs	r3, #254	@ 0xfe
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	401a      	ands	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	23f8      	movs	r3, #248	@ 0xf8
 800179a:	039b      	lsls	r3, r3, #14
 800179c:	401a      	ands	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	0f5b      	lsrs	r3, r3, #29
 80017aa:	075a      	lsls	r2, r3, #29
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b008      	add	sp, #32
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	00001388 	.word	0x00001388
 80017d0:	efffffff 	.word	0xefffffff
 80017d4:	feffffff 	.word	0xfeffffff
 80017d8:	1fc1808c 	.word	0x1fc1808c
 80017dc:	effefffc 	.word	0xeffefffc

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0e9      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b76      	ldr	r3, [pc, #472]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d91e      	bls.n	8001840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b73      	ldr	r3, [pc, #460]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2207      	movs	r2, #7
 8001808:	4393      	bics	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	4b70      	ldr	r3, [pc, #448]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001814:	f7ff f93c 	bl	8000a90 <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181c:	e009      	b.n	8001832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181e:	f7ff f937 	bl	8000a90 <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a6a      	ldr	r2, [pc, #424]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0ca      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001832:	4b67      	ldr	r3, [pc, #412]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2207      	movs	r2, #7
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d015      	beq.n	8001876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d006      	beq.n	8001862 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001854:	4b60      	ldr	r3, [pc, #384]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b5f      	ldr	r3, [pc, #380]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 800185a:	21e0      	movs	r1, #224	@ 0xe0
 800185c:	01c9      	lsls	r1, r1, #7
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001862:	4b5d      	ldr	r3, [pc, #372]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4a5d      	ldr	r2, [pc, #372]	@ (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 8001868:	4013      	ands	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d057      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d12b      	bne.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e097      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a0:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	049b      	lsls	r3, r3, #18
 80018a8:	4013      	ands	r3, r2
 80018aa:	d11f      	bne.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e08b      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	d113      	bne.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e07f      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d106      	bne.n	80018de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d0:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e074      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018de:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e06d      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ec:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2207      	movs	r2, #7
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001900:	f7ff f8c6 	bl	8000a90 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001908:	e009      	b.n	800191e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	f7ff f8c1 	bl	8000a90 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a2f      	ldr	r2, [pc, #188]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e054      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2238      	movs	r2, #56	@ 0x38
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	429a      	cmp	r2, r3
 800192e:	d1ec      	bne.n	800190a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d21e      	bcs.n	800197c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2207      	movs	r2, #7
 8001944:	4393      	bics	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001950:	f7ff f89e 	bl	8000a90 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7ff f899 	bl	8000a90 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e02c      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4a15      	ldr	r2, [pc, #84]	@ (80019e0 <HAL_RCC_ClockConfig+0x200>)
 800198c:	4013      	ands	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800199a:	f000 f829 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 800199e:	0001      	movs	r1, r0
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	220f      	movs	r2, #15
 80019a8:	401a      	ands	r2, r3
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <HAL_RCC_ClockConfig+0x204>)
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	58d3      	ldr	r3, [r2, r3]
 80019b0:	221f      	movs	r2, #31
 80019b2:	4013      	ands	r3, r2
 80019b4:	000a      	movs	r2, r1
 80019b6:	40da      	lsrs	r2, r3
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_RCC_ClockConfig+0x208>)
 80019ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x20c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff f809 	bl	80009d8 <HAL_InitTick>
 80019c6:	0003      	movs	r3, r0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b004      	add	sp, #16
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40022000 	.word	0x40022000
 80019d4:	00001388 	.word	0x00001388
 80019d8:	40021000 	.word	0x40021000
 80019dc:	fffff0ff 	.word	0xfffff0ff
 80019e0:	ffff8fff 	.word	0xffff8fff
 80019e4:	08004148 	.word	0x08004148
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000010 	.word	0x20000010

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2238      	movs	r2, #56	@ 0x38
 80019fc:	4013      	ands	r3, r2
 80019fe:	d10f      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a00:	4b39      	ldr	r3, [pc, #228]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0adb      	lsrs	r3, r3, #11
 8001a06:	2207      	movs	r2, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	4835      	ldr	r0, [pc, #212]	@ (8001aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a16:	f7fe fb73 	bl	8000100 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e05d      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2238      	movs	r2, #56	@ 0x38
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a2c:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	e054      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2238      	movs	r2, #56	@ 0x38
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d138      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2203      	movs	r2, #3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a48:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4013      	ands	r3, r2
 8001a52:	3301      	adds	r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d10d      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4824      	ldr	r0, [pc, #144]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a60:	f7fe fb4e 	bl	8000100 <__udivsi3>
 8001a64:	0003      	movs	r3, r0
 8001a66:	0019      	movs	r1, r3
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	227f      	movs	r2, #127	@ 0x7f
 8001a70:	4013      	ands	r3, r2
 8001a72:	434b      	muls	r3, r1
 8001a74:	617b      	str	r3, [r7, #20]
        break;
 8001a76:	e00d      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	481c      	ldr	r0, [pc, #112]	@ (8001aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a7c:	f7fe fb40 	bl	8000100 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	0019      	movs	r1, r3
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	227f      	movs	r2, #127	@ 0x7f
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	434b      	muls	r3, r1
 8001a90:	617b      	str	r3, [r7, #20]
        break;
 8001a92:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0f5b      	lsrs	r3, r3, #29
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7fe fb2b 	bl	8000100 <__udivsi3>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e015      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2238      	movs	r2, #56	@ 0x38
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d103      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2238      	movs	r2, #56	@ 0x38
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b18      	cmp	r3, #24
 8001ace:	d103      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ad0:	23fa      	movs	r3, #250	@ 0xfa
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e001      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001adc:	693b      	ldr	r3, [r7, #16]
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b006      	add	sp, #24
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b0c:	f7ff fff2 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b10:	0004      	movs	r4, r0
 8001b12:	f7ff fb49 	bl	80011a8 <LL_RCC_GetAPB1Prescaler>
 8001b16:	0003      	movs	r3, r0
 8001b18:	0b1a      	lsrs	r2, r3, #12
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	58d3      	ldr	r3, [r2, r3]
 8001b20:	221f      	movs	r2, #31
 8001b22:	4013      	ands	r3, r2
 8001b24:	40dc      	lsrs	r4, r3
 8001b26:	0023      	movs	r3, r4
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	08004188 	.word	0x08004188

08001b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b3c:	2313      	movs	r3, #19
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b44:	2312      	movs	r3, #18
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	d100      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b58:	e0a3      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	2011      	movs	r0, #17
 8001b5c:	183b      	adds	r3, r7, r0
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b86      	ldr	r3, [pc, #536]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	055b      	lsls	r3, r3, #21
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d110      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b83      	ldr	r3, [pc, #524]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b72:	4b82      	ldr	r3, [pc, #520]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b74:	2180      	movs	r1, #128	@ 0x80
 8001b76:	0549      	lsls	r1, r1, #21
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	055b      	lsls	r3, r3, #21
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b90:	4b7b      	ldr	r3, [pc, #492]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b7a      	ldr	r3, [pc, #488]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b96:	2180      	movs	r1, #128	@ 0x80
 8001b98:	0049      	lsls	r1, r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b9e:	f7fe ff77 	bl	8000a90 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7fe ff72 	bl	8000a90 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d904      	bls.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001bb6:	2313      	movs	r3, #19
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2203      	movs	r2, #3
 8001bbc:	701a      	strb	r2, [r3, #0]
        break;
 8001bbe:	e005      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0ed      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001bcc:	2313      	movs	r3, #19
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d154      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bd6:	4b69      	ldr	r3, [pc, #420]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bda:	23c0      	movs	r3, #192	@ 0xc0
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d014      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bf2:	4b62      	ldr	r3, [pc, #392]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c00:	4b5e      	ldr	r3, [pc, #376]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	0249      	lsls	r1, r1, #9
 8001c06:	430a      	orrs	r2, r1
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c10:	495d      	ldr	r1, [pc, #372]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c16:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d016      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff34 	bl	8000a90 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe ff2f 	bl	8000a90 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a54      	ldr	r2, [pc, #336]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d904      	bls.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c3e:	2313      	movs	r3, #19
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2203      	movs	r2, #3
 8001c44:	701a      	strb	r2, [r3, #0]
            break;
 8001c46:	e004      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c48:	4b4c      	ldr	r3, [pc, #304]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d0ed      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c52:	2313      	movs	r3, #19
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5c:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c60:	4a48      	ldr	r2, [pc, #288]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c70:	e00c      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c72:	2312      	movs	r3, #18
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	2213      	movs	r2, #19
 8001c78:	18ba      	adds	r2, r7, r2
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e005      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c80:	2312      	movs	r3, #18
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2213      	movs	r2, #19
 8001c86:	18ba      	adds	r2, r7, r2
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8c:	2311      	movs	r3, #17
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c9a:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c9c:	493c      	ldr	r1, [pc, #240]	@ (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	d015      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d08:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	0899      	lsrs	r1, r3, #2
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d106      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0249      	lsls	r1, r1, #9
 8001d30:	430a      	orrs	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d016      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d50:	430a      	orrs	r2, r1
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	0249      	lsls	r1, r1, #9
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d6e:	2312      	movs	r3, #18
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b006      	add	sp, #24
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
 8001d84:	fffffcff 	.word	0xfffffcff
 8001d88:	fffeffff 	.word	0xfffeffff
 8001d8c:	00001388 	.word	0x00001388
 8001d90:	efffffff 	.word	0xefffffff
 8001d94:	ffffcfff 	.word	0xffffcfff
 8001d98:	ffff3fff 	.word	0xffff3fff

08001d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e046      	b.n	8001e3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2288      	movs	r2, #136	@ 0x88
 8001db2:	589b      	ldr	r3, [r3, r2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2284      	movs	r2, #132	@ 0x84
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe fccc 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2288      	movs	r2, #136	@ 0x88
 8001dcc:	2124      	movs	r1, #36	@ 0x24
 8001dce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	438a      	bics	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fe0a 	bl	8002a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 fc62 	bl	80026bc <UART_SetConfig>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e01c      	b.n	8001e3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <HAL_UART_Init+0xa8>)
 8001e0e:	400a      	ands	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	212a      	movs	r1, #42	@ 0x2a
 8001e1e:	438a      	bics	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 fe99 	bl	8002b6c <UART_CheckIdleState>
 8001e3a:	0003      	movs	r3, r0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	ffffb7ff 	.word	0xffffb7ff

08001e48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	1dbb      	adds	r3, r7, #6
 8001e54:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2288      	movs	r2, #136	@ 0x88
 8001e5a:	589b      	ldr	r3, [r3, r2]
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d000      	beq.n	8001e62 <HAL_UART_Transmit_IT+0x1a>
 8001e60:	e08d      	b.n	8001f7e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_UART_Transmit_IT+0x28>
 8001e68:	1dbb      	adds	r3, r7, #6
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e085      	b.n	8001f80 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	015b      	lsls	r3, r3, #5
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d109      	bne.n	8001e94 <HAL_UART_Transmit_IT+0x4c>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d001      	beq.n	8001e94 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e075      	b.n	8001f80 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1dba      	adds	r2, r7, #6
 8001e9e:	2154      	movs	r1, #84	@ 0x54
 8001ea0:	8812      	ldrh	r2, [r2, #0]
 8001ea2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1dba      	adds	r2, r7, #6
 8001ea8:	2156      	movs	r1, #86	@ 0x56
 8001eaa:	8812      	ldrh	r2, [r2, #0]
 8001eac:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2290      	movs	r2, #144	@ 0x90
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2288      	movs	r2, #136	@ 0x88
 8001ec0:	2121      	movs	r1, #33	@ 0x21
 8001ec2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	059b      	lsls	r3, r3, #22
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d12a      	bne.n	8001f26 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_UART_Transmit_IT+0xa4>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a28      	ldr	r2, [pc, #160]	@ (8001f88 <HAL_UART_Transmit_IT+0x140>)
 8001ee8:	679a      	str	r2, [r3, #120]	@ 0x78
 8001eea:	e002      	b.n	8001ef2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <HAL_UART_Transmit_IT+0x144>)
 8001ef0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ef6:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efc:	2301      	movs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f383 8810 	msr	PRIMASK, r3
}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	0409      	lsls	r1, r1, #16
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f383 8810 	msr	PRIMASK, r3
}
 8001f24:	e029      	b.n	8001f7a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	015b      	lsls	r3, r3, #5
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d107      	bne.n	8001f42 <HAL_UART_Transmit_IT+0xfa>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <HAL_UART_Transmit_IT+0x148>)
 8001f3e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001f40:	e002      	b.n	8001f48 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <HAL_UART_Transmit_IT+0x14c>)
 8001f46:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f48:	f3ef 8310 	mrs	r3, PRIMASK
 8001f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f52:	2301      	movs	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f383 8810 	msr	PRIMASK, r3
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f383 8810 	msr	PRIMASK, r3
}
 8001f78:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
  }
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b00c      	add	sp, #48	@ 0x30
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08003341 	.word	0x08003341
 8001f8c:	08003255 	.word	0x08003255
 8001f90:	08003197 	.word	0x08003197
 8001f94:	080030e3 	.word	0x080030e3

08001f98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	228c      	movs	r2, #140	@ 0x8c
 8001faa:	589b      	ldr	r3, [r3, r2]
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d145      	bne.n	800203c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_UART_Receive_IT+0x26>
 8001fb6:	1dbb      	adds	r3, r7, #6
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e03d      	b.n	800203e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	015b      	lsls	r3, r3, #5
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d109      	bne.n	8001fe2 <HAL_UART_Receive_IT+0x4a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e02d      	b.n	800203e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	613b      	str	r3, [r7, #16]
  return(result);
 8001ffc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	2301      	movs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f383 8810 	msr	PRIMASK, r3
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	04c9      	lsls	r1, r1, #19
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f383 8810 	msr	PRIMASK, r3
}
 8002028:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 feb4 	bl	8002da0 <UART_Start_Receive_IT>
 8002038:	0003      	movs	r3, r0
 800203a:	e000      	b.n	800203e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b008      	add	sp, #32
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b0aa      	sub	sp, #168	@ 0xa8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	22a4      	movs	r2, #164	@ 0xa4
 8002058:	18b9      	adds	r1, r7, r2
 800205a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	20a0      	movs	r0, #160	@ 0xa0
 8002064:	1839      	adds	r1, r7, r0
 8002066:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	249c      	movs	r4, #156	@ 0x9c
 8002070:	1939      	adds	r1, r7, r4
 8002072:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002074:	0011      	movs	r1, r2
 8002076:	18bb      	adds	r3, r7, r2
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4aa2      	ldr	r2, [pc, #648]	@ (8002304 <HAL_UART_IRQHandler+0x2bc>)
 800207c:	4013      	ands	r3, r2
 800207e:	2298      	movs	r2, #152	@ 0x98
 8002080:	18bd      	adds	r5, r7, r2
 8002082:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002084:	18bb      	adds	r3, r7, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11a      	bne.n	80020c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800208c:	187b      	adds	r3, r7, r1
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	4013      	ands	r3, r2
 8002094:	d015      	beq.n	80020c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002096:	183b      	adds	r3, r7, r0
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2220      	movs	r2, #32
 800209c:	4013      	ands	r3, r2
 800209e:	d105      	bne.n	80020ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	055b      	lsls	r3, r3, #21
 80020a8:	4013      	ands	r3, r2
 80020aa:	d00a      	beq.n	80020c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d100      	bne.n	80020b6 <HAL_UART_IRQHandler+0x6e>
 80020b4:	e2dc      	b.n	8002670 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	0010      	movs	r0, r2
 80020be:	4798      	blx	r3
      }
      return;
 80020c0:	e2d6      	b.n	8002670 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80020c2:	2398      	movs	r3, #152	@ 0x98
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d100      	bne.n	80020ce <HAL_UART_IRQHandler+0x86>
 80020cc:	e122      	b.n	8002314 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80020ce:	239c      	movs	r3, #156	@ 0x9c
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a8c      	ldr	r2, [pc, #560]	@ (8002308 <HAL_UART_IRQHandler+0x2c0>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	d106      	bne.n	80020e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80020da:	23a0      	movs	r3, #160	@ 0xa0
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a8a      	ldr	r2, [pc, #552]	@ (800230c <HAL_UART_IRQHandler+0x2c4>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	d100      	bne.n	80020e8 <HAL_UART_IRQHandler+0xa0>
 80020e6:	e115      	b.n	8002314 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020e8:	23a4      	movs	r3, #164	@ 0xa4
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d012      	beq.n	800211a <HAL_UART_IRQHandler+0xd2>
 80020f4:	23a0      	movs	r3, #160	@ 0xa0
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	d00b      	beq.n	800211a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2290      	movs	r2, #144	@ 0x90
 800210e:	589b      	ldr	r3, [r3, r2]
 8002110:	2201      	movs	r2, #1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2190      	movs	r1, #144	@ 0x90
 8002118:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800211a:	23a4      	movs	r3, #164	@ 0xa4
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d011      	beq.n	800214a <HAL_UART_IRQHandler+0x102>
 8002126:	239c      	movs	r3, #156	@ 0x9c
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d00b      	beq.n	800214a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2290      	movs	r2, #144	@ 0x90
 800213e:	589b      	ldr	r3, [r3, r2]
 8002140:	2204      	movs	r2, #4
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2190      	movs	r1, #144	@ 0x90
 8002148:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800214a:	23a4      	movs	r3, #164	@ 0xa4
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2204      	movs	r2, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d011      	beq.n	800217a <HAL_UART_IRQHandler+0x132>
 8002156:	239c      	movs	r3, #156	@ 0x9c
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d00b      	beq.n	800217a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2204      	movs	r2, #4
 8002168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2290      	movs	r2, #144	@ 0x90
 800216e:	589b      	ldr	r3, [r3, r2]
 8002170:	2202      	movs	r2, #2
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2190      	movs	r1, #144	@ 0x90
 8002178:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800217a:	23a4      	movs	r3, #164	@ 0xa4
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	4013      	ands	r3, r2
 8002184:	d017      	beq.n	80021b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002186:	23a0      	movs	r3, #160	@ 0xa0
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	4013      	ands	r3, r2
 8002190:	d105      	bne.n	800219e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002192:	239c      	movs	r3, #156	@ 0x9c
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_UART_IRQHandler+0x2c0>)
 800219a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800219c:	d00b      	beq.n	80021b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2208      	movs	r2, #8
 80021a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2290      	movs	r2, #144	@ 0x90
 80021aa:	589b      	ldr	r3, [r3, r2]
 80021ac:	2208      	movs	r2, #8
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2190      	movs	r1, #144	@ 0x90
 80021b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80021b6:	23a4      	movs	r3, #164	@ 0xa4
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4013      	ands	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_UART_IRQHandler+0x1a4>
 80021c4:	23a0      	movs	r3, #160	@ 0xa0
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	04db      	lsls	r3, r3, #19
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00c      	beq.n	80021ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2290      	movs	r2, #144	@ 0x90
 80021e0:	589b      	ldr	r3, [r3, r2]
 80021e2:	2220      	movs	r2, #32
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2190      	movs	r1, #144	@ 0x90
 80021ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2290      	movs	r2, #144	@ 0x90
 80021f0:	589b      	ldr	r3, [r3, r2]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d100      	bne.n	80021f8 <HAL_UART_IRQHandler+0x1b0>
 80021f6:	e23d      	b.n	8002674 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80021f8:	23a4      	movs	r3, #164	@ 0xa4
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2220      	movs	r2, #32
 8002200:	4013      	ands	r3, r2
 8002202:	d015      	beq.n	8002230 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002204:	23a0      	movs	r3, #160	@ 0xa0
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2220      	movs	r2, #32
 800220c:	4013      	ands	r3, r2
 800220e:	d106      	bne.n	800221e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002210:	239c      	movs	r3, #156	@ 0x9c
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	055b      	lsls	r3, r3, #21
 800221a:	4013      	ands	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	0010      	movs	r0, r2
 800222e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2290      	movs	r2, #144	@ 0x90
 8002234:	589b      	ldr	r3, [r3, r2]
 8002236:	2194      	movs	r1, #148	@ 0x94
 8002238:	187a      	adds	r2, r7, r1
 800223a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	4013      	ands	r3, r2
 8002246:	2b40      	cmp	r3, #64	@ 0x40
 8002248:	d004      	beq.n	8002254 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800224a:	187b      	adds	r3, r7, r1
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2228      	movs	r2, #40	@ 0x28
 8002250:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002252:	d04c      	beq.n	80022ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fec6 	bl	8002fe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	4013      	ands	r3, r2
 8002266:	2b40      	cmp	r3, #64	@ 0x40
 8002268:	d13c      	bne.n	80022e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226a:	f3ef 8310 	mrs	r3, PRIMASK
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002272:	2090      	movs	r0, #144	@ 0x90
 8002274:	183a      	adds	r2, r7, r0
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	2301      	movs	r3, #1
 800227a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800227e:	f383 8810 	msr	PRIMASK, r3
}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2140      	movs	r1, #64	@ 0x40
 8002290:	438a      	bics	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	183b      	adds	r3, r7, r0
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229c:	f383 8810 	msr	PRIMASK, r3
}
 80022a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2280      	movs	r2, #128	@ 0x80
 80022a6:	589b      	ldr	r3, [r3, r2]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d016      	beq.n	80022da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	589b      	ldr	r3, [r3, r2]
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_UART_IRQHandler+0x2c8>)
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	589b      	ldr	r3, [r3, r2]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fd47 	bl	8000d50 <HAL_DMA_Abort_IT>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	589b      	ldr	r3, [r3, r2]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	5852      	ldr	r2, [r2, r1]
 80022d4:	0010      	movs	r0, r2
 80022d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d8:	e012      	b.n	8002300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f9d9 	bl	8002694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e2:	e00d      	b.n	8002300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f9d4 	bl	8002694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e008      	b.n	8002300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f9cf 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2290      	movs	r2, #144	@ 0x90
 80022fa:	2100      	movs	r1, #0
 80022fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80022fe:	e1b9      	b.n	8002674 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002300:	46c0      	nop			@ (mov r8, r8)
    return;
 8002302:	e1b7      	b.n	8002674 <HAL_UART_IRQHandler+0x62c>
 8002304:	0000080f 	.word	0x0000080f
 8002308:	10000001 	.word	0x10000001
 800230c:	04000120 	.word	0x04000120
 8002310:	080030b5 	.word	0x080030b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d000      	beq.n	800231e <HAL_UART_IRQHandler+0x2d6>
 800231c:	e13e      	b.n	800259c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800231e:	23a4      	movs	r3, #164	@ 0xa4
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2210      	movs	r2, #16
 8002326:	4013      	ands	r3, r2
 8002328:	d100      	bne.n	800232c <HAL_UART_IRQHandler+0x2e4>
 800232a:	e137      	b.n	800259c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800232c:	23a0      	movs	r3, #160	@ 0xa0
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	4013      	ands	r3, r2
 8002336:	d100      	bne.n	800233a <HAL_UART_IRQHandler+0x2f2>
 8002338:	e130      	b.n	800259c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2240      	movs	r2, #64	@ 0x40
 800234a:	4013      	ands	r3, r2
 800234c:	2b40      	cmp	r3, #64	@ 0x40
 800234e:	d000      	beq.n	8002352 <HAL_UART_IRQHandler+0x30a>
 8002350:	e0a4      	b.n	800249c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	589b      	ldr	r3, [r3, r2]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	217e      	movs	r1, #126	@ 0x7e
 800235e:	187b      	adds	r3, r7, r1
 8002360:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002362:	187b      	adds	r3, r7, r1
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d100      	bne.n	800236c <HAL_UART_IRQHandler+0x324>
 800236a:	e185      	b.n	8002678 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	225c      	movs	r2, #92	@ 0x5c
 8002370:	5a9b      	ldrh	r3, [r3, r2]
 8002372:	187a      	adds	r2, r7, r1
 8002374:	8812      	ldrh	r2, [r2, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d300      	bcc.n	800237c <HAL_UART_IRQHandler+0x334>
 800237a:	e17d      	b.n	8002678 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	187a      	adds	r2, r7, r1
 8002380:	215e      	movs	r1, #94	@ 0x5e
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2280      	movs	r2, #128	@ 0x80
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	d170      	bne.n	8002478 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023a0:	2301      	movs	r3, #1
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	f383 8810 	msr	PRIMASK, r3
}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	49b4      	ldr	r1, [pc, #720]	@ (8002688 <HAL_UART_IRQHandler+0x640>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c2:	f383 8810 	msr	PRIMASK, r3
}
 80023c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c8:	f3ef 8310 	mrs	r3, PRIMASK
 80023cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80023ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80023d2:	2301      	movs	r3, #1
 80023d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d8:	f383 8810 	msr	PRIMASK, r3
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	438a      	bics	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f4:	f383 8810 	msr	PRIMASK, r3
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fa:	f3ef 8310 	mrs	r3, PRIMASK
 80023fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	673b      	str	r3, [r7, #112]	@ 0x70
 8002404:	2301      	movs	r3, #1
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2140      	movs	r1, #64	@ 0x40
 800241c:	438a      	bics	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002422:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002426:	f383 8810 	msr	PRIMASK, r3
}
 800242a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	228c      	movs	r2, #140	@ 0x8c
 8002430:	2120      	movs	r1, #32
 8002432:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243a:	f3ef 8310 	mrs	r3, PRIMASK
 800243e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002444:	2301      	movs	r3, #1
 8002446:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244a:	f383 8810 	msr	PRIMASK, r3
}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2110      	movs	r1, #16
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002462:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002466:	f383 8810 	msr	PRIMASK, r3
}
 800246a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2280      	movs	r2, #128	@ 0x80
 8002470:	589b      	ldr	r3, [r3, r2]
 8002472:	0018      	movs	r0, r3
 8002474:	f7fe fc0a 	bl	8000c8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	225c      	movs	r2, #92	@ 0x5c
 8002482:	5a9a      	ldrh	r2, [r3, r2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	215e      	movs	r1, #94	@ 0x5e
 8002488:	5a5b      	ldrh	r3, [r3, r1]
 800248a:	b29b      	uxth	r3, r3
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f905 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800249a:	e0ed      	b.n	8002678 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	225c      	movs	r2, #92	@ 0x5c
 80024a0:	5a99      	ldrh	r1, [r3, r2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	225e      	movs	r2, #94	@ 0x5e
 80024a6:	5a9b      	ldrh	r3, [r3, r2]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	208e      	movs	r0, #142	@ 0x8e
 80024ac:	183b      	adds	r3, r7, r0
 80024ae:	1a8a      	subs	r2, r1, r2
 80024b0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	225e      	movs	r2, #94	@ 0x5e
 80024b6:	5a9b      	ldrh	r3, [r3, r2]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d100      	bne.n	80024c0 <HAL_UART_IRQHandler+0x478>
 80024be:	e0dd      	b.n	800267c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d100      	bne.n	80024ca <HAL_UART_IRQHandler+0x482>
 80024c8:	e0d8      	b.n	800267c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ca:	f3ef 8310 	mrs	r3, PRIMASK
 80024ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80024d0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80024d2:	2488      	movs	r4, #136	@ 0x88
 80024d4:	193a      	adds	r2, r7, r4
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	2301      	movs	r3, #1
 80024da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f383 8810 	msr	PRIMASK, r3
}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4967      	ldr	r1, [pc, #412]	@ (800268c <HAL_UART_IRQHandler+0x644>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f383 8810 	msr	PRIMASK, r3
}
 8002500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002502:	f3ef 8310 	mrs	r3, PRIMASK
 8002506:	61bb      	str	r3, [r7, #24]
  return(result);
 8002508:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800250a:	2484      	movs	r4, #132	@ 0x84
 800250c:	193a      	adds	r2, r7, r4
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f383 8810 	msr	PRIMASK, r3
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	495a      	ldr	r1, [pc, #360]	@ (8002690 <HAL_UART_IRQHandler+0x648>)
 8002528:	400a      	ands	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	193b      	adds	r3, r7, r4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f383 8810 	msr	PRIMASK, r3
}
 8002538:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	228c      	movs	r2, #140	@ 0x8c
 800253e:	2120      	movs	r1, #32
 8002540:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002556:	2480      	movs	r4, #128	@ 0x80
 8002558:	193a      	adds	r2, r7, r4
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	f383 8810 	msr	PRIMASK, r3
}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2110      	movs	r1, #16
 8002574:	438a      	bics	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	193b      	adds	r3, r7, r4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	f383 8810 	msr	PRIMASK, r3
}
 8002584:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800258c:	183b      	adds	r3, r7, r0
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0011      	movs	r1, r2
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f885 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800259a:	e06f      	b.n	800267c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800259c:	23a4      	movs	r3, #164	@ 0xa4
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	035b      	lsls	r3, r3, #13
 80025a6:	4013      	ands	r3, r2
 80025a8:	d010      	beq.n	80025cc <HAL_UART_IRQHandler+0x584>
 80025aa:	239c      	movs	r3, #156	@ 0x9c
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	03db      	lsls	r3, r3, #15
 80025b4:	4013      	ands	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0352      	lsls	r2, r2, #13
 80025c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f001 fc55 	bl	8003e74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80025ca:	e05a      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80025cc:	23a4      	movs	r3, #164	@ 0xa4
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	4013      	ands	r3, r2
 80025d6:	d016      	beq.n	8002606 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80025d8:	23a0      	movs	r3, #160	@ 0xa0
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	4013      	ands	r3, r2
 80025e2:	d106      	bne.n	80025f2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80025e4:	239c      	movs	r3, #156	@ 0x9c
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4013      	ands	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d042      	beq.n	8002680 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	0010      	movs	r0, r2
 8002602:	4798      	blx	r3
    }
    return;
 8002604:	e03c      	b.n	8002680 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002606:	23a4      	movs	r3, #164	@ 0xa4
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	4013      	ands	r3, r2
 8002610:	d00a      	beq.n	8002628 <HAL_UART_IRQHandler+0x5e0>
 8002612:	23a0      	movs	r3, #160	@ 0xa0
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2240      	movs	r2, #64	@ 0x40
 800261a:	4013      	ands	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 ff07 	bl	8003434 <UART_EndTransmit_IT>
    return;
 8002626:	e02c      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002628:	23a4      	movs	r3, #164	@ 0xa4
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	4013      	ands	r3, r2
 8002634:	d00b      	beq.n	800264e <HAL_UART_IRQHandler+0x606>
 8002636:	23a0      	movs	r3, #160	@ 0xa0
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	4013      	ands	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fc24 	bl	8003e94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800264c:	e019      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800264e:	23a4      	movs	r3, #164	@ 0xa4
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	045b      	lsls	r3, r3, #17
 8002658:	4013      	ands	r3, r2
 800265a:	d012      	beq.n	8002682 <HAL_UART_IRQHandler+0x63a>
 800265c:	23a0      	movs	r3, #160	@ 0xa0
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da0d      	bge.n	8002682 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f001 fc0b 	bl	8003e84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800266e:	e008      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
      return;
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	e006      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
    return;
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	e004      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
      return;
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	e002      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
      return;
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	e000      	b.n	8002682 <HAL_UART_IRQHandler+0x63a>
    return;
 8002680:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002682:	46bd      	mov	sp, r7
 8002684:	b02a      	add	sp, #168	@ 0xa8
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	fffffeff 	.word	0xfffffeff
 800268c:	fffffedf 	.word	0xfffffedf
 8002690:	effffffe 	.word	0xeffffffe

08002694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	000a      	movs	r2, r1
 80026ae:	1cbb      	adds	r3, r7, #2
 80026b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c4:	231a      	movs	r3, #26
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4abc      	ldr	r2, [pc, #752]	@ (80029dc <UART_SetConfig+0x320>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4ab7      	ldr	r2, [pc, #732]	@ (80029e0 <UART_SetConfig+0x324>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4aae      	ldr	r2, [pc, #696]	@ (80029e4 <UART_SetConfig+0x328>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	220f      	movs	r2, #15
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4aa4      	ldr	r2, [pc, #656]	@ (80029e8 <UART_SetConfig+0x32c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d127      	bne.n	80027aa <UART_SetConfig+0xee>
 800275a:	4ba4      	ldr	r3, [pc, #656]	@ (80029ec <UART_SetConfig+0x330>)
 800275c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275e:	2203      	movs	r2, #3
 8002760:	4013      	ands	r3, r2
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <UART_SetConfig+0xda>
 8002766:	d81b      	bhi.n	80027a0 <UART_SetConfig+0xe4>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d00a      	beq.n	8002782 <UART_SetConfig+0xc6>
 800276c:	d818      	bhi.n	80027a0 <UART_SetConfig+0xe4>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <UART_SetConfig+0xbc>
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00a      	beq.n	800278c <UART_SetConfig+0xd0>
 8002776:	e013      	b.n	80027a0 <UART_SetConfig+0xe4>
 8002778:	231b      	movs	r3, #27
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e058      	b.n	8002834 <UART_SetConfig+0x178>
 8002782:	231b      	movs	r3, #27
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e053      	b.n	8002834 <UART_SetConfig+0x178>
 800278c:	231b      	movs	r3, #27
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	e04e      	b.n	8002834 <UART_SetConfig+0x178>
 8002796:	231b      	movs	r3, #27
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2208      	movs	r2, #8
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e049      	b.n	8002834 <UART_SetConfig+0x178>
 80027a0:	231b      	movs	r3, #27
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2210      	movs	r2, #16
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e044      	b.n	8002834 <UART_SetConfig+0x178>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a90      	ldr	r2, [pc, #576]	@ (80029f0 <UART_SetConfig+0x334>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d127      	bne.n	8002804 <UART_SetConfig+0x148>
 80027b4:	4b8d      	ldr	r3, [pc, #564]	@ (80029ec <UART_SetConfig+0x330>)
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	220c      	movs	r2, #12
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d017      	beq.n	80027f0 <UART_SetConfig+0x134>
 80027c0:	d81b      	bhi.n	80027fa <UART_SetConfig+0x13e>
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d00a      	beq.n	80027dc <UART_SetConfig+0x120>
 80027c6:	d818      	bhi.n	80027fa <UART_SetConfig+0x13e>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <UART_SetConfig+0x116>
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d00a      	beq.n	80027e6 <UART_SetConfig+0x12a>
 80027d0:	e013      	b.n	80027fa <UART_SetConfig+0x13e>
 80027d2:	231b      	movs	r3, #27
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e02b      	b.n	8002834 <UART_SetConfig+0x178>
 80027dc:	231b      	movs	r3, #27
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e026      	b.n	8002834 <UART_SetConfig+0x178>
 80027e6:	231b      	movs	r3, #27
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2204      	movs	r2, #4
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e021      	b.n	8002834 <UART_SetConfig+0x178>
 80027f0:	231b      	movs	r3, #27
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2208      	movs	r2, #8
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e01c      	b.n	8002834 <UART_SetConfig+0x178>
 80027fa:	231b      	movs	r3, #27
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2210      	movs	r2, #16
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e017      	b.n	8002834 <UART_SetConfig+0x178>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a7a      	ldr	r2, [pc, #488]	@ (80029f4 <UART_SetConfig+0x338>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d104      	bne.n	8002818 <UART_SetConfig+0x15c>
 800280e:	231b      	movs	r3, #27
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e00d      	b.n	8002834 <UART_SetConfig+0x178>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a76      	ldr	r2, [pc, #472]	@ (80029f8 <UART_SetConfig+0x33c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d104      	bne.n	800282c <UART_SetConfig+0x170>
 8002822:	231b      	movs	r3, #27
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e003      	b.n	8002834 <UART_SetConfig+0x178>
 800282c:	231b      	movs	r3, #27
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2210      	movs	r2, #16
 8002832:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	429a      	cmp	r2, r3
 800283e:	d000      	beq.n	8002842 <UART_SetConfig+0x186>
 8002840:	e065      	b.n	800290e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002842:	231b      	movs	r3, #27
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d015      	beq.n	8002878 <UART_SetConfig+0x1bc>
 800284c:	dc18      	bgt.n	8002880 <UART_SetConfig+0x1c4>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00d      	beq.n	800286e <UART_SetConfig+0x1b2>
 8002852:	dc15      	bgt.n	8002880 <UART_SetConfig+0x1c4>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <UART_SetConfig+0x1a2>
 8002858:	2b02      	cmp	r3, #2
 800285a:	d005      	beq.n	8002868 <UART_SetConfig+0x1ac>
 800285c:	e010      	b.n	8002880 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800285e:	f7ff f953 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002862:	0003      	movs	r3, r0
 8002864:	617b      	str	r3, [r7, #20]
        break;
 8002866:	e012      	b.n	800288e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002868:	4b64      	ldr	r3, [pc, #400]	@ (80029fc <UART_SetConfig+0x340>)
 800286a:	617b      	str	r3, [r7, #20]
        break;
 800286c:	e00f      	b.n	800288e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800286e:	f7ff f8bf 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 8002872:	0003      	movs	r3, r0
 8002874:	617b      	str	r3, [r7, #20]
        break;
 8002876:	e00a      	b.n	800288e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	617b      	str	r3, [r7, #20]
        break;
 800287e:	e006      	b.n	800288e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002884:	231a      	movs	r3, #26
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
        break;
 800288c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d100      	bne.n	8002896 <UART_SetConfig+0x1da>
 8002894:	e08d      	b.n	80029b2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800289a:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <UART_SetConfig+0x344>)
 800289c:	0052      	lsls	r2, r2, #1
 800289e:	5ad3      	ldrh	r3, [r2, r3]
 80028a0:	0019      	movs	r1, r3
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7fd fc2c 	bl	8000100 <__udivsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	005a      	lsls	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	18d2      	adds	r2, r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0019      	movs	r1, r3
 80028ba:	0010      	movs	r0, r2
 80028bc:	f7fd fc20 	bl	8000100 <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	d91c      	bls.n	8002904 <UART_SetConfig+0x248>
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d217      	bcs.n	8002904 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	200e      	movs	r0, #14
 80028da:	183b      	adds	r3, r7, r0
 80028dc:	210f      	movs	r1, #15
 80028de:	438a      	bics	r2, r1
 80028e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2207      	movs	r2, #7
 80028ea:	4013      	ands	r3, r2
 80028ec:	b299      	uxth	r1, r3
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	183a      	adds	r2, r7, r0
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	183a      	adds	r2, r7, r0
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	e056      	b.n	80029b2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002904:	231a      	movs	r3, #26
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e051      	b.n	80029b2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800290e:	231b      	movs	r3, #27
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d015      	beq.n	8002944 <UART_SetConfig+0x288>
 8002918:	dc18      	bgt.n	800294c <UART_SetConfig+0x290>
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00d      	beq.n	800293a <UART_SetConfig+0x27e>
 800291e:	dc15      	bgt.n	800294c <UART_SetConfig+0x290>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <UART_SetConfig+0x26e>
 8002924:	2b02      	cmp	r3, #2
 8002926:	d005      	beq.n	8002934 <UART_SetConfig+0x278>
 8002928:	e010      	b.n	800294c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800292a:	f7ff f8ed 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 800292e:	0003      	movs	r3, r0
 8002930:	617b      	str	r3, [r7, #20]
        break;
 8002932:	e012      	b.n	800295a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002934:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <UART_SetConfig+0x340>)
 8002936:	617b      	str	r3, [r7, #20]
        break;
 8002938:	e00f      	b.n	800295a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800293a:	f7ff f859 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 800293e:	0003      	movs	r3, r0
 8002940:	617b      	str	r3, [r7, #20]
        break;
 8002942:	e00a      	b.n	800295a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	617b      	str	r3, [r7, #20]
        break;
 800294a:	e006      	b.n	800295a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002950:	231a      	movs	r3, #26
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
        break;
 8002958:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d028      	beq.n	80029b2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002964:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <UART_SetConfig+0x344>)
 8002966:	0052      	lsls	r2, r2, #1
 8002968:	5ad3      	ldrh	r3, [r2, r3]
 800296a:	0019      	movs	r1, r3
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7fd fbc7 	bl	8000100 <__udivsi3>
 8002972:	0003      	movs	r3, r0
 8002974:	001a      	movs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	18d2      	adds	r2, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f7fd fbbb 	bl	8000100 <__udivsi3>
 800298a:	0003      	movs	r3, r0
 800298c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b0f      	cmp	r3, #15
 8002992:	d90a      	bls.n	80029aa <UART_SetConfig+0x2ee>
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	429a      	cmp	r2, r3
 800299c:	d205      	bcs.n	80029aa <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	e003      	b.n	80029b2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80029aa:	231a      	movs	r3, #26
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	226a      	movs	r2, #106	@ 0x6a
 80029b6:	2101      	movs	r1, #1
 80029b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2268      	movs	r2, #104	@ 0x68
 80029be:	2101      	movs	r1, #1
 80029c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80029ce:	231a      	movs	r3, #26
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b008      	add	sp, #32
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	cfff69f3 	.word	0xcfff69f3
 80029e0:	ffffcfff 	.word	0xffffcfff
 80029e4:	11fff4ff 	.word	0x11fff4ff
 80029e8:	40013800 	.word	0x40013800
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40004400 	.word	0x40004400
 80029f4:	40004800 	.word	0x40004800
 80029f8:	40004c00 	.word	0x40004c00
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	080041a8 	.word	0x080041a8

08002a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	2208      	movs	r2, #8
 8002a12:	4013      	ands	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b48 <UART_AdvFeatureConfig+0x144>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a43      	ldr	r2, [pc, #268]	@ (8002b4c <UART_AdvFeatureConfig+0x148>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	2202      	movs	r2, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a3b      	ldr	r2, [pc, #236]	@ (8002b50 <UART_AdvFeatureConfig+0x14c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d00b      	beq.n	8002a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <UART_AdvFeatureConfig+0x150>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <UART_AdvFeatureConfig+0x154>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	2220      	movs	r2, #32
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a25      	ldr	r2, [pc, #148]	@ (8002b5c <UART_AdvFeatureConfig+0x158>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b60 <UART_AdvFeatureConfig+0x15c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	035b      	lsls	r3, r3, #13
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10b      	bne.n	8002b1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	@ (8002b64 <UART_AdvFeatureConfig+0x160>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b68 <UART_AdvFeatureConfig+0x164>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
  }
}
 8002b40:	46c0      	nop			@ (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ffff7fff 	.word	0xffff7fff
 8002b4c:	fffdffff 	.word	0xfffdffff
 8002b50:	fffeffff 	.word	0xfffeffff
 8002b54:	fffbffff 	.word	0xfffbffff
 8002b58:	ffffefff 	.word	0xffffefff
 8002b5c:	ffffdfff 	.word	0xffffdfff
 8002b60:	ffefffff 	.word	0xffefffff
 8002b64:	ff9fffff 	.word	0xff9fffff
 8002b68:	fff7ffff 	.word	0xfff7ffff

08002b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b092      	sub	sp, #72	@ 0x48
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2290      	movs	r2, #144	@ 0x90
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b7c:	f7fd ff88 	bl	8000a90 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d12d      	bne.n	8002bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	0391      	lsls	r1, r2, #14
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4a47      	ldr	r2, [pc, #284]	@ (8002cb8 <UART_CheckIdleState+0x14c>)
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f000 f88e 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d022      	beq.n	8002bee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	438a      	bics	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2288      	movs	r2, #136	@ 0x88
 8002bde:	2120      	movs	r1, #32
 8002be0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2284      	movs	r2, #132	@ 0x84
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e060      	b.n	8002cb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d146      	bne.n	8002c8a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	03d1      	lsls	r1, r2, #15
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb8 <UART_CheckIdleState+0x14c>)
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f000 f859 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d03b      	beq.n	8002c8a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c12:	f3ef 8310 	mrs	r3, PRIMASK
 8002c16:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4922      	ldr	r1, [pc, #136]	@ (8002cbc <UART_CheckIdleState+0x150>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c44:	f3ef 8310 	mrs	r3, PRIMASK
 8002c48:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c4e:	2301      	movs	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f383 8810 	msr	PRIMASK, r3
}
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	228c      	movs	r2, #140	@ 0x8c
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2284      	movs	r2, #132	@ 0x84
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e012      	b.n	8002cb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2288      	movs	r2, #136	@ 0x88
 8002c8e:	2120      	movs	r1, #32
 8002c90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	228c      	movs	r2, #140	@ 0x8c
 8002c96:	2120      	movs	r1, #32
 8002c98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2284      	movs	r2, #132	@ 0x84
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b010      	add	sp, #64	@ 0x40
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	01ffffff 	.word	0x01ffffff
 8002cbc:	fffffedf 	.word	0xfffffedf

08002cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd0:	e051      	b.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	d04e      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd8:	f7fd feda 	bl	8000a90 <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d302      	bcc.n	8002cee <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e051      	b.n	8002d96 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d03b      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b80      	cmp	r3, #128	@ 0x80
 8002d02:	d038      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b40      	cmp	r3, #64	@ 0x40
 8002d08:	d035      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	2208      	movs	r2, #8
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d111      	bne.n	8002d3c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 f960 	bl	8002fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2290      	movs	r2, #144	@ 0x90
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2284      	movs	r2, #132	@ 0x84
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02c      	b.n	8002d96 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	401a      	ands	r2, r3
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d112      	bne.n	8002d76 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f943 	bl	8002fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2290      	movs	r2, #144	@ 0x90
 8002d66:	2120      	movs	r1, #32
 8002d68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2284      	movs	r2, #132	@ 0x84
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e00f      	b.n	8002d96 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	425a      	negs	r2, r3
 8002d86:	4153      	adcs	r3, r2
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d09e      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b098      	sub	sp, #96	@ 0x60
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	1dbb      	adds	r3, r7, #6
 8002dac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1dba      	adds	r2, r7, #6
 8002db8:	215c      	movs	r1, #92	@ 0x5c
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1dba      	adds	r2, r7, #6
 8002dc2:	215e      	movs	r1, #94	@ 0x5e
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	015b      	lsls	r3, r3, #5
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <UART_Start_Receive_IT+0x56>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <UART_Start_Receive_IT+0x4c>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2260      	movs	r2, #96	@ 0x60
 8002de6:	497b      	ldr	r1, [pc, #492]	@ (8002fd4 <UART_Start_Receive_IT+0x234>)
 8002de8:	5299      	strh	r1, [r3, r2]
 8002dea:	e02e      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2260      	movs	r2, #96	@ 0x60
 8002df0:	21ff      	movs	r1, #255	@ 0xff
 8002df2:	5299      	strh	r1, [r3, r2]
 8002df4:	e029      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <UART_Start_Receive_IT+0x7a>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <UART_Start_Receive_IT+0x70>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2260      	movs	r2, #96	@ 0x60
 8002e0a:	21ff      	movs	r1, #255	@ 0xff
 8002e0c:	5299      	strh	r1, [r3, r2]
 8002e0e:	e01c      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2260      	movs	r2, #96	@ 0x60
 8002e14:	217f      	movs	r1, #127	@ 0x7f
 8002e16:	5299      	strh	r1, [r3, r2]
 8002e18:	e017      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	055b      	lsls	r3, r3, #21
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10d      	bne.n	8002e42 <UART_Start_Receive_IT+0xa2>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <UART_Start_Receive_IT+0x98>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2260      	movs	r2, #96	@ 0x60
 8002e32:	217f      	movs	r1, #127	@ 0x7f
 8002e34:	5299      	strh	r1, [r3, r2]
 8002e36:	e008      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2260      	movs	r2, #96	@ 0x60
 8002e3c:	213f      	movs	r1, #63	@ 0x3f
 8002e3e:	5299      	strh	r1, [r3, r2]
 8002e40:	e003      	b.n	8002e4a <UART_Start_Receive_IT+0xaa>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2260      	movs	r2, #96	@ 0x60
 8002e46:	2100      	movs	r1, #0
 8002e48:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2290      	movs	r2, #144	@ 0x90
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	228c      	movs	r2, #140	@ 0x8c
 8002e56:	2122      	movs	r1, #34	@ 0x22
 8002e58:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e64:	2301      	movs	r3, #1
 8002e66:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	059b      	lsls	r3, r3, #22
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d150      	bne.n	8002f3a <UART_Start_Receive_IT+0x19a>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2268      	movs	r2, #104	@ 0x68
 8002e9c:	5a9b      	ldrh	r3, [r3, r2]
 8002e9e:	1dba      	adds	r2, r7, #6
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d349      	bcc.n	8002f3a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d107      	bne.n	8002ec2 <UART_Start_Receive_IT+0x122>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a46      	ldr	r2, [pc, #280]	@ (8002fd8 <UART_Start_Receive_IT+0x238>)
 8002ebe:	675a      	str	r2, [r3, #116]	@ 0x74
 8002ec0:	e002      	b.n	8002ec8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a45      	ldr	r2, [pc, #276]	@ (8002fdc <UART_Start_Receive_IT+0x23c>)
 8002ec6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d019      	beq.n	8002f04 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eda:	2301      	movs	r3, #1
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee0:	f383 8810 	msr	PRIMASK, r3
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2180      	movs	r1, #128	@ 0x80
 8002ef2:	0049      	lsls	r1, r1, #1
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f04:	f3ef 8310 	mrs	r3, PRIMASK
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	0549      	lsls	r1, r1, #21
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	e047      	b.n	8002fca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	2380      	movs	r3, #128	@ 0x80
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d107      	bne.n	8002f56 <UART_Start_Receive_IT+0x1b6>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <UART_Start_Receive_IT+0x240>)
 8002f52:	675a      	str	r2, [r3, #116]	@ 0x74
 8002f54:	e002      	b.n	8002f5c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <UART_Start_Receive_IT+0x244>)
 8002f5a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f64:	f3ef 8310 	mrs	r3, PRIMASK
 8002f68:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f6a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6e:	2301      	movs	r3, #1
 8002f70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2190      	movs	r1, #144	@ 0x90
 8002f86:	0049      	lsls	r1, r1, #1
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	e018      	b.n	8002fca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f98:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f9e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002fa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2120      	movs	r1, #32
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b018      	add	sp, #96	@ 0x60
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	000001ff 	.word	0x000001ff
 8002fd8:	08003b2d 	.word	0x08003b2d
 8002fdc:	080037fd 	.word	0x080037fd
 8002fe0:	08003645 	.word	0x08003645
 8002fe4:	0800348d 	.word	0x0800348d

08002fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ff6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4926      	ldr	r1, [pc, #152]	@ (80030ac <UART_EndRxTransfer+0xc4>)
 8003012:	400a      	ands	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	623b      	str	r3, [r7, #32]
  return(result);
 8003028:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800302a:	633b      	str	r3, [r7, #48]	@ 0x30
 800302c:	2301      	movs	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	491b      	ldr	r1, [pc, #108]	@ (80030b0 <UART_EndRxTransfer+0xc8>)
 8003044:	400a      	ands	r2, r1
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	f383 8810 	msr	PRIMASK, r3
}
 8003052:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d118      	bne.n	800308e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	60bb      	str	r3, [r7, #8]
  return(result);
 8003062:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003066:	2301      	movs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2110      	movs	r1, #16
 800307e:	438a      	bics	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	228c      	movs	r2, #140	@ 0x8c
 8003092:	2120      	movs	r1, #32
 8003094:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b00e      	add	sp, #56	@ 0x38
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	fffffedf 	.word	0xfffffedf
 80030b0:	effffffe 	.word	0xeffffffe

080030b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	225e      	movs	r2, #94	@ 0x5e
 80030c6:	2100      	movs	r1, #0
 80030c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2256      	movs	r2, #86	@ 0x56
 80030ce:	2100      	movs	r1, #0
 80030d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff fadd 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	@ 0x28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2288      	movs	r2, #136	@ 0x88
 80030ee:	589b      	ldr	r3, [r3, r2]
 80030f0:	2b21      	cmp	r3, #33	@ 0x21
 80030f2:	d14c      	bne.n	800318e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2256      	movs	r2, #86	@ 0x56
 80030f8:	5a9b      	ldrh	r3, [r3, r2]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d132      	bne.n	8003166 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8310 	mrs	r3, PRIMASK
 8003104:	60bb      	str	r3, [r7, #8]
  return(result);
 8003106:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	2301      	movs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f383 8810 	msr	PRIMASK, r3
}
 8003114:	46c0      	nop			@ (mov r8, r8)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2180      	movs	r1, #128	@ 0x80
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003132:	f3ef 8310 	mrs	r3, PRIMASK
 8003136:	617b      	str	r3, [r7, #20]
  return(result);
 8003138:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800313a:	623b      	str	r3, [r7, #32]
 800313c:	2301      	movs	r3, #1
 800313e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2140      	movs	r1, #64	@ 0x40
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003164:	e013      	b.n	800318e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2256      	movs	r2, #86	@ 0x56
 8003180:	5a9b      	ldrh	r3, [r3, r2]
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b299      	uxth	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2256      	movs	r2, #86	@ 0x56
 800318c:	5299      	strh	r1, [r3, r2]
}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b00a      	add	sp, #40	@ 0x28
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08c      	sub	sp, #48	@ 0x30
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2288      	movs	r2, #136	@ 0x88
 80031a2:	589b      	ldr	r3, [r3, r2]
 80031a4:	2b21      	cmp	r3, #33	@ 0x21
 80031a6:	d151      	bne.n	800324c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2256      	movs	r2, #86	@ 0x56
 80031ac:	5a9b      	ldrh	r3, [r3, r2]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d132      	bne.n	800321a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b4:	f3ef 8310 	mrs	r3, PRIMASK
 80031b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80031ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031be:	2301      	movs	r3, #1
 80031c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f383 8810 	msr	PRIMASK, r3
}
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	438a      	bics	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80031ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2140      	movs	r1, #64	@ 0x40
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003218:	e018      	b.n	800324c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	001a      	movs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	05d2      	lsls	r2, r2, #23
 800322c:	0dd2      	lsrs	r2, r2, #23
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2256      	movs	r2, #86	@ 0x56
 800323e:	5a9b      	ldrh	r3, [r3, r2]
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b299      	uxth	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2256      	movs	r2, #86	@ 0x56
 800324a:	5299      	strh	r1, [r3, r2]
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b00c      	add	sp, #48	@ 0x30
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08c      	sub	sp, #48	@ 0x30
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2288      	movs	r2, #136	@ 0x88
 8003260:	589b      	ldr	r3, [r3, r2]
 8003262:	2b21      	cmp	r3, #33	@ 0x21
 8003264:	d165      	bne.n	8003332 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003266:	232e      	movs	r3, #46	@ 0x2e
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	216a      	movs	r1, #106	@ 0x6a
 800326e:	5a52      	ldrh	r2, [r2, r1]
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e059      	b.n	8003328 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2256      	movs	r2, #86	@ 0x56
 8003278:	5a9b      	ldrh	r3, [r3, r2]
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d133      	bne.n	80032e8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003280:	f3ef 8310 	mrs	r3, PRIMASK
 8003284:	60fb      	str	r3, [r7, #12]
  return(result);
 8003286:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800328a:	2301      	movs	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4926      	ldr	r1, [pc, #152]	@ (800333c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032b8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80032bc:	2301      	movs	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2140      	movs	r1, #64	@ 0x40
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80032e4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80032e6:	e024      	b.n	8003332 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	4013      	ands	r3, r2
 80032f2:	d013      	beq.n	800331c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2256      	movs	r2, #86	@ 0x56
 800330e:	5a9b      	ldrh	r3, [r3, r2]
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b299      	uxth	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2256      	movs	r2, #86	@ 0x56
 800331a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800331c:	212e      	movs	r1, #46	@ 0x2e
 800331e:	187b      	adds	r3, r7, r1
 8003320:	881a      	ldrh	r2, [r3, #0]
 8003322:	187b      	adds	r3, r7, r1
 8003324:	3a01      	subs	r2, #1
 8003326:	801a      	strh	r2, [r3, #0]
 8003328:	232e      	movs	r3, #46	@ 0x2e
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1a0      	bne.n	8003274 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b00c      	add	sp, #48	@ 0x30
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	ff7fffff 	.word	0xff7fffff

08003340 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	@ 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2288      	movs	r2, #136	@ 0x88
 800334c:	589b      	ldr	r3, [r3, r2]
 800334e:	2b21      	cmp	r3, #33	@ 0x21
 8003350:	d16a      	bne.n	8003428 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003352:	232e      	movs	r3, #46	@ 0x2e
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	216a      	movs	r1, #106	@ 0x6a
 800335a:	5a52      	ldrh	r2, [r2, r1]
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	e05e      	b.n	800341e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2256      	movs	r2, #86	@ 0x56
 8003364:	5a9b      	ldrh	r3, [r3, r2]
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d133      	bne.n	80033d4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	60bb      	str	r3, [r7, #8]
  return(result);
 8003372:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
 8003376:	2301      	movs	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4928      	ldr	r1, [pc, #160]	@ (8003430 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800338e:	400a      	ands	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	617b      	str	r3, [r7, #20]
  return(result);
 80033a4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	2301      	movs	r3, #1
 80033aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2140      	movs	r1, #64	@ 0x40
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80033d0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80033d2:	e029      	b.n	8003428 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2280      	movs	r2, #128	@ 0x80
 80033dc:	4013      	ands	r3, r2
 80033de:	d018      	beq.n	8003412 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	001a      	movs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	05d2      	lsls	r2, r2, #23
 80033f2:	0dd2      	lsrs	r2, r2, #23
 80033f4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2256      	movs	r2, #86	@ 0x56
 8003404:	5a9b      	ldrh	r3, [r3, r2]
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b299      	uxth	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2256      	movs	r2, #86	@ 0x56
 8003410:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003412:	212e      	movs	r1, #46	@ 0x2e
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	187b      	adds	r3, r7, r1
 800341a:	3a01      	subs	r2, #1
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	232e      	movs	r3, #46	@ 0x2e
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d19b      	bne.n	8003360 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003428:	46c0      	nop			@ (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b00c      	add	sp, #48	@ 0x30
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ff7fffff 	.word	0xff7fffff

08003434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	60bb      	str	r3, [r7, #8]
  return(result);
 8003442:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	2301      	movs	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2140      	movs	r1, #64	@ 0x40
 800345e:	438a      	bics	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2288      	movs	r2, #136	@ 0x88
 8003472:	2120      	movs	r1, #32
 8003474:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f7fc ffb4 	bl	80003ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b094      	sub	sp, #80	@ 0x50
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003494:	204e      	movs	r0, #78	@ 0x4e
 8003496:	183b      	adds	r3, r7, r0
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	2160      	movs	r1, #96	@ 0x60
 800349c:	5a52      	ldrh	r2, [r2, r1]
 800349e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	228c      	movs	r2, #140	@ 0x8c
 80034a4:	589b      	ldr	r3, [r3, r2]
 80034a6:	2b22      	cmp	r3, #34	@ 0x22
 80034a8:	d000      	beq.n	80034ac <UART_RxISR_8BIT+0x20>
 80034aa:	e0ba      	b.n	8003622 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b2:	214c      	movs	r1, #76	@ 0x4c
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b2d9      	uxtb	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c8:	400a      	ands	r2, r1
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	225e      	movs	r2, #94	@ 0x5e
 80034dc:	5a9b      	ldrh	r3, [r3, r2]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b299      	uxth	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	225e      	movs	r2, #94	@ 0x5e
 80034e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	225e      	movs	r2, #94	@ 0x5e
 80034ee:	5a9b      	ldrh	r3, [r3, r2]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d000      	beq.n	80034f8 <UART_RxISR_8BIT+0x6c>
 80034f6:	e09c      	b.n	8003632 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003502:	2301      	movs	r3, #1
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			@ (mov r8, r8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4948      	ldr	r1, [pc, #288]	@ (800363c <UART_RxISR_8BIT+0x1b0>)
 800351a:	400a      	ands	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8310 	mrs	r3, PRIMASK
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	647b      	str	r3, [r7, #68]	@ 0x44
 8003534:	2301      	movs	r3, #1
 8003536:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	438a      	bics	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	228c      	movs	r2, #140	@ 0x8c
 8003560:	2120      	movs	r1, #32
 8003562:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	4013      	ands	r3, r2
 800357c:	d018      	beq.n	80035b0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	61bb      	str	r3, [r7, #24]
  return(result);
 8003584:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4928      	ldr	r1, [pc, #160]	@ (8003640 <UART_RxISR_8BIT+0x1b4>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d12f      	bne.n	8003618 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035be:	f3ef 8310 	mrs	r3, PRIMASK
 80035c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80035c4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c8:	2301      	movs	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2110      	movs	r1, #16
 80035e0:	438a      	bics	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	2210      	movs	r2, #16
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d103      	bne.n	8003606 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2210      	movs	r2, #16
 8003604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	225c      	movs	r2, #92	@ 0x5c
 800360a:	5a9a      	ldrh	r2, [r3, r2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f7ff f847 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003616:	e00c      	b.n	8003632 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f7fc feee 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8003620:	e007      	b.n	8003632 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2108      	movs	r1, #8
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b014      	add	sp, #80	@ 0x50
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	fffffedf 	.word	0xfffffedf
 8003640:	fbffffff 	.word	0xfbffffff

08003644 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b094      	sub	sp, #80	@ 0x50
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800364c:	204e      	movs	r0, #78	@ 0x4e
 800364e:	183b      	adds	r3, r7, r0
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	2160      	movs	r1, #96	@ 0x60
 8003654:	5a52      	ldrh	r2, [r2, r1]
 8003656:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	228c      	movs	r2, #140	@ 0x8c
 800365c:	589b      	ldr	r3, [r3, r2]
 800365e:	2b22      	cmp	r3, #34	@ 0x22
 8003660:	d000      	beq.n	8003664 <UART_RxISR_16BIT+0x20>
 8003662:	e0ba      	b.n	80037da <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800366a:	214c      	movs	r1, #76	@ 0x4c
 800366c:	187b      	adds	r3, r7, r1
 800366e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003676:	187b      	adds	r3, r7, r1
 8003678:	183a      	adds	r2, r7, r0
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	4013      	ands	r3, r2
 8003680:	b29a      	uxth	r2, r3
 8003682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003684:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	225e      	movs	r2, #94	@ 0x5e
 8003694:	5a9b      	ldrh	r3, [r3, r2]
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b299      	uxth	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	225e      	movs	r2, #94	@ 0x5e
 80036a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	225e      	movs	r2, #94	@ 0x5e
 80036a6:	5a9b      	ldrh	r3, [r3, r2]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d000      	beq.n	80036b0 <UART_RxISR_16BIT+0x6c>
 80036ae:	e09c      	b.n	80037ea <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	623b      	str	r3, [r7, #32]
  return(result);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ba:	2301      	movs	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4948      	ldr	r1, [pc, #288]	@ (80037f4 <UART_RxISR_16BIT+0x1b0>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e2:	f3ef 8310 	mrs	r3, PRIMASK
 80036e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ec:	2301      	movs	r3, #1
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f383 8810 	msr	PRIMASK, r3
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	438a      	bics	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	228c      	movs	r2, #140	@ 0x8c
 8003718:	2120      	movs	r1, #32
 800371a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	4013      	ands	r3, r2
 8003734:	d018      	beq.n	8003768 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	617b      	str	r3, [r7, #20]
  return(result);
 800373c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003740:	2301      	movs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4928      	ldr	r1, [pc, #160]	@ (80037f8 <UART_RxISR_16BIT+0x1b4>)
 8003758:	400a      	ands	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d12f      	bne.n	80037d0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003776:	f3ef 8310 	mrs	r3, PRIMASK
 800377a:	60bb      	str	r3, [r7, #8]
  return(result);
 800377c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003780:	2301      	movs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2110      	movs	r1, #16
 8003798:	438a      	bics	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	2210      	movs	r2, #16
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d103      	bne.n	80037be <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	225c      	movs	r2, #92	@ 0x5c
 80037c2:	5a9a      	ldrh	r2, [r3, r2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fe ff6b 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ce:	e00c      	b.n	80037ea <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fc fe12 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 80037d8:	e007      	b.n	80037ea <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2108      	movs	r1, #8
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b014      	add	sp, #80	@ 0x50
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	fffffedf 	.word	0xfffffedf
 80037f8:	fbffffff 	.word	0xfbffffff

080037fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0a0      	sub	sp, #128	@ 0x80
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003804:	237a      	movs	r3, #122	@ 0x7a
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	2160      	movs	r1, #96	@ 0x60
 800380c:	5a52      	ldrh	r2, [r2, r1]
 800380e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	228c      	movs	r2, #140	@ 0x8c
 800382c:	589b      	ldr	r3, [r3, r2]
 800382e:	2b22      	cmp	r3, #34	@ 0x22
 8003830:	d000      	beq.n	8003834 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003832:	e165      	b.n	8003b00 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003834:	236e      	movs	r3, #110	@ 0x6e
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	2168      	movs	r1, #104	@ 0x68
 800383c:	5a52      	ldrh	r2, [r2, r1]
 800383e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003840:	e10c      	b.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003848:	216c      	movs	r1, #108	@ 0x6c
 800384a:	187b      	adds	r3, r7, r1
 800384c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800384e:	187b      	adds	r3, r7, r1
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	237a      	movs	r3, #122	@ 0x7a
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b2d9      	uxtb	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	400a      	ands	r2, r1
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	225e      	movs	r2, #94	@ 0x5e
 8003874:	5a9b      	ldrh	r3, [r3, r2]
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b299      	uxth	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	225e      	movs	r2, #94	@ 0x5e
 8003880:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800388a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800388c:	2207      	movs	r2, #7
 800388e:	4013      	ands	r3, r2
 8003890:	d049      	beq.n	8003926 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003892:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d010      	beq.n	80038bc <UART_RxISR_8BIT_FIFOEN+0xc0>
 800389a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d00b      	beq.n	80038bc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2290      	movs	r2, #144	@ 0x90
 80038b0:	589b      	ldr	r3, [r3, r2]
 80038b2:	2201      	movs	r2, #1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2190      	movs	r1, #144	@ 0x90
 80038ba:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80038c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038c6:	2201      	movs	r2, #1
 80038c8:	4013      	ands	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2202      	movs	r2, #2
 80038d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2290      	movs	r2, #144	@ 0x90
 80038d8:	589b      	ldr	r3, [r3, r2]
 80038da:	2204      	movs	r2, #4
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2190      	movs	r1, #144	@ 0x90
 80038e2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00f      	beq.n	800390c <UART_RxISR_8BIT_FIFOEN+0x110>
 80038ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	d00b      	beq.n	800390c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2204      	movs	r2, #4
 80038fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2290      	movs	r2, #144	@ 0x90
 8003900:	589b      	ldr	r3, [r3, r2]
 8003902:	2202      	movs	r2, #2
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2190      	movs	r1, #144	@ 0x90
 800390a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2290      	movs	r2, #144	@ 0x90
 8003910:	589b      	ldr	r3, [r3, r2]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe febb 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2290      	movs	r2, #144	@ 0x90
 8003922:	2100      	movs	r1, #0
 8003924:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	225e      	movs	r2, #94	@ 0x5e
 800392a:	5a9b      	ldrh	r3, [r3, r2]
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d000      	beq.n	8003934 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003932:	e093      	b.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003934:	f3ef 8310 	mrs	r3, PRIMASK
 8003938:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800393e:	2301      	movs	r3, #1
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4970      	ldr	r1, [pc, #448]	@ (8003b18 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003956:	400a      	ands	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800396c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800396e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003970:	2301      	movs	r3, #1
 8003972:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4965      	ldr	r1, [pc, #404]	@ (8003b1c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003988:	400a      	ands	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	228c      	movs	r2, #140	@ 0x8c
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	2380      	movs	r3, #128	@ 0x80
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	4013      	ands	r3, r2
 80039b8:	d018      	beq.n	80039ec <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c4:	2301      	movs	r3, #1
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4951      	ldr	r1, [pc, #324]	@ (8003b20 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d12f      	bne.n	8003a54 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8310 	mrs	r3, PRIMASK
 80039fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003a00:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2110      	movs	r1, #16
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d103      	bne.n	8003a42 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	225c      	movs	r2, #92	@ 0x5c
 8003a46:	5a9a      	ldrh	r2, [r3, r2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fe fe29 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
 8003a52:	e003      	b.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7fc fcd0 	bl	80003fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003a5c:	236e      	movs	r3, #110	@ 0x6e
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a68:	2220      	movs	r2, #32
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d000      	beq.n	8003a70 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003a6e:	e6e8      	b.n	8003842 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003a70:	205a      	movs	r0, #90	@ 0x5a
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	215e      	movs	r1, #94	@ 0x5e
 8003a78:	5a52      	ldrh	r2, [r2, r1]
 8003a7a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003a7c:	0001      	movs	r1, r0
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <UART_RxISR_8BIT_FIFOEN+0x314>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2268      	movs	r2, #104	@ 0x68
 8003a8a:	5a9b      	ldrh	r3, [r3, r2]
 8003a8c:	187a      	adds	r2, r7, r1
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d23d      	bcs.n	8003b10 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	491b      	ldr	r1, [pc, #108]	@ (8003b24 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8003aca:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2120      	movs	r1, #32
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003afe:	e007      	b.n	8003b10 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2108      	movs	r1, #8
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b020      	add	sp, #128	@ 0x80
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	fffffeff 	.word	0xfffffeff
 8003b1c:	effffffe 	.word	0xeffffffe
 8003b20:	fbffffff 	.word	0xfbffffff
 8003b24:	efffffff 	.word	0xefffffff
 8003b28:	0800348d 	.word	0x0800348d

08003b2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0a2      	sub	sp, #136	@ 0x88
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003b34:	2382      	movs	r3, #130	@ 0x82
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	2160      	movs	r1, #96	@ 0x60
 8003b3c:	5a52      	ldrh	r2, [r2, r1]
 8003b3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2284      	movs	r2, #132	@ 0x84
 8003b48:	18ba      	adds	r2, r7, r2
 8003b4a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	228c      	movs	r2, #140	@ 0x8c
 8003b60:	589b      	ldr	r3, [r3, r2]
 8003b62:	2b22      	cmp	r3, #34	@ 0x22
 8003b64:	d000      	beq.n	8003b68 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003b66:	e16f      	b.n	8003e48 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b68:	2376      	movs	r3, #118	@ 0x76
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	2168      	movs	r1, #104	@ 0x68
 8003b70:	5a52      	ldrh	r2, [r2, r1]
 8003b72:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b74:	e114      	b.n	8003da0 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b7c:	2174      	movs	r1, #116	@ 0x74
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2282      	movs	r2, #130	@ 0x82
 8003b8c:	18ba      	adds	r2, r7, r2
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	225e      	movs	r2, #94	@ 0x5e
 8003ba8:	5a9b      	ldrh	r3, [r3, r2]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b299      	uxth	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	225e      	movs	r2, #94	@ 0x5e
 8003bb4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2184      	movs	r1, #132	@ 0x84
 8003bbe:	187a      	adds	r2, r7, r1
 8003bc0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d04e      	beq.n	8003c6a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d010      	beq.n	8003bf8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2290      	movs	r2, #144	@ 0x90
 8003bec:	589b      	ldr	r3, [r3, r2]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2190      	movs	r1, #144	@ 0x90
 8003bf6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf8:	2384      	movs	r3, #132	@ 0x84
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	4013      	ands	r3, r2
 8003c02:	d00f      	beq.n	8003c24 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	2201      	movs	r2, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2290      	movs	r2, #144	@ 0x90
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2190      	movs	r1, #144	@ 0x90
 8003c22:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c24:	2384      	movs	r3, #132	@ 0x84
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00f      	beq.n	8003c50 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c32:	2201      	movs	r2, #1
 8003c34:	4013      	ands	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2290      	movs	r2, #144	@ 0x90
 8003c44:	589b      	ldr	r3, [r3, r2]
 8003c46:	2202      	movs	r2, #2
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2190      	movs	r1, #144	@ 0x90
 8003c4e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2290      	movs	r2, #144	@ 0x90
 8003c54:	589b      	ldr	r3, [r3, r2]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fe fd19 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2290      	movs	r2, #144	@ 0x90
 8003c66:	2100      	movs	r1, #0
 8003c68:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	225e      	movs	r2, #94	@ 0x5e
 8003c6e:	5a9b      	ldrh	r3, [r3, r2]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d000      	beq.n	8003c78 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003c76:	e093      	b.n	8003da0 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c78:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c82:	2301      	movs	r3, #1
 8003c84:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			@ (mov r8, r8)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4971      	ldr	r1, [pc, #452]	@ (8003e60 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca4:	f383 8810 	msr	PRIMASK, r3
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003caa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4966      	ldr	r1, [pc, #408]	@ (8003e64 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cd2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	228c      	movs	r2, #140	@ 0x8c
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	2380      	movs	r3, #128	@ 0x80
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003d02:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d06:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d08:	2301      	movs	r3, #1
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4952      	ldr	r1, [pc, #328]	@ (8003e68 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d12f      	bne.n	8003d98 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d48:	2301      	movs	r3, #1
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2110      	movs	r1, #16
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	2210      	movs	r2, #16
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d103      	bne.n	8003d86 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2210      	movs	r2, #16
 8003d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	225c      	movs	r2, #92	@ 0x5c
 8003d8a:	5a9a      	ldrh	r2, [r3, r2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe fc87 	bl	80026a4 <HAL_UARTEx_RxEventCallback>
 8003d96:	e003      	b.n	8003da0 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fc fb2e 	bl	80003fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003da0:	2376      	movs	r3, #118	@ 0x76
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003daa:	2384      	movs	r3, #132	@ 0x84
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2220      	movs	r2, #32
 8003db2:	4013      	ands	r3, r2
 8003db4:	d000      	beq.n	8003db8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003db6:	e6de      	b.n	8003b76 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003db8:	205e      	movs	r0, #94	@ 0x5e
 8003dba:	183b      	adds	r3, r7, r0
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	215e      	movs	r1, #94	@ 0x5e
 8003dc0:	5a52      	ldrh	r2, [r2, r1]
 8003dc2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003dc4:	0001      	movs	r1, r0
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d044      	beq.n	8003e58 <UART_RxISR_16BIT_FIFOEN+0x32c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2268      	movs	r2, #104	@ 0x68
 8003dd2:	5a9b      	ldrh	r3, [r3, r2]
 8003dd4:	187a      	adds	r2, r7, r1
 8003dd6:	8812      	ldrh	r2, [r2, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d23d      	bcs.n	8003e58 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003de2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003de4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003de6:	2301      	movs	r3, #1
 8003de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	491b      	ldr	r1, [pc, #108]	@ (8003e6c <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003e12:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e1a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2120      	movs	r1, #32
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e46:	e007      	b.n	8003e58 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2108      	movs	r1, #8
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b022      	add	sp, #136	@ 0x88
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	fffffeff 	.word	0xfffffeff
 8003e64:	effffffe 	.word	0xeffffffe
 8003e68:	fbffffff 	.word	0xfbffffff
 8003e6c:	efffffff 	.word	0xefffffff
 8003e70:	08003645 	.word	0x08003645

08003e74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e7c:	46c0      	nop			@ (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2284      	movs	r2, #132	@ 0x84
 8003eb0:	5c9b      	ldrb	r3, [r3, r2]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_UARTEx_DisableFifoMode+0x16>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e027      	b.n	8003f0a <HAL_UARTEx_DisableFifoMode+0x66>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2284      	movs	r2, #132	@ 0x84
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2288      	movs	r2, #136	@ 0x88
 8003ec6:	2124      	movs	r1, #36	@ 0x24
 8003ec8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	438a      	bics	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f14 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2288      	movs	r2, #136	@ 0x88
 8003efc:	2120      	movs	r1, #32
 8003efe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2284      	movs	r2, #132	@ 0x84
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	dfffffff 	.word	0xdfffffff

08003f18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2284      	movs	r2, #132	@ 0x84
 8003f26:	5c9b      	ldrb	r3, [r3, r2]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e02e      	b.n	8003f8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2284      	movs	r2, #132	@ 0x84
 8003f34:	2101      	movs	r1, #1
 8003f36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2288      	movs	r2, #136	@ 0x88
 8003f3c:	2124      	movs	r1, #36	@ 0x24
 8003f3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	438a      	bics	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	08d9      	lsrs	r1, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f854 	bl	800401c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2288      	movs	r2, #136	@ 0x88
 8003f80:	2120      	movs	r1, #32
 8003f82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2284      	movs	r2, #132	@ 0x84
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2284      	movs	r2, #132	@ 0x84
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e02f      	b.n	8004010 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2284      	movs	r2, #132	@ 0x84
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2288      	movs	r2, #136	@ 0x88
 8003fbc:	2124      	movs	r1, #36	@ 0x24
 8003fbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4a0e      	ldr	r2, [pc, #56]	@ (8004018 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 f813 	bl	800401c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2288      	movs	r2, #136	@ 0x88
 8004002:	2120      	movs	r1, #32
 8004004:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2284      	movs	r2, #132	@ 0x84
 800400a:	2100      	movs	r1, #0
 800400c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}
 8004018:	f1ffffff 	.word	0xf1ffffff

0800401c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	226a      	movs	r2, #106	@ 0x6a
 8004030:	2101      	movs	r1, #1
 8004032:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2268      	movs	r2, #104	@ 0x68
 8004038:	2101      	movs	r1, #1
 800403a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800403c:	e043      	b.n	80040c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800403e:	260f      	movs	r6, #15
 8004040:	19bb      	adds	r3, r7, r6
 8004042:	2208      	movs	r2, #8
 8004044:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004046:	200e      	movs	r0, #14
 8004048:	183b      	adds	r3, r7, r0
 800404a:	2208      	movs	r2, #8
 800404c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	0e5b      	lsrs	r3, r3, #25
 8004056:	b2da      	uxtb	r2, r3
 8004058:	240d      	movs	r4, #13
 800405a:	193b      	adds	r3, r7, r4
 800405c:	2107      	movs	r1, #7
 800405e:	400a      	ands	r2, r1
 8004060:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	0f5b      	lsrs	r3, r3, #29
 800406a:	b2da      	uxtb	r2, r3
 800406c:	250c      	movs	r5, #12
 800406e:	197b      	adds	r3, r7, r5
 8004070:	2107      	movs	r1, #7
 8004072:	400a      	ands	r2, r1
 8004074:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004076:	183b      	adds	r3, r7, r0
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	197a      	adds	r2, r7, r5
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	4914      	ldr	r1, [pc, #80]	@ (80040d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004080:	5c8a      	ldrb	r2, [r1, r2]
 8004082:	435a      	muls	r2, r3
 8004084:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004086:	197b      	adds	r3, r7, r5
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	4a12      	ldr	r2, [pc, #72]	@ (80040d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800408c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800408e:	0019      	movs	r1, r3
 8004090:	f7fc f8c0 	bl	8000214 <__divsi3>
 8004094:	0003      	movs	r3, r0
 8004096:	b299      	uxth	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	226a      	movs	r2, #106	@ 0x6a
 800409c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800409e:	19bb      	adds	r3, r7, r6
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	193a      	adds	r2, r7, r4
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	490a      	ldr	r1, [pc, #40]	@ (80040d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80040a8:	5c8a      	ldrb	r2, [r1, r2]
 80040aa:	435a      	muls	r2, r3
 80040ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040b6:	0019      	movs	r1, r3
 80040b8:	f7fc f8ac 	bl	8000214 <__divsi3>
 80040bc:	0003      	movs	r3, r0
 80040be:	b299      	uxth	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2268      	movs	r2, #104	@ 0x68
 80040c4:	5299      	strh	r1, [r3, r2]
}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b005      	add	sp, #20
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	080041c0 	.word	0x080041c0
 80040d4:	080041c8 	.word	0x080041c8

080040d8 <memset>:
 80040d8:	0003      	movs	r3, r0
 80040da:	1882      	adds	r2, r0, r2
 80040dc:	4293      	cmp	r3, r2
 80040de:	d100      	bne.n	80040e2 <memset+0xa>
 80040e0:	4770      	bx	lr
 80040e2:	7019      	strb	r1, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	e7f9      	b.n	80040dc <memset+0x4>

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2600      	movs	r6, #0
 80040ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004120 <__libc_init_array+0x38>)
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x3c>)
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	2600      	movs	r6, #0
 80040fa:	f000 f819 	bl	8004130 <_init>
 80040fe:	4c0a      	ldr	r4, [pc, #40]	@ (8004128 <__libc_init_array+0x40>)
 8004100:	4d0a      	ldr	r5, [pc, #40]	@ (800412c <__libc_init_array+0x44>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	00b3      	lsls	r3, r6, #2
 800410e:	58eb      	ldr	r3, [r5, r3]
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	00b3      	lsls	r3, r6, #2
 8004118:	58eb      	ldr	r3, [r5, r3]
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	080041d0 	.word	0x080041d0
 8004124:	080041d0 	.word	0x080041d0
 8004128:	080041d4 	.word	0x080041d4
 800412c:	080041d0 	.word	0x080041d0

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
