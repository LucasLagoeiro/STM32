
NewPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002230  08002230  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002230  08002230  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002230  08002230  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002230  08002230  00003230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002234  08002234  00003234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002238  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002244  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002244  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a09  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  0000ca3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0000e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b9  00000000  00000000  0000eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146c6  00000000  00000000  0000f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3d9  00000000  00000000  000239b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bbf  00000000  00000000  0002ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b394f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a0  00000000  00000000  000b3994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b5d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002184 	.word	0x08002184

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002184 	.word	0x08002184

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa36 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f806 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8f8 	bl	8000418 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f84a 	bl	80002c0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	46c0      	nop			@ (mov r8, r8)
 800022e:	e7fd      	b.n	800022c <main+0x14>

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b093      	sub	sp, #76	@ 0x4c
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	2414      	movs	r4, #20
 8000238:	193b      	adds	r3, r7, r4
 800023a:	0018      	movs	r0, r3
 800023c:	2334      	movs	r3, #52	@ 0x34
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f001 ff73 	bl	800212c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	0018      	movs	r0, r3
 800024a:	2310      	movs	r3, #16
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f001 ff6c 	bl	800212c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000254:	2380      	movs	r3, #128	@ 0x80
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fce9 	bl	8000c30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025e:	193b      	adds	r3, r7, r4
 8000260:	2202      	movs	r2, #2
 8000262:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	193b      	adds	r3, r7, r4
 8000266:	2280      	movs	r2, #128	@ 0x80
 8000268:	0052      	lsls	r2, r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800026c:	193b      	adds	r3, r7, r4
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2240      	movs	r2, #64	@ 0x40
 8000276:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	193b      	adds	r3, r7, r4
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fd15 	bl	8000cb0 <HAL_RCC_OscConfig>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800028a:	f000 f92b 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2207      	movs	r2, #7
 8000292:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f810 	bl	80012d0 <HAL_RCC_ClockConfig>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002b4:	f000 f916 	bl	80004e4 <Error_Handler>
  }
}
 80002b8:	46c0      	nop			@ (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b013      	add	sp, #76	@ 0x4c
 80002be:	bd90      	pop	{r4, r7, pc}

080002c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b098      	sub	sp, #96	@ 0x60
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c6:	2354      	movs	r3, #84	@ 0x54
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	230c      	movs	r3, #12
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f001 ff2b 	bl	800212c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d6:	2338      	movs	r3, #56	@ 0x38
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	0018      	movs	r0, r3
 80002dc:	231c      	movs	r3, #28
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f001 ff23 	bl	800212c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2334      	movs	r3, #52	@ 0x34
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f001 ff1c 	bl	800212c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002f4:	4b45      	ldr	r3, [pc, #276]	@ (800040c <MX_TIM1_Init+0x14c>)
 80002f6:	4a46      	ldr	r2, [pc, #280]	@ (8000410 <MX_TIM1_Init+0x150>)
 80002f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002fa:	4b44      	ldr	r3, [pc, #272]	@ (800040c <MX_TIM1_Init+0x14c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000300:	4b42      	ldr	r3, [pc, #264]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000306:	4b41      	ldr	r3, [pc, #260]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000308:	4a42      	ldr	r2, [pc, #264]	@ (8000414 <MX_TIM1_Init+0x154>)
 800030a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b3f      	ldr	r3, [pc, #252]	@ (800040c <MX_TIM1_Init+0x14c>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000312:	4b3e      	ldr	r3, [pc, #248]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000318:	4b3c      	ldr	r3, [pc, #240]	@ (800040c <MX_TIM1_Init+0x14c>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800031e:	4b3b      	ldr	r3, [pc, #236]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f95f 	bl	80015e4 <HAL_TIM_PWM_Init>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 f8db 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032e:	2154      	movs	r1, #84	@ 0x54
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000342:	187a      	adds	r2, r7, r1
 8000344:	4b31      	ldr	r3, [pc, #196]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000346:	0011      	movs	r1, r2
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fdeb 	bl	8001f24 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000352:	f000 f8c7 	bl	80004e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000356:	2138      	movs	r1, #56	@ 0x38
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2260      	movs	r2, #96	@ 0x60
 800035c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2200      	movs	r2, #0
 800037a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000382:	1879      	adds	r1, r7, r1
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <MX_TIM1_Init+0x14c>)
 8000386:	2200      	movs	r2, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f983 	bl	8001694 <HAL_TIM_PWM_ConfigChannel>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000392:	f000 f8a7 	bl	80004e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2280      	movs	r2, #128	@ 0x80
 80003b8:	0192      	lsls	r2, r2, #6
 80003ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2280      	movs	r2, #128	@ 0x80
 80003d2:	0492      	lsls	r2, r2, #18
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003e8:	1d3a      	adds	r2, r7, #4
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_TIM1_Init+0x14c>)
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 fe00 	bl	8001ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80003f8:	f000 f874 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <MX_TIM1_Init+0x14c>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 f8be 	bl	8000580 <HAL_TIM_MspPostInit>

}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b018      	add	sp, #96	@ 0x60
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000028 	.word	0x20000028
 8000410:	40012c00 	.word	0x40012c00
 8000414:	0000ffff 	.word	0x0000ffff

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b089      	sub	sp, #36	@ 0x24
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	240c      	movs	r4, #12
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2314      	movs	r3, #20
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f001 fe7f 	bl	800212c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	4b2c      	ldr	r3, [pc, #176]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000432:	4b2b      	ldr	r3, [pc, #172]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000434:	2104      	movs	r1, #4
 8000436:	430a      	orrs	r2, r1
 8000438:	635a      	str	r2, [r3, #52]	@ 0x34
 800043a:	4b29      	ldr	r3, [pc, #164]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 800043c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800043e:	2204      	movs	r2, #4
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000446:	4b26      	ldr	r3, [pc, #152]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800044a:	4b25      	ldr	r3, [pc, #148]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 800044c:	2120      	movs	r1, #32
 800044e:	430a      	orrs	r2, r1
 8000450:	635a      	str	r2, [r3, #52]	@ 0x34
 8000452:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000456:	2220      	movs	r2, #32
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000462:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	@ 0x34
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_GPIO_Init+0xc8>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000476:	23a0      	movs	r3, #160	@ 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2200      	movs	r2, #0
 800047c:	2120      	movs	r1, #32
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fbb8 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	220c      	movs	r2, #12
 8000488:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2202      	movs	r2, #2
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2201      	movs	r2, #1
 80004a0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	193a      	adds	r2, r7, r4
 80004a4:	23a0      	movs	r3, #160	@ 0xa0
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fa3e 	bl	800092c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004b0:	0021      	movs	r1, r4
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2220      	movs	r2, #32
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2202      	movs	r2, #2
 80004c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	23a0      	movs	r3, #160	@ 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fa2a 	bl	800092c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	@ 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <HAL_MspInit+0x4c>)
 80004f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <HAL_MspInit+0x4c>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	641a      	str	r2, [r3, #64]	@ 0x40
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <HAL_MspInit+0x4c>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <HAL_MspInit+0x4c>)
 8000510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_MspInit+0x4c>)
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	0549      	lsls	r1, r1, #21
 8000518:	430a      	orrs	r2, r1
 800051a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <HAL_MspInit+0x4c>)
 800051e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	055b      	lsls	r3, r3, #21
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800052a:	23c0      	movs	r3, #192	@ 0xc0
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f932 	bl	8000798 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <HAL_TIM_PWM_MspInit+0x38>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10d      	bne.n	800056e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <HAL_TIM_PWM_MspInit+0x3c>)
 8000554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <HAL_TIM_PWM_MspInit+0x3c>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0109      	lsls	r1, r1, #4
 800055c:	430a      	orrs	r2, r1
 800055e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <HAL_TIM_PWM_MspInit+0x3c>)
 8000562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b004      	add	sp, #16
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40012c00 	.word	0x40012c00
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	@ 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	240c      	movs	r4, #12
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f001 fdca 	bl	800212c <memset>
  if(htim->Instance==TIM1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a14      	ldr	r2, [pc, #80]	@ (80005f0 <HAL_TIM_MspPostInit+0x70>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d122      	bne.n	80005e8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005a8:	2104      	movs	r1, #4
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <HAL_TIM_MspPostInit+0x74>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b2:	2204      	movs	r2, #4
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <HAL_TIM_MspPostInit+0x78>)
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f000 f9a2 	bl	800092c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b009      	add	sp, #36	@ 0x24
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40012c00 	.word	0x40012c00
 80005f4:	40021000 	.word	0x40021000
 80005f8:	50000800 	.word	0x50000800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	e7fd      	b.n	8000600 <NMI_Handler+0x4>

08000604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	e7fd      	b.n	8000608 <HardFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000624:	f000 f89c 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	@ (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800063c:	f7ff fff7 	bl	800062e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	@ (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	@ (8000684 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000666:	f001 fd69 	bl	800213c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800066a:	f7ff fdd5 	bl	8000218 <main>

0800066e <LoopForever>:

LoopForever:
  b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800067c:	08002238 	.word	0x08002238
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000684:	20000078 	.word	0x20000078

08000688 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_IRQHandler>
	...

0800068c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <HAL_Init+0x3c>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_Init+0x3c>)
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	0049      	lsls	r1, r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f810 	bl	80006cc <HAL_InitTick>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d003      	beq.n	80006b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e001      	b.n	80006bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff ff1a 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <HAL_InitTick+0x88>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d02b      	beq.n	800073c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_InitTick+0x8c>)
 80006e6:	681c      	ldr	r4, [r3, #0]
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <HAL_InitTick+0x88>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	0019      	movs	r1, r3
 80006ee:	23fa      	movs	r3, #250	@ 0xfa
 80006f0:	0098      	lsls	r0, r3, #2
 80006f2:	f7ff fd05 	bl	8000100 <__udivsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	0019      	movs	r1, r3
 80006fa:	0020      	movs	r0, r4
 80006fc:	f7ff fd00 	bl	8000100 <__udivsi3>
 8000700:	0003      	movs	r3, r0
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f905 	bl	8000912 <HAL_SYSTICK_Config>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d112      	bne.n	8000732 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d80a      	bhi.n	8000728 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	425b      	negs	r3, r3
 8000718:	2200      	movs	r2, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f8e4 	bl	80008e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_InitTick+0x90>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e00d      	b.n	8000744 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e008      	b.n	8000744 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e003      	b.n	8000744 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b005      	add	sp, #20
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000008 	.word	0x20000008
 8000758:	20000000 	.word	0x20000000
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	001a      	movs	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	18d2      	adds	r2, r2, r3
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <HAL_IncTick+0x20>)
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000008 	.word	0x20000008
 8000780:	20000074 	.word	0x20000074

08000784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	20000074 	.word	0x20000074

08000798 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a06      	ldr	r2, [pc, #24]	@ (80007c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007a6:	4013      	ands	r3, r2
 80007a8:	0019      	movs	r1, r3
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	430a      	orrs	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40010000 	.word	0x40010000
 80007c0:	fffff9ff 	.word	0xfffff9ff

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007d8:	d828      	bhi.n	800082c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <__NVIC_SetPriority+0xd4>)
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	33c0      	adds	r3, #192	@ 0xc0
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	589b      	ldr	r3, [r3, r2]
 80007ea:	1dfa      	adds	r2, r7, #7
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	0011      	movs	r1, r2
 80007f0:	2203      	movs	r2, #3
 80007f2:	400a      	ands	r2, r1
 80007f4:	00d2      	lsls	r2, r2, #3
 80007f6:	21ff      	movs	r1, #255	@ 0xff
 80007f8:	4091      	lsls	r1, r2
 80007fa:	000a      	movs	r2, r1
 80007fc:	43d2      	mvns	r2, r2
 80007fe:	401a      	ands	r2, r3
 8000800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	019b      	lsls	r3, r3, #6
 8000806:	22ff      	movs	r2, #255	@ 0xff
 8000808:	401a      	ands	r2, r3
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	0018      	movs	r0, r3
 8000810:	2303      	movs	r3, #3
 8000812:	4003      	ands	r3, r0
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000818:	481f      	ldr	r0, [pc, #124]	@ (8000898 <__NVIC_SetPriority+0xd4>)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b25b      	sxtb	r3, r3
 8000820:	089b      	lsrs	r3, r3, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	33c0      	adds	r3, #192	@ 0xc0
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800082a:	e031      	b.n	8000890 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <__NVIC_SetPriority+0xd8>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0019      	movs	r1, r3
 8000834:	230f      	movs	r3, #15
 8000836:	400b      	ands	r3, r1
 8000838:	3b08      	subs	r3, #8
 800083a:	089b      	lsrs	r3, r3, #2
 800083c:	3306      	adds	r3, #6
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	3304      	adds	r3, #4
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	0011      	movs	r1, r2
 800084c:	2203      	movs	r2, #3
 800084e:	400a      	ands	r2, r1
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	21ff      	movs	r1, #255	@ 0xff
 8000854:	4091      	lsls	r1, r2
 8000856:	000a      	movs	r2, r1
 8000858:	43d2      	mvns	r2, r2
 800085a:	401a      	ands	r2, r3
 800085c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	019b      	lsls	r3, r3, #6
 8000862:	22ff      	movs	r2, #255	@ 0xff
 8000864:	401a      	ands	r2, r3
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	0018      	movs	r0, r3
 800086c:	2303      	movs	r3, #3
 800086e:	4003      	ands	r3, r0
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	4809      	ldr	r0, [pc, #36]	@ (800089c <__NVIC_SetPriority+0xd8>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	001c      	movs	r4, r3
 800087c:	230f      	movs	r3, #15
 800087e:	4023      	ands	r3, r4
 8000880:	3b08      	subs	r3, #8
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	430a      	orrs	r2, r1
 8000886:	3306      	adds	r3, #6
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	18c3      	adds	r3, r0, r3
 800088c:	3304      	adds	r3, #4
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b003      	add	sp, #12
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	045b      	lsls	r3, r3, #17
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d301      	bcc.n	80008b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b4:	2301      	movs	r3, #1
 80008b6:	e010      	b.n	80008da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <SysTick_Config+0x44>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	3a01      	subs	r2, #1
 80008be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	2103      	movs	r1, #3
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff7c 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <SysTick_Config+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <SysTick_Config+0x44>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	0018      	movs	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	210f      	movs	r1, #15
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	1c02      	adds	r2, r0, #0
 80008f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b25b      	sxtb	r3, r3
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ff5d 	bl	80007c4 <__NVIC_SetPriority>
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ffbf 	bl	80008a0 <SysTick_Config>
 8000922:	0003      	movs	r3, r0
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	e147      	b.n	8000bcc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2101      	movs	r1, #1
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <HAL_GPIO_Init+0x28>
 8000952:	e138      	b.n	8000bc6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
 800095c:	2b01      	cmp	r3, #1
 800095e:	d005      	beq.n	800096c <HAL_GPIO_Init+0x40>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2203      	movs	r2, #3
 8000966:	4013      	ands	r3, r2
 8000968:	2b02      	cmp	r3, #2
 800096a:	d130      	bne.n	80009ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	43da      	mvns	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009a2:	2201      	movs	r2, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	43da      	mvns	r2, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	091b      	lsrs	r3, r3, #4
 80009b8:	2201      	movs	r2, #1
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2203      	movs	r2, #3
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d017      	beq.n	8000a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2203      	movs	r2, #3
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	43da      	mvns	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2203      	movs	r2, #3
 8000a10:	4013      	ands	r3, r2
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d123      	bne.n	8000a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	08da      	lsrs	r2, r3, #3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3208      	adds	r2, #8
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	58d3      	ldr	r3, [r2, r3]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	2207      	movs	r2, #7
 8000a28:	4013      	ands	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	691a      	ldr	r2, [r3, #16]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2107      	movs	r1, #7
 8000a42:	400b      	ands	r3, r1
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	08da      	lsrs	r2, r3, #3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3208      	adds	r2, #8
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	6939      	ldr	r1, [r7, #16]
 8000a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	23c0      	movs	r3, #192	@ 0xc0
 8000a98:	029b      	lsls	r3, r3, #10
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d100      	bne.n	8000aa0 <HAL_GPIO_Init+0x174>
 8000a9e:	e092      	b.n	8000bc6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000aa0:	4a50      	ldr	r2, [pc, #320]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	589b      	ldr	r3, [r3, r2]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	0013      	movs	r3, r2
 8000abc:	43da      	mvns	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	23a0      	movs	r3, #160	@ 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d013      	beq.n	8000af6 <HAL_GPIO_Init+0x1ca>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a45      	ldr	r2, [pc, #276]	@ (8000be8 <HAL_GPIO_Init+0x2bc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d00d      	beq.n	8000af2 <HAL_GPIO_Init+0x1c6>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a44      	ldr	r2, [pc, #272]	@ (8000bec <HAL_GPIO_Init+0x2c0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d007      	beq.n	8000aee <HAL_GPIO_Init+0x1c2>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a43      	ldr	r2, [pc, #268]	@ (8000bf0 <HAL_GPIO_Init+0x2c4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_GPIO_Init+0x1be>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x1cc>
 8000aea:	2305      	movs	r3, #5
 8000aec:	e004      	b.n	8000af8 <HAL_GPIO_Init+0x1cc>
 8000aee:	2302      	movs	r3, #2
 8000af0:	e002      	b.n	8000af8 <HAL_GPIO_Init+0x1cc>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <HAL_GPIO_Init+0x1cc>
 8000af6:	2300      	movs	r3, #0
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	2103      	movs	r1, #3
 8000afc:	400a      	ands	r2, r1
 8000afe:	00d2      	lsls	r2, r2, #3
 8000b00:	4093      	lsls	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b08:	4936      	ldr	r1, [pc, #216]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3318      	adds	r3, #24
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b16:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	035b      	lsls	r3, r3, #13
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b40:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	039b      	lsls	r3, r3, #14
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b6c:	2384      	movs	r3, #132	@ 0x84
 8000b6e:	58d3      	ldr	r3, [r2, r3]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43da      	mvns	r2, r3
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b90:	4914      	ldr	r1, [pc, #80]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b92:	2284      	movs	r2, #132	@ 0x84
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b98:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	58d3      	ldr	r3, [r2, r3]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bbe:	4909      	ldr	r1, [pc, #36]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	40da      	lsrs	r2, r3
 8000bd4:	1e13      	subs	r3, r2, #0
 8000bd6:	d000      	beq.n	8000bda <HAL_GPIO_Init+0x2ae>
 8000bd8:	e6b0      	b.n	800093c <HAL_GPIO_Init+0x10>
  }
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021800 	.word	0x40021800
 8000be8:	50000400 	.word	0x50000400
 8000bec:	50000800 	.word	0x50000800
 8000bf0:	50000c00 	.word	0x50000c00

08000bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	0011      	movs	r1, r2
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	1c7b      	adds	r3, r7, #1
 8000c08:	1c0a      	adds	r2, r1, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c0c:	1c7b      	adds	r3, r7, #1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	1cbb      	adds	r3, r7, #2
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	0019      	movs	r1, r3
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d11f      	bne.n	8000c94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	0013      	movs	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4912      	ldr	r1, [pc, #72]	@ (8000cac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fa4c 	bl	8000100 <__udivsi3>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c6e:	e008      	b.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e001      	b.n	8000c82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e009      	b.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d0ed      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	40007000 	.word	0x40007000
 8000ca4:	fffff9ff 	.word	0xfffff9ff
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	000f4240 	.word	0x000f4240

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e2f3      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d100      	bne.n	8000cce <HAL_RCC_OscConfig+0x1e>
 8000ccc:	e07c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cce:	4bc3      	ldr	r3, [pc, #780]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2238      	movs	r2, #56	@ 0x38
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd8:	4bc0      	ldr	r3, [pc, #768]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d102      	bne.n	8000cee <HAL_RCC_OscConfig+0x3e>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d002      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d10b      	bne.n	8000d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	4bb9      	ldr	r3, [pc, #740]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d062      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x116>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d15e      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e2ce      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d107      	bne.n	8000d28 <HAL_RCC_OscConfig+0x78>
 8000d18:	4bb0      	ldr	r3, [pc, #704]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4baf      	ldr	r3, [pc, #700]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	2180      	movs	r1, #128	@ 0x80
 8000d20:	0249      	lsls	r1, r1, #9
 8000d22:	430a      	orrs	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e020      	b.n	8000d6a <HAL_RCC_OscConfig+0xba>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	23a0      	movs	r3, #160	@ 0xa0
 8000d2e:	02db      	lsls	r3, r3, #11
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d10e      	bne.n	8000d52 <HAL_RCC_OscConfig+0xa2>
 8000d34:	4ba9      	ldr	r3, [pc, #676]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba8      	ldr	r3, [pc, #672]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	2180      	movs	r1, #128	@ 0x80
 8000d3c:	02c9      	lsls	r1, r1, #11
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	4ba6      	ldr	r3, [pc, #664]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4ba5      	ldr	r3, [pc, #660]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	0249      	lsls	r1, r1, #9
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e00b      	b.n	8000d6a <HAL_RCC_OscConfig+0xba>
 8000d52:	4ba2      	ldr	r3, [pc, #648]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4ba1      	ldr	r3, [pc, #644]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d58:	49a1      	ldr	r1, [pc, #644]	@ (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	4b9f      	ldr	r3, [pc, #636]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b9e      	ldr	r3, [pc, #632]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d64:	499f      	ldr	r1, [pc, #636]	@ (8000fe4 <HAL_RCC_OscConfig+0x334>)
 8000d66:	400a      	ands	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d014      	beq.n	8000d9c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d72:	f7ff fd07 	bl	8000784 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fd02 	bl	8000784 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e28d      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d8e:	4b93      	ldr	r3, [pc, #588]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4013      	ands	r3, r2
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0xcc>
 8000d9a:	e015      	b.n	8000dc8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcf2 	bl	8000784 <HAL_GetTick>
 8000da0:	0003      	movs	r3, r0
 8000da2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da6:	f7ff fced 	bl	8000784 <HAL_GetTick>
 8000daa:	0002      	movs	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	@ 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e278      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000db8:	4b88      	ldr	r3, [pc, #544]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d1f0      	bne.n	8000da6 <HAL_RCC_OscConfig+0xf6>
 8000dc4:	e000      	b.n	8000dc8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x124>
 8000dd2:	e099      	b.n	8000f08 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd4:	4b81      	ldr	r3, [pc, #516]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2238      	movs	r2, #56	@ 0x38
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dde:	4b7f      	ldr	r3, [pc, #508]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2203      	movs	r2, #3
 8000de4:	4013      	ands	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d102      	bne.n	8000df4 <HAL_RCC_OscConfig+0x144>
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d002      	beq.n	8000dfa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d135      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dfa:	4b78      	ldr	r3, [pc, #480]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4013      	ands	r3, r2
 8000e04:	d005      	beq.n	8000e12 <HAL_RCC_OscConfig+0x162>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e24b      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4b72      	ldr	r3, [pc, #456]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a74      	ldr	r2, [pc, #464]	@ (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	4b6e      	ldr	r3, [pc, #440]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d112      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6e      	ldr	r2, [pc, #440]	@ (8000fec <HAL_RCC_OscConfig+0x33c>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	4b67      	ldr	r3, [pc, #412]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e42:	4b66      	ldr	r3, [pc, #408]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0adb      	lsrs	r3, r3, #11
 8000e48:	2207      	movs	r2, #7
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	4a68      	ldr	r2, [pc, #416]	@ (8000ff0 <HAL_RCC_OscConfig+0x340>)
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	4b68      	ldr	r3, [pc, #416]	@ (8000ff4 <HAL_RCC_OscConfig+0x344>)
 8000e52:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e54:	4b68      	ldr	r3, [pc, #416]	@ (8000ff8 <HAL_RCC_OscConfig+0x348>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc37 	bl	80006cc <HAL_InitTick>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d051      	beq.n	8000f06 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e221      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d030      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a5e      	ldr	r2, [pc, #376]	@ (8000fec <HAL_RCC_OscConfig+0x33c>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	0019      	movs	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	4b57      	ldr	r3, [pc, #348]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e82:	4b56      	ldr	r3, [pc, #344]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b55      	ldr	r3, [pc, #340]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	0049      	lsls	r1, r1, #1
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc78 	bl	8000784 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc73 	bl	8000784 <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1fe      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eac:	4b4b      	ldr	r3, [pc, #300]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	021a      	lsls	r2, r3, #8
 8000ec8:	4b44      	ldr	r3, [pc, #272]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	e01b      	b.n	8000f08 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ed0:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b41      	ldr	r3, [pc, #260]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ed6:	4949      	ldr	r1, [pc, #292]	@ (8000ffc <HAL_RCC_OscConfig+0x34c>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc52 	bl	8000784 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc4d 	bl	8000784 <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e1d8      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ef8:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	d1f0      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x236>
 8000f04:	e000      	b.n	8000f08 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f06:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d047      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2238      	movs	r2, #56	@ 0x38
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b18      	cmp	r3, #24
 8000f1c:	d10a      	bne.n	8000f34 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	2202      	movs	r2, #2
 8000f24:	4013      	ands	r3, r2
 8000f26:	d03c      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2f2>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d138      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e1ba      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d019      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc1c 	bl	8000784 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f52:	f7ff fc17 	bl	8000784 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e1a2      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f68:	2202      	movs	r2, #2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d0f1      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2a2>
 8000f6e:	e018      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc02 	bl	8000784 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fbfd 	bl	8000784 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e188      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d1f1      	bne.n	8000f86 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d100      	bne.n	8000fae <HAL_RCC_OscConfig+0x2fe>
 8000fac:	e0c6      	b.n	800113c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fae:	231f      	movs	r3, #31
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2238      	movs	r2, #56	@ 0x38
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b20      	cmp	r3, #32
 8000fc0:	d11e      	bne.n	8001000 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d100      	bne.n	8000fce <HAL_RCC_OscConfig+0x31e>
 8000fcc:	e0b6      	b.n	800113c <HAL_RCC_OscConfig+0x48c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x328>
 8000fd6:	e0b1      	b.n	800113c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e166      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	fffeffff 	.word	0xfffeffff
 8000fe4:	fffbffff 	.word	0xfffbffff
 8000fe8:	ffff80ff 	.word	0xffff80ff
 8000fec:	ffffc7ff 	.word	0xffffc7ff
 8000ff0:	00f42400 	.word	0x00f42400
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001000:	4bac      	ldr	r3, [pc, #688]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	055b      	lsls	r3, r3, #21
 8001008:	4013      	ands	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_RCC_OscConfig+0x360>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x362>
 8001010:	2300      	movs	r3, #0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d011      	beq.n	800103a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4ba7      	ldr	r3, [pc, #668]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800101a:	4ba6      	ldr	r3, [pc, #664]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	0549      	lsls	r1, r1, #21
 8001020:	430a      	orrs	r2, r1
 8001022:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001024:	4ba3      	ldr	r3, [pc, #652]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001032:	231f      	movs	r3, #31
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800103a:	4b9f      	ldr	r3, [pc, #636]	@ (80012b8 <HAL_RCC_OscConfig+0x608>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	@ 0x80
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4013      	ands	r3, r2
 8001044:	d11a      	bne.n	800107c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001046:	4b9c      	ldr	r3, [pc, #624]	@ (80012b8 <HAL_RCC_OscConfig+0x608>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b9b      	ldr	r3, [pc, #620]	@ (80012b8 <HAL_RCC_OscConfig+0x608>)
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0049      	lsls	r1, r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001054:	f7ff fb96 	bl	8000784 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105e:	f7ff fb91 	bl	8000784 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e11c      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001070:	4b91      	ldr	r3, [pc, #580]	@ (80012b8 <HAL_RCC_OscConfig+0x608>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4013      	ands	r3, r2
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x3e2>
 8001084:	4b8b      	ldr	r3, [pc, #556]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001086:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001088:	4b8a      	ldr	r3, [pc, #552]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001090:	e01c      	b.n	80010cc <HAL_RCC_OscConfig+0x41c>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x404>
 800109a:	4b86      	ldr	r3, [pc, #536]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800109c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800109e:	4b85      	ldr	r3, [pc, #532]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010a0:	2104      	movs	r1, #4
 80010a2:	430a      	orrs	r2, r1
 80010a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010a6:	4b83      	ldr	r3, [pc, #524]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010aa:	4b82      	ldr	r3, [pc, #520]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010b2:	e00b      	b.n	80010cc <HAL_RCC_OscConfig+0x41c>
 80010b4:	4b7f      	ldr	r3, [pc, #508]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010b8:	4b7e      	ldr	r3, [pc, #504]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	438a      	bics	r2, r1
 80010be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010c0:	4b7c      	ldr	r3, [pc, #496]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010c4:	4b7b      	ldr	r3, [pc, #492]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	438a      	bics	r2, r1
 80010ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d014      	beq.n	80010fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fb56 	bl	8000784 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010dc:	e009      	b.n	80010f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fb51 	bl	8000784 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	4a74      	ldr	r2, [pc, #464]	@ (80012bc <HAL_RCC_OscConfig+0x60c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e0db      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010f2:	4b70      	ldr	r3, [pc, #448]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80010f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x42e>
 80010fc:	e013      	b.n	8001126 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fe:	f7ff fb41 	bl	8000784 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001106:	e009      	b.n	800111c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001108:	f7ff fb3c 	bl	8000784 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4a6a      	ldr	r2, [pc, #424]	@ (80012bc <HAL_RCC_OscConfig+0x60c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0c6      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800111c:	4b65      	ldr	r3, [pc, #404]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800111e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001120:	2202      	movs	r2, #2
 8001122:	4013      	ands	r3, r2
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001126:	231f      	movs	r3, #31
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001130:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001134:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001136:	4962      	ldr	r1, [pc, #392]	@ (80012c0 <HAL_RCC_OscConfig+0x610>)
 8001138:	400a      	ands	r2, r1
 800113a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x496>
 8001144:	e0b0      	b.n	80012a8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001146:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2238      	movs	r2, #56	@ 0x38
 800114c:	4013      	ands	r3, r2
 800114e:	2b10      	cmp	r3, #16
 8001150:	d100      	bne.n	8001154 <HAL_RCC_OscConfig+0x4a4>
 8001152:	e078      	b.n	8001246 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d153      	bne.n	8001204 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115c:	4b55      	ldr	r3, [pc, #340]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001162:	4958      	ldr	r1, [pc, #352]	@ (80012c4 <HAL_RCC_OscConfig+0x614>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fb0c 	bl	8000784 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb07 	bl	8000784 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e092      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001184:	4b4b      	ldr	r3, [pc, #300]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	049b      	lsls	r3, r3, #18
 800118c:	4013      	ands	r3, r2
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001190:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4a4c      	ldr	r2, [pc, #304]	@ (80012c8 <HAL_RCC_OscConfig+0x618>)
 8001196:	4013      	ands	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	431a      	orrs	r2, r3
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011be:	4b3d      	ldr	r3, [pc, #244]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0449      	lsls	r1, r1, #17
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80011cc:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0549      	lsls	r1, r1, #21
 80011d6:	430a      	orrs	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011da:	f7ff fad3 	bl	8000784 <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e4:	f7ff face 	bl	8000784 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e059      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	049b      	lsls	r3, r3, #18
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x534>
 8001202:	e051      	b.n	80012a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001204:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800120a:	492e      	ldr	r1, [pc, #184]	@ (80012c4 <HAL_RCC_OscConfig+0x614>)
 800120c:	400a      	ands	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fab8 	bl	8000784 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fab3 	bl	8000784 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e03e      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	049b      	lsls	r3, r3, #18
 8001234:	4013      	ands	r3, r2
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 800123e:	4923      	ldr	r1, [pc, #140]	@ (80012cc <HAL_RCC_OscConfig+0x61c>)
 8001240:	400a      	ands	r2, r1
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	e030      	b.n	80012a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e02b      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_RCC_OscConfig+0x604>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2203      	movs	r2, #3
 800125c:	401a      	ands	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	429a      	cmp	r2, r3
 8001264:	d11e      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2270      	movs	r2, #112	@ 0x70
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001270:	429a      	cmp	r2, r3
 8001272:	d117      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	23fe      	movs	r3, #254	@ 0xfe
 8001278:	01db      	lsls	r3, r3, #7
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d10e      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	23f8      	movs	r3, #248	@ 0xf8
 800128a:	039b      	lsls	r3, r3, #14
 800128c:	401a      	ands	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001292:	429a      	cmp	r2, r3
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	0f5b      	lsrs	r3, r3, #29
 800129a:	075a      	lsls	r2, r3, #29
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b008      	add	sp, #32
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40007000 	.word	0x40007000
 80012bc:	00001388 	.word	0x00001388
 80012c0:	efffffff 	.word	0xefffffff
 80012c4:	feffffff 	.word	0xfeffffff
 80012c8:	1fc1808c 	.word	0x1fc1808c
 80012cc:	effefffc 	.word	0xeffefffc

080012d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0e9      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e4:	4b76      	ldr	r3, [pc, #472]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2207      	movs	r2, #7
 80012ea:	4013      	ands	r3, r2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d91e      	bls.n	8001330 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4b73      	ldr	r3, [pc, #460]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2207      	movs	r2, #7
 80012f8:	4393      	bics	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001304:	f7ff fa3e 	bl	8000784 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130c:	e009      	b.n	8001322 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130e:	f7ff fa39 	bl	8000784 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a6a      	ldr	r2, [pc, #424]	@ (80014c4 <HAL_RCC_ClockConfig+0x1f4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0ca      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001322:	4b67      	ldr	r3, [pc, #412]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2207      	movs	r2, #7
 8001328:	4013      	ands	r3, r2
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d015      	beq.n	8001366 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2204      	movs	r2, #4
 8001340:	4013      	ands	r3, r2
 8001342:	d006      	beq.n	8001352 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001344:	4b60      	ldr	r3, [pc, #384]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	4b5f      	ldr	r3, [pc, #380]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 800134a:	21e0      	movs	r1, #224	@ 0xe0
 800134c:	01c9      	lsls	r1, r1, #7
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4a5d      	ldr	r2, [pc, #372]	@ (80014cc <HAL_RCC_ClockConfig+0x1fc>)
 8001358:	4013      	ands	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b59      	ldr	r3, [pc, #356]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001362:	430a      	orrs	r2, r1
 8001364:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	4013      	ands	r3, r2
 800136e:	d057      	beq.n	8001420 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d12b      	bne.n	80013dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e097      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001390:	4b4d      	ldr	r3, [pc, #308]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	049b      	lsls	r3, r3, #18
 8001398:	4013      	ands	r3, r2
 800139a:	d11f      	bne.n	80013dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e08b      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a8:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	d113      	bne.n	80013dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e07f      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d106      	bne.n	80013ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c0:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e074      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ce:	4b3e      	ldr	r3, [pc, #248]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d2:	2202      	movs	r2, #2
 80013d4:	4013      	ands	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e06d      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013dc:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2207      	movs	r2, #7
 80013e2:	4393      	bics	r3, r2
 80013e4:	0019      	movs	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013f0:	f7ff f9c8 	bl	8000784 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f8:	e009      	b.n	800140e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fa:	f7ff f9c3 	bl	8000784 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a2f      	ldr	r2, [pc, #188]	@ (80014c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e054      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2238      	movs	r2, #56	@ 0x38
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	429a      	cmp	r2, r3
 800141e:	d1ec      	bne.n	80013fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001420:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2207      	movs	r2, #7
 8001426:	4013      	ands	r3, r2
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d21e      	bcs.n	800146c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2207      	movs	r2, #7
 8001434:	4393      	bics	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001440:	f7ff f9a0 	bl	8000784 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001448:	e009      	b.n	800145e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144a:	f7ff f99b 	bl	8000784 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e02c      	b.n	80014b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d009      	beq.n	800148a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <HAL_RCC_ClockConfig+0x200>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800148a:	f000 f829 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 800148e:	0001      	movs	r1, r0
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	220f      	movs	r2, #15
 8001498:	401a      	ands	r2, r3
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_RCC_ClockConfig+0x204>)
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	58d3      	ldr	r3, [r2, r3]
 80014a0:	221f      	movs	r2, #31
 80014a2:	4013      	ands	r3, r2
 80014a4:	000a      	movs	r2, r1
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_ClockConfig+0x208>)
 80014aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_RCC_ClockConfig+0x20c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff f90b 	bl	80006cc <HAL_InitTick>
 80014b6:	0003      	movs	r3, r0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b004      	add	sp, #16
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40022000 	.word	0x40022000
 80014c4:	00001388 	.word	0x00001388
 80014c8:	40021000 	.word	0x40021000
 80014cc:	fffff0ff 	.word	0xfffff0ff
 80014d0:	ffff8fff 	.word	0xffff8fff
 80014d4:	0800219c 	.word	0x0800219c
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2238      	movs	r2, #56	@ 0x38
 80014ec:	4013      	ands	r3, r2
 80014ee:	d10f      	bne.n	8001510 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0adb      	lsrs	r3, r3, #11
 80014f6:	2207      	movs	r2, #7
 80014f8:	4013      	ands	r3, r2
 80014fa:	2201      	movs	r2, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	4835      	ldr	r0, [pc, #212]	@ (80015dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001506:	f7fe fdfb 	bl	8000100 <__udivsi3>
 800150a:	0003      	movs	r3, r0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	e05d      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001510:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2238      	movs	r2, #56	@ 0x38
 8001516:	4013      	ands	r3, r2
 8001518:	2b08      	cmp	r3, #8
 800151a:	d102      	bne.n	8001522 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	e054      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2238      	movs	r2, #56	@ 0x38
 8001528:	4013      	ands	r3, r2
 800152a:	2b10      	cmp	r3, #16
 800152c:	d138      	bne.n	80015a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2203      	movs	r2, #3
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	2207      	movs	r2, #7
 8001540:	4013      	ands	r3, r2
 8001542:	3301      	adds	r3, #1
 8001544:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d10d      	bne.n	8001568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	4824      	ldr	r0, [pc, #144]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001550:	f7fe fdd6 	bl	8000100 <__udivsi3>
 8001554:	0003      	movs	r3, r0
 8001556:	0019      	movs	r1, r3
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	227f      	movs	r2, #127	@ 0x7f
 8001560:	4013      	ands	r3, r2
 8001562:	434b      	muls	r3, r1
 8001564:	617b      	str	r3, [r7, #20]
        break;
 8001566:	e00d      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	481c      	ldr	r0, [pc, #112]	@ (80015dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800156c:	f7fe fdc8 	bl	8000100 <__udivsi3>
 8001570:	0003      	movs	r3, r0
 8001572:	0019      	movs	r1, r3
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	227f      	movs	r2, #127	@ 0x7f
 800157c:	4013      	ands	r3, r2
 800157e:	434b      	muls	r3, r1
 8001580:	617b      	str	r3, [r7, #20]
        break;
 8001582:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0f5b      	lsrs	r3, r3, #29
 800158a:	2207      	movs	r2, #7
 800158c:	4013      	ands	r3, r2
 800158e:	3301      	adds	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f7fe fdb3 	bl	8000100 <__udivsi3>
 800159a:	0003      	movs	r3, r0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e015      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2238      	movs	r2, #56	@ 0x38
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d103      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2238      	movs	r2, #56	@ 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b18      	cmp	r3, #24
 80015be:	d103      	bne.n	80015c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80015c0:	23fa      	movs	r3, #250	@ 0xfa
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e001      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015cc:	693b      	ldr	r3, [r7, #16]
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b006      	add	sp, #24
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	40021000 	.word	0x40021000
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	007a1200 	.word	0x007a1200

080015e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e04a      	b.n	800168c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	223d      	movs	r2, #61	@ 0x3d
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	223c      	movs	r2, #60	@ 0x3c
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe ff97 	bl	8000540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	223d      	movs	r2, #61	@ 0x3d
 8001616:	2102      	movs	r1, #2
 8001618:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	0019      	movs	r1, r3
 8001624:	0010      	movs	r0, r2
 8001626:	f000 f935 	bl	8001894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2248      	movs	r2, #72	@ 0x48
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	223e      	movs	r2, #62	@ 0x3e
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	223f      	movs	r2, #63	@ 0x3f
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2240      	movs	r2, #64	@ 0x40
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2241      	movs	r2, #65	@ 0x41
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2242      	movs	r2, #66	@ 0x42
 8001656:	2101      	movs	r1, #1
 8001658:	5499      	strb	r1, [r3, r2]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2243      	movs	r2, #67	@ 0x43
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2244      	movs	r2, #68	@ 0x44
 8001666:	2101      	movs	r1, #1
 8001668:	5499      	strb	r1, [r3, r2]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2245      	movs	r2, #69	@ 0x45
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2246      	movs	r2, #70	@ 0x46
 8001676:	2101      	movs	r1, #1
 8001678:	5499      	strb	r1, [r3, r2]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2247      	movs	r2, #71	@ 0x47
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	223d      	movs	r2, #61	@ 0x3d
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2317      	movs	r3, #23
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	223c      	movs	r2, #60	@ 0x3c
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0e5      	b.n	8001882 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	223c      	movs	r2, #60	@ 0x3c
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b14      	cmp	r3, #20
 80016c2:	d900      	bls.n	80016c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80016c4:	e0d1      	b.n	800186a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	4b70      	ldr	r3, [pc, #448]	@ (800188c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	0011      	movs	r1, r2
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f95e 	bl	800199c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2108      	movs	r1, #8
 80016ec:	430a      	orrs	r2, r1
 80016ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2104      	movs	r1, #4
 80016fc:	438a      	bics	r2, r1
 80016fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6999      	ldr	r1, [r3, #24]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	619a      	str	r2, [r3, #24]
      break;
 8001712:	e0af      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f9c7 	bl	8001ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2180      	movs	r1, #128	@ 0x80
 800172e:	0109      	lsls	r1, r1, #4
 8001730:	430a      	orrs	r2, r1
 8001732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4954      	ldr	r1, [pc, #336]	@ (8001890 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001740:	400a      	ands	r2, r1
 8001742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6999      	ldr	r1, [r3, #24]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	021a      	lsls	r2, r3, #8
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]
      break;
 8001758:	e08c      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	0011      	movs	r1, r2
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fa28 	bl	8001bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2108      	movs	r1, #8
 8001774:	430a      	orrs	r2, r1
 8001776:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2104      	movs	r1, #4
 8001784:	438a      	bics	r2, r1
 8001786:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	69d9      	ldr	r1, [r3, #28]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	61da      	str	r2, [r3, #28]
      break;
 800179a:	e06b      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fa8f 	bl	8001cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	0109      	lsls	r1, r1, #4
 80017b8:	430a      	orrs	r2, r1
 80017ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4932      	ldr	r1, [pc, #200]	@ (8001890 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69d9      	ldr	r1, [r3, #28]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	021a      	lsls	r2, r3, #8
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	61da      	str	r2, [r3, #28]
      break;
 80017e0:	e048      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	0011      	movs	r1, r2
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fad6 	bl	8001d9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2108      	movs	r1, #8
 80017fc:	430a      	orrs	r2, r1
 80017fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001822:	e027      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f000 fb15 	bl	8001e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0109      	lsls	r1, r1, #4
 8001840:	430a      	orrs	r2, r1
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4910      	ldr	r1, [pc, #64]	@ (8001890 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001850:	400a      	ands	r2, r1
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	021a      	lsls	r2, r3, #8
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001868:	e004      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800186a:	2317      	movs	r3, #23
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	223c      	movs	r2, #60	@ 0x3c
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]

  return status;
 800187c:	2317      	movs	r3, #23
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b006      	add	sp, #24
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	080021dc 	.word	0x080021dc
 8001890:	fffffbff 	.word	0xfffffbff

08001894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a36      	ldr	r2, [pc, #216]	@ (8001980 <TIM_Base_SetConfig+0xec>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d003      	beq.n	80018b4 <TIM_Base_SetConfig+0x20>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a35      	ldr	r2, [pc, #212]	@ (8001984 <TIM_Base_SetConfig+0xf0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d108      	bne.n	80018c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2270      	movs	r2, #112	@ 0x70
 80018b8:	4393      	bics	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001980 <TIM_Base_SetConfig+0xec>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <TIM_Base_SetConfig+0x62>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001984 <TIM_Base_SetConfig+0xf0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00f      	beq.n	80018f6 <TIM_Base_SetConfig+0x62>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001988 <TIM_Base_SetConfig+0xf4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00b      	beq.n	80018f6 <TIM_Base_SetConfig+0x62>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a2a      	ldr	r2, [pc, #168]	@ (800198c <TIM_Base_SetConfig+0xf8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <TIM_Base_SetConfig+0x62>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a29      	ldr	r2, [pc, #164]	@ (8001990 <TIM_Base_SetConfig+0xfc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d003      	beq.n	80018f6 <TIM_Base_SetConfig+0x62>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a28      	ldr	r2, [pc, #160]	@ (8001994 <TIM_Base_SetConfig+0x100>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <TIM_Base_SetConfig+0x104>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	4393      	bics	r3, r2
 800190e:	001a      	movs	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a13      	ldr	r2, [pc, #76]	@ (8001980 <TIM_Base_SetConfig+0xec>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0xba>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <TIM_Base_SetConfig+0xf8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0xba>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <TIM_Base_SetConfig+0xfc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0xba>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <TIM_Base_SetConfig+0x100>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d103      	bne.n	8001956 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2201      	movs	r2, #1
 800196e:	4393      	bics	r3, r2
 8001970:	001a      	movs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
  }
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40000400 	.word	0x40000400
 8001988:	40002000 	.word	0x40002000
 800198c:	40014000 	.word	0x40014000
 8001990:	40014400 	.word	0x40014400
 8001994:	40014800 	.word	0x40014800
 8001998:	fffffcff 	.word	0xfffffcff

0800199c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4393      	bics	r3, r2
 80019b4:	001a      	movs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a32      	ldr	r2, [pc, #200]	@ (8001a94 <TIM_OC1_SetConfig+0xf8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2203      	movs	r2, #3
 80019d2:	4393      	bics	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2202      	movs	r2, #2
 80019e4:	4393      	bics	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a28      	ldr	r2, [pc, #160]	@ (8001a98 <TIM_OC1_SetConfig+0xfc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00b      	beq.n	8001a12 <TIM_OC1_SetConfig+0x76>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a27      	ldr	r2, [pc, #156]	@ (8001a9c <TIM_OC1_SetConfig+0x100>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <TIM_OC1_SetConfig+0x76>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <TIM_OC1_SetConfig+0x104>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d003      	beq.n	8001a12 <TIM_OC1_SetConfig+0x76>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a25      	ldr	r2, [pc, #148]	@ (8001aa4 <TIM_OC1_SetConfig+0x108>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10c      	bne.n	8001a2c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2208      	movs	r2, #8
 8001a16:	4393      	bics	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4393      	bics	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a98 <TIM_OC1_SetConfig+0xfc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00b      	beq.n	8001a4c <TIM_OC1_SetConfig+0xb0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <TIM_OC1_SetConfig+0x100>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d007      	beq.n	8001a4c <TIM_OC1_SetConfig+0xb0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <TIM_OC1_SetConfig+0x104>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d003      	beq.n	8001a4c <TIM_OC1_SetConfig+0xb0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <TIM_OC1_SetConfig+0x108>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <TIM_OC1_SetConfig+0x10c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <TIM_OC1_SetConfig+0x110>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	621a      	str	r2, [r3, #32]
}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	fffeff8f 	.word	0xfffeff8f
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40014000 	.word	0x40014000
 8001aa0:	40014400 	.word	0x40014400
 8001aa4:	40014800 	.word	0x40014800
 8001aa8:	fffffeff 	.word	0xfffffeff
 8001aac:	fffffdff 	.word	0xfffffdff

08001ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	001a      	movs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4a2e      	ldr	r2, [pc, #184]	@ (8001b98 <TIM_OC2_SetConfig+0xe8>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b9c <TIM_OC2_SetConfig+0xec>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4393      	bics	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ba0 <TIM_OC2_SetConfig+0xf0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10d      	bne.n	8001b2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	4393      	bics	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba0 <TIM_OC2_SetConfig+0xf0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00b      	beq.n	8001b4e <TIM_OC2_SetConfig+0x9e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba4 <TIM_OC2_SetConfig+0xf4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d007      	beq.n	8001b4e <TIM_OC2_SetConfig+0x9e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <TIM_OC2_SetConfig+0xf8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d003      	beq.n	8001b4e <TIM_OC2_SetConfig+0x9e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a18      	ldr	r2, [pc, #96]	@ (8001bac <TIM_OC2_SetConfig+0xfc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d113      	bne.n	8001b76 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <TIM_OC2_SetConfig+0x100>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <TIM_OC2_SetConfig+0x104>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	621a      	str	r2, [r3, #32]
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	feff8fff 	.word	0xfeff8fff
 8001b9c:	fffffcff 	.word	0xfffffcff
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40014000 	.word	0x40014000
 8001ba8:	40014400 	.word	0x40014400
 8001bac:	40014800 	.word	0x40014800
 8001bb0:	fffffbff 	.word	0xfffffbff
 8001bb4:	fffff7ff 	.word	0xfffff7ff

08001bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <TIM_OC3_SetConfig+0xe4>)
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <TIM_OC3_SetConfig+0xe8>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2203      	movs	r2, #3
 8001bec:	4393      	bics	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <TIM_OC3_SetConfig+0xec>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <TIM_OC3_SetConfig+0xf0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10d      	bne.n	8001c32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4a24      	ldr	r2, [pc, #144]	@ (8001cac <TIM_OC3_SetConfig+0xf4>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <TIM_OC3_SetConfig+0xf8>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <TIM_OC3_SetConfig+0xf0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <TIM_OC3_SetConfig+0x9a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <TIM_OC3_SetConfig+0xfc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <TIM_OC3_SetConfig+0x9a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <TIM_OC3_SetConfig+0x100>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_OC3_SetConfig+0x9a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <TIM_OC3_SetConfig+0x104>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d113      	bne.n	8001c7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc0 <TIM_OC3_SetConfig+0x108>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <TIM_OC3_SetConfig+0x10c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	621a      	str	r2, [r3, #32]
}
 8001c94:	46c0      	nop			@ (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b006      	add	sp, #24
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	fffffeff 	.word	0xfffffeff
 8001ca0:	fffeff8f 	.word	0xfffeff8f
 8001ca4:	fffffdff 	.word	0xfffffdff
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	fffff7ff 	.word	0xfffff7ff
 8001cb0:	fffffbff 	.word	0xfffffbff
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40014800 	.word	0x40014800
 8001cc0:	ffffefff 	.word	0xffffefff
 8001cc4:	ffffdfff 	.word	0xffffdfff

08001cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a26      	ldr	r2, [pc, #152]	@ (8001d78 <TIM_OC4_SetConfig+0xb0>)
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <TIM_OC4_SetConfig+0xb4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <TIM_OC4_SetConfig+0xb8>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <TIM_OC4_SetConfig+0xbc>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	031b      	lsls	r3, r3, #12
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <TIM_OC4_SetConfig+0xc0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00b      	beq.n	8001d40 <TIM_OC4_SetConfig+0x78>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a18      	ldr	r2, [pc, #96]	@ (8001d8c <TIM_OC4_SetConfig+0xc4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <TIM_OC4_SetConfig+0x78>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <TIM_OC4_SetConfig+0xc8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d003      	beq.n	8001d40 <TIM_OC4_SetConfig+0x78>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	@ (8001d94 <TIM_OC4_SetConfig+0xcc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d109      	bne.n	8001d54 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <TIM_OC4_SetConfig+0xd0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	621a      	str	r2, [r3, #32]
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	ffffefff 	.word	0xffffefff
 8001d7c:	feff8fff 	.word	0xfeff8fff
 8001d80:	fffffcff 	.word	0xfffffcff
 8001d84:	ffffdfff 	.word	0xffffdfff
 8001d88:	40012c00 	.word	0x40012c00
 8001d8c:	40014000 	.word	0x40014000
 8001d90:	40014400 	.word	0x40014400
 8001d94:	40014800 	.word	0x40014800
 8001d98:	ffffbfff 	.word	0xffffbfff

08001d9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <TIM_OC5_SetConfig+0xa4>)
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <TIM_OC5_SetConfig+0xa8>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <TIM_OC5_SetConfig+0xac>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <TIM_OC5_SetConfig+0xb0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_OC5_SetConfig+0x6e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a16      	ldr	r2, [pc, #88]	@ (8001e50 <TIM_OC5_SetConfig+0xb4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_OC5_SetConfig+0x6e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <TIM_OC5_SetConfig+0xb8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_OC5_SetConfig+0x6e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <TIM_OC5_SetConfig+0xbc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d109      	bne.n	8001e1e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <TIM_OC5_SetConfig+0xa4>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	621a      	str	r2, [r3, #32]
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b006      	add	sp, #24
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	fffeffff 	.word	0xfffeffff
 8001e44:	fffeff8f 	.word	0xfffeff8f
 8001e48:	fffdffff 	.word	0xfffdffff
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40014400 	.word	0x40014400
 8001e58:	40014800 	.word	0x40014800

08001e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <TIM_OC6_SetConfig+0xa8>)
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <TIM_OC6_SetConfig+0xac>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <TIM_OC6_SetConfig+0xb0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	051b      	lsls	r3, r3, #20
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a18      	ldr	r2, [pc, #96]	@ (8001f10 <TIM_OC6_SetConfig+0xb4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00b      	beq.n	8001ecc <TIM_OC6_SetConfig+0x70>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <TIM_OC6_SetConfig+0xb8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <TIM_OC6_SetConfig+0x70>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <TIM_OC6_SetConfig+0xbc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_OC6_SetConfig+0x70>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a15      	ldr	r2, [pc, #84]	@ (8001f1c <TIM_OC6_SetConfig+0xc0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d109      	bne.n	8001ee0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <TIM_OC6_SetConfig+0xc4>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	621a      	str	r2, [r3, #32]
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b006      	add	sp, #24
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	ffefffff 	.word	0xffefffff
 8001f08:	feff8fff 	.word	0xfeff8fff
 8001f0c:	ffdfffff 	.word	0xffdfffff
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40014000 	.word	0x40014000
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	40014800 	.word	0x40014800
 8001f20:	fffbffff 	.word	0xfffbffff

08001f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223c      	movs	r2, #60	@ 0x3c
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e04f      	b.n	8001fdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	223c      	movs	r2, #60	@ 0x3c
 8001f40:	2101      	movs	r1, #1
 8001f42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223d      	movs	r2, #61	@ 0x3d
 8001f48:	2102      	movs	r1, #2
 8001f4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a20      	ldr	r2, [pc, #128]	@ (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2270      	movs	r2, #112	@ 0x70
 8001f7c:	4393      	bics	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d10c      	bne.n	8001fca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223d      	movs	r2, #61	@ 0x3d
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	223c      	movs	r2, #60	@ 0x3c
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	ff0fffff 	.word	0xff0fffff
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40014000 	.word	0x40014000

08001ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223c      	movs	r2, #60	@ 0x3c
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800200c:	2302      	movs	r3, #2
 800200e:	e06f      	b.n	80020f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	223c      	movs	r2, #60	@ 0x3c
 8002014:	2101      	movs	r1, #1
 8002016:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	22ff      	movs	r2, #255	@ 0xff
 800201c:	4393      	bics	r3, r2
 800201e:	001a      	movs	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800202c:	401a      	ands	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a30      	ldr	r2, [pc, #192]	@ (80020fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800203a:	401a      	ands	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a2e      	ldr	r2, [pc, #184]	@ (8002100 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002048:	401a      	ands	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002056:	401a      	ands	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a29      	ldr	r2, [pc, #164]	@ (8002108 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002064:	401a      	ands	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a26      	ldr	r2, [pc, #152]	@ (800210c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002072:	401a      	ands	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a24      	ldr	r2, [pc, #144]	@ (8002110 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002080:	401a      	ands	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002090:	401a      	ands	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d11c      	bne.n	80020de <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80020a8:	401a      	ands	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	051b      	lsls	r3, r3, #20
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80020b8:	401a      	ands	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80020c6:	401a      	ands	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80020d4:	401a      	ands	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223c      	movs	r2, #60	@ 0x3c
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b004      	add	sp, #16
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	fffffcff 	.word	0xfffffcff
 80020fc:	fffffbff 	.word	0xfffffbff
 8002100:	fffff7ff 	.word	0xfffff7ff
 8002104:	ffffefff 	.word	0xffffefff
 8002108:	ffffdfff 	.word	0xffffdfff
 800210c:	ffffbfff 	.word	0xffffbfff
 8002110:	fff0ffff 	.word	0xfff0ffff
 8002114:	efffffff 	.word	0xefffffff
 8002118:	40012c00 	.word	0x40012c00
 800211c:	ff0fffff 	.word	0xff0fffff
 8002120:	feffffff 	.word	0xfeffffff
 8002124:	fdffffff 	.word	0xfdffffff
 8002128:	dfffffff 	.word	0xdfffffff

0800212c <memset>:
 800212c:	0003      	movs	r3, r0
 800212e:	1882      	adds	r2, r0, r2
 8002130:	4293      	cmp	r3, r2
 8002132:	d100      	bne.n	8002136 <memset+0xa>
 8002134:	4770      	bx	lr
 8002136:	7019      	strb	r1, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	e7f9      	b.n	8002130 <memset+0x4>

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	2600      	movs	r6, #0
 8002140:	4c0c      	ldr	r4, [pc, #48]	@ (8002174 <__libc_init_array+0x38>)
 8002142:	4d0d      	ldr	r5, [pc, #52]	@ (8002178 <__libc_init_array+0x3c>)
 8002144:	1b64      	subs	r4, r4, r5
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	42a6      	cmp	r6, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	2600      	movs	r6, #0
 800214e:	f000 f819 	bl	8002184 <_init>
 8002152:	4c0a      	ldr	r4, [pc, #40]	@ (800217c <__libc_init_array+0x40>)
 8002154:	4d0a      	ldr	r5, [pc, #40]	@ (8002180 <__libc_init_array+0x44>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	42a6      	cmp	r6, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	00b3      	lsls	r3, r6, #2
 8002162:	58eb      	ldr	r3, [r5, r3]
 8002164:	4798      	blx	r3
 8002166:	3601      	adds	r6, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	00b3      	lsls	r3, r6, #2
 800216c:	58eb      	ldr	r3, [r5, r3]
 800216e:	4798      	blx	r3
 8002170:	3601      	adds	r6, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	08002230 	.word	0x08002230
 8002178:	08002230 	.word	0x08002230
 800217c:	08002234 	.word	0x08002234
 8002180:	08002230 	.word	0x08002230

08002184 <_init>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr

08002190 <_fini>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002196:	bc08      	pop	{r3}
 8002198:	469e      	mov	lr, r3
 800219a:	4770      	bx	lr
