
SuperSimpleBootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00006100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         000023a8  0800100c  0800100c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .mysection    00000000  08018000  08018000  0000518c  2**0
                  CONTENTS
  5 .rodata       00000088  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0800343c  0800343c  0000518c  2**0
                  CONTENTS
  7 .ARM          00000000  0800343c  0800343c  0000518c  2**0
                  CONTENTS
  8 .preinit_array 00000000  0800343c  0800343c  0000518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  0800343c  0800343c  0000443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000004  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         0000000c  20000180  08003444  00005180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000000b4  2000018c  08003450  0000518c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20000240  08003450  00005240  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  0000518c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000a393  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000019eb  00000000  00000000  0000f547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000007a8  00000000  00000000  00010f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005e6  00000000  00000000  000116e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00014425  00000000  00000000  00011cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000a8f4  00000000  00000000  000260eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000803ed  00000000  00000000  000309df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000b0dcc  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00001a18  00000000  00000000  000b0e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000074  00000000  00000000  000b2828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	@ (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	2000018c 	.word	0x2000018c
 800102c:	00000000 	.word	0x00000000
 8001030:	0800339c 	.word	0x0800339c

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	@ (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	@ (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	20000190 	.word	0x20000190
 8001050:	0800339c 	.word	0x0800339c

08001054 <__udivsi3>:
 8001054:	2200      	movs	r2, #0
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	428b      	cmp	r3, r1
 800105a:	d374      	bcc.n	8001146 <__udivsi3+0xf2>
 800105c:	0903      	lsrs	r3, r0, #4
 800105e:	428b      	cmp	r3, r1
 8001060:	d35f      	bcc.n	8001122 <__udivsi3+0xce>
 8001062:	0a03      	lsrs	r3, r0, #8
 8001064:	428b      	cmp	r3, r1
 8001066:	d344      	bcc.n	80010f2 <__udivsi3+0x9e>
 8001068:	0b03      	lsrs	r3, r0, #12
 800106a:	428b      	cmp	r3, r1
 800106c:	d328      	bcc.n	80010c0 <__udivsi3+0x6c>
 800106e:	0c03      	lsrs	r3, r0, #16
 8001070:	428b      	cmp	r3, r1
 8001072:	d30d      	bcc.n	8001090 <__udivsi3+0x3c>
 8001074:	22ff      	movs	r2, #255	@ 0xff
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	ba12      	rev	r2, r2
 800107a:	0c03      	lsrs	r3, r0, #16
 800107c:	428b      	cmp	r3, r1
 800107e:	d302      	bcc.n	8001086 <__udivsi3+0x32>
 8001080:	1212      	asrs	r2, r2, #8
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	d065      	beq.n	8001152 <__udivsi3+0xfe>
 8001086:	0b03      	lsrs	r3, r0, #12
 8001088:	428b      	cmp	r3, r1
 800108a:	d319      	bcc.n	80010c0 <__udivsi3+0x6c>
 800108c:	e000      	b.n	8001090 <__udivsi3+0x3c>
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0bc3      	lsrs	r3, r0, #15
 8001092:	428b      	cmp	r3, r1
 8001094:	d301      	bcc.n	800109a <__udivsi3+0x46>
 8001096:	03cb      	lsls	r3, r1, #15
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	4152      	adcs	r2, r2
 800109c:	0b83      	lsrs	r3, r0, #14
 800109e:	428b      	cmp	r3, r1
 80010a0:	d301      	bcc.n	80010a6 <__udivsi3+0x52>
 80010a2:	038b      	lsls	r3, r1, #14
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4152      	adcs	r2, r2
 80010a8:	0b43      	lsrs	r3, r0, #13
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d301      	bcc.n	80010b2 <__udivsi3+0x5e>
 80010ae:	034b      	lsls	r3, r1, #13
 80010b0:	1ac0      	subs	r0, r0, r3
 80010b2:	4152      	adcs	r2, r2
 80010b4:	0b03      	lsrs	r3, r0, #12
 80010b6:	428b      	cmp	r3, r1
 80010b8:	d301      	bcc.n	80010be <__udivsi3+0x6a>
 80010ba:	030b      	lsls	r3, r1, #12
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	4152      	adcs	r2, r2
 80010c0:	0ac3      	lsrs	r3, r0, #11
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d301      	bcc.n	80010ca <__udivsi3+0x76>
 80010c6:	02cb      	lsls	r3, r1, #11
 80010c8:	1ac0      	subs	r0, r0, r3
 80010ca:	4152      	adcs	r2, r2
 80010cc:	0a83      	lsrs	r3, r0, #10
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d301      	bcc.n	80010d6 <__udivsi3+0x82>
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	4152      	adcs	r2, r2
 80010d8:	0a43      	lsrs	r3, r0, #9
 80010da:	428b      	cmp	r3, r1
 80010dc:	d301      	bcc.n	80010e2 <__udivsi3+0x8e>
 80010de:	024b      	lsls	r3, r1, #9
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	4152      	adcs	r2, r2
 80010e4:	0a03      	lsrs	r3, r0, #8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d301      	bcc.n	80010ee <__udivsi3+0x9a>
 80010ea:	020b      	lsls	r3, r1, #8
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	4152      	adcs	r2, r2
 80010f0:	d2cd      	bcs.n	800108e <__udivsi3+0x3a>
 80010f2:	09c3      	lsrs	r3, r0, #7
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d301      	bcc.n	80010fc <__udivsi3+0xa8>
 80010f8:	01cb      	lsls	r3, r1, #7
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	4152      	adcs	r2, r2
 80010fe:	0983      	lsrs	r3, r0, #6
 8001100:	428b      	cmp	r3, r1
 8001102:	d301      	bcc.n	8001108 <__udivsi3+0xb4>
 8001104:	018b      	lsls	r3, r1, #6
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4152      	adcs	r2, r2
 800110a:	0943      	lsrs	r3, r0, #5
 800110c:	428b      	cmp	r3, r1
 800110e:	d301      	bcc.n	8001114 <__udivsi3+0xc0>
 8001110:	014b      	lsls	r3, r1, #5
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4152      	adcs	r2, r2
 8001116:	0903      	lsrs	r3, r0, #4
 8001118:	428b      	cmp	r3, r1
 800111a:	d301      	bcc.n	8001120 <__udivsi3+0xcc>
 800111c:	010b      	lsls	r3, r1, #4
 800111e:	1ac0      	subs	r0, r0, r3
 8001120:	4152      	adcs	r2, r2
 8001122:	08c3      	lsrs	r3, r0, #3
 8001124:	428b      	cmp	r3, r1
 8001126:	d301      	bcc.n	800112c <__udivsi3+0xd8>
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4152      	adcs	r2, r2
 800112e:	0883      	lsrs	r3, r0, #2
 8001130:	428b      	cmp	r3, r1
 8001132:	d301      	bcc.n	8001138 <__udivsi3+0xe4>
 8001134:	008b      	lsls	r3, r1, #2
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4152      	adcs	r2, r2
 800113a:	0843      	lsrs	r3, r0, #1
 800113c:	428b      	cmp	r3, r1
 800113e:	d301      	bcc.n	8001144 <__udivsi3+0xf0>
 8001140:	004b      	lsls	r3, r1, #1
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	4152      	adcs	r2, r2
 8001146:	1a41      	subs	r1, r0, r1
 8001148:	d200      	bcs.n	800114c <__udivsi3+0xf8>
 800114a:	4601      	mov	r1, r0
 800114c:	4152      	adcs	r2, r2
 800114e:	4610      	mov	r0, r2
 8001150:	4770      	bx	lr
 8001152:	e7ff      	b.n	8001154 <__udivsi3+0x100>
 8001154:	b501      	push	{r0, lr}
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f8f0 	bl	800133c <__aeabi_idiv0>
 800115c:	bd02      	pop	{r1, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)

08001160 <__aeabi_uidivmod>:
 8001160:	2900      	cmp	r1, #0
 8001162:	d0f7      	beq.n	8001154 <__udivsi3+0x100>
 8001164:	e776      	b.n	8001054 <__udivsi3>
 8001166:	4770      	bx	lr

08001168 <__divsi3>:
 8001168:	4603      	mov	r3, r0
 800116a:	430b      	orrs	r3, r1
 800116c:	d47f      	bmi.n	800126e <__divsi3+0x106>
 800116e:	2200      	movs	r2, #0
 8001170:	0843      	lsrs	r3, r0, #1
 8001172:	428b      	cmp	r3, r1
 8001174:	d374      	bcc.n	8001260 <__divsi3+0xf8>
 8001176:	0903      	lsrs	r3, r0, #4
 8001178:	428b      	cmp	r3, r1
 800117a:	d35f      	bcc.n	800123c <__divsi3+0xd4>
 800117c:	0a03      	lsrs	r3, r0, #8
 800117e:	428b      	cmp	r3, r1
 8001180:	d344      	bcc.n	800120c <__divsi3+0xa4>
 8001182:	0b03      	lsrs	r3, r0, #12
 8001184:	428b      	cmp	r3, r1
 8001186:	d328      	bcc.n	80011da <__divsi3+0x72>
 8001188:	0c03      	lsrs	r3, r0, #16
 800118a:	428b      	cmp	r3, r1
 800118c:	d30d      	bcc.n	80011aa <__divsi3+0x42>
 800118e:	22ff      	movs	r2, #255	@ 0xff
 8001190:	0209      	lsls	r1, r1, #8
 8001192:	ba12      	rev	r2, r2
 8001194:	0c03      	lsrs	r3, r0, #16
 8001196:	428b      	cmp	r3, r1
 8001198:	d302      	bcc.n	80011a0 <__divsi3+0x38>
 800119a:	1212      	asrs	r2, r2, #8
 800119c:	0209      	lsls	r1, r1, #8
 800119e:	d065      	beq.n	800126c <__divsi3+0x104>
 80011a0:	0b03      	lsrs	r3, r0, #12
 80011a2:	428b      	cmp	r3, r1
 80011a4:	d319      	bcc.n	80011da <__divsi3+0x72>
 80011a6:	e000      	b.n	80011aa <__divsi3+0x42>
 80011a8:	0a09      	lsrs	r1, r1, #8
 80011aa:	0bc3      	lsrs	r3, r0, #15
 80011ac:	428b      	cmp	r3, r1
 80011ae:	d301      	bcc.n	80011b4 <__divsi3+0x4c>
 80011b0:	03cb      	lsls	r3, r1, #15
 80011b2:	1ac0      	subs	r0, r0, r3
 80011b4:	4152      	adcs	r2, r2
 80011b6:	0b83      	lsrs	r3, r0, #14
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d301      	bcc.n	80011c0 <__divsi3+0x58>
 80011bc:	038b      	lsls	r3, r1, #14
 80011be:	1ac0      	subs	r0, r0, r3
 80011c0:	4152      	adcs	r2, r2
 80011c2:	0b43      	lsrs	r3, r0, #13
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d301      	bcc.n	80011cc <__divsi3+0x64>
 80011c8:	034b      	lsls	r3, r1, #13
 80011ca:	1ac0      	subs	r0, r0, r3
 80011cc:	4152      	adcs	r2, r2
 80011ce:	0b03      	lsrs	r3, r0, #12
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d301      	bcc.n	80011d8 <__divsi3+0x70>
 80011d4:	030b      	lsls	r3, r1, #12
 80011d6:	1ac0      	subs	r0, r0, r3
 80011d8:	4152      	adcs	r2, r2
 80011da:	0ac3      	lsrs	r3, r0, #11
 80011dc:	428b      	cmp	r3, r1
 80011de:	d301      	bcc.n	80011e4 <__divsi3+0x7c>
 80011e0:	02cb      	lsls	r3, r1, #11
 80011e2:	1ac0      	subs	r0, r0, r3
 80011e4:	4152      	adcs	r2, r2
 80011e6:	0a83      	lsrs	r3, r0, #10
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d301      	bcc.n	80011f0 <__divsi3+0x88>
 80011ec:	028b      	lsls	r3, r1, #10
 80011ee:	1ac0      	subs	r0, r0, r3
 80011f0:	4152      	adcs	r2, r2
 80011f2:	0a43      	lsrs	r3, r0, #9
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d301      	bcc.n	80011fc <__divsi3+0x94>
 80011f8:	024b      	lsls	r3, r1, #9
 80011fa:	1ac0      	subs	r0, r0, r3
 80011fc:	4152      	adcs	r2, r2
 80011fe:	0a03      	lsrs	r3, r0, #8
 8001200:	428b      	cmp	r3, r1
 8001202:	d301      	bcc.n	8001208 <__divsi3+0xa0>
 8001204:	020b      	lsls	r3, r1, #8
 8001206:	1ac0      	subs	r0, r0, r3
 8001208:	4152      	adcs	r2, r2
 800120a:	d2cd      	bcs.n	80011a8 <__divsi3+0x40>
 800120c:	09c3      	lsrs	r3, r0, #7
 800120e:	428b      	cmp	r3, r1
 8001210:	d301      	bcc.n	8001216 <__divsi3+0xae>
 8001212:	01cb      	lsls	r3, r1, #7
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	4152      	adcs	r2, r2
 8001218:	0983      	lsrs	r3, r0, #6
 800121a:	428b      	cmp	r3, r1
 800121c:	d301      	bcc.n	8001222 <__divsi3+0xba>
 800121e:	018b      	lsls	r3, r1, #6
 8001220:	1ac0      	subs	r0, r0, r3
 8001222:	4152      	adcs	r2, r2
 8001224:	0943      	lsrs	r3, r0, #5
 8001226:	428b      	cmp	r3, r1
 8001228:	d301      	bcc.n	800122e <__divsi3+0xc6>
 800122a:	014b      	lsls	r3, r1, #5
 800122c:	1ac0      	subs	r0, r0, r3
 800122e:	4152      	adcs	r2, r2
 8001230:	0903      	lsrs	r3, r0, #4
 8001232:	428b      	cmp	r3, r1
 8001234:	d301      	bcc.n	800123a <__divsi3+0xd2>
 8001236:	010b      	lsls	r3, r1, #4
 8001238:	1ac0      	subs	r0, r0, r3
 800123a:	4152      	adcs	r2, r2
 800123c:	08c3      	lsrs	r3, r0, #3
 800123e:	428b      	cmp	r3, r1
 8001240:	d301      	bcc.n	8001246 <__divsi3+0xde>
 8001242:	00cb      	lsls	r3, r1, #3
 8001244:	1ac0      	subs	r0, r0, r3
 8001246:	4152      	adcs	r2, r2
 8001248:	0883      	lsrs	r3, r0, #2
 800124a:	428b      	cmp	r3, r1
 800124c:	d301      	bcc.n	8001252 <__divsi3+0xea>
 800124e:	008b      	lsls	r3, r1, #2
 8001250:	1ac0      	subs	r0, r0, r3
 8001252:	4152      	adcs	r2, r2
 8001254:	0843      	lsrs	r3, r0, #1
 8001256:	428b      	cmp	r3, r1
 8001258:	d301      	bcc.n	800125e <__divsi3+0xf6>
 800125a:	004b      	lsls	r3, r1, #1
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	4152      	adcs	r2, r2
 8001260:	1a41      	subs	r1, r0, r1
 8001262:	d200      	bcs.n	8001266 <__divsi3+0xfe>
 8001264:	4601      	mov	r1, r0
 8001266:	4152      	adcs	r2, r2
 8001268:	4610      	mov	r0, r2
 800126a:	4770      	bx	lr
 800126c:	e05d      	b.n	800132a <__divsi3+0x1c2>
 800126e:	0fca      	lsrs	r2, r1, #31
 8001270:	d000      	beq.n	8001274 <__divsi3+0x10c>
 8001272:	4249      	negs	r1, r1
 8001274:	1003      	asrs	r3, r0, #32
 8001276:	d300      	bcc.n	800127a <__divsi3+0x112>
 8001278:	4240      	negs	r0, r0
 800127a:	4053      	eors	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	469c      	mov	ip, r3
 8001280:	0903      	lsrs	r3, r0, #4
 8001282:	428b      	cmp	r3, r1
 8001284:	d32d      	bcc.n	80012e2 <__divsi3+0x17a>
 8001286:	0a03      	lsrs	r3, r0, #8
 8001288:	428b      	cmp	r3, r1
 800128a:	d312      	bcc.n	80012b2 <__divsi3+0x14a>
 800128c:	22fc      	movs	r2, #252	@ 0xfc
 800128e:	0189      	lsls	r1, r1, #6
 8001290:	ba12      	rev	r2, r2
 8001292:	0a03      	lsrs	r3, r0, #8
 8001294:	428b      	cmp	r3, r1
 8001296:	d30c      	bcc.n	80012b2 <__divsi3+0x14a>
 8001298:	0189      	lsls	r1, r1, #6
 800129a:	1192      	asrs	r2, r2, #6
 800129c:	428b      	cmp	r3, r1
 800129e:	d308      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a0:	0189      	lsls	r1, r1, #6
 80012a2:	1192      	asrs	r2, r2, #6
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d304      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a8:	0189      	lsls	r1, r1, #6
 80012aa:	d03a      	beq.n	8001322 <__divsi3+0x1ba>
 80012ac:	1192      	asrs	r2, r2, #6
 80012ae:	e000      	b.n	80012b2 <__divsi3+0x14a>
 80012b0:	0989      	lsrs	r1, r1, #6
 80012b2:	09c3      	lsrs	r3, r0, #7
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d301      	bcc.n	80012bc <__divsi3+0x154>
 80012b8:	01cb      	lsls	r3, r1, #7
 80012ba:	1ac0      	subs	r0, r0, r3
 80012bc:	4152      	adcs	r2, r2
 80012be:	0983      	lsrs	r3, r0, #6
 80012c0:	428b      	cmp	r3, r1
 80012c2:	d301      	bcc.n	80012c8 <__divsi3+0x160>
 80012c4:	018b      	lsls	r3, r1, #6
 80012c6:	1ac0      	subs	r0, r0, r3
 80012c8:	4152      	adcs	r2, r2
 80012ca:	0943      	lsrs	r3, r0, #5
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d301      	bcc.n	80012d4 <__divsi3+0x16c>
 80012d0:	014b      	lsls	r3, r1, #5
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	4152      	adcs	r2, r2
 80012d6:	0903      	lsrs	r3, r0, #4
 80012d8:	428b      	cmp	r3, r1
 80012da:	d301      	bcc.n	80012e0 <__divsi3+0x178>
 80012dc:	010b      	lsls	r3, r1, #4
 80012de:	1ac0      	subs	r0, r0, r3
 80012e0:	4152      	adcs	r2, r2
 80012e2:	08c3      	lsrs	r3, r0, #3
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d301      	bcc.n	80012ec <__divsi3+0x184>
 80012e8:	00cb      	lsls	r3, r1, #3
 80012ea:	1ac0      	subs	r0, r0, r3
 80012ec:	4152      	adcs	r2, r2
 80012ee:	0883      	lsrs	r3, r0, #2
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d301      	bcc.n	80012f8 <__divsi3+0x190>
 80012f4:	008b      	lsls	r3, r1, #2
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	4152      	adcs	r2, r2
 80012fa:	d2d9      	bcs.n	80012b0 <__divsi3+0x148>
 80012fc:	0843      	lsrs	r3, r0, #1
 80012fe:	428b      	cmp	r3, r1
 8001300:	d301      	bcc.n	8001306 <__divsi3+0x19e>
 8001302:	004b      	lsls	r3, r1, #1
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	4152      	adcs	r2, r2
 8001308:	1a41      	subs	r1, r0, r1
 800130a:	d200      	bcs.n	800130e <__divsi3+0x1a6>
 800130c:	4601      	mov	r1, r0
 800130e:	4663      	mov	r3, ip
 8001310:	4152      	adcs	r2, r2
 8001312:	105b      	asrs	r3, r3, #1
 8001314:	4610      	mov	r0, r2
 8001316:	d301      	bcc.n	800131c <__divsi3+0x1b4>
 8001318:	4240      	negs	r0, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d500      	bpl.n	8001320 <__divsi3+0x1b8>
 800131e:	4249      	negs	r1, r1
 8001320:	4770      	bx	lr
 8001322:	4663      	mov	r3, ip
 8001324:	105b      	asrs	r3, r3, #1
 8001326:	d300      	bcc.n	800132a <__divsi3+0x1c2>
 8001328:	4240      	negs	r0, r0
 800132a:	b501      	push	{r0, lr}
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f805 	bl	800133c <__aeabi_idiv0>
 8001332:	bd02      	pop	{r1, pc}

08001334 <__aeabi_idivmod>:
 8001334:	2900      	cmp	r1, #0
 8001336:	d0f8      	beq.n	800132a <__divsi3+0x1c2>
 8001338:	e716      	b.n	8001168 <__divsi3>
 800133a:	4770      	bx	lr

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	46c0      	nop			@ (mov r8, r8)

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f000 f9c0 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f806 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 f89a 	bl	8001484 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001350:	f000 f84a 	bl	80013e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	e7fd      	b.n	8001354 <main+0x14>

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b093      	sub	sp, #76	@ 0x4c
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	2414      	movs	r4, #20
 8001360:	193b      	adds	r3, r7, r4
 8001362:	0018      	movs	r0, r3
 8001364:	2334      	movs	r3, #52	@ 0x34
 8001366:	001a      	movs	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f001 ffeb 	bl	8003344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	0018      	movs	r0, r3
 8001372:	2310      	movs	r3, #16
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f001 ffe4 	bl	8003344 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	0018      	movs	r0, r3
 8001382:	f000 fc5d 	bl	8001c40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	0052      	lsls	r2, r2, #1
 8001392:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2240      	movs	r2, #64	@ 0x40
 800139e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 fc95 	bl	8001cd8 <HAL_RCC_OscConfig>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013b2:	f000 f8b7 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2100      	movs	r1, #0
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 ff90 	bl	80022f8 <HAL_RCC_ClockConfig>
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013dc:	f000 f8a2 	bl	8001524 <Error_Handler>
  }
}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b013      	add	sp, #76	@ 0x4c
 80013e6:	bd90      	pop	{r4, r7, pc}

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <MX_USART2_UART_Init+0x94>)
 80013ee:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <MX_USART2_UART_Init+0x98>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <MX_USART2_UART_Init+0x94>)
 80013f4:	22e1      	movs	r2, #225	@ 0xe1
 80013f6:	0252      	lsls	r2, r2, #9
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <MX_USART2_UART_Init+0x94>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	0552      	lsls	r2, r2, #21
 8001400:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_USART2_UART_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001410:	220c      	movs	r2, #12
 8001412:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <MX_USART2_UART_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_USART2_UART_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001434:	0018      	movs	r0, r3
 8001436:	f001 fa3d 	bl	80028b4 <HAL_UART_Init>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800143e:	f000 f871 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001444:	2100      	movs	r1, #0
 8001446:	0018      	movs	r0, r3
 8001448:	f001 fe9c 	bl	8003184 <HAL_UARTEx_SetTxFifoThreshold>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001450:	f000 f868 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001456:	2100      	movs	r1, #0
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fed3 	bl	8003204 <HAL_UARTEx_SetRxFifoThreshold>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001462:	f000 f85f 	bl	8001524 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <MX_USART2_UART_Init+0x94>)
 8001468:	0018      	movs	r0, r3
 800146a:	f001 fe51 	bl	8003110 <HAL_UARTEx_DisableFifoMode>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001472:	f000 f857 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001a8 	.word	0x200001a8
 8001480:	40004400 	.word	0x40004400

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	@ 0x24
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	240c      	movs	r4, #12
 800148c:	193b      	adds	r3, r7, r4
 800148e:	0018      	movs	r0, r3
 8001490:	2314      	movs	r3, #20
 8001492:	001a      	movs	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	f001 ff55 	bl	8003344 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_GPIO_Init+0x9c>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014a0:	2104      	movs	r1, #4
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014aa:	2204      	movs	r2, #4
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014b8:	2120      	movs	r1, #32
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c2:	2220      	movs	r2, #32
 80014c4:	4013      	ands	r3, r2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_GPIO_Init+0x9c>)
 80014d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014e2:	23a0      	movs	r3, #160	@ 0xa0
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fb8a 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80014f0:	0021      	movs	r1, r4
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2220      	movs	r2, #32
 80014f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2201      	movs	r2, #1
 80014fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2202      	movs	r2, #2
 8001508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800150a:	187a      	adds	r2, r7, r1
 800150c:	23a0      	movs	r3, #160	@ 0xa0
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fa12 	bl	800193c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b009      	add	sp, #36	@ 0x24
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_MspInit+0x44>)
 8001538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <HAL_MspInit+0x44>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_MspInit+0x44>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_MspInit+0x44>)
 8001550:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_MspInit+0x44>)
 8001554:	2180      	movs	r1, #128	@ 0x80
 8001556:	0549      	lsls	r1, r1, #21
 8001558:	430a      	orrs	r2, r1
 800155a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_MspInit+0x44>)
 800155e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	055b      	lsls	r3, r3, #21
 8001564:	4013      	ands	r3, r2
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b091      	sub	sp, #68	@ 0x44
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	232c      	movs	r3, #44	@ 0x2c
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	0018      	movs	r0, r3
 8001586:	2314      	movs	r3, #20
 8001588:	001a      	movs	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	f001 feda 	bl	8003344 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	2410      	movs	r4, #16
 8001592:	193b      	adds	r3, r7, r4
 8001594:	0018      	movs	r0, r3
 8001596:	231c      	movs	r3, #28
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	f001 fed2 	bl	8003344 <memset>
  if(huart->Instance==USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <HAL_UART_MspInit+0xb8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13e      	bne.n	8001628 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	0018      	movs	r0, r3
 80015ba:	f001 f847 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015c2:	f7ff ffaf 	bl	8001524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015cc:	2180      	movs	r1, #128	@ 0x80
 80015ce:	0289      	lsls	r1, r1, #10
 80015d0:	430a      	orrs	r2, r1
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015d4:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_MspInit+0xbc>)
 80015f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fa:	212c      	movs	r1, #44	@ 0x2c
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2202      	movs	r2, #2
 8001606:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2201      	movs	r2, #1
 800160c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2201      	movs	r2, #1
 8001618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	187a      	adds	r2, r7, r1
 800161c:	23a0      	movs	r3, #160	@ 0xa0
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	0011      	movs	r1, r2
 8001622:	0018      	movs	r0, r3
 8001624:	f000 f98a 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b011      	add	sp, #68	@ 0x44
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	40004400 	.word	0x40004400
 8001634:	40021000 	.word	0x40021000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	46c0      	nop			@ (mov r8, r8)
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 f89c 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	46c0      	nop			@ (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001674:	480d      	ldr	r0, [pc, #52]	@ (80016ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001676:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001678:	f7ff fff7 	bl	800166a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <LoopForever+0xe>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	@ (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016a2:	f001 fe57 	bl	8003354 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016a6:	f7ff fe4b 	bl	8001340 <main>

080016aa <LoopForever>:

LoopForever:
  b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   r0, =_estack
 80016ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016b0:	20000180 	.word	0x20000180
  ldr r1, =_edata
 80016b4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80016b8:	08003444 	.word	0x08003444
  ldr r2, =_sbss
 80016bc:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80016c0:	20000240 	.word	0x20000240

080016c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_Init+0x3c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_Init+0x3c>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0049      	lsls	r1, r1, #1
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f810 	bl	8001708 <HAL_InitTick>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e001      	b.n	80016f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff ff1c 	bl	8001530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	781b      	ldrb	r3, [r3, #0]
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001710:	230f      	movs	r3, #15
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_InitTick+0x88>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02b      	beq.n	8001778 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_InitTick+0x8c>)
 8001722:	681c      	ldr	r4, [r3, #0]
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_InitTick+0x88>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	0019      	movs	r1, r3
 800172a:	23fa      	movs	r3, #250	@ 0xfa
 800172c:	0098      	lsls	r0, r3, #2
 800172e:	f7ff fc91 	bl	8001054 <__udivsi3>
 8001732:	0003      	movs	r3, r0
 8001734:	0019      	movs	r1, r3
 8001736:	0020      	movs	r0, r4
 8001738:	f7ff fc8c 	bl	8001054 <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f8ef 	bl	8001922 <HAL_SYSTICK_Config>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d112      	bne.n	800176e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d80a      	bhi.n	8001764 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	2301      	movs	r3, #1
 8001752:	425b      	negs	r3, r3
 8001754:	2200      	movs	r2, #0
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f8ce 	bl	80018f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_InitTick+0x90>)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e00d      	b.n	8001780 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001764:	230f      	movs	r3, #15
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e008      	b.n	8001780 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800176e:	230f      	movs	r3, #15
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e003      	b.n	8001780 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001778:	230f      	movs	r3, #15
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	781b      	ldrb	r3, [r3, #0]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b005      	add	sp, #20
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	20000188 	.word	0x20000188
 8001794:	20000180 	.word	0x20000180
 8001798:	20000184 	.word	0x20000184

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	001a      	movs	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	18d2      	adds	r2, r2, r3
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_IncTick+0x20>)
 80017ae:	601a      	str	r2, [r3, #0]
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	20000188 	.word	0x20000188
 80017bc:	2000023c 	.word	0x2000023c

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	@ (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	2000023c 	.word	0x2000023c

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0002      	movs	r2, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80017e8:	d828      	bhi.n	800183c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ea:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <__NVIC_SetPriority+0xd4>)
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	33c0      	adds	r3, #192	@ 0xc0
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	589b      	ldr	r3, [r3, r2]
 80017fa:	1dfa      	adds	r2, r7, #7
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	0011      	movs	r1, r2
 8001800:	2203      	movs	r2, #3
 8001802:	400a      	ands	r2, r1
 8001804:	00d2      	lsls	r2, r2, #3
 8001806:	21ff      	movs	r1, #255	@ 0xff
 8001808:	4091      	lsls	r1, r2
 800180a:	000a      	movs	r2, r1
 800180c:	43d2      	mvns	r2, r2
 800180e:	401a      	ands	r2, r3
 8001810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	22ff      	movs	r2, #255	@ 0xff
 8001818:	401a      	ands	r2, r3
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	0018      	movs	r0, r3
 8001820:	2303      	movs	r3, #3
 8001822:	4003      	ands	r3, r0
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001828:	481f      	ldr	r0, [pc, #124]	@ (80018a8 <__NVIC_SetPriority+0xd4>)
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	430a      	orrs	r2, r1
 8001834:	33c0      	adds	r3, #192	@ 0xc0
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800183a:	e031      	b.n	80018a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <__NVIC_SetPriority+0xd8>)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	0019      	movs	r1, r3
 8001844:	230f      	movs	r3, #15
 8001846:	400b      	ands	r3, r1
 8001848:	3b08      	subs	r3, #8
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3306      	adds	r3, #6
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	18d3      	adds	r3, r2, r3
 8001852:	3304      	adds	r3, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1dfa      	adds	r2, r7, #7
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0011      	movs	r1, r2
 800185c:	2203      	movs	r2, #3
 800185e:	400a      	ands	r2, r1
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	21ff      	movs	r1, #255	@ 0xff
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	22ff      	movs	r2, #255	@ 0xff
 8001874:	401a      	ands	r2, r3
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	2303      	movs	r3, #3
 800187e:	4003      	ands	r3, r0
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <__NVIC_SetPriority+0xd8>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	001c      	movs	r4, r3
 800188c:	230f      	movs	r3, #15
 800188e:	4023      	ands	r3, r4
 8001890:	3b08      	subs	r3, #8
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	430a      	orrs	r2, r1
 8001896:	3306      	adds	r3, #6
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	18c3      	adds	r3, r0, r3
 800189c:	3304      	adds	r3, #4
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	46c0      	nop			@ (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b003      	add	sp, #12
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	045b      	lsls	r3, r3, #17
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d301      	bcc.n	80018c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c4:	2301      	movs	r3, #1
 80018c6:	e010      	b.n	80018ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <SysTick_Config+0x44>)
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	3a01      	subs	r2, #1
 80018ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d0:	2301      	movs	r3, #1
 80018d2:	425b      	negs	r3, r3
 80018d4:	2103      	movs	r1, #3
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff ff7c 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <SysTick_Config+0x44>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <SysTick_Config+0x44>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	210f      	movs	r1, #15
 8001904:	187b      	adds	r3, r7, r1
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	187b      	adds	r3, r7, r1
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b004      	add	sp, #16
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ffbf 	bl	80018b0 <SysTick_Config>
 8001932:	0003      	movs	r3, r0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e147      	b.n	8001bdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4091      	lsls	r1, r2
 8001956:	000a      	movs	r2, r1
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d100      	bne.n	8001964 <HAL_GPIO_Init+0x28>
 8001962:	e138      	b.n	8001bd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d005      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	4013      	ands	r3, r2
 8001978:	2b02      	cmp	r3, #2
 800197a:	d130      	bne.n	80019de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b2:	2201      	movs	r2, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	2201      	movs	r2, #1
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2203      	movs	r2, #3
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d017      	beq.n	8001a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	43da      	mvns	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d123      	bne.n	8001a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	58d3      	ldr	r3, [r2, r3]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2207      	movs	r2, #7
 8001a38:	4013      	ands	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	43da      	mvns	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2107      	movs	r1, #7
 8001a52:	400b      	ands	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	409a      	lsls	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	6939      	ldr	r1, [r7, #16]
 8001a6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	409a      	lsls	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d100      	bne.n	8001ab0 <HAL_GPIO_Init+0x174>
 8001aae:	e092      	b.n	8001bd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ab0:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3318      	adds	r3, #24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	589b      	ldr	r3, [r3, r2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	0013      	movs	r3, r2
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	23a0      	movs	r3, #160	@ 0xa0
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1ca>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a45      	ldr	r2, [pc, #276]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1c6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1c2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a43      	ldr	r2, [pc, #268]	@ (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1be>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x1cc>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x1cc>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x1cc>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x1cc>
 8001b06:	2300      	movs	r3, #0
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	00d2      	lsls	r2, r2, #3
 8001b10:	4093      	lsls	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b18:	4936      	ldr	r1, [pc, #216]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3318      	adds	r3, #24
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	035b      	lsls	r3, r3, #13
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b7c:	2384      	movs	r3, #132	@ 0x84
 8001b7e:	58d3      	ldr	r3, [r2, r3]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba0:	4914      	ldr	r1, [pc, #80]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	2284      	movs	r2, #132	@ 0x84
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ba8:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	58d3      	ldr	r3, [r2, r3]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bce:	4909      	ldr	r1, [pc, #36]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	d000      	beq.n	8001bea <HAL_GPIO_Init+0x2ae>
 8001be8:	e6b0      	b.n	800194c <HAL_GPIO_Init+0x10>
  }
}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000800 	.word	0x50000800
 8001c00:	50000c00 	.word	0x50000c00

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	0008      	movs	r0, r1
 8001c0e:	0011      	movs	r1, r2
 8001c10:	1cbb      	adds	r3, r7, #2
 8001c12:	1c02      	adds	r2, r0, #0
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	1c7b      	adds	r3, r7, #1
 8001c18:	1c0a      	adds	r2, r1, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1c:	1c7b      	adds	r3, r7, #1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2e:	1cbb      	adds	r3, r7, #2
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d11f      	bne.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	0013      	movs	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	189b      	adds	r3, r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4912      	ldr	r1, [pc, #72]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff f9ee 	bl	8001054 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7e:	e008      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e001      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e009      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d0ed      	beq.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	fffff9ff 	.word	0xfffff9ff
 8001cb8:	20000180 	.word	0x20000180
 8001cbc:	000f4240 	.word	0x000f4240

08001cc0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	23e0      	movs	r3, #224	@ 0xe0
 8001cca:	01db      	lsls	r3, r3, #7
 8001ccc:	4013      	ands	r3, r2
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e2f3      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x1e>
 8001cf4:	e07c      	b.n	8001df0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4bc3      	ldr	r3, [pc, #780]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	@ 0x38
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4bc0      	ldr	r3, [pc, #768]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3e>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d002      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4bb9      	ldr	r3, [pc, #740]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	029b      	lsls	r3, r3, #10
 8001d24:	4013      	ands	r3, r2
 8001d26:	d062      	beq.n	8001dee <HAL_RCC_OscConfig+0x116>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15e      	bne.n	8001dee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e2ce      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x78>
 8001d40:	4bb0      	ldr	r3, [pc, #704]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4baf      	ldr	r3, [pc, #700]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	2180      	movs	r1, #128	@ 0x80
 8001d48:	0249      	lsls	r1, r1, #9
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e020      	b.n	8001d92 <HAL_RCC_OscConfig+0xba>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	23a0      	movs	r3, #160	@ 0xa0
 8001d56:	02db      	lsls	r3, r3, #11
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d10e      	bne.n	8001d7a <HAL_RCC_OscConfig+0xa2>
 8001d5c:	4ba9      	ldr	r3, [pc, #676]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4ba8      	ldr	r3, [pc, #672]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	02c9      	lsls	r1, r1, #11
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	4ba6      	ldr	r3, [pc, #664]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4ba5      	ldr	r3, [pc, #660]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0249      	lsls	r1, r1, #9
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0xba>
 8001d7a:	4ba2      	ldr	r3, [pc, #648]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4ba1      	ldr	r3, [pc, #644]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	49a1      	ldr	r1, [pc, #644]	@ (8002008 <HAL_RCC_OscConfig+0x330>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	4b9f      	ldr	r3, [pc, #636]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	499f      	ldr	r1, [pc, #636]	@ (800200c <HAL_RCC_OscConfig+0x334>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fd11 	bl	80017c0 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fd0c 	bl	80017c0 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e28d      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	4b93      	ldr	r3, [pc, #588]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xcc>
 8001dc2:	e015      	b.n	8001df0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fcfc 	bl	80017c0 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dce:	f7ff fcf7 	bl	80017c0 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	@ 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e278      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de0:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0xf6>
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_RCC_OscConfig+0x124>
 8001dfa:	e099      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfc:	4b81      	ldr	r3, [pc, #516]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2238      	movs	r2, #56	@ 0x38
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x144>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d002      	beq.n	8001e22 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d135      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e22:	4b78      	ldr	r3, [pc, #480]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x162>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e24b      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b72      	ldr	r3, [pc, #456]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a74      	ldr	r2, [pc, #464]	@ (8002010 <HAL_RCC_OscConfig+0x338>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	021a      	lsls	r2, r3, #8
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e56:	4b6b      	ldr	r3, [pc, #428]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002014 <HAL_RCC_OscConfig+0x33c>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	4b67      	ldr	r3, [pc, #412]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e6a:	4b66      	ldr	r3, [pc, #408]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0adb      	lsrs	r3, r3, #11
 8001e70:	2207      	movs	r2, #7
 8001e72:	4013      	ands	r3, r2
 8001e74:	4a68      	ldr	r2, [pc, #416]	@ (8002018 <HAL_RCC_OscConfig+0x340>)
 8001e76:	40da      	lsrs	r2, r3
 8001e78:	4b68      	ldr	r3, [pc, #416]	@ (800201c <HAL_RCC_OscConfig+0x344>)
 8001e7a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e7c:	4b68      	ldr	r3, [pc, #416]	@ (8002020 <HAL_RCC_OscConfig+0x348>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fc41 	bl	8001708 <HAL_InitTick>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d051      	beq.n	8001f2e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e221      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d030      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e96:	4b5b      	ldr	r3, [pc, #364]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002014 <HAL_RCC_OscConfig+0x33c>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001eaa:	4b56      	ldr	r3, [pc, #344]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b55      	ldr	r3, [pc, #340]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	0049      	lsls	r1, r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc82 	bl	80017c0 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fc7d 	bl	80017c0 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1fe      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4013      	ands	r3, r2
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b48      	ldr	r3, [pc, #288]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_RCC_OscConfig+0x338>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	021a      	lsls	r2, r3, #8
 8001ef0:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ef8:	4b42      	ldr	r3, [pc, #264]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	4949      	ldr	r1, [pc, #292]	@ (8002024 <HAL_RCC_OscConfig+0x34c>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc5c 	bl	80017c0 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fc57 	bl	80017c0 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1d8      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f20:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x236>
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2208      	movs	r2, #8
 8001f36:	4013      	ands	r3, r2
 8001f38:	d047      	beq.n	8001fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f3a:	4b32      	ldr	r3, [pc, #200]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2238      	movs	r2, #56	@ 0x38
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d10a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d03c      	beq.n	8001fca <HAL_RCC_OscConfig+0x2f2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d138      	bne.n	8001fca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e1ba      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d019      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f68:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc26 	bl	80017c0 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc21 	bl	80017c0 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1a2      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d0f1      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2a2>
 8001f96:	e018      	b.n	8001fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f98:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fc0c 	bl	80017c0 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff fc07 	bl	80017c0 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e188      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d1f1      	bne.n	8001fae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2fe>
 8001fd4:	e0c6      	b.n	8002164 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2238      	movs	r2, #56	@ 0x38
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d11e      	bne.n	8002028 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	2202      	movs	r2, #2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x31e>
 8001ff4:	e0b6      	b.n	8002164 <HAL_RCC_OscConfig+0x48c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d000      	beq.n	8002000 <HAL_RCC_OscConfig+0x328>
 8001ffe:	e0b1      	b.n	8002164 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e166      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
 8002004:	40021000 	.word	0x40021000
 8002008:	fffeffff 	.word	0xfffeffff
 800200c:	fffbffff 	.word	0xfffbffff
 8002010:	ffff80ff 	.word	0xffff80ff
 8002014:	ffffc7ff 	.word	0xffffc7ff
 8002018:	00f42400 	.word	0x00f42400
 800201c:	20000180 	.word	0x20000180
 8002020:	20000184 	.word	0x20000184
 8002024:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002028:	4bac      	ldr	r3, [pc, #688]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800202a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x360>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x362>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d011      	beq.n	8002062 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4ba7      	ldr	r3, [pc, #668]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002042:	4ba6      	ldr	r3, [pc, #664]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	430a      	orrs	r2, r1
 800204a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800204c:	4ba3      	ldr	r3, [pc, #652]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800204e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	4b9f      	ldr	r3, [pc, #636]	@ (80022e0 <HAL_RCC_OscConfig+0x608>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d11a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206e:	4b9c      	ldr	r3, [pc, #624]	@ (80022e0 <HAL_RCC_OscConfig+0x608>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b9b      	ldr	r3, [pc, #620]	@ (80022e0 <HAL_RCC_OscConfig+0x608>)
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	0049      	lsls	r1, r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800207c:	f7ff fba0 	bl	80017c0 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7ff fb9b 	bl	80017c0 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e11c      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002098:	4b91      	ldr	r3, [pc, #580]	@ (80022e0 <HAL_RCC_OscConfig+0x608>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x3e2>
 80020ac:	4b8b      	ldr	r3, [pc, #556]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020b0:	4b8a      	ldr	r3, [pc, #552]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x41c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x404>
 80020c2:	4b86      	ldr	r3, [pc, #536]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020c6:	4b85      	ldr	r3, [pc, #532]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020c8:	2104      	movs	r1, #4
 80020ca:	430a      	orrs	r2, r1
 80020cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ce:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x41c>
 80020dc:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020e0:	4b7e      	ldr	r3, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020e8:	4b7c      	ldr	r3, [pc, #496]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ec:	4b7b      	ldr	r3, [pc, #492]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d014      	beq.n	8002126 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb60 	bl	80017c0 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fb5b 	bl	80017c0 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4a74      	ldr	r2, [pc, #464]	@ (80022e4 <HAL_RCC_OscConfig+0x60c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0db      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4b70      	ldr	r3, [pc, #448]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x42e>
 8002124:	e013      	b.n	800214e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff fb4b 	bl	80017c0 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212e:	e009      	b.n	8002144 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7ff fb46 	bl	80017c0 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4a6a      	ldr	r2, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0x60c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0c6      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	4b65      	ldr	r3, [pc, #404]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b60      	ldr	r3, [pc, #384]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800215a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215c:	4b5f      	ldr	r3, [pc, #380]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800215e:	4962      	ldr	r1, [pc, #392]	@ (80022e8 <HAL_RCC_OscConfig+0x610>)
 8002160:	400a      	ands	r2, r1
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d100      	bne.n	800216e <HAL_RCC_OscConfig+0x496>
 800216c:	e0b0      	b.n	80022d0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216e:	4b5b      	ldr	r3, [pc, #364]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2238      	movs	r2, #56	@ 0x38
 8002174:	4013      	ands	r3, r2
 8002176:	2b10      	cmp	r3, #16
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x4a4>
 800217a:	e078      	b.n	800226e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d153      	bne.n	800222c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b55      	ldr	r3, [pc, #340]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b54      	ldr	r3, [pc, #336]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800218a:	4958      	ldr	r1, [pc, #352]	@ (80022ec <HAL_RCC_OscConfig+0x614>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fb16 	bl	80017c0 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff fb11 	bl	80017c0 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e092      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	049b      	lsls	r3, r3, #18
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b8:	4b48      	ldr	r3, [pc, #288]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	@ (80022f0 <HAL_RCC_OscConfig+0x618>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	431a      	orrs	r2, r3
 80021e0:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e6:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	0449      	lsls	r1, r1, #17
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021f4:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 80021fa:	2180      	movs	r1, #128	@ 0x80
 80021fc:	0549      	lsls	r1, r1, #21
 80021fe:	430a      	orrs	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff fadd 	bl	80017c0 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fad8 	bl	80017c0 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e059      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	@ 0x80
 8002224:	049b      	lsls	r3, r3, #18
 8002226:	4013      	ands	r3, r2
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x534>
 800222a:	e051      	b.n	80022d0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b2b      	ldr	r3, [pc, #172]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b2a      	ldr	r3, [pc, #168]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002232:	492e      	ldr	r1, [pc, #184]	@ (80022ec <HAL_RCC_OscConfig+0x614>)
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fac2 	bl	80017c0 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff fabd 	bl	80017c0 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e03e      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002260:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 8002266:	4923      	ldr	r1, [pc, #140]	@ (80022f4 <HAL_RCC_OscConfig+0x61c>)
 8002268:	400a      	ands	r2, r1
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e030      	b.n	80022d0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02b      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_RCC_OscConfig+0x604>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2203      	movs	r2, #3
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	429a      	cmp	r2, r3
 800228c:	d11e      	bne.n	80022cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2270      	movs	r2, #112	@ 0x70
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d117      	bne.n	80022cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	23fe      	movs	r3, #254	@ 0xfe
 80022a0:	01db      	lsls	r3, r3, #7
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d10e      	bne.n	80022cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	23f8      	movs	r3, #248	@ 0xf8
 80022b2:	039b      	lsls	r3, r3, #14
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	0f5b      	lsrs	r3, r3, #29
 80022c2:	075a      	lsls	r2, r3, #29
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b008      	add	sp, #32
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	efffffff 	.word	0xefffffff
 80022ec:	feffffff 	.word	0xfeffffff
 80022f0:	1fc1808c 	.word	0x1fc1808c
 80022f4:	effefffc 	.word	0xeffefffc

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e9      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2207      	movs	r2, #7
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d91e      	bls.n	8002358 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2207      	movs	r2, #7
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	4b70      	ldr	r3, [pc, #448]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800232c:	f7ff fa48 	bl	80017c0 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002334:	e009      	b.n	800234a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f7ff fa43 	bl	80017c0 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a6a      	ldr	r2, [pc, #424]	@ (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0ca      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800234a:	4b67      	ldr	r3, [pc, #412]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d1ee      	bne.n	8002336 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d015      	beq.n	800238e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2204      	movs	r2, #4
 8002368:	4013      	ands	r3, r2
 800236a:	d006      	beq.n	800237a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800236c:	4b60      	ldr	r3, [pc, #384]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002372:	21e0      	movs	r1, #224	@ 0xe0
 8002374:	01c9      	lsls	r1, r1, #7
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4a5d      	ldr	r2, [pc, #372]	@ (80024f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002380:	4013      	ands	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d057      	beq.n	8002448 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	029b      	lsls	r3, r3, #10
 80023a8:	4013      	ands	r3, r2
 80023aa:	d12b      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e097      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b8:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	049b      	lsls	r3, r3, #18
 80023c0:	4013      	ands	r3, r2
 80023c2:	d11f      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e08b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	d113      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e07f      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e8:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e074      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	4b3e      	ldr	r3, [pc, #248]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e06d      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2207      	movs	r2, #7
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7ff f9d2 	bl	80017c0 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e009      	b.n	8002436 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7ff f9cd 	bl	80017c0 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a2f      	ldr	r2, [pc, #188]	@ (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e054      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2238      	movs	r2, #56	@ 0x38
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d21e      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2207      	movs	r2, #7
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002468:	f7ff f9aa 	bl	80017c0 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002470:	e009      	b.n	8002486 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002472:	f7ff f9a5 	bl	80017c0 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e02c      	b.n	80024e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <HAL_RCC_ClockConfig+0x200>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024b2:	f000 f829 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024b6:	0001      	movs	r1, r0
 80024b8:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	220f      	movs	r2, #15
 80024c0:	401a      	ands	r2, r3
 80024c2:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <HAL_RCC_ClockConfig+0x204>)
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	58d3      	ldr	r3, [r2, r3]
 80024c8:	221f      	movs	r2, #31
 80024ca:	4013      	ands	r3, r2
 80024cc:	000a      	movs	r2, r1
 80024ce:	40da      	lsrs	r2, r3
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x208>)
 80024d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x20c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff f915 	bl	8001708 <HAL_InitTick>
 80024de:	0003      	movs	r3, r0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	00001388 	.word	0x00001388
 80024f0:	40021000 	.word	0x40021000
 80024f4:	fffff0ff 	.word	0xfffff0ff
 80024f8:	ffff8fff 	.word	0xffff8fff
 80024fc:	080033b4 	.word	0x080033b4
 8002500:	20000180 	.word	0x20000180
 8002504:	20000184 	.word	0x20000184

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2238      	movs	r2, #56	@ 0x38
 8002514:	4013      	ands	r3, r2
 8002516:	d10f      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0adb      	lsrs	r3, r3, #11
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	4835      	ldr	r0, [pc, #212]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xfc>)
 800252e:	f7fe fd91 	bl	8001054 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e05d      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2238      	movs	r2, #56	@ 0x38
 800253e:	4013      	ands	r3, r2
 8002540:	2b08      	cmp	r3, #8
 8002542:	d102      	bne.n	800254a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x100>)
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e054      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254a:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2238      	movs	r2, #56	@ 0x38
 8002550:	4013      	ands	r3, r2
 8002552:	2b10      	cmp	r3, #16
 8002554:	d138      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002556:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2203      	movs	r2, #3
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4824      	ldr	r0, [pc, #144]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x100>)
 8002578:	f7fe fd6c 	bl	8001054 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	0019      	movs	r1, r3
 8002580:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	227f      	movs	r2, #127	@ 0x7f
 8002588:	4013      	ands	r3, r2
 800258a:	434b      	muls	r3, r1
 800258c:	617b      	str	r3, [r7, #20]
        break;
 800258e:	e00d      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	481c      	ldr	r0, [pc, #112]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002594:	f7fe fd5e 	bl	8001054 <__udivsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	0019      	movs	r1, r3
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	227f      	movs	r2, #127	@ 0x7f
 80025a4:	4013      	ands	r3, r2
 80025a6:	434b      	muls	r3, r1
 80025a8:	617b      	str	r3, [r7, #20]
        break;
 80025aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0f5b      	lsrs	r3, r3, #29
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	3301      	adds	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7fe fd49 	bl	8001054 <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e015      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2238      	movs	r2, #56	@ 0x38
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d103      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2238      	movs	r2, #56	@ 0x38
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b18      	cmp	r3, #24
 80025e6:	d103      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025e8:	23fa      	movs	r3, #250	@ 0xfa
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e001      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025f4:	693b      	ldr	r3, [r7, #16]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b006      	add	sp, #24
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b02      	ldr	r3, [pc, #8]	@ (800261c <HAL_RCC_GetHCLKFreq+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	20000180 	.word	0x20000180

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002624:	f7ff fff2 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002628:	0004      	movs	r4, r0
 800262a:	f7ff fb49 	bl	8001cc0 <LL_RCC_GetAPB1Prescaler>
 800262e:	0003      	movs	r3, r0
 8002630:	0b1a      	lsrs	r2, r3, #12
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	58d3      	ldr	r3, [r2, r3]
 8002638:	221f      	movs	r2, #31
 800263a:	4013      	ands	r3, r2
 800263c:	40dc      	lsrs	r4, r3
 800263e:	0023      	movs	r3, r4
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bdb0      	pop	{r4, r5, r7, pc}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	080033f4 	.word	0x080033f4

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002654:	2313      	movs	r3, #19
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800265c:	2312      	movs	r3, #18
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d100      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002670:	e0a3      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2011      	movs	r0, #17
 8002674:	183b      	adds	r3, r7, r0
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b86      	ldr	r3, [pc, #536]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	055b      	lsls	r3, r3, #21
 8002682:	4013      	ands	r3, r2
 8002684:	d110      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800268a:	4b82      	ldr	r3, [pc, #520]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0549      	lsls	r1, r1, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002694:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	183b      	adds	r3, r7, r0
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	0049      	lsls	r1, r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b6:	f7ff f883 	bl	80017c0 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026be:	e00b      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c0:	f7ff f87e 	bl	80017c0 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d904      	bls.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026ce:	2313      	movs	r3, #19
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2203      	movs	r2, #3
 80026d4:	701a      	strb	r2, [r3, #0]
        break;
 80026d6:	e005      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d0ed      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026e4:	2313      	movs	r3, #19
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d154      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ee:	4b69      	ldr	r3, [pc, #420]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026f2:	23c0      	movs	r3, #192	@ 0xc0
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d019      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	429a      	cmp	r2, r3
 8002708:	d014      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800270a:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	4a63      	ldr	r2, [pc, #396]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002710:	4013      	ands	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002714:	4b5f      	ldr	r3, [pc, #380]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002716:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002718:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800271a:	2180      	movs	r1, #128	@ 0x80
 800271c:	0249      	lsls	r1, r1, #9
 800271e:	430a      	orrs	r2, r1
 8002720:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002722:	4b5c      	ldr	r3, [pc, #368]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002724:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002726:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002728:	495d      	ldr	r1, [pc, #372]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800272a:	400a      	ands	r2, r1
 800272c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800272e:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2201      	movs	r2, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d016      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff f840 	bl	80017c0 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002744:	e00c      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff f83b 	bl	80017c0 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a54      	ldr	r2, [pc, #336]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d904      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002756:	2313      	movs	r3, #19
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2203      	movs	r2, #3
 800275c:	701a      	strb	r2, [r3, #0]
            break;
 800275e:	e004      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002760:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d0ed      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800276a:	2313      	movs	r3, #19
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002774:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	4a48      	ldr	r2, [pc, #288]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	4b44      	ldr	r3, [pc, #272]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002784:	430a      	orrs	r2, r1
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002788:	e00c      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800278a:	2312      	movs	r3, #18
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2213      	movs	r2, #19
 8002790:	18ba      	adds	r2, r7, r2
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e005      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	2312      	movs	r3, #18
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2213      	movs	r2, #19
 800279e:	18ba      	adds	r2, r7, r2
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a4:	2311      	movs	r3, #17
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b2:	4b38      	ldr	r3, [pc, #224]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b4:	493c      	ldr	r1, [pc, #240]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2203      	movs	r2, #3
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	220c      	movs	r2, #12
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002810:	430a      	orrs	r2, r1
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	01db      	lsls	r3, r3, #7
 800281c:	4013      	ands	r3, r2
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002820:	4b1c      	ldr	r3, [pc, #112]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	0899      	lsrs	r1, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800282e:	430a      	orrs	r2, r1
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	05db      	lsls	r3, r3, #23
 800283a:	429a      	cmp	r2, r3
 800283c:	d106      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0249      	lsls	r1, r1, #9
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4013      	ands	r3, r2
 8002856:	d016      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002858:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002868:	430a      	orrs	r2, r1
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	01db      	lsls	r3, r3, #7
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800287e:	2180      	movs	r1, #128	@ 0x80
 8002880:	0249      	lsls	r1, r1, #9
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002886:	2312      	movs	r3, #18
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b006      	add	sp, #24
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	fffffcff 	.word	0xfffffcff
 80028a0:	fffeffff 	.word	0xfffeffff
 80028a4:	00001388 	.word	0x00001388
 80028a8:	efffffff 	.word	0xefffffff
 80028ac:	ffffcfff 	.word	0xffffcfff
 80028b0:	ffff3fff 	.word	0xffff3fff

080028b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e046      	b.n	8002954 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2288      	movs	r2, #136	@ 0x88
 80028ca:	589b      	ldr	r3, [r3, r2]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2284      	movs	r2, #132	@ 0x84
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fe fe4c 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2288      	movs	r2, #136	@ 0x88
 80028e4:	2124      	movs	r1, #36	@ 0x24
 80028e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f9d0 	bl	8002ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f828 	bl	8002960 <UART_SetConfig>
 8002910:	0003      	movs	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e01c      	b.n	8002954 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	490d      	ldr	r1, [pc, #52]	@ (800295c <HAL_UART_Init+0xa8>)
 8002926:	400a      	ands	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	212a      	movs	r1, #42	@ 0x2a
 8002936:	438a      	bics	r2, r1
 8002938:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fa5f 	bl	8002e10 <UART_CheckIdleState>
 8002952:	0003      	movs	r3, r0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	ffffb7ff 	.word	0xffffb7ff

08002960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002968:	231a      	movs	r3, #26
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4313      	orrs	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4abc      	ldr	r2, [pc, #752]	@ (8002c80 <UART_SetConfig+0x320>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4ab7      	ldr	r2, [pc, #732]	@ (8002c84 <UART_SetConfig+0x324>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4aae      	ldr	r2, [pc, #696]	@ (8002c88 <UART_SetConfig+0x328>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	220f      	movs	r2, #15
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4aa4      	ldr	r2, [pc, #656]	@ (8002c8c <UART_SetConfig+0x32c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d127      	bne.n	8002a4e <UART_SetConfig+0xee>
 80029fe:	4ba4      	ldr	r3, [pc, #656]	@ (8002c90 <UART_SetConfig+0x330>)
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	2203      	movs	r2, #3
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d017      	beq.n	8002a3a <UART_SetConfig+0xda>
 8002a0a:	d81b      	bhi.n	8002a44 <UART_SetConfig+0xe4>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d00a      	beq.n	8002a26 <UART_SetConfig+0xc6>
 8002a10:	d818      	bhi.n	8002a44 <UART_SetConfig+0xe4>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <UART_SetConfig+0xbc>
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d00a      	beq.n	8002a30 <UART_SetConfig+0xd0>
 8002a1a:	e013      	b.n	8002a44 <UART_SetConfig+0xe4>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e058      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a26:	231b      	movs	r3, #27
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e053      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a30:	231b      	movs	r3, #27
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e04e      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2208      	movs	r2, #8
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e049      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a44:	231b      	movs	r3, #27
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2210      	movs	r2, #16
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e044      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a90      	ldr	r2, [pc, #576]	@ (8002c94 <UART_SetConfig+0x334>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d127      	bne.n	8002aa8 <UART_SetConfig+0x148>
 8002a58:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <UART_SetConfig+0x330>)
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d017      	beq.n	8002a94 <UART_SetConfig+0x134>
 8002a64:	d81b      	bhi.n	8002a9e <UART_SetConfig+0x13e>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d00a      	beq.n	8002a80 <UART_SetConfig+0x120>
 8002a6a:	d818      	bhi.n	8002a9e <UART_SetConfig+0x13e>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <UART_SetConfig+0x116>
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d00a      	beq.n	8002a8a <UART_SetConfig+0x12a>
 8002a74:	e013      	b.n	8002a9e <UART_SetConfig+0x13e>
 8002a76:	231b      	movs	r3, #27
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e02b      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a80:	231b      	movs	r3, #27
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e026      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e021      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a94:	231b      	movs	r3, #27
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2208      	movs	r2, #8
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e01c      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e017      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7a      	ldr	r2, [pc, #488]	@ (8002c98 <UART_SetConfig+0x338>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d104      	bne.n	8002abc <UART_SetConfig+0x15c>
 8002ab2:	231b      	movs	r3, #27
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e00d      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a76      	ldr	r2, [pc, #472]	@ (8002c9c <UART_SetConfig+0x33c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d104      	bne.n	8002ad0 <UART_SetConfig+0x170>
 8002ac6:	231b      	movs	r3, #27
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e003      	b.n	8002ad8 <UART_SetConfig+0x178>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d000      	beq.n	8002ae6 <UART_SetConfig+0x186>
 8002ae4:	e065      	b.n	8002bb2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002ae6:	231b      	movs	r3, #27
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d015      	beq.n	8002b1c <UART_SetConfig+0x1bc>
 8002af0:	dc18      	bgt.n	8002b24 <UART_SetConfig+0x1c4>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00d      	beq.n	8002b12 <UART_SetConfig+0x1b2>
 8002af6:	dc15      	bgt.n	8002b24 <UART_SetConfig+0x1c4>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x1a2>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d005      	beq.n	8002b0c <UART_SetConfig+0x1ac>
 8002b00:	e010      	b.n	8002b24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff fd8d 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	617b      	str	r3, [r7, #20]
        break;
 8002b0a:	e012      	b.n	8002b32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ca0 <UART_SetConfig+0x340>)
 8002b0e:	617b      	str	r3, [r7, #20]
        break;
 8002b10:	e00f      	b.n	8002b32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b12:	f7ff fcf9 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002b16:	0003      	movs	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]
        break;
 8002b1a:	e00a      	b.n	8002b32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	617b      	str	r3, [r7, #20]
        break;
 8002b22:	e006      	b.n	8002b32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b28:	231a      	movs	r3, #26
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
        break;
 8002b30:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d100      	bne.n	8002b3a <UART_SetConfig+0x1da>
 8002b38:	e08d      	b.n	8002c56 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <UART_SetConfig+0x344>)
 8002b40:	0052      	lsls	r2, r2, #1
 8002b42:	5ad3      	ldrh	r3, [r2, r3]
 8002b44:	0019      	movs	r1, r3
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7fe fa84 	bl	8001054 <__udivsi3>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	005a      	lsls	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	18d2      	adds	r2, r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	0010      	movs	r0, r2
 8002b60:	f7fe fa78 	bl	8001054 <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	d91c      	bls.n	8002ba8 <UART_SetConfig+0x248>
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d217      	bcs.n	8002ba8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	200e      	movs	r0, #14
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	210f      	movs	r1, #15
 8002b82:	438a      	bics	r2, r1
 8002b84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	4013      	ands	r3, r2
 8002b90:	b299      	uxth	r1, r3
 8002b92:	183b      	adds	r3, r7, r0
 8002b94:	183a      	adds	r2, r7, r0
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	183a      	adds	r2, r7, r0
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	e056      	b.n	8002c56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba8:	231a      	movs	r3, #26
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e051      	b.n	8002c56 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bb2:	231b      	movs	r3, #27
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d015      	beq.n	8002be8 <UART_SetConfig+0x288>
 8002bbc:	dc18      	bgt.n	8002bf0 <UART_SetConfig+0x290>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00d      	beq.n	8002bde <UART_SetConfig+0x27e>
 8002bc2:	dc15      	bgt.n	8002bf0 <UART_SetConfig+0x290>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <UART_SetConfig+0x26e>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d005      	beq.n	8002bd8 <UART_SetConfig+0x278>
 8002bcc:	e010      	b.n	8002bf0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff fd27 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	617b      	str	r3, [r7, #20]
        break;
 8002bd6:	e012      	b.n	8002bfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <UART_SetConfig+0x340>)
 8002bda:	617b      	str	r3, [r7, #20]
        break;
 8002bdc:	e00f      	b.n	8002bfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bde:	f7ff fc93 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002be2:	0003      	movs	r3, r0
 8002be4:	617b      	str	r3, [r7, #20]
        break;
 8002be6:	e00a      	b.n	8002bfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	617b      	str	r3, [r7, #20]
        break;
 8002bee:	e006      	b.n	8002bfe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bf4:	231a      	movs	r3, #26
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
        break;
 8002bfc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d028      	beq.n	8002c56 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <UART_SetConfig+0x344>)
 8002c0a:	0052      	lsls	r2, r2, #1
 8002c0c:	5ad3      	ldrh	r3, [r2, r3]
 8002c0e:	0019      	movs	r1, r3
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f7fe fa1f 	bl	8001054 <__udivsi3>
 8002c16:	0003      	movs	r3, r0
 8002c18:	001a      	movs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	18d2      	adds	r2, r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0019      	movs	r1, r3
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f7fe fa13 	bl	8001054 <__udivsi3>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d90a      	bls.n	8002c4e <UART_SetConfig+0x2ee>
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d205      	bcs.n	8002c4e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	e003      	b.n	8002c56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c4e:	231a      	movs	r3, #26
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	226a      	movs	r2, #106	@ 0x6a
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2268      	movs	r2, #104	@ 0x68
 8002c62:	2101      	movs	r1, #1
 8002c64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c72:	231a      	movs	r3, #26
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	781b      	ldrb	r3, [r3, #0]
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b008      	add	sp, #32
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	cfff69f3 	.word	0xcfff69f3
 8002c84:	ffffcfff 	.word	0xffffcfff
 8002c88:	11fff4ff 	.word	0x11fff4ff
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	40004c00 	.word	0x40004c00
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	08003414 	.word	0x08003414

08002ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dec <UART_AdvFeatureConfig+0x144>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a43      	ldr	r2, [pc, #268]	@ (8002df0 <UART_AdvFeatureConfig+0x148>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a3b      	ldr	r2, [pc, #236]	@ (8002df4 <UART_AdvFeatureConfig+0x14c>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <UART_AdvFeatureConfig+0x150>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	@ (8002dfc <UART_AdvFeatureConfig+0x154>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	2220      	movs	r2, #32
 8002d60:	4013      	ands	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4a25      	ldr	r2, [pc, #148]	@ (8002e00 <UART_AdvFeatureConfig+0x158>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	2240      	movs	r2, #64	@ 0x40
 8002d82:	4013      	ands	r3, r2
 8002d84:	d01d      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <UART_AdvFeatureConfig+0x15c>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	035b      	lsls	r3, r3, #13
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10b      	bne.n	8002dc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <UART_AdvFeatureConfig+0x160>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e0c <UART_AdvFeatureConfig+0x164>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffff7fff 	.word	0xffff7fff
 8002df0:	fffdffff 	.word	0xfffdffff
 8002df4:	fffeffff 	.word	0xfffeffff
 8002df8:	fffbffff 	.word	0xfffbffff
 8002dfc:	ffffefff 	.word	0xffffefff
 8002e00:	ffffdfff 	.word	0xffffdfff
 8002e04:	ffefffff 	.word	0xffefffff
 8002e08:	ff9fffff 	.word	0xff9fffff
 8002e0c:	fff7ffff 	.word	0xfff7ffff

08002e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b092      	sub	sp, #72	@ 0x48
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2290      	movs	r2, #144	@ 0x90
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e20:	f7fe fcce 	bl	80017c0 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2208      	movs	r2, #8
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d12d      	bne.n	8002e92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	0391      	lsls	r1, r2, #14
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4a47      	ldr	r2, [pc, #284]	@ (8002f5c <UART_CheckIdleState+0x14c>)
 8002e40:	9200      	str	r2, [sp, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f000 f88e 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d022      	beq.n	8002e92 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e56:	2301      	movs	r3, #1
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2180      	movs	r1, #128	@ 0x80
 8002e6e:	438a      	bics	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e78:	f383 8810 	msr	PRIMASK, r3
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2288      	movs	r2, #136	@ 0x88
 8002e82:	2120      	movs	r1, #32
 8002e84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2284      	movs	r2, #132	@ 0x84
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e060      	b.n	8002f54 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d146      	bne.n	8002f2e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	03d1      	lsls	r1, r2, #15
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8002f5c <UART_CheckIdleState+0x14c>)
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f000 f859 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d03b      	beq.n	8002f2e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4922      	ldr	r1, [pc, #136]	@ (8002f60 <UART_CheckIdleState+0x150>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	228c      	movs	r2, #140	@ 0x8c
 8002f1e:	2120      	movs	r1, #32
 8002f20:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2284      	movs	r2, #132	@ 0x84
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e012      	b.n	8002f54 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2288      	movs	r2, #136	@ 0x88
 8002f32:	2120      	movs	r1, #32
 8002f34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	228c      	movs	r2, #140	@ 0x8c
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2284      	movs	r2, #132	@ 0x84
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b010      	add	sp, #64	@ 0x40
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	01ffffff 	.word	0x01ffffff
 8002f60:	fffffedf 	.word	0xfffffedf

08002f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	1dfb      	adds	r3, r7, #7
 8002f72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	e051      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	d04e      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fc20 	bl	80017c0 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e051      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d03b      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b80      	cmp	r3, #128	@ 0x80
 8002fa6:	d038      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d035      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d111      	bne.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f83c 	bl	8003044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2290      	movs	r2, #144	@ 0x90
 8002fd0:	2108      	movs	r1, #8
 8002fd2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2284      	movs	r2, #132	@ 0x84
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e02c      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	401a      	ands	r2, r3
 8002fec:	2380      	movs	r3, #128	@ 0x80
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d112      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f81f 	bl	8003044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2290      	movs	r2, #144	@ 0x90
 800300a:	2120      	movs	r1, #32
 800300c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2284      	movs	r2, #132	@ 0x84
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	425a      	negs	r2, r3
 800302a:	4153      	adcs	r3, r2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	001a      	movs	r2, r3
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d09e      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	@ 0x38
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304c:	f3ef 8310 	mrs	r3, PRIMASK
 8003050:	617b      	str	r3, [r7, #20]
  return(result);
 8003052:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
 8003056:	2301      	movs	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f383 8810 	msr	PRIMASK, r3
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4926      	ldr	r1, [pc, #152]	@ (8003108 <UART_EndRxTransfer+0xc4>)
 800306e:	400a      	ands	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307e:	f3ef 8310 	mrs	r3, PRIMASK
 8003082:	623b      	str	r3, [r7, #32]
  return(result);
 8003084:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003086:	633b      	str	r3, [r7, #48]	@ 0x30
 8003088:	2301      	movs	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	f383 8810 	msr	PRIMASK, r3
}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	491b      	ldr	r1, [pc, #108]	@ (800310c <UART_EndRxTransfer+0xc8>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d118      	bne.n	80030ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c2:	2301      	movs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2110      	movs	r1, #16
 80030da:	438a      	bics	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	228c      	movs	r2, #140	@ 0x8c
 80030ee:	2120      	movs	r1, #32
 80030f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b00e      	add	sp, #56	@ 0x38
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	fffffedf 	.word	0xfffffedf
 800310c:	effffffe 	.word	0xeffffffe

08003110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2284      	movs	r2, #132	@ 0x84
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UARTEx_DisableFifoMode+0x16>
 8003122:	2302      	movs	r3, #2
 8003124:	e027      	b.n	8003176 <HAL_UARTEx_DisableFifoMode+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2284      	movs	r2, #132	@ 0x84
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2288      	movs	r2, #136	@ 0x88
 8003132:	2124      	movs	r1, #36	@ 0x24
 8003134:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	438a      	bics	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a0b      	ldr	r2, [pc, #44]	@ (8003180 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003152:	4013      	ands	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2288      	movs	r2, #136	@ 0x88
 8003168:	2120      	movs	r1, #32
 800316a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2284      	movs	r2, #132	@ 0x84
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	dfffffff 	.word	0xdfffffff

08003184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2284      	movs	r2, #132	@ 0x84
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e02e      	b.n	80031fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2284      	movs	r2, #132	@ 0x84
 80031a0:	2101      	movs	r1, #1
 80031a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2288      	movs	r2, #136	@ 0x88
 80031a8:	2124      	movs	r1, #36	@ 0x24
 80031aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	08d9      	lsrs	r1, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f854 	bl	8003288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2288      	movs	r2, #136	@ 0x88
 80031ec:	2120      	movs	r1, #32
 80031ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2284      	movs	r2, #132	@ 0x84
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2284      	movs	r2, #132	@ 0x84
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003218:	2302      	movs	r3, #2
 800321a:	e02f      	b.n	800327c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2284      	movs	r2, #132	@ 0x84
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2288      	movs	r2, #136	@ 0x88
 8003228:	2124      	movs	r1, #36	@ 0x24
 800322a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	438a      	bics	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f813 	bl	8003288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2288      	movs	r2, #136	@ 0x88
 800326e:	2120      	movs	r1, #32
 8003270:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2284      	movs	r2, #132	@ 0x84
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b004      	add	sp, #16
 8003282:	bd80      	pop	{r7, pc}
 8003284:	f1ffffff 	.word	0xf1ffffff

08003288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003294:	2b00      	cmp	r3, #0
 8003296:	d108      	bne.n	80032aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	226a      	movs	r2, #106	@ 0x6a
 800329c:	2101      	movs	r1, #1
 800329e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2268      	movs	r2, #104	@ 0x68
 80032a4:	2101      	movs	r1, #1
 80032a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032a8:	e043      	b.n	8003332 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032aa:	260f      	movs	r6, #15
 80032ac:	19bb      	adds	r3, r7, r6
 80032ae:	2208      	movs	r2, #8
 80032b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032b2:	200e      	movs	r0, #14
 80032b4:	183b      	adds	r3, r7, r0
 80032b6:	2208      	movs	r2, #8
 80032b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	0e5b      	lsrs	r3, r3, #25
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	240d      	movs	r4, #13
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	2107      	movs	r1, #7
 80032ca:	400a      	ands	r2, r1
 80032cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	0f5b      	lsrs	r3, r3, #29
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	250c      	movs	r5, #12
 80032da:	197b      	adds	r3, r7, r5
 80032dc:	2107      	movs	r1, #7
 80032de:	400a      	ands	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80032e2:	183b      	adds	r3, r7, r0
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	197a      	adds	r2, r7, r5
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	4914      	ldr	r1, [pc, #80]	@ (800333c <UARTEx_SetNbDataToProcess+0xb4>)
 80032ec:	5c8a      	ldrb	r2, [r1, r2]
 80032ee:	435a      	muls	r2, r3
 80032f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80032f2:	197b      	adds	r3, r7, r5
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <UARTEx_SetNbDataToProcess+0xb8>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80032fa:	0019      	movs	r1, r3
 80032fc:	f7fd ff34 	bl	8001168 <__divsi3>
 8003300:	0003      	movs	r3, r0
 8003302:	b299      	uxth	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	226a      	movs	r2, #106	@ 0x6a
 8003308:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800330a:	19bb      	adds	r3, r7, r6
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	193a      	adds	r2, r7, r4
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	490a      	ldr	r1, [pc, #40]	@ (800333c <UARTEx_SetNbDataToProcess+0xb4>)
 8003314:	5c8a      	ldrb	r2, [r1, r2]
 8003316:	435a      	muls	r2, r3
 8003318:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800331a:	193b      	adds	r3, r7, r4
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	4a08      	ldr	r2, [pc, #32]	@ (8003340 <UARTEx_SetNbDataToProcess+0xb8>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003322:	0019      	movs	r1, r3
 8003324:	f7fd ff20 	bl	8001168 <__divsi3>
 8003328:	0003      	movs	r3, r0
 800332a:	b299      	uxth	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2268      	movs	r2, #104	@ 0x68
 8003330:	5299      	strh	r1, [r3, r2]
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b005      	add	sp, #20
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	0800342c 	.word	0x0800342c
 8003340:	08003434 	.word	0x08003434

08003344 <memset>:
 8003344:	0003      	movs	r3, r0
 8003346:	1882      	adds	r2, r0, r2
 8003348:	4293      	cmp	r3, r2
 800334a:	d100      	bne.n	800334e <memset+0xa>
 800334c:	4770      	bx	lr
 800334e:	7019      	strb	r1, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	e7f9      	b.n	8003348 <memset+0x4>

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4c0c      	ldr	r4, [pc, #48]	@ (800338c <__libc_init_array+0x38>)
 800335a:	4d0d      	ldr	r5, [pc, #52]	@ (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	2600      	movs	r6, #0
 8003366:	f000 f819 	bl	800339c <_init>
 800336a:	4c0a      	ldr	r4, [pc, #40]	@ (8003394 <__libc_init_array+0x40>)
 800336c:	4d0a      	ldr	r5, [pc, #40]	@ (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	00b3      	lsls	r3, r6, #2
 800337a:	58eb      	ldr	r3, [r5, r3]
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	00b3      	lsls	r3, r6, #2
 8003384:	58eb      	ldr	r3, [r5, r3]
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	0800343c 	.word	0x0800343c
 8003390:	0800343c 	.word	0x0800343c
 8003394:	08003440 	.word	0x08003440
 8003398:	0800343c 	.word	0x0800343c

0800339c <_init>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr

080033a8 <_fini>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr
