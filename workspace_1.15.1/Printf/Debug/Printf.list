
Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003530  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080035e8  080035e8  000045e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b4  080036b4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080036b4  080036b4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b4  080036b4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b8  080036b8  000046b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080036bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003724  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003724  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe8  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c86  00000000  00000000  0000fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00011900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000678  00000000  00000000  00012178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cd7  00000000  00000000  000127f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b75c  00000000  00000000  000284c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085be5  00000000  00000000  00033c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000241c  00000000  00000000  000b984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bbc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080035d0 	.word	0x080035d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	080035d0 	.word	0x080035d0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fa7c 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f812 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f8a6 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000410:	f000 f856 	bl	80004c0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printf("Hello World\n\r");
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <main+0x2c>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fa3c 	bl	8002894 <iprintf>
		HAL_Delay(1000);
 800041c:	23fa      	movs	r3, #250	@ 0xfa
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 faf3 	bl	8000a0c <HAL_Delay>
  {
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	e7f4      	b.n	8000414 <main+0x14>
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	080035e8 	.word	0x080035e8

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b093      	sub	sp, #76	@ 0x4c
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	2414      	movs	r4, #20
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2334      	movs	r3, #52	@ 0x34
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f002 fa83 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0018      	movs	r0, r3
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f002 fa7c 	bl	800294c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000454:	2380      	movs	r3, #128	@ 0x80
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fd31 	bl	8000ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2202      	movs	r2, #2
 8000462:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2240      	movs	r2, #64	@ 0x40
 8000476:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	193b      	adds	r3, r7, r4
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd69 	bl	8000f58 <HAL_RCC_OscConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800048a:	f000 f8cb 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f864 	bl	8001578 <HAL_RCC_ClockConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004b4:	f000 f8b6 	bl	8000624 <Error_Handler>
  }
}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b013      	add	sp, #76	@ 0x4c
 80004be:	bd90      	pop	{r4, r7, pc}

080004c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c4:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004c6:	4a24      	ldr	r2, [pc, #144]	@ (8000558 <MX_USART2_UART_Init+0x98>)
 80004c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004cc:	22e1      	movs	r2, #225	@ 0xe1
 80004ce:	0252      	lsls	r2, r2, #9
 80004d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80004d2:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	0552      	lsls	r2, r2, #21
 80004d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004da:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004e8:	220c      	movs	r2, #12
 80004ea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 8000506:	2200      	movs	r2, #0
 8000508:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fb11 	bl	8001b34 <HAL_UART_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000516:	f000 f885 	bl	8000624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 800051c:	2100      	movs	r1, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f002 f814 	bl	800254c <HAL_UARTEx_SetTxFifoThreshold>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000528:	f000 f87c 	bl	8000624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 800052e:	2100      	movs	r1, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f002 f84b 	bl	80025cc <HAL_UARTEx_SetRxFifoThreshold>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800053a:	f000 f873 	bl	8000624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <MX_USART2_UART_Init+0x94>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 ffc9 	bl	80024d8 <HAL_UARTEx_DisableFifoMode>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800054a:	f000 f86b 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000084 	.word	0x20000084
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	@ 0x24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	240c      	movs	r4, #12
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 f9ed 	bl	800294c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 8000578:	2104      	movs	r1, #4
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000582:	2204      	movs	r2, #4
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 800058c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 8000590:	2120      	movs	r1, #32
 8000592:	430a      	orrs	r2, r1
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 8000598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800059a:	2220      	movs	r2, #32
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ae:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_GPIO_Init+0x9c>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b2:	2201      	movs	r2, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005ba:	23a0      	movs	r3, #160	@ 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fc5e 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005c8:	0021      	movs	r1, r4
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2220      	movs	r2, #32
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005e2:	187a      	adds	r2, r7, r1
 80005e4:	23a0      	movs	r3, #160	@ 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fae6 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b009      	add	sp, #36	@ 0x24
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	40021000 	.word	0x40021000

080005fc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <__io_putchar+0x20>)
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <__io_putchar+0x24>)
 800060a:	2201      	movs	r2, #1
 800060c:	f001 fae8 	bl	8001be0 <HAL_UART_Transmit>

  return ch;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	0018      	movs	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	0000ffff 	.word	0x0000ffff
 8000620:	20000084 	.word	0x20000084

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	e7fd      	b.n	800062c <Error_Handler+0x8>

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <HAL_MspInit+0x44>)
 8000638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_MspInit+0x44>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	641a      	str	r2, [r3, #64]	@ 0x40
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <HAL_MspInit+0x44>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <HAL_MspInit+0x44>)
 8000650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HAL_MspInit+0x44>)
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	0549      	lsls	r1, r1, #21
 8000658:	430a      	orrs	r2, r1
 800065a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_MspInit+0x44>)
 800065e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	055b      	lsls	r3, r3, #21
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b091      	sub	sp, #68	@ 0x44
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	232c      	movs	r3, #44	@ 0x2c
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f002 f95e 	bl	800294c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	2410      	movs	r4, #16
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	231c      	movs	r3, #28
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 f956 	bl	800294c <memset>
  if(huart->Instance==USART2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <HAL_UART_MspInit+0xb8>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d13e      	bne.n	8000728 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2202      	movs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f907 	bl	80018cc <HAL_RCCEx_PeriphCLKConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80006c2:	f7ff ffaf 	bl	8000624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	0289      	lsls	r1, r1, #10
 80006d0:	430a      	orrs	r2, r1
 80006d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006d8:	2380      	movs	r3, #128	@ 0x80
 80006da:	029b      	lsls	r3, r3, #10
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_UART_MspInit+0xbc>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006fa:	212c      	movs	r1, #44	@ 0x2c
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2201      	movs	r2, #1
 800070c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2201      	movs	r2, #1
 8000718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	187a      	adds	r2, r7, r1
 800071c:	23a0      	movs	r3, #160	@ 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fa4a 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b011      	add	sp, #68	@ 0x44
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	e7fd      	b.n	800073c <NMI_Handler+0x4>

08000740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	e7fd      	b.n	8000744 <HardFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000760:	f000 f938 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e00a      	b.n	8000792 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800077c:	e000      	b.n	8000780 <_read+0x16>
 800077e:	bf00      	nop
 8000780:	0001      	movs	r1, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	60ba      	str	r2, [r7, #8]
 8000788:	b2ca      	uxtb	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbf0      	blt.n	800077c <_read+0x12>
  }

  return len;
 800079a:	687b      	ldr	r3, [r7, #4]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b006      	add	sp, #24
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e009      	b.n	80007ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	60ba      	str	r2, [r7, #8]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff ff1c 	bl	80005fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbf1      	blt.n	80007b6 <_write+0x12>
  }
  return len;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b006      	add	sp, #24
 80007da:	bd80      	pop	{r7, pc}

080007dc <_close>:

int _close(int file)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	425b      	negs	r3, r3
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	0192      	lsls	r2, r2, #6
 8000800:	605a      	str	r2, [r3, #4]
  return 0;
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}

0800080c <_isatty>:

int _isatty(int file)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000814:	2301      	movs	r3, #1
}
 8000816:	0018      	movs	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}

0800081e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bd80      	pop	{r7, pc}

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f002 f8c8 	bl	80029f8 <__errno>
 8000868:	0003      	movs	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	2301      	movs	r3, #1
 8000870:	425b      	negs	r3, r3
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	18d2      	adds	r2, r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <_sbrk+0x64>)
 8000884:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b006      	add	sp, #24
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20009000 	.word	0x20009000
 8000894:	00000400 	.word	0x00000400
 8000898:	20000118 	.word	0x20000118
 800089c:	20000270 	.word	0x20000270

080008a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b0:	f7ff fff6 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008da:	f002 f893 	bl	8002a04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008de:	f7ff fd8f 	bl	8000400 <main>

080008e2 <LoopForever>:

LoopForever:
  b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   r0, =_estack
 80008e4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008f0:	080036bc 	.word	0x080036bc
  ldr r2, =_sbss
 80008f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008f8:	2000026c 	.word	0x2000026c

080008fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_IRQHandler>
	...

08000900 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <HAL_Init+0x3c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <HAL_Init+0x3c>)
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	0049      	lsls	r1, r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091a:	2000      	movs	r0, #0
 800091c:	f000 f810 	bl	8000940 <HAL_InitTick>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d003      	beq.n	800092c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e001      	b.n	8000930 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fe80 	bl	8000630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b002      	add	sp, #8
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	230f      	movs	r3, #15
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <HAL_InitTick+0x88>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d02b      	beq.n	80009b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_InitTick+0x8c>)
 800095a:	681c      	ldr	r4, [r3, #0]
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_InitTick+0x88>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	0019      	movs	r1, r3
 8000962:	23fa      	movs	r3, #250	@ 0xfa
 8000964:	0098      	lsls	r0, r3, #2
 8000966:	f7ff fbd5 	bl	8000114 <__udivsi3>
 800096a:	0003      	movs	r3, r0
 800096c:	0019      	movs	r1, r3
 800096e:	0020      	movs	r0, r4
 8000970:	f7ff fbd0 	bl	8000114 <__udivsi3>
 8000974:	0003      	movs	r3, r0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f913 	bl	8000ba2 <HAL_SYSTICK_Config>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d112      	bne.n	80009a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d80a      	bhi.n	800099c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f8f2 	bl	8000b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_InitTick+0x90>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e00d      	b.n	80009b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e008      	b.n	80009b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a6:	230f      	movs	r3, #15
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e003      	b.n	80009b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781b      	ldrb	r3, [r3, #0]
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b005      	add	sp, #20
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	18d2      	adds	r2, r2, r3
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <HAL_IncTick+0x20>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	2000011c 	.word	0x2000011c

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	@ (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	2000011c 	.word	0x2000011c

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	189b      	adds	r3, r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	20000008 	.word	0x20000008

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a68:	d828      	bhi.n	8000abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <__NVIC_SetPriority+0xd4>)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	33c0      	adds	r3, #192	@ 0xc0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	589b      	ldr	r3, [r3, r2]
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	400a      	ands	r2, r1
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	21ff      	movs	r1, #255	@ 0xff
 8000a88:	4091      	lsls	r1, r2
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	22ff      	movs	r2, #255	@ 0xff
 8000a98:	401a      	ands	r2, r3
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4003      	ands	r3, r0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <__NVIC_SetPriority+0xd4>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	33c0      	adds	r3, #192	@ 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aba:	e031      	b.n	8000b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <__NVIC_SetPriority+0xd8>)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3306      	adds	r3, #6
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	@ 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	@ 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001c      	movs	r4, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4023      	ands	r3, r4
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	3306      	adds	r3, #6
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	18c3      	adds	r3, r0, r3
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b003      	add	sp, #12
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	045b      	lsls	r3, r3, #17
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d301      	bcc.n	8000b48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b44:	2301      	movs	r3, #1
 8000b46:	e010      	b.n	8000b6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <SysTick_Config+0x44>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2103      	movs	r1, #3
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff7c 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <SysTick_Config+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <SysTick_Config+0x44>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	210f      	movs	r1, #15
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffbf 	bl	8000b30 <SysTick_Config>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e147      	b.n	8000e5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x28>
 8000be2:	e138      	b.n	8000e56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	58d3      	ldr	r3, [r2, r3]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4013      	ands	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2107      	movs	r1, #7
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23c0      	movs	r3, #192	@ 0xc0
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x174>
 8000d2e:	e092      	b.n	8000e56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d30:	4a50      	ldr	r2, [pc, #320]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3318      	adds	r3, #24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	589b      	ldr	r3, [r3, r2]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	220f      	movs	r2, #15
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	23a0      	movs	r3, #160	@ 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0x1ca>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a45      	ldr	r2, [pc, #276]	@ (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1c6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a44      	ldr	r2, [pc, #272]	@ (8000e7c <HAL_GPIO_Init+0x2c0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1c2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a43      	ldr	r2, [pc, #268]	@ (8000e80 <HAL_GPIO_Init+0x2c4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1be>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e004      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d86:	2300      	movs	r3, #0
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	4093      	lsls	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d98:	4936      	ldr	r1, [pc, #216]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3318      	adds	r3, #24
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da6:	4b33      	ldr	r3, [pc, #204]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	035b      	lsls	r3, r3, #13
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dca:	4b2a      	ldr	r3, [pc, #168]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	039b      	lsls	r3, r3, #14
 8000de8:	4013      	ands	r3, r2
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dfc:	2384      	movs	r3, #132	@ 0x84
 8000dfe:	58d3      	ldr	r3, [r2, r3]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e20:	4914      	ldr	r1, [pc, #80]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e22:	2284      	movs	r2, #132	@ 0x84
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e28:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	58d3      	ldr	r3, [r2, r3]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4013      	ands	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e4e:	4909      	ldr	r1, [pc, #36]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e13      	subs	r3, r2, #0
 8000e66:	d000      	beq.n	8000e6a <HAL_GPIO_Init+0x2ae>
 8000e68:	e6b0      	b.n	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021800 	.word	0x40021800
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000800 	.word	0x50000800
 8000e80:	50000c00 	.word	0x50000c00

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	0008      	movs	r0, r1
 8000e8e:	0011      	movs	r1, r2
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	1c7b      	adds	r3, r7, #1
 8000e98:	1c0a      	adds	r2, r1, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e9c:	1c7b      	adds	r3, r7, #1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	881a      	ldrh	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	1cbb      	adds	r3, r7, #2
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d11f      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	0013      	movs	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4912      	ldr	r1, [pc, #72]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f90e 	bl	8000114 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efe:	e008      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e001      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e009      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d0ed      	beq.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	40007000 	.word	0x40007000
 8000f34:	fffff9ff 	.word	0xfffff9ff
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	000f4240 	.word	0x000f4240

08000f40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	23e0      	movs	r3, #224	@ 0xe0
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	4013      	ands	r3, r2
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e2f3      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	d100      	bne.n	8000f76 <HAL_RCC_OscConfig+0x1e>
 8000f74:	e07c      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f76:	4bc3      	ldr	r3, [pc, #780]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2238      	movs	r2, #56	@ 0x38
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f80:	4bc0      	ldr	r3, [pc, #768]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d102      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3e>
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d002      	beq.n	8000f9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	4bb9      	ldr	r3, [pc, #740]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d062      	beq.n	800106e <HAL_RCC_OscConfig+0x116>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d15e      	bne.n	800106e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e2ce      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x78>
 8000fc0:	4bb0      	ldr	r3, [pc, #704]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4baf      	ldr	r3, [pc, #700]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2180      	movs	r1, #128	@ 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e020      	b.n	8001012 <HAL_RCC_OscConfig+0xba>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	23a0      	movs	r3, #160	@ 0xa0
 8000fd6:	02db      	lsls	r3, r3, #11
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10e      	bne.n	8000ffa <HAL_RCC_OscConfig+0xa2>
 8000fdc:	4ba9      	ldr	r3, [pc, #676]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	02c9      	lsls	r1, r1, #11
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	4ba6      	ldr	r3, [pc, #664]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4ba5      	ldr	r3, [pc, #660]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	0249      	lsls	r1, r1, #9
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e00b      	b.n	8001012 <HAL_RCC_OscConfig+0xba>
 8000ffa:	4ba2      	ldr	r3, [pc, #648]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001000:	49a1      	ldr	r1, [pc, #644]	@ (8001288 <HAL_RCC_OscConfig+0x330>)
 8001002:	400a      	ands	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	4b9f      	ldr	r3, [pc, #636]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b9e      	ldr	r3, [pc, #632]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800100c:	499f      	ldr	r1, [pc, #636]	@ (800128c <HAL_RCC_OscConfig+0x334>)
 800100e:	400a      	ands	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d014      	beq.n	8001044 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101a:	f7ff fced 	bl	80009f8 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fce8 	bl	80009f8 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	@ 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e28d      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001036:	4b93      	ldr	r3, [pc, #588]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0xcc>
 8001042:	e015      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fcd8 	bl	80009f8 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104e:	f7ff fcd3 	bl	80009f8 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	@ 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e278      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001060:	4b88      	ldr	r3, [pc, #544]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0xf6>
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x124>
 800107a:	e099      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107c:	4b81      	ldr	r3, [pc, #516]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2238      	movs	r2, #56	@ 0x38
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001086:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x144>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d002      	beq.n	80010a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d135      	bne.n	800110e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a2:	4b78      	ldr	r3, [pc, #480]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x162>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e24b      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b72      	ldr	r3, [pc, #456]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4a74      	ldr	r2, [pc, #464]	@ (8001290 <HAL_RCC_OscConfig+0x338>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	0019      	movs	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	021a      	lsls	r2, r3, #8
 80010ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	430a      	orrs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6e      	ldr	r2, [pc, #440]	@ (8001294 <HAL_RCC_OscConfig+0x33c>)
 80010dc:	4013      	ands	r3, r2
 80010de:	0019      	movs	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	4b67      	ldr	r3, [pc, #412]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010ea:	4b66      	ldr	r3, [pc, #408]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0adb      	lsrs	r3, r3, #11
 80010f0:	2207      	movs	r2, #7
 80010f2:	4013      	ands	r3, r2
 80010f4:	4a68      	ldr	r2, [pc, #416]	@ (8001298 <HAL_RCC_OscConfig+0x340>)
 80010f6:	40da      	lsrs	r2, r3
 80010f8:	4b68      	ldr	r3, [pc, #416]	@ (800129c <HAL_RCC_OscConfig+0x344>)
 80010fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010fc:	4b68      	ldr	r3, [pc, #416]	@ (80012a0 <HAL_RCC_OscConfig+0x348>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fc1d 	bl	8000940 <HAL_InitTick>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d051      	beq.n	80011ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e221      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d030      	beq.n	8001178 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001116:	4b5b      	ldr	r3, [pc, #364]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a5e      	ldr	r2, [pc, #376]	@ (8001294 <HAL_RCC_OscConfig+0x33c>)
 800111c:	4013      	ands	r3, r2
 800111e:	0019      	movs	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001126:	430a      	orrs	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800112a:	4b56      	ldr	r3, [pc, #344]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b55      	ldr	r3, [pc, #340]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	0049      	lsls	r1, r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fc5e 	bl	80009f8 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fc59 	bl	80009f8 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e1fe      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001154:	4b4b      	ldr	r3, [pc, #300]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4013      	ands	r3, r2
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	@ (8001290 <HAL_RCC_OscConfig+0x338>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	021a      	lsls	r2, r3, #8
 8001170:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	e01b      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001178:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800117e:	4949      	ldr	r1, [pc, #292]	@ (80012a4 <HAL_RCC_OscConfig+0x34c>)
 8001180:	400a      	ands	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fc38 	bl	80009f8 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc33 	bl	80009f8 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1d8      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a0:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4013      	ands	r3, r2
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x236>
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2208      	movs	r2, #8
 80011b6:	4013      	ands	r3, r2
 80011b8:	d047      	beq.n	800124a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011ba:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2238      	movs	r2, #56	@ 0x38
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b18      	cmp	r3, #24
 80011c4:	d10a      	bne.n	80011dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d03c      	beq.n	800124a <HAL_RCC_OscConfig+0x2f2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d138      	bne.n	800124a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e1ba      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d019      	beq.n	8001218 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc02 	bl	80009f8 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff fbfd 	bl	80009f8 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a2      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d0f1      	beq.n	80011fa <HAL_RCC_OscConfig+0x2a2>
 8001216:	e018      	b.n	800124a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800121a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800121e:	2101      	movs	r1, #1
 8001220:	438a      	bics	r2, r1
 8001222:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fbe8 	bl	80009f8 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff fbe3 	bl	80009f8 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e188      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001244:	2202      	movs	r2, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d1f1      	bne.n	800122e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2204      	movs	r2, #4
 8001250:	4013      	ands	r3, r2
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x2fe>
 8001254:	e0c6      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	231f      	movs	r3, #31
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2238      	movs	r2, #56	@ 0x38
 8001264:	4013      	ands	r3, r2
 8001266:	2b20      	cmp	r3, #32
 8001268:	d11e      	bne.n	80012a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_RCC_OscConfig+0x32c>)
 800126c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d100      	bne.n	8001276 <HAL_RCC_OscConfig+0x31e>
 8001274:	e0b6      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d000      	beq.n	8001280 <HAL_RCC_OscConfig+0x328>
 800127e:	e0b1      	b.n	80013e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e166      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
 8001284:	40021000 	.word	0x40021000
 8001288:	fffeffff 	.word	0xfffeffff
 800128c:	fffbffff 	.word	0xfffbffff
 8001290:	ffff80ff 	.word	0xffff80ff
 8001294:	ffffc7ff 	.word	0xffffc7ff
 8001298:	00f42400 	.word	0x00f42400
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004
 80012a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012a8:	4bac      	ldr	r3, [pc, #688]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80012aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_OscConfig+0x360>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x362>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d011      	beq.n	80012e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4ba7      	ldr	r3, [pc, #668]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80012c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c2:	4ba6      	ldr	r3, [pc, #664]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	0549      	lsls	r1, r1, #21
 80012c8:	430a      	orrs	r2, r1
 80012ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012cc:	4ba3      	ldr	r3, [pc, #652]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80012ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	055b      	lsls	r3, r3, #21
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012da:	231f      	movs	r3, #31
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001560 <HAL_RCC_OscConfig+0x608>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	@ 0x80
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4013      	ands	r3, r2
 80012ec:	d11a      	bne.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001560 <HAL_RCC_OscConfig+0x608>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b9b      	ldr	r3, [pc, #620]	@ (8001560 <HAL_RCC_OscConfig+0x608>)
 80012f4:	2180      	movs	r1, #128	@ 0x80
 80012f6:	0049      	lsls	r1, r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb7c 	bl	80009f8 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff fb77 	bl	80009f8 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e11c      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001318:	4b91      	ldr	r3, [pc, #580]	@ (8001560 <HAL_RCC_OscConfig+0x608>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x3e2>
 800132c:	4b8b      	ldr	r3, [pc, #556]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800132e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001330:	4b8a      	ldr	r3, [pc, #552]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001338:	e01c      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b05      	cmp	r3, #5
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x404>
 8001342:	4b86      	ldr	r3, [pc, #536]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001344:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001346:	4b85      	ldr	r3, [pc, #532]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800134e:	4b83      	ldr	r3, [pc, #524]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001350:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001352:	4b82      	ldr	r3, [pc, #520]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	65da      	str	r2, [r3, #92]	@ 0x5c
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
 800135c:	4b7f      	ldr	r3, [pc, #508]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800135e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001360:	4b7e      	ldr	r3, [pc, #504]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001362:	2101      	movs	r1, #1
 8001364:	438a      	bics	r2, r1
 8001366:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001368:	4b7c      	ldr	r3, [pc, #496]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800136a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800136c:	4b7b      	ldr	r3, [pc, #492]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800136e:	2104      	movs	r1, #4
 8001370:	438a      	bics	r2, r1
 8001372:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d014      	beq.n	80013a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fb3c 	bl	80009f8 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001384:	e009      	b.n	800139a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb37 	bl	80009f8 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a74      	ldr	r2, [pc, #464]	@ (8001564 <HAL_RCC_OscConfig+0x60c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0db      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139a:	4b70      	ldr	r3, [pc, #448]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x42e>
 80013a4:	e013      	b.n	80013ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb27 	bl	80009f8 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ae:	e009      	b.n	80013c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb22 	bl	80009f8 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001564 <HAL_RCC_OscConfig+0x60c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0c6      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	4b65      	ldr	r3, [pc, #404]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80013c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013ce:	231f      	movs	r3, #31
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80013da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013dc:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80013de:	4962      	ldr	r1, [pc, #392]	@ (8001568 <HAL_RCC_OscConfig+0x610>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x496>
 80013ec:	e0b0      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2238      	movs	r2, #56	@ 0x38
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d100      	bne.n	80013fc <HAL_RCC_OscConfig+0x4a4>
 80013fa:	e078      	b.n	80014ee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d153      	bne.n	80014ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b55      	ldr	r3, [pc, #340]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b54      	ldr	r3, [pc, #336]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800140a:	4958      	ldr	r1, [pc, #352]	@ (800156c <HAL_RCC_OscConfig+0x614>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff faf2 	bl	80009f8 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff faed 	bl	80009f8 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e092      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001438:	4b48      	ldr	r3, [pc, #288]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_RCC_OscConfig+0x618>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	431a      	orrs	r2, r3
 8001460:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001466:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	0449      	lsls	r1, r1, #17
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001474:	4b39      	ldr	r3, [pc, #228]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4b38      	ldr	r3, [pc, #224]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	0549      	lsls	r1, r1, #21
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fab9 	bl	80009f8 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fab4 	bl	80009f8 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e059      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149e:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x534>
 80014aa:	e051      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014b2:	492e      	ldr	r1, [pc, #184]	@ (800156c <HAL_RCC_OscConfig+0x614>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa9e 	bl	80009f8 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fa99 	bl	80009f8 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03e      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	4b21      	ldr	r3, [pc, #132]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	049b      	lsls	r3, r3, #18
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014e6:	4923      	ldr	r1, [pc, #140]	@ (8001574 <HAL_RCC_OscConfig+0x61c>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	e030      	b.n	8001550 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e02b      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_RCC_OscConfig+0x604>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2203      	movs	r2, #3
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	429a      	cmp	r2, r3
 800150c:	d11e      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2270      	movs	r2, #112	@ 0x70
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d117      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	23fe      	movs	r3, #254	@ 0xfe
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d10e      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	23f8      	movs	r3, #248	@ 0xf8
 8001532:	039b      	lsls	r3, r3, #14
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	0f5b      	lsrs	r3, r3, #29
 8001542:	075a      	lsls	r2, r3, #29
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b008      	add	sp, #32
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
 8001564:	00001388 	.word	0x00001388
 8001568:	efffffff 	.word	0xefffffff
 800156c:	feffffff 	.word	0xfeffffff
 8001570:	1fc1808c 	.word	0x1fc1808c
 8001574:	effefffc 	.word	0xeffefffc

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0e9      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b76      	ldr	r3, [pc, #472]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2207      	movs	r2, #7
 8001592:	4013      	ands	r3, r2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d91e      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2207      	movs	r2, #7
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	4b70      	ldr	r3, [pc, #448]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015ac:	f7ff fa24 	bl	80009f8 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b4:	e009      	b.n	80015ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff fa1f 	bl	80009f8 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a6a      	ldr	r2, [pc, #424]	@ (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0ca      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ca:	4b67      	ldr	r3, [pc, #412]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2207      	movs	r2, #7
 80015d0:	4013      	ands	r3, r2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d015      	beq.n	800160e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2204      	movs	r2, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	d006      	beq.n	80015fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015ec:	4b60      	ldr	r3, [pc, #384]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	21e0      	movs	r1, #224	@ 0xe0
 80015f4:	01c9      	lsls	r1, r1, #7
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001774 <HAL_RCC_ClockConfig+0x1fc>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	d057      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d12b      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e097      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	@ 0x80
 800163e:	049b      	lsls	r3, r3, #18
 8001640:	4013      	ands	r3, r2
 8001642:	d11f      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e08b      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4013      	ands	r3, r2
 800165a:	d113      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e07f      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d106      	bne.n	8001676 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001668:	4b41      	ldr	r3, [pc, #260]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d108      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e074      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	4b3e      	ldr	r3, [pc, #248]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e06d      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2207      	movs	r2, #7
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001694:	430a      	orrs	r2, r1
 8001696:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001698:	f7ff f9ae 	bl	80009f8 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f9a9 	bl	80009f8 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a2f      	ldr	r2, [pc, #188]	@ (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e054      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2238      	movs	r2, #56	@ 0x38
 80016bc:	401a      	ands	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1ec      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2207      	movs	r2, #7
 80016ce:	4013      	ands	r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d21e      	bcs.n	8001714 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4393      	bics	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f986 	bl	80009f8 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016f0:	e009      	b.n	8001706 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f7ff f981 	bl	80009f8 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <HAL_RCC_ClockConfig+0x1f4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e02c      	b.n	8001760 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2207      	movs	r2, #7
 800170c:	4013      	ands	r3, r2
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <HAL_RCC_ClockConfig+0x200>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001732:	f000 f829 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001736:	0001      	movs	r1, r0
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_RCC_ClockConfig+0x1f8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	220f      	movs	r2, #15
 8001740:	401a      	ands	r2, r3
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_RCC_ClockConfig+0x204>)
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	58d3      	ldr	r3, [r2, r3]
 8001748:	221f      	movs	r2, #31
 800174a:	4013      	ands	r3, r2
 800174c:	000a      	movs	r2, r1
 800174e:	40da      	lsrs	r2, r3
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_RCC_ClockConfig+0x208>)
 8001752:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_ClockConfig+0x20c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff f8f1 	bl	8000940 <HAL_InitTick>
 800175e:	0003      	movs	r3, r0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40022000 	.word	0x40022000
 800176c:	00001388 	.word	0x00001388
 8001770:	40021000 	.word	0x40021000
 8001774:	fffff0ff 	.word	0xfffff0ff
 8001778:	ffff8fff 	.word	0xffff8fff
 800177c:	080035f8 	.word	0x080035f8
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178e:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2238      	movs	r2, #56	@ 0x38
 8001794:	4013      	ands	r3, r2
 8001796:	d10f      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001798:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0adb      	lsrs	r3, r3, #11
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	2201      	movs	r2, #1
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	4835      	ldr	r0, [pc, #212]	@ (8001884 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017ae:	f7fe fcb1 	bl	8000114 <__udivsi3>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e05d      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b8:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2238      	movs	r2, #56	@ 0x38
 80017be:	4013      	ands	r3, r2
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x100>)
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e054      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	@ 0x38
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d138      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	3301      	adds	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	4824      	ldr	r0, [pc, #144]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x100>)
 80017f8:	f7fe fc8c 	bl	8000114 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	0019      	movs	r1, r3
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	227f      	movs	r2, #127	@ 0x7f
 8001808:	4013      	ands	r3, r2
 800180a:	434b      	muls	r3, r1
 800180c:	617b      	str	r3, [r7, #20]
        break;
 800180e:	e00d      	b.n	800182c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	481c      	ldr	r0, [pc, #112]	@ (8001884 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001814:	f7fe fc7e 	bl	8000114 <__udivsi3>
 8001818:	0003      	movs	r3, r0
 800181a:	0019      	movs	r1, r3
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	227f      	movs	r2, #127	@ 0x7f
 8001824:	4013      	ands	r3, r2
 8001826:	434b      	muls	r3, r1
 8001828:	617b      	str	r3, [r7, #20]
        break;
 800182a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0f5b      	lsrs	r3, r3, #29
 8001832:	2207      	movs	r2, #7
 8001834:	4013      	ands	r3, r2
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7fe fc69 	bl	8000114 <__udivsi3>
 8001842:	0003      	movs	r3, r0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e015      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2238      	movs	r2, #56	@ 0x38
 800184e:	4013      	ands	r3, r2
 8001850:	2b20      	cmp	r3, #32
 8001852:	d103      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	@ 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	2b18      	cmp	r3, #24
 8001866:	d103      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001868:	23fa      	movs	r3, #250	@ 0xfa
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	e001      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001874:	693b      	ldr	r3, [r7, #16]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b006      	add	sp, #24
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	40021000 	.word	0x40021000
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	@ (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	0004      	movs	r4, r0
 80018aa:	f7ff fb49 	bl	8000f40 <LL_RCC_GetAPB1Prescaler>
 80018ae:	0003      	movs	r3, r0
 80018b0:	0b1a      	lsrs	r2, r3, #12
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	40dc      	lsrs	r4, r3
 80018be:	0023      	movs	r3, r4
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	08003638 	.word	0x08003638

080018cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80018d4:	2313      	movs	r3, #19
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018dc:	2312      	movs	r3, #18
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d100      	bne.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018f0:	e0a3      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2011      	movs	r0, #17
 80018f4:	183b      	adds	r3, r7, r0
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b86      	ldr	r3, [pc, #536]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	055b      	lsls	r3, r3, #21
 8001902:	4013      	ands	r3, r2
 8001904:	d110      	bne.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b83      	ldr	r3, [pc, #524]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800190a:	4b82      	ldr	r3, [pc, #520]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0549      	lsls	r1, r1, #21
 8001910:	430a      	orrs	r2, r1
 8001912:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001914:	4b7f      	ldr	r3, [pc, #508]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	055b      	lsls	r3, r3, #21
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	183b      	adds	r3, r7, r0
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001928:	4b7b      	ldr	r3, [pc, #492]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	0049      	lsls	r1, r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001936:	f7ff f85f 	bl	80009f8 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800193e:	e00b      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff f85a 	bl	80009f8 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d904      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800194e:	2313      	movs	r3, #19
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2203      	movs	r2, #3
 8001954:	701a      	strb	r2, [r3, #0]
        break;
 8001956:	e005      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001958:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d0ed      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001964:	2313      	movs	r3, #19
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d154      	bne.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800196e:	4b69      	ldr	r3, [pc, #420]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001972:	23c0      	movs	r3, #192	@ 0xc0
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4013      	ands	r3, r2
 8001978:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	429a      	cmp	r2, r3
 8001988:	d014      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800198a:	4b62      	ldr	r3, [pc, #392]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	4a63      	ldr	r2, [pc, #396]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001994:	4b5f      	ldr	r3, [pc, #380]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001998:	4b5e      	ldr	r3, [pc, #376]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	0249      	lsls	r1, r1, #9
 800199e:	430a      	orrs	r2, r1
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019a8:	495d      	ldr	r1, [pc, #372]	@ (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019ae:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d016      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f81c 	bl	80009f8 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c4:	e00c      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff f817 	bl	80009f8 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a54      	ldr	r2, [pc, #336]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d904      	bls.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80019d6:	2313      	movs	r3, #19
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
            break;
 80019de:	e004      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0ed      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80019ea:	2313      	movs	r3, #19
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f4:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	4a48      	ldr	r2, [pc, #288]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a08:	e00c      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2213      	movs	r2, #19
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e005      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2213      	movs	r2, #19
 8001a1e:	18ba      	adds	r2, r7, r2
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a24:	2311      	movs	r3, #17
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a32:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a34:	493c      	ldr	r1, [pc, #240]	@ (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a44:	4b33      	ldr	r3, [pc, #204]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	2203      	movs	r2, #3
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a62:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a66:	220c      	movs	r2, #12
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	01db      	lsls	r3, r3, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d015      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	0899      	lsrs	r1, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d106      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	0249      	lsls	r1, r1, #9
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d016      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afe:	2180      	movs	r1, #128	@ 0x80
 8001b00:	0249      	lsls	r1, r1, #9
 8001b02:	430a      	orrs	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001b06:	2312      	movs	r3, #18
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	781b      	ldrb	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b006      	add	sp, #24
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	fffffcff 	.word	0xfffffcff
 8001b20:	fffeffff 	.word	0xfffeffff
 8001b24:	00001388 	.word	0x00001388
 8001b28:	efffffff 	.word	0xefffffff
 8001b2c:	ffffcfff 	.word	0xffffcfff
 8001b30:	ffff3fff 	.word	0xffff3fff

08001b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e046      	b.n	8001bd4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2288      	movs	r2, #136	@ 0x88
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2284      	movs	r2, #132	@ 0x84
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fd8c 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2288      	movs	r2, #136	@ 0x88
 8001b64:	2124      	movs	r1, #36	@ 0x24
 8001b66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 fa74 	bl	8002070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f8cc 	bl	8001d28 <UART_SetConfig>
 8001b90:	0003      	movs	r3, r0
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01c      	b.n	8001bd4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <HAL_UART_Init+0xa8>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	212a      	movs	r1, #42	@ 0x2a
 8001bb6:	438a      	bics	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 fb03 	bl	80021d8 <UART_CheckIdleState>
 8001bd2:	0003      	movs	r3, r0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	ffffb7ff 	.word	0xffffb7ff

08001be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	1dbb      	adds	r3, r7, #6
 8001bee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2288      	movs	r2, #136	@ 0x88
 8001bf4:	589b      	ldr	r3, [r3, r2]
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d000      	beq.n	8001bfc <HAL_UART_Transmit+0x1c>
 8001bfa:	e090      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_UART_Transmit+0x2a>
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e088      	b.n	8001d20 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d109      	bne.n	8001c2e <HAL_UART_Transmit+0x4e>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e078      	b.n	8001d20 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2290      	movs	r2, #144	@ 0x90
 8001c32:	2100      	movs	r1, #0
 8001c34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2288      	movs	r2, #136	@ 0x88
 8001c3a:	2121      	movs	r1, #33	@ 0x21
 8001c3c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3e:	f7fe fedb 	bl	80009f8 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1dba      	adds	r2, r7, #6
 8001c4a:	2154      	movs	r1, #84	@ 0x54
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1dba      	adds	r2, r7, #6
 8001c54:	2156      	movs	r1, #86	@ 0x56
 8001c56:	8812      	ldrh	r2, [r2, #0]
 8001c58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	015b      	lsls	r3, r3, #5
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d108      	bne.n	8001c78 <HAL_UART_Transmit+0x98>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e003      	b.n	8001c80 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c80:	e030      	b.n	8001ce4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	f000 fb4c 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2288      	movs	r2, #136	@ 0x88
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e03d      	b.n	8001d20 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	05d2      	lsls	r2, r2, #23
 8001cb6:	0dd2      	lsrs	r2, r2, #23
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e007      	b.n	8001cd2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2256      	movs	r2, #86	@ 0x56
 8001cd6:	5a9b      	ldrh	r3, [r3, r2]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2256      	movs	r2, #86	@ 0x56
 8001ce2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2256      	movs	r2, #86	@ 0x56
 8001ce8:	5a9b      	ldrh	r3, [r3, r2]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1c8      	bne.n	8001c82 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	f000 fb15 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2288      	movs	r2, #136	@ 0x88
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e006      	b.n	8001d20 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2288      	movs	r2, #136	@ 0x88
 8001d16:	2120      	movs	r1, #32
 8001d18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
  }
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b008      	add	sp, #32
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d30:	231a      	movs	r3, #26
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4abc      	ldr	r2, [pc, #752]	@ (8002048 <UART_SetConfig+0x320>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4ab7      	ldr	r2, [pc, #732]	@ (800204c <UART_SetConfig+0x324>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4aae      	ldr	r2, [pc, #696]	@ (8002050 <UART_SetConfig+0x328>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	220f      	movs	r2, #15
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4aa4      	ldr	r2, [pc, #656]	@ (8002054 <UART_SetConfig+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d127      	bne.n	8001e16 <UART_SetConfig+0xee>
 8001dc6:	4ba4      	ldr	r3, [pc, #656]	@ (8002058 <UART_SetConfig+0x330>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dca:	2203      	movs	r2, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d017      	beq.n	8001e02 <UART_SetConfig+0xda>
 8001dd2:	d81b      	bhi.n	8001e0c <UART_SetConfig+0xe4>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d00a      	beq.n	8001dee <UART_SetConfig+0xc6>
 8001dd8:	d818      	bhi.n	8001e0c <UART_SetConfig+0xe4>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <UART_SetConfig+0xbc>
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00a      	beq.n	8001df8 <UART_SetConfig+0xd0>
 8001de2:	e013      	b.n	8001e0c <UART_SetConfig+0xe4>
 8001de4:	231b      	movs	r3, #27
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e058      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001dee:	231b      	movs	r3, #27
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e053      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001df8:	231b      	movs	r3, #27
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e04e      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e02:	231b      	movs	r3, #27
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2208      	movs	r2, #8
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e049      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e0c:	231b      	movs	r3, #27
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2210      	movs	r2, #16
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e044      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a90      	ldr	r2, [pc, #576]	@ (800205c <UART_SetConfig+0x334>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d127      	bne.n	8001e70 <UART_SetConfig+0x148>
 8001e20:	4b8d      	ldr	r3, [pc, #564]	@ (8002058 <UART_SetConfig+0x330>)
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	220c      	movs	r2, #12
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d017      	beq.n	8001e5c <UART_SetConfig+0x134>
 8001e2c:	d81b      	bhi.n	8001e66 <UART_SetConfig+0x13e>
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d00a      	beq.n	8001e48 <UART_SetConfig+0x120>
 8001e32:	d818      	bhi.n	8001e66 <UART_SetConfig+0x13e>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <UART_SetConfig+0x116>
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00a      	beq.n	8001e52 <UART_SetConfig+0x12a>
 8001e3c:	e013      	b.n	8001e66 <UART_SetConfig+0x13e>
 8001e3e:	231b      	movs	r3, #27
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e02b      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e48:	231b      	movs	r3, #27
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e026      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e52:	231b      	movs	r3, #27
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2204      	movs	r2, #4
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e021      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e5c:	231b      	movs	r3, #27
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2208      	movs	r2, #8
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e01c      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e66:	231b      	movs	r3, #27
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e017      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a7a      	ldr	r2, [pc, #488]	@ (8002060 <UART_SetConfig+0x338>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d104      	bne.n	8001e84 <UART_SetConfig+0x15c>
 8001e7a:	231b      	movs	r3, #27
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e00d      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a76      	ldr	r2, [pc, #472]	@ (8002064 <UART_SetConfig+0x33c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d104      	bne.n	8001e98 <UART_SetConfig+0x170>
 8001e8e:	231b      	movs	r3, #27
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e003      	b.n	8001ea0 <UART_SetConfig+0x178>
 8001e98:	231b      	movs	r3, #27
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d000      	beq.n	8001eae <UART_SetConfig+0x186>
 8001eac:	e065      	b.n	8001f7a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8001eae:	231b      	movs	r3, #27
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d015      	beq.n	8001ee4 <UART_SetConfig+0x1bc>
 8001eb8:	dc18      	bgt.n	8001eec <UART_SetConfig+0x1c4>
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d00d      	beq.n	8001eda <UART_SetConfig+0x1b2>
 8001ebe:	dc15      	bgt.n	8001eec <UART_SetConfig+0x1c4>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <UART_SetConfig+0x1a2>
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d005      	beq.n	8001ed4 <UART_SetConfig+0x1ac>
 8001ec8:	e010      	b.n	8001eec <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eca:	f7ff fce9 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	617b      	str	r3, [r7, #20]
        break;
 8001ed2:	e012      	b.n	8001efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ed4:	4b64      	ldr	r3, [pc, #400]	@ (8002068 <UART_SetConfig+0x340>)
 8001ed6:	617b      	str	r3, [r7, #20]
        break;
 8001ed8:	e00f      	b.n	8001efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001eda:	f7ff fc55 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	617b      	str	r3, [r7, #20]
        break;
 8001ee2:	e00a      	b.n	8001efa <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	617b      	str	r3, [r7, #20]
        break;
 8001eea:	e006      	b.n	8001efa <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001ef0:	231a      	movs	r3, #26
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
        break;
 8001ef8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d100      	bne.n	8001f02 <UART_SetConfig+0x1da>
 8001f00:	e08d      	b.n	800201e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f06:	4b59      	ldr	r3, [pc, #356]	@ (800206c <UART_SetConfig+0x344>)
 8001f08:	0052      	lsls	r2, r2, #1
 8001f0a:	5ad3      	ldrh	r3, [r2, r3]
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7fe f900 	bl	8000114 <__udivsi3>
 8001f14:	0003      	movs	r3, r0
 8001f16:	005a      	lsls	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	18d2      	adds	r2, r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0019      	movs	r1, r3
 8001f26:	0010      	movs	r0, r2
 8001f28:	f7fe f8f4 	bl	8000114 <__udivsi3>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d91c      	bls.n	8001f70 <UART_SetConfig+0x248>
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d217      	bcs.n	8001f70 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	200e      	movs	r0, #14
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	210f      	movs	r1, #15
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2207      	movs	r2, #7
 8001f56:	4013      	ands	r3, r2
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	183b      	adds	r3, r7, r0
 8001f5c:	183a      	adds	r2, r7, r0
 8001f5e:	8812      	ldrh	r2, [r2, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	183a      	adds	r2, r7, r0
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	e056      	b.n	800201e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8001f70:	231a      	movs	r3, #26
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e051      	b.n	800201e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f7a:	231b      	movs	r3, #27
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d015      	beq.n	8001fb0 <UART_SetConfig+0x288>
 8001f84:	dc18      	bgt.n	8001fb8 <UART_SetConfig+0x290>
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d00d      	beq.n	8001fa6 <UART_SetConfig+0x27e>
 8001f8a:	dc15      	bgt.n	8001fb8 <UART_SetConfig+0x290>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <UART_SetConfig+0x26e>
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d005      	beq.n	8001fa0 <UART_SetConfig+0x278>
 8001f94:	e010      	b.n	8001fb8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f96:	f7ff fc83 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	617b      	str	r3, [r7, #20]
        break;
 8001f9e:	e012      	b.n	8001fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fa0:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <UART_SetConfig+0x340>)
 8001fa2:	617b      	str	r3, [r7, #20]
        break;
 8001fa4:	e00f      	b.n	8001fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fa6:	f7ff fbef 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001faa:	0003      	movs	r3, r0
 8001fac:	617b      	str	r3, [r7, #20]
        break;
 8001fae:	e00a      	b.n	8001fc6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	617b      	str	r3, [r7, #20]
        break;
 8001fb6:	e006      	b.n	8001fc6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001fbc:	231a      	movs	r3, #26
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
        break;
 8001fc4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d028      	beq.n	800201e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <UART_SetConfig+0x344>)
 8001fd2:	0052      	lsls	r2, r2, #1
 8001fd4:	5ad3      	ldrh	r3, [r2, r3]
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7fe f89b 	bl	8000114 <__udivsi3>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	18d2      	adds	r2, r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f7fe f88f 	bl	8000114 <__udivsi3>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d90a      	bls.n	8002016 <UART_SetConfig+0x2ee>
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	429a      	cmp	r2, r3
 8002008:	d205      	bcs.n	8002016 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	e003      	b.n	800201e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002016:	231a      	movs	r3, #26
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	226a      	movs	r2, #106	@ 0x6a
 8002022:	2101      	movs	r1, #1
 8002024:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2268      	movs	r2, #104	@ 0x68
 800202a:	2101      	movs	r1, #1
 800202c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800203a:	231a      	movs	r3, #26
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b008      	add	sp, #32
 8002046:	bd80      	pop	{r7, pc}
 8002048:	cfff69f3 	.word	0xcfff69f3
 800204c:	ffffcfff 	.word	0xffffcfff
 8002050:	11fff4ff 	.word	0x11fff4ff
 8002054:	40013800 	.word	0x40013800
 8002058:	40021000 	.word	0x40021000
 800205c:	40004400 	.word	0x40004400
 8002060:	40004800 	.word	0x40004800
 8002064:	40004c00 	.word	0x40004c00
 8002068:	00f42400 	.word	0x00f42400
 800206c:	08003658 	.word	0x08003658

08002070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	d00b      	beq.n	800209a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a4a      	ldr	r2, [pc, #296]	@ (80021b4 <UART_AdvFeatureConfig+0x144>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d00b      	beq.n	80020bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a43      	ldr	r2, [pc, #268]	@ (80021b8 <UART_AdvFeatureConfig+0x148>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d00b      	beq.n	80020de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a3b      	ldr	r2, [pc, #236]	@ (80021bc <UART_AdvFeatureConfig+0x14c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d00b      	beq.n	8002100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a34      	ldr	r2, [pc, #208]	@ (80021c0 <UART_AdvFeatureConfig+0x150>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	2210      	movs	r2, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d00b      	beq.n	8002122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a2c      	ldr	r2, [pc, #176]	@ (80021c4 <UART_AdvFeatureConfig+0x154>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	2220      	movs	r2, #32
 8002128:	4013      	ands	r3, r2
 800212a:	d00b      	beq.n	8002144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <UART_AdvFeatureConfig+0x158>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	2240      	movs	r2, #64	@ 0x40
 800214a:	4013      	ands	r3, r2
 800214c:	d01d      	beq.n	800218a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <UART_AdvFeatureConfig+0x15c>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	035b      	lsls	r3, r3, #13
 800216e:	429a      	cmp	r2, r3
 8002170:	d10b      	bne.n	800218a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <UART_AdvFeatureConfig+0x160>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	4013      	ands	r3, r2
 8002192:	d00b      	beq.n	80021ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a0e      	ldr	r2, [pc, #56]	@ (80021d4 <UART_AdvFeatureConfig+0x164>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
  }
}
 80021ac:	46c0      	nop			@ (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	ffff7fff 	.word	0xffff7fff
 80021b8:	fffdffff 	.word	0xfffdffff
 80021bc:	fffeffff 	.word	0xfffeffff
 80021c0:	fffbffff 	.word	0xfffbffff
 80021c4:	ffffefff 	.word	0xffffefff
 80021c8:	ffffdfff 	.word	0xffffdfff
 80021cc:	ffefffff 	.word	0xffefffff
 80021d0:	ff9fffff 	.word	0xff9fffff
 80021d4:	fff7ffff 	.word	0xfff7ffff

080021d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	@ 0x48
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2290      	movs	r2, #144	@ 0x90
 80021e4:	2100      	movs	r1, #0
 80021e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021e8:	f7fe fc06 	bl	80009f8 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2208      	movs	r2, #8
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d12d      	bne.n	800225a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	0391      	lsls	r1, r2, #14
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4a47      	ldr	r2, [pc, #284]	@ (8002324 <UART_CheckIdleState+0x14c>)
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	f000 f88e 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d022      	beq.n	800225a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002214:	f3ef 8310 	mrs	r3, PRIMASK
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800221c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800221e:	2301      	movs	r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002224:	f383 8810 	msr	PRIMASK, r3
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	438a      	bics	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	f383 8810 	msr	PRIMASK, r3
}
 8002244:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2288      	movs	r2, #136	@ 0x88
 800224a:	2120      	movs	r1, #32
 800224c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2284      	movs	r2, #132	@ 0x84
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e060      	b.n	800231c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2204      	movs	r2, #4
 8002262:	4013      	ands	r3, r2
 8002264:	2b04      	cmp	r3, #4
 8002266:	d146      	bne.n	80022f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	03d1      	lsls	r1, r2, #15
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4a2c      	ldr	r2, [pc, #176]	@ (8002324 <UART_CheckIdleState+0x14c>)
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	f000 f859 	bl	800232c <UART_WaitOnFlagUntilTimeout>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d03b      	beq.n	80022f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227e:	f3ef 8310 	mrs	r3, PRIMASK
 8002282:	60fb      	str	r3, [r7, #12]
  return(result);
 8002284:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f383 8810 	msr	PRIMASK, r3
}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4922      	ldr	r1, [pc, #136]	@ (8002328 <UART_CheckIdleState+0x150>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f383 8810 	msr	PRIMASK, r3
}
 80022ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b0:	f3ef 8310 	mrs	r3, PRIMASK
 80022b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80022b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ba:	2301      	movs	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f383 8810 	msr	PRIMASK, r3
}
 80022c4:	46c0      	nop			@ (mov r8, r8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f383 8810 	msr	PRIMASK, r3
}
 80022e0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	228c      	movs	r2, #140	@ 0x8c
 80022e6:	2120      	movs	r1, #32
 80022e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2284      	movs	r2, #132	@ 0x84
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e012      	b.n	800231c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2288      	movs	r2, #136	@ 0x88
 80022fa:	2120      	movs	r1, #32
 80022fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	228c      	movs	r2, #140	@ 0x8c
 8002302:	2120      	movs	r1, #32
 8002304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2284      	movs	r2, #132	@ 0x84
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b010      	add	sp, #64	@ 0x40
 8002322:	bd80      	pop	{r7, pc}
 8002324:	01ffffff 	.word	0x01ffffff
 8002328:	fffffedf 	.word	0xfffffedf

0800232c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233c:	e051      	b.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3301      	adds	r3, #1
 8002342:	d04e      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002344:	f7fe fb58 	bl	80009f8 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d302      	bcc.n	800235a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e051      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2204      	movs	r2, #4
 8002366:	4013      	ands	r3, r2
 8002368:	d03b      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b80      	cmp	r3, #128	@ 0x80
 800236e:	d038      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d035      	beq.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2208      	movs	r2, #8
 800237e:	4013      	ands	r3, r2
 8002380:	2b08      	cmp	r3, #8
 8002382:	d111      	bne.n	80023a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f83c 	bl	800240c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2290      	movs	r2, #144	@ 0x90
 8002398:	2108      	movs	r1, #8
 800239a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2284      	movs	r2, #132	@ 0x84
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e02c      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	401a      	ands	r2, r3
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d112      	bne.n	80023e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 f81f 	bl	800240c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2290      	movs	r2, #144	@ 0x90
 80023d2:	2120      	movs	r1, #32
 80023d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2284      	movs	r2, #132	@ 0x84
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00f      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	4153      	adcs	r3, r2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	001a      	movs	r2, r3
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d09e      	beq.n	800233e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	@ 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002414:	f3ef 8310 	mrs	r3, PRIMASK
 8002418:	617b      	str	r3, [r7, #20]
  return(result);
 800241a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f383 8810 	msr	PRIMASK, r3
}
 8002428:	46c0      	nop			@ (mov r8, r8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4926      	ldr	r1, [pc, #152]	@ (80024d0 <UART_EndRxTransfer+0xc4>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f383 8810 	msr	PRIMASK, r3
}
 8002444:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002446:	f3ef 8310 	mrs	r3, PRIMASK
 800244a:	623b      	str	r3, [r7, #32]
  return(result);
 800244c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	f383 8810 	msr	PRIMASK, r3
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	491b      	ldr	r1, [pc, #108]	@ (80024d4 <UART_EndRxTransfer+0xc8>)
 8002468:	400a      	ands	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	f383 8810 	msr	PRIMASK, r3
}
 8002476:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d118      	bne.n	80024b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002480:	f3ef 8310 	mrs	r3, PRIMASK
 8002484:	60bb      	str	r3, [r7, #8]
  return(result);
 8002486:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248a:	2301      	movs	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			@ (mov r8, r8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2110      	movs	r1, #16
 80024a2:	438a      	bics	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f383 8810 	msr	PRIMASK, r3
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	228c      	movs	r2, #140	@ 0x8c
 80024b6:	2120      	movs	r1, #32
 80024b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b00e      	add	sp, #56	@ 0x38
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	fffffedf 	.word	0xfffffedf
 80024d4:	effffffe 	.word	0xeffffffe

080024d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2284      	movs	r2, #132	@ 0x84
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UARTEx_DisableFifoMode+0x16>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e027      	b.n	800253e <HAL_UARTEx_DisableFifoMode+0x66>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2284      	movs	r2, #132	@ 0x84
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2288      	movs	r2, #136	@ 0x88
 80024fa:	2124      	movs	r1, #36	@ 0x24
 80024fc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <HAL_UARTEx_DisableFifoMode+0x70>)
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2288      	movs	r2, #136	@ 0x88
 8002530:	2120      	movs	r1, #32
 8002532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2284      	movs	r2, #132	@ 0x84
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	dfffffff 	.word	0xdfffffff

0800254c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2284      	movs	r2, #132	@ 0x84
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e02e      	b.n	80025c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2284      	movs	r2, #132	@ 0x84
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2288      	movs	r2, #136	@ 0x88
 8002570:	2124      	movs	r1, #36	@ 0x24
 8002572:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	08d9      	lsrs	r1, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f854 	bl	8002650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2288      	movs	r2, #136	@ 0x88
 80025b4:	2120      	movs	r1, #32
 80025b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2284      	movs	r2, #132	@ 0x84
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2284      	movs	r2, #132	@ 0x84
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e02f      	b.n	8002644 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2284      	movs	r2, #132	@ 0x84
 80025e8:	2101      	movs	r1, #1
 80025ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2288      	movs	r2, #136	@ 0x88
 80025f0:	2124      	movs	r1, #36	@ 0x24
 80025f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a0e      	ldr	r2, [pc, #56]	@ (800264c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f813 	bl	8002650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2288      	movs	r2, #136	@ 0x88
 8002636:	2120      	movs	r1, #32
 8002638:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2284      	movs	r2, #132	@ 0x84
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f1ffffff 	.word	0xf1ffffff

08002650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	226a      	movs	r2, #106	@ 0x6a
 8002664:	2101      	movs	r1, #1
 8002666:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2268      	movs	r2, #104	@ 0x68
 800266c:	2101      	movs	r1, #1
 800266e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002670:	e043      	b.n	80026fa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002672:	260f      	movs	r6, #15
 8002674:	19bb      	adds	r3, r7, r6
 8002676:	2208      	movs	r2, #8
 8002678:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800267a:	200e      	movs	r0, #14
 800267c:	183b      	adds	r3, r7, r0
 800267e:	2208      	movs	r2, #8
 8002680:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	0e5b      	lsrs	r3, r3, #25
 800268a:	b2da      	uxtb	r2, r3
 800268c:	240d      	movs	r4, #13
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2107      	movs	r1, #7
 8002692:	400a      	ands	r2, r1
 8002694:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	0f5b      	lsrs	r3, r3, #29
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	250c      	movs	r5, #12
 80026a2:	197b      	adds	r3, r7, r5
 80026a4:	2107      	movs	r1, #7
 80026a6:	400a      	ands	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	197a      	adds	r2, r7, r5
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	4914      	ldr	r1, [pc, #80]	@ (8002704 <UARTEx_SetNbDataToProcess+0xb4>)
 80026b4:	5c8a      	ldrb	r2, [r1, r2]
 80026b6:	435a      	muls	r2, r3
 80026b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80026ba:	197b      	adds	r3, r7, r5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <UARTEx_SetNbDataToProcess+0xb8>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026c2:	0019      	movs	r1, r3
 80026c4:	f7fd fdb0 	bl	8000228 <__divsi3>
 80026c8:	0003      	movs	r3, r0
 80026ca:	b299      	uxth	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	226a      	movs	r2, #106	@ 0x6a
 80026d0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026d2:	19bb      	adds	r3, r7, r6
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	193a      	adds	r2, r7, r4
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	490a      	ldr	r1, [pc, #40]	@ (8002704 <UARTEx_SetNbDataToProcess+0xb4>)
 80026dc:	5c8a      	ldrb	r2, [r1, r2]
 80026de:	435a      	muls	r2, r3
 80026e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <UARTEx_SetNbDataToProcess+0xb8>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026ea:	0019      	movs	r1, r3
 80026ec:	f7fd fd9c 	bl	8000228 <__divsi3>
 80026f0:	0003      	movs	r3, r0
 80026f2:	b299      	uxth	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2268      	movs	r2, #104	@ 0x68
 80026f8:	5299      	strh	r1, [r3, r2]
}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b005      	add	sp, #20
 8002700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	08003670 	.word	0x08003670
 8002708:	08003678 	.word	0x08003678

0800270c <std>:
 800270c:	2300      	movs	r3, #0
 800270e:	b510      	push	{r4, lr}
 8002710:	0004      	movs	r4, r0
 8002712:	6003      	str	r3, [r0, #0]
 8002714:	6043      	str	r3, [r0, #4]
 8002716:	6083      	str	r3, [r0, #8]
 8002718:	8181      	strh	r1, [r0, #12]
 800271a:	6643      	str	r3, [r0, #100]	@ 0x64
 800271c:	81c2      	strh	r2, [r0, #14]
 800271e:	6103      	str	r3, [r0, #16]
 8002720:	6143      	str	r3, [r0, #20]
 8002722:	6183      	str	r3, [r0, #24]
 8002724:	0019      	movs	r1, r3
 8002726:	2208      	movs	r2, #8
 8002728:	305c      	adds	r0, #92	@ 0x5c
 800272a:	f000 f90f 	bl	800294c <memset>
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <std+0x50>)
 8002730:	6224      	str	r4, [r4, #32]
 8002732:	6263      	str	r3, [r4, #36]	@ 0x24
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <std+0x54>)
 8002736:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <std+0x58>)
 800273a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <std+0x5c>)
 800273e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <std+0x60>)
 8002742:	429c      	cmp	r4, r3
 8002744:	d005      	beq.n	8002752 <std+0x46>
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <std+0x64>)
 8002748:	429c      	cmp	r4, r3
 800274a:	d002      	beq.n	8002752 <std+0x46>
 800274c:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <std+0x68>)
 800274e:	429c      	cmp	r4, r3
 8002750:	d103      	bne.n	800275a <std+0x4e>
 8002752:	0020      	movs	r0, r4
 8002754:	3058      	adds	r0, #88	@ 0x58
 8002756:	f000 f979 	bl	8002a4c <__retarget_lock_init_recursive>
 800275a:	bd10      	pop	{r4, pc}
 800275c:	080028b5 	.word	0x080028b5
 8002760:	080028dd 	.word	0x080028dd
 8002764:	08002915 	.word	0x08002915
 8002768:	08002941 	.word	0x08002941
 800276c:	20000120 	.word	0x20000120
 8002770:	20000188 	.word	0x20000188
 8002774:	200001f0 	.word	0x200001f0

08002778 <stdio_exit_handler>:
 8002778:	b510      	push	{r4, lr}
 800277a:	4a03      	ldr	r2, [pc, #12]	@ (8002788 <stdio_exit_handler+0x10>)
 800277c:	4903      	ldr	r1, [pc, #12]	@ (800278c <stdio_exit_handler+0x14>)
 800277e:	4804      	ldr	r0, [pc, #16]	@ (8002790 <stdio_exit_handler+0x18>)
 8002780:	f000 f86c 	bl	800285c <_fwalk_sglue>
 8002784:	bd10      	pop	{r4, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	2000000c 	.word	0x2000000c
 800278c:	080032dd 	.word	0x080032dd
 8002790:	2000001c 	.word	0x2000001c

08002794 <cleanup_stdio>:
 8002794:	6841      	ldr	r1, [r0, #4]
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <cleanup_stdio+0x30>)
 8002798:	b510      	push	{r4, lr}
 800279a:	0004      	movs	r4, r0
 800279c:	4299      	cmp	r1, r3
 800279e:	d001      	beq.n	80027a4 <cleanup_stdio+0x10>
 80027a0:	f000 fd9c 	bl	80032dc <_fflush_r>
 80027a4:	68a1      	ldr	r1, [r4, #8]
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <cleanup_stdio+0x34>)
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d002      	beq.n	80027b2 <cleanup_stdio+0x1e>
 80027ac:	0020      	movs	r0, r4
 80027ae:	f000 fd95 	bl	80032dc <_fflush_r>
 80027b2:	68e1      	ldr	r1, [r4, #12]
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <cleanup_stdio+0x38>)
 80027b6:	4299      	cmp	r1, r3
 80027b8:	d002      	beq.n	80027c0 <cleanup_stdio+0x2c>
 80027ba:	0020      	movs	r0, r4
 80027bc:	f000 fd8e 	bl	80032dc <_fflush_r>
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	20000120 	.word	0x20000120
 80027c8:	20000188 	.word	0x20000188
 80027cc:	200001f0 	.word	0x200001f0

080027d0 <global_stdio_init.part.0>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <global_stdio_init.part.0+0x28>)
 80027d4:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <global_stdio_init.part.0+0x2c>)
 80027d6:	2104      	movs	r1, #4
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4809      	ldr	r0, [pc, #36]	@ (8002800 <global_stdio_init.part.0+0x30>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f7ff ff95 	bl	800270c <std>
 80027e2:	2201      	movs	r2, #1
 80027e4:	2109      	movs	r1, #9
 80027e6:	4807      	ldr	r0, [pc, #28]	@ (8002804 <global_stdio_init.part.0+0x34>)
 80027e8:	f7ff ff90 	bl	800270c <std>
 80027ec:	2202      	movs	r2, #2
 80027ee:	2112      	movs	r1, #18
 80027f0:	4805      	ldr	r0, [pc, #20]	@ (8002808 <global_stdio_init.part.0+0x38>)
 80027f2:	f7ff ff8b 	bl	800270c <std>
 80027f6:	bd10      	pop	{r4, pc}
 80027f8:	20000258 	.word	0x20000258
 80027fc:	08002779 	.word	0x08002779
 8002800:	20000120 	.word	0x20000120
 8002804:	20000188 	.word	0x20000188
 8002808:	200001f0 	.word	0x200001f0

0800280c <__sfp_lock_acquire>:
 800280c:	b510      	push	{r4, lr}
 800280e:	4802      	ldr	r0, [pc, #8]	@ (8002818 <__sfp_lock_acquire+0xc>)
 8002810:	f000 f91d 	bl	8002a4e <__retarget_lock_acquire_recursive>
 8002814:	bd10      	pop	{r4, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	20000261 	.word	0x20000261

0800281c <__sfp_lock_release>:
 800281c:	b510      	push	{r4, lr}
 800281e:	4802      	ldr	r0, [pc, #8]	@ (8002828 <__sfp_lock_release+0xc>)
 8002820:	f000 f916 	bl	8002a50 <__retarget_lock_release_recursive>
 8002824:	bd10      	pop	{r4, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	20000261 	.word	0x20000261

0800282c <__sinit>:
 800282c:	b510      	push	{r4, lr}
 800282e:	0004      	movs	r4, r0
 8002830:	f7ff ffec 	bl	800280c <__sfp_lock_acquire>
 8002834:	6a23      	ldr	r3, [r4, #32]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <__sinit+0x14>
 800283a:	f7ff ffef 	bl	800281c <__sfp_lock_release>
 800283e:	bd10      	pop	{r4, pc}
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <__sinit+0x28>)
 8002842:	6223      	str	r3, [r4, #32]
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__sinit+0x2c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f6      	bne.n	800283a <__sinit+0xe>
 800284c:	f7ff ffc0 	bl	80027d0 <global_stdio_init.part.0>
 8002850:	e7f3      	b.n	800283a <__sinit+0xe>
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	08002795 	.word	0x08002795
 8002858:	20000258 	.word	0x20000258

0800285c <_fwalk_sglue>:
 800285c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800285e:	0014      	movs	r4, r2
 8002860:	2600      	movs	r6, #0
 8002862:	9000      	str	r0, [sp, #0]
 8002864:	9101      	str	r1, [sp, #4]
 8002866:	68a5      	ldr	r5, [r4, #8]
 8002868:	6867      	ldr	r7, [r4, #4]
 800286a:	3f01      	subs	r7, #1
 800286c:	d504      	bpl.n	8002878 <_fwalk_sglue+0x1c>
 800286e:	6824      	ldr	r4, [r4, #0]
 8002870:	2c00      	cmp	r4, #0
 8002872:	d1f8      	bne.n	8002866 <_fwalk_sglue+0xa>
 8002874:	0030      	movs	r0, r6
 8002876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002878:	89ab      	ldrh	r3, [r5, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d908      	bls.n	8002890 <_fwalk_sglue+0x34>
 800287e:	220e      	movs	r2, #14
 8002880:	5eab      	ldrsh	r3, [r5, r2]
 8002882:	3301      	adds	r3, #1
 8002884:	d004      	beq.n	8002890 <_fwalk_sglue+0x34>
 8002886:	0029      	movs	r1, r5
 8002888:	9800      	ldr	r0, [sp, #0]
 800288a:	9b01      	ldr	r3, [sp, #4]
 800288c:	4798      	blx	r3
 800288e:	4306      	orrs	r6, r0
 8002890:	3568      	adds	r5, #104	@ 0x68
 8002892:	e7ea      	b.n	800286a <_fwalk_sglue+0xe>

08002894 <iprintf>:
 8002894:	b40f      	push	{r0, r1, r2, r3}
 8002896:	b507      	push	{r0, r1, r2, lr}
 8002898:	4905      	ldr	r1, [pc, #20]	@ (80028b0 <iprintf+0x1c>)
 800289a:	ab04      	add	r3, sp, #16
 800289c:	6808      	ldr	r0, [r1, #0]
 800289e:	cb04      	ldmia	r3!, {r2}
 80028a0:	6881      	ldr	r1, [r0, #8]
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	f000 f9fa 	bl	8002c9c <_vfiprintf_r>
 80028a8:	b003      	add	sp, #12
 80028aa:	bc08      	pop	{r3}
 80028ac:	b004      	add	sp, #16
 80028ae:	4718      	bx	r3
 80028b0:	20000018 	.word	0x20000018

080028b4 <__sread>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	000c      	movs	r4, r1
 80028b8:	250e      	movs	r5, #14
 80028ba:	5f49      	ldrsh	r1, [r1, r5]
 80028bc:	f000 f874 	bl	80029a8 <_read_r>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	db03      	blt.n	80028cc <__sread+0x18>
 80028c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80028c6:	181b      	adds	r3, r3, r0
 80028c8:	6563      	str	r3, [r4, #84]	@ 0x54
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	4a02      	ldr	r2, [pc, #8]	@ (80028d8 <__sread+0x24>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	81a3      	strh	r3, [r4, #12]
 80028d4:	e7f9      	b.n	80028ca <__sread+0x16>
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	ffffefff 	.word	0xffffefff

080028dc <__swrite>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	001f      	movs	r7, r3
 80028e0:	898b      	ldrh	r3, [r1, #12]
 80028e2:	0005      	movs	r5, r0
 80028e4:	000c      	movs	r4, r1
 80028e6:	0016      	movs	r6, r2
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	d505      	bpl.n	80028f8 <__swrite+0x1c>
 80028ec:	230e      	movs	r3, #14
 80028ee:	5ec9      	ldrsh	r1, [r1, r3]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2302      	movs	r3, #2
 80028f4:	f000 f844 	bl	8002980 <_lseek_r>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	4a05      	ldr	r2, [pc, #20]	@ (8002910 <__swrite+0x34>)
 80028fc:	0028      	movs	r0, r5
 80028fe:	4013      	ands	r3, r2
 8002900:	81a3      	strh	r3, [r4, #12]
 8002902:	0032      	movs	r2, r6
 8002904:	230e      	movs	r3, #14
 8002906:	5ee1      	ldrsh	r1, [r4, r3]
 8002908:	003b      	movs	r3, r7
 800290a:	f000 f861 	bl	80029d0 <_write_r>
 800290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002910:	ffffefff 	.word	0xffffefff

08002914 <__sseek>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	000c      	movs	r4, r1
 8002918:	250e      	movs	r5, #14
 800291a:	5f49      	ldrsh	r1, [r1, r5]
 800291c:	f000 f830 	bl	8002980 <_lseek_r>
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	1c42      	adds	r2, r0, #1
 8002924:	d103      	bne.n	800292e <__sseek+0x1a>
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <__sseek+0x28>)
 8002928:	4013      	ands	r3, r2
 800292a:	81a3      	strh	r3, [r4, #12]
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	0152      	lsls	r2, r2, #5
 8002932:	4313      	orrs	r3, r2
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	6560      	str	r0, [r4, #84]	@ 0x54
 8002938:	e7f8      	b.n	800292c <__sseek+0x18>
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	ffffefff 	.word	0xffffefff

08002940 <__sclose>:
 8002940:	b510      	push	{r4, lr}
 8002942:	230e      	movs	r3, #14
 8002944:	5ec9      	ldrsh	r1, [r1, r3]
 8002946:	f000 f809 	bl	800295c <_close_r>
 800294a:	bd10      	pop	{r4, pc}

0800294c <memset>:
 800294c:	0003      	movs	r3, r0
 800294e:	1882      	adds	r2, r0, r2
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <_close_r>:
 800295c:	2300      	movs	r3, #0
 800295e:	b570      	push	{r4, r5, r6, lr}
 8002960:	4d06      	ldr	r5, [pc, #24]	@ (800297c <_close_r+0x20>)
 8002962:	0004      	movs	r4, r0
 8002964:	0008      	movs	r0, r1
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	f7fd ff38 	bl	80007dc <_close>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d103      	bne.n	8002978 <_close_r+0x1c>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d000      	beq.n	8002978 <_close_r+0x1c>
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	bd70      	pop	{r4, r5, r6, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	2000025c 	.word	0x2000025c

08002980 <_lseek_r>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	0004      	movs	r4, r0
 8002984:	0008      	movs	r0, r1
 8002986:	0011      	movs	r1, r2
 8002988:	001a      	movs	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	4d05      	ldr	r5, [pc, #20]	@ (80029a4 <_lseek_r+0x24>)
 800298e:	602b      	str	r3, [r5, #0]
 8002990:	f7fd ff45 	bl	800081e <_lseek>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d103      	bne.n	80029a0 <_lseek_r+0x20>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d000      	beq.n	80029a0 <_lseek_r+0x20>
 800299e:	6023      	str	r3, [r4, #0]
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	2000025c 	.word	0x2000025c

080029a8 <_read_r>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	0004      	movs	r4, r0
 80029ac:	0008      	movs	r0, r1
 80029ae:	0011      	movs	r1, r2
 80029b0:	001a      	movs	r2, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	4d05      	ldr	r5, [pc, #20]	@ (80029cc <_read_r+0x24>)
 80029b6:	602b      	str	r3, [r5, #0]
 80029b8:	f7fd fed7 	bl	800076a <_read>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d103      	bne.n	80029c8 <_read_r+0x20>
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d000      	beq.n	80029c8 <_read_r+0x20>
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	2000025c 	.word	0x2000025c

080029d0 <_write_r>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	0004      	movs	r4, r0
 80029d4:	0008      	movs	r0, r1
 80029d6:	0011      	movs	r1, r2
 80029d8:	001a      	movs	r2, r3
 80029da:	2300      	movs	r3, #0
 80029dc:	4d05      	ldr	r5, [pc, #20]	@ (80029f4 <_write_r+0x24>)
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	f7fd fee0 	bl	80007a4 <_write>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d103      	bne.n	80029f0 <_write_r+0x20>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d000      	beq.n	80029f0 <_write_r+0x20>
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	2000025c 	.word	0x2000025c

080029f8 <__errno>:
 80029f8:	4b01      	ldr	r3, [pc, #4]	@ (8002a00 <__errno+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4770      	bx	lr
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	20000018 	.word	0x20000018

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	2600      	movs	r6, #0
 8002a08:	4c0c      	ldr	r4, [pc, #48]	@ (8002a3c <__libc_init_array+0x38>)
 8002a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a40 <__libc_init_array+0x3c>)
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	2600      	movs	r6, #0
 8002a16:	f000 fddb 	bl	80035d0 <_init>
 8002a1a:	4c0a      	ldr	r4, [pc, #40]	@ (8002a44 <__libc_init_array+0x40>)
 8002a1c:	4d0a      	ldr	r5, [pc, #40]	@ (8002a48 <__libc_init_array+0x44>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	00b3      	lsls	r3, r6, #2
 8002a2a:	58eb      	ldr	r3, [r5, r3]
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	00b3      	lsls	r3, r6, #2
 8002a34:	58eb      	ldr	r3, [r5, r3]
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	080036b4 	.word	0x080036b4
 8002a40:	080036b4 	.word	0x080036b4
 8002a44:	080036b8 	.word	0x080036b8
 8002a48:	080036b4 	.word	0x080036b4

08002a4c <__retarget_lock_init_recursive>:
 8002a4c:	4770      	bx	lr

08002a4e <__retarget_lock_acquire_recursive>:
 8002a4e:	4770      	bx	lr

08002a50 <__retarget_lock_release_recursive>:
 8002a50:	4770      	bx	lr
	...

08002a54 <_free_r>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	0005      	movs	r5, r0
 8002a58:	1e0c      	subs	r4, r1, #0
 8002a5a:	d010      	beq.n	8002a7e <_free_r+0x2a>
 8002a5c:	3c04      	subs	r4, #4
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	da00      	bge.n	8002a66 <_free_r+0x12>
 8002a64:	18e4      	adds	r4, r4, r3
 8002a66:	0028      	movs	r0, r5
 8002a68:	f000 f8e0 	bl	8002c2c <__malloc_lock>
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <_free_r+0x90>)
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <_free_r+0x2c>
 8002a74:	6063      	str	r3, [r4, #4]
 8002a76:	6014      	str	r4, [r2, #0]
 8002a78:	0028      	movs	r0, r5
 8002a7a:	f000 f8df 	bl	8002c3c <__malloc_unlock>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d908      	bls.n	8002a96 <_free_r+0x42>
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	1821      	adds	r1, r4, r0
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d1f3      	bne.n	8002a74 <_free_r+0x20>
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	1809      	adds	r1, r1, r0
 8002a92:	6021      	str	r1, [r4, #0]
 8002a94:	e7ee      	b.n	8002a74 <_free_r+0x20>
 8002a96:	001a      	movs	r2, r3
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <_free_r+0x4e>
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	d9f9      	bls.n	8002a96 <_free_r+0x42>
 8002aa2:	6811      	ldr	r1, [r2, #0]
 8002aa4:	1850      	adds	r0, r2, r1
 8002aa6:	42a0      	cmp	r0, r4
 8002aa8:	d10b      	bne.n	8002ac2 <_free_r+0x6e>
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	1809      	adds	r1, r1, r0
 8002aae:	1850      	adds	r0, r2, r1
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	4283      	cmp	r3, r0
 8002ab4:	d1e0      	bne.n	8002a78 <_free_r+0x24>
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	1841      	adds	r1, r0, r1
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	6053      	str	r3, [r2, #4]
 8002ac0:	e7da      	b.n	8002a78 <_free_r+0x24>
 8002ac2:	42a0      	cmp	r0, r4
 8002ac4:	d902      	bls.n	8002acc <_free_r+0x78>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	602b      	str	r3, [r5, #0]
 8002aca:	e7d5      	b.n	8002a78 <_free_r+0x24>
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	1821      	adds	r1, r4, r0
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d103      	bne.n	8002adc <_free_r+0x88>
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	1809      	adds	r1, r1, r0
 8002ada:	6021      	str	r1, [r4, #0]
 8002adc:	6063      	str	r3, [r4, #4]
 8002ade:	6054      	str	r4, [r2, #4]
 8002ae0:	e7ca      	b.n	8002a78 <_free_r+0x24>
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	20000268 	.word	0x20000268

08002ae8 <sbrk_aligned>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	4e0f      	ldr	r6, [pc, #60]	@ (8002b28 <sbrk_aligned+0x40>)
 8002aec:	000d      	movs	r5, r1
 8002aee:	6831      	ldr	r1, [r6, #0]
 8002af0:	0004      	movs	r4, r0
 8002af2:	2900      	cmp	r1, #0
 8002af4:	d102      	bne.n	8002afc <sbrk_aligned+0x14>
 8002af6:	f000 fcbd 	bl	8003474 <_sbrk_r>
 8002afa:	6030      	str	r0, [r6, #0]
 8002afc:	0029      	movs	r1, r5
 8002afe:	0020      	movs	r0, r4
 8002b00:	f000 fcb8 	bl	8003474 <_sbrk_r>
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d103      	bne.n	8002b10 <sbrk_aligned+0x28>
 8002b08:	2501      	movs	r5, #1
 8002b0a:	426d      	negs	r5, r5
 8002b0c:	0028      	movs	r0, r5
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	2303      	movs	r3, #3
 8002b12:	1cc5      	adds	r5, r0, #3
 8002b14:	439d      	bics	r5, r3
 8002b16:	42a8      	cmp	r0, r5
 8002b18:	d0f8      	beq.n	8002b0c <sbrk_aligned+0x24>
 8002b1a:	1a29      	subs	r1, r5, r0
 8002b1c:	0020      	movs	r0, r4
 8002b1e:	f000 fca9 	bl	8003474 <_sbrk_r>
 8002b22:	3001      	adds	r0, #1
 8002b24:	d1f2      	bne.n	8002b0c <sbrk_aligned+0x24>
 8002b26:	e7ef      	b.n	8002b08 <sbrk_aligned+0x20>
 8002b28:	20000264 	.word	0x20000264

08002b2c <_malloc_r>:
 8002b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b2e:	2203      	movs	r2, #3
 8002b30:	1ccb      	adds	r3, r1, #3
 8002b32:	4393      	bics	r3, r2
 8002b34:	3308      	adds	r3, #8
 8002b36:	0005      	movs	r5, r0
 8002b38:	001f      	movs	r7, r3
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d234      	bcs.n	8002ba8 <_malloc_r+0x7c>
 8002b3e:	270c      	movs	r7, #12
 8002b40:	42b9      	cmp	r1, r7
 8002b42:	d833      	bhi.n	8002bac <_malloc_r+0x80>
 8002b44:	0028      	movs	r0, r5
 8002b46:	f000 f871 	bl	8002c2c <__malloc_lock>
 8002b4a:	4e37      	ldr	r6, [pc, #220]	@ (8002c28 <_malloc_r+0xfc>)
 8002b4c:	6833      	ldr	r3, [r6, #0]
 8002b4e:	001c      	movs	r4, r3
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	d12f      	bne.n	8002bb4 <_malloc_r+0x88>
 8002b54:	0039      	movs	r1, r7
 8002b56:	0028      	movs	r0, r5
 8002b58:	f7ff ffc6 	bl	8002ae8 <sbrk_aligned>
 8002b5c:	0004      	movs	r4, r0
 8002b5e:	1c43      	adds	r3, r0, #1
 8002b60:	d15f      	bne.n	8002c22 <_malloc_r+0xf6>
 8002b62:	6834      	ldr	r4, [r6, #0]
 8002b64:	9400      	str	r4, [sp, #0]
 8002b66:	9b00      	ldr	r3, [sp, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d14a      	bne.n	8002c02 <_malloc_r+0xd6>
 8002b6c:	2c00      	cmp	r4, #0
 8002b6e:	d052      	beq.n	8002c16 <_malloc_r+0xea>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	0028      	movs	r0, r5
 8002b74:	18e3      	adds	r3, r4, r3
 8002b76:	9900      	ldr	r1, [sp, #0]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f000 fc7b 	bl	8003474 <_sbrk_r>
 8002b7e:	9b01      	ldr	r3, [sp, #4]
 8002b80:	4283      	cmp	r3, r0
 8002b82:	d148      	bne.n	8002c16 <_malloc_r+0xea>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	0028      	movs	r0, r5
 8002b88:	1aff      	subs	r7, r7, r3
 8002b8a:	0039      	movs	r1, r7
 8002b8c:	f7ff ffac 	bl	8002ae8 <sbrk_aligned>
 8002b90:	3001      	adds	r0, #1
 8002b92:	d040      	beq.n	8002c16 <_malloc_r+0xea>
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	19db      	adds	r3, r3, r7
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	6833      	ldr	r3, [r6, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d133      	bne.n	8002c0a <_malloc_r+0xde>
 8002ba2:	9b00      	ldr	r3, [sp, #0]
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	e019      	b.n	8002bdc <_malloc_r+0xb0>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	dac9      	bge.n	8002b40 <_malloc_r+0x14>
 8002bac:	230c      	movs	r3, #12
 8002bae:	602b      	str	r3, [r5, #0]
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	1bc9      	subs	r1, r1, r7
 8002bb8:	d420      	bmi.n	8002bfc <_malloc_r+0xd0>
 8002bba:	290b      	cmp	r1, #11
 8002bbc:	d90a      	bls.n	8002bd4 <_malloc_r+0xa8>
 8002bbe:	19e2      	adds	r2, r4, r7
 8002bc0:	6027      	str	r7, [r4, #0]
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	d104      	bne.n	8002bd0 <_malloc_r+0xa4>
 8002bc6:	6032      	str	r2, [r6, #0]
 8002bc8:	6863      	ldr	r3, [r4, #4]
 8002bca:	6011      	str	r1, [r2, #0]
 8002bcc:	6053      	str	r3, [r2, #4]
 8002bce:	e005      	b.n	8002bdc <_malloc_r+0xb0>
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e7f9      	b.n	8002bc8 <_malloc_r+0x9c>
 8002bd4:	6862      	ldr	r2, [r4, #4]
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	d10e      	bne.n	8002bf8 <_malloc_r+0xcc>
 8002bda:	6032      	str	r2, [r6, #0]
 8002bdc:	0028      	movs	r0, r5
 8002bde:	f000 f82d 	bl	8002c3c <__malloc_unlock>
 8002be2:	0020      	movs	r0, r4
 8002be4:	2207      	movs	r2, #7
 8002be6:	300b      	adds	r0, #11
 8002be8:	1d23      	adds	r3, r4, #4
 8002bea:	4390      	bics	r0, r2
 8002bec:	1ac2      	subs	r2, r0, r3
 8002bee:	4298      	cmp	r0, r3
 8002bf0:	d0df      	beq.n	8002bb2 <_malloc_r+0x86>
 8002bf2:	1a1b      	subs	r3, r3, r0
 8002bf4:	50a3      	str	r3, [r4, r2]
 8002bf6:	e7dc      	b.n	8002bb2 <_malloc_r+0x86>
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e7ef      	b.n	8002bdc <_malloc_r+0xb0>
 8002bfc:	0023      	movs	r3, r4
 8002bfe:	6864      	ldr	r4, [r4, #4]
 8002c00:	e7a6      	b.n	8002b50 <_malloc_r+0x24>
 8002c02:	9c00      	ldr	r4, [sp, #0]
 8002c04:	6863      	ldr	r3, [r4, #4]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	e7ad      	b.n	8002b66 <_malloc_r+0x3a>
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	d1fb      	bne.n	8002c0a <_malloc_r+0xde>
 8002c12:	2300      	movs	r3, #0
 8002c14:	e7da      	b.n	8002bcc <_malloc_r+0xa0>
 8002c16:	230c      	movs	r3, #12
 8002c18:	0028      	movs	r0, r5
 8002c1a:	602b      	str	r3, [r5, #0]
 8002c1c:	f000 f80e 	bl	8002c3c <__malloc_unlock>
 8002c20:	e7c6      	b.n	8002bb0 <_malloc_r+0x84>
 8002c22:	6007      	str	r7, [r0, #0]
 8002c24:	e7da      	b.n	8002bdc <_malloc_r+0xb0>
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	20000268 	.word	0x20000268

08002c2c <__malloc_lock>:
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <__malloc_lock+0xc>)
 8002c30:	f7ff ff0d 	bl	8002a4e <__retarget_lock_acquire_recursive>
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	20000260 	.word	0x20000260

08002c3c <__malloc_unlock>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <__malloc_unlock+0xc>)
 8002c40:	f7ff ff06 	bl	8002a50 <__retarget_lock_release_recursive>
 8002c44:	bd10      	pop	{r4, pc}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	20000260 	.word	0x20000260

08002c4c <__sfputc_r>:
 8002c4c:	6893      	ldr	r3, [r2, #8]
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	3b01      	subs	r3, #1
 8002c52:	6093      	str	r3, [r2, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da04      	bge.n	8002c62 <__sfputc_r+0x16>
 8002c58:	6994      	ldr	r4, [r2, #24]
 8002c5a:	42a3      	cmp	r3, r4
 8002c5c:	db07      	blt.n	8002c6e <__sfputc_r+0x22>
 8002c5e:	290a      	cmp	r1, #10
 8002c60:	d005      	beq.n	8002c6e <__sfputc_r+0x22>
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	1c58      	adds	r0, r3, #1
 8002c66:	6010      	str	r0, [r2, #0]
 8002c68:	7019      	strb	r1, [r3, #0]
 8002c6a:	0008      	movs	r0, r1
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	f000 fb60 	bl	8003332 <__swbuf_r>
 8002c72:	0001      	movs	r1, r0
 8002c74:	e7f9      	b.n	8002c6a <__sfputc_r+0x1e>

08002c76 <__sfputs_r>:
 8002c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c78:	0006      	movs	r6, r0
 8002c7a:	000f      	movs	r7, r1
 8002c7c:	0014      	movs	r4, r2
 8002c7e:	18d5      	adds	r5, r2, r3
 8002c80:	42ac      	cmp	r4, r5
 8002c82:	d101      	bne.n	8002c88 <__sfputs_r+0x12>
 8002c84:	2000      	movs	r0, #0
 8002c86:	e007      	b.n	8002c98 <__sfputs_r+0x22>
 8002c88:	7821      	ldrb	r1, [r4, #0]
 8002c8a:	003a      	movs	r2, r7
 8002c8c:	0030      	movs	r0, r6
 8002c8e:	f7ff ffdd 	bl	8002c4c <__sfputc_r>
 8002c92:	3401      	adds	r4, #1
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d1f3      	bne.n	8002c80 <__sfputs_r+0xa>
 8002c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c9c <_vfiprintf_r>:
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	b0a1      	sub	sp, #132	@ 0x84
 8002ca0:	000f      	movs	r7, r1
 8002ca2:	0015      	movs	r5, r2
 8002ca4:	001e      	movs	r6, r3
 8002ca6:	9003      	str	r0, [sp, #12]
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d004      	beq.n	8002cb6 <_vfiprintf_r+0x1a>
 8002cac:	6a03      	ldr	r3, [r0, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <_vfiprintf_r+0x1a>
 8002cb2:	f7ff fdbb 	bl	800282c <__sinit>
 8002cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb8:	07db      	lsls	r3, r3, #31
 8002cba:	d405      	bmi.n	8002cc8 <_vfiprintf_r+0x2c>
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	059b      	lsls	r3, r3, #22
 8002cc0:	d402      	bmi.n	8002cc8 <_vfiprintf_r+0x2c>
 8002cc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002cc4:	f7ff fec3 	bl	8002a4e <__retarget_lock_acquire_recursive>
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	071b      	lsls	r3, r3, #28
 8002ccc:	d502      	bpl.n	8002cd4 <_vfiprintf_r+0x38>
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d113      	bne.n	8002cfc <_vfiprintf_r+0x60>
 8002cd4:	0039      	movs	r1, r7
 8002cd6:	9803      	ldr	r0, [sp, #12]
 8002cd8:	f000 fb6e 	bl	80033b8 <__swsetup_r>
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d00d      	beq.n	8002cfc <_vfiprintf_r+0x60>
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce2:	07db      	lsls	r3, r3, #31
 8002ce4:	d503      	bpl.n	8002cee <_vfiprintf_r+0x52>
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	4240      	negs	r0, r0
 8002cea:	b021      	add	sp, #132	@ 0x84
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cee:	89bb      	ldrh	r3, [r7, #12]
 8002cf0:	059b      	lsls	r3, r3, #22
 8002cf2:	d4f8      	bmi.n	8002ce6 <_vfiprintf_r+0x4a>
 8002cf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002cf6:	f7ff feab 	bl	8002a50 <__retarget_lock_release_recursive>
 8002cfa:	e7f4      	b.n	8002ce6 <_vfiprintf_r+0x4a>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	ac08      	add	r4, sp, #32
 8002d00:	6163      	str	r3, [r4, #20]
 8002d02:	3320      	adds	r3, #32
 8002d04:	7663      	strb	r3, [r4, #25]
 8002d06:	3310      	adds	r3, #16
 8002d08:	76a3      	strb	r3, [r4, #26]
 8002d0a:	9607      	str	r6, [sp, #28]
 8002d0c:	002e      	movs	r6, r5
 8002d0e:	7833      	ldrb	r3, [r6, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <_vfiprintf_r+0x7c>
 8002d14:	2b25      	cmp	r3, #37	@ 0x25
 8002d16:	d148      	bne.n	8002daa <_vfiprintf_r+0x10e>
 8002d18:	1b73      	subs	r3, r6, r5
 8002d1a:	9305      	str	r3, [sp, #20]
 8002d1c:	42ae      	cmp	r6, r5
 8002d1e:	d00b      	beq.n	8002d38 <_vfiprintf_r+0x9c>
 8002d20:	002a      	movs	r2, r5
 8002d22:	0039      	movs	r1, r7
 8002d24:	9803      	ldr	r0, [sp, #12]
 8002d26:	f7ff ffa6 	bl	8002c76 <__sfputs_r>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d100      	bne.n	8002d30 <_vfiprintf_r+0x94>
 8002d2e:	e0ae      	b.n	8002e8e <_vfiprintf_r+0x1f2>
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	9a05      	ldr	r2, [sp, #20]
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	6163      	str	r3, [r4, #20]
 8002d38:	7833      	ldrb	r3, [r6, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d100      	bne.n	8002d40 <_vfiprintf_r+0xa4>
 8002d3e:	e0a6      	b.n	8002e8e <_vfiprintf_r+0x1f2>
 8002d40:	2201      	movs	r2, #1
 8002d42:	2300      	movs	r3, #0
 8002d44:	4252      	negs	r2, r2
 8002d46:	6062      	str	r2, [r4, #4]
 8002d48:	a904      	add	r1, sp, #16
 8002d4a:	3254      	adds	r2, #84	@ 0x54
 8002d4c:	1852      	adds	r2, r2, r1
 8002d4e:	1c75      	adds	r5, r6, #1
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	60e3      	str	r3, [r4, #12]
 8002d54:	60a3      	str	r3, [r4, #8]
 8002d56:	7013      	strb	r3, [r2, #0]
 8002d58:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002d5a:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <_vfiprintf_r+0x224>)
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	0018      	movs	r0, r3
 8002d60:	7829      	ldrb	r1, [r5, #0]
 8002d62:	9305      	str	r3, [sp, #20]
 8002d64:	f000 fb98 	bl	8003498 <memchr>
 8002d68:	1c6e      	adds	r6, r5, #1
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d11f      	bne.n	8002dae <_vfiprintf_r+0x112>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	06d3      	lsls	r3, r2, #27
 8002d72:	d504      	bpl.n	8002d7e <_vfiprintf_r+0xe2>
 8002d74:	2353      	movs	r3, #83	@ 0x53
 8002d76:	a904      	add	r1, sp, #16
 8002d78:	185b      	adds	r3, r3, r1
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	7019      	strb	r1, [r3, #0]
 8002d7e:	0713      	lsls	r3, r2, #28
 8002d80:	d504      	bpl.n	8002d8c <_vfiprintf_r+0xf0>
 8002d82:	2353      	movs	r3, #83	@ 0x53
 8002d84:	a904      	add	r1, sp, #16
 8002d86:	185b      	adds	r3, r3, r1
 8002d88:	212b      	movs	r1, #43	@ 0x2b
 8002d8a:	7019      	strb	r1, [r3, #0]
 8002d8c:	782b      	ldrb	r3, [r5, #0]
 8002d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d90:	d016      	beq.n	8002dc0 <_vfiprintf_r+0x124>
 8002d92:	002e      	movs	r6, r5
 8002d94:	2100      	movs	r1, #0
 8002d96:	200a      	movs	r0, #10
 8002d98:	68e3      	ldr	r3, [r4, #12]
 8002d9a:	7832      	ldrb	r2, [r6, #0]
 8002d9c:	1c75      	adds	r5, r6, #1
 8002d9e:	3a30      	subs	r2, #48	@ 0x30
 8002da0:	2a09      	cmp	r2, #9
 8002da2:	d950      	bls.n	8002e46 <_vfiprintf_r+0x1aa>
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d111      	bne.n	8002dcc <_vfiprintf_r+0x130>
 8002da8:	e017      	b.n	8002dda <_vfiprintf_r+0x13e>
 8002daa:	3601      	adds	r6, #1
 8002dac:	e7af      	b.n	8002d0e <_vfiprintf_r+0x72>
 8002dae:	9b05      	ldr	r3, [sp, #20]
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	1ac0      	subs	r0, r0, r3
 8002db4:	2301      	movs	r3, #1
 8002db6:	4083      	lsls	r3, r0
 8002db8:	4313      	orrs	r3, r2
 8002dba:	0035      	movs	r5, r6
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	e7cc      	b.n	8002d5a <_vfiprintf_r+0xbe>
 8002dc0:	9b07      	ldr	r3, [sp, #28]
 8002dc2:	1d19      	adds	r1, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9107      	str	r1, [sp, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db01      	blt.n	8002dd0 <_vfiprintf_r+0x134>
 8002dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002dce:	e004      	b.n	8002dda <_vfiprintf_r+0x13e>
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	60e3      	str	r3, [r4, #12]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	7833      	ldrb	r3, [r6, #0]
 8002ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dde:	d10c      	bne.n	8002dfa <_vfiprintf_r+0x15e>
 8002de0:	7873      	ldrb	r3, [r6, #1]
 8002de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de4:	d134      	bne.n	8002e50 <_vfiprintf_r+0x1b4>
 8002de6:	9b07      	ldr	r3, [sp, #28]
 8002de8:	3602      	adds	r6, #2
 8002dea:	1d1a      	adds	r2, r3, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	9207      	str	r2, [sp, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da01      	bge.n	8002df8 <_vfiprintf_r+0x15c>
 8002df4:	2301      	movs	r3, #1
 8002df6:	425b      	negs	r3, r3
 8002df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dfa:	4d32      	ldr	r5, [pc, #200]	@ (8002ec4 <_vfiprintf_r+0x228>)
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	0028      	movs	r0, r5
 8002e00:	7831      	ldrb	r1, [r6, #0]
 8002e02:	f000 fb49 	bl	8003498 <memchr>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d006      	beq.n	8002e18 <_vfiprintf_r+0x17c>
 8002e0a:	2340      	movs	r3, #64	@ 0x40
 8002e0c:	1b40      	subs	r0, r0, r5
 8002e0e:	4083      	lsls	r3, r0
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	3601      	adds	r6, #1
 8002e14:	4313      	orrs	r3, r2
 8002e16:	6023      	str	r3, [r4, #0]
 8002e18:	7831      	ldrb	r1, [r6, #0]
 8002e1a:	2206      	movs	r2, #6
 8002e1c:	482a      	ldr	r0, [pc, #168]	@ (8002ec8 <_vfiprintf_r+0x22c>)
 8002e1e:	1c75      	adds	r5, r6, #1
 8002e20:	7621      	strb	r1, [r4, #24]
 8002e22:	f000 fb39 	bl	8003498 <memchr>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d040      	beq.n	8002eac <_vfiprintf_r+0x210>
 8002e2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <_vfiprintf_r+0x230>)
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d122      	bne.n	8002e76 <_vfiprintf_r+0x1da>
 8002e30:	2207      	movs	r2, #7
 8002e32:	9b07      	ldr	r3, [sp, #28]
 8002e34:	3307      	adds	r3, #7
 8002e36:	4393      	bics	r3, r2
 8002e38:	3308      	adds	r3, #8
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	6963      	ldr	r3, [r4, #20]
 8002e3e:	9a04      	ldr	r2, [sp, #16]
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	6163      	str	r3, [r4, #20]
 8002e44:	e762      	b.n	8002d0c <_vfiprintf_r+0x70>
 8002e46:	4343      	muls	r3, r0
 8002e48:	002e      	movs	r6, r5
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	e7a4      	b.n	8002d9a <_vfiprintf_r+0xfe>
 8002e50:	2300      	movs	r3, #0
 8002e52:	200a      	movs	r0, #10
 8002e54:	0019      	movs	r1, r3
 8002e56:	3601      	adds	r6, #1
 8002e58:	6063      	str	r3, [r4, #4]
 8002e5a:	7832      	ldrb	r2, [r6, #0]
 8002e5c:	1c75      	adds	r5, r6, #1
 8002e5e:	3a30      	subs	r2, #48	@ 0x30
 8002e60:	2a09      	cmp	r2, #9
 8002e62:	d903      	bls.n	8002e6c <_vfiprintf_r+0x1d0>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0c8      	beq.n	8002dfa <_vfiprintf_r+0x15e>
 8002e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8002e6a:	e7c6      	b.n	8002dfa <_vfiprintf_r+0x15e>
 8002e6c:	4341      	muls	r1, r0
 8002e6e:	002e      	movs	r6, r5
 8002e70:	2301      	movs	r3, #1
 8002e72:	1889      	adds	r1, r1, r2
 8002e74:	e7f1      	b.n	8002e5a <_vfiprintf_r+0x1be>
 8002e76:	aa07      	add	r2, sp, #28
 8002e78:	9200      	str	r2, [sp, #0]
 8002e7a:	0021      	movs	r1, r4
 8002e7c:	003a      	movs	r2, r7
 8002e7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <_vfiprintf_r+0x234>)
 8002e80:	9803      	ldr	r0, [sp, #12]
 8002e82:	e000      	b.n	8002e86 <_vfiprintf_r+0x1ea>
 8002e84:	bf00      	nop
 8002e86:	9004      	str	r0, [sp, #16]
 8002e88:	9b04      	ldr	r3, [sp, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	d1d6      	bne.n	8002e3c <_vfiprintf_r+0x1a0>
 8002e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e90:	07db      	lsls	r3, r3, #31
 8002e92:	d405      	bmi.n	8002ea0 <_vfiprintf_r+0x204>
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	059b      	lsls	r3, r3, #22
 8002e98:	d402      	bmi.n	8002ea0 <_vfiprintf_r+0x204>
 8002e9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e9c:	f7ff fdd8 	bl	8002a50 <__retarget_lock_release_recursive>
 8002ea0:	89bb      	ldrh	r3, [r7, #12]
 8002ea2:	065b      	lsls	r3, r3, #25
 8002ea4:	d500      	bpl.n	8002ea8 <_vfiprintf_r+0x20c>
 8002ea6:	e71e      	b.n	8002ce6 <_vfiprintf_r+0x4a>
 8002ea8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002eaa:	e71e      	b.n	8002cea <_vfiprintf_r+0x4e>
 8002eac:	aa07      	add	r2, sp, #28
 8002eae:	9200      	str	r2, [sp, #0]
 8002eb0:	0021      	movs	r1, r4
 8002eb2:	003a      	movs	r2, r7
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <_vfiprintf_r+0x234>)
 8002eb6:	9803      	ldr	r0, [sp, #12]
 8002eb8:	f000 f87c 	bl	8002fb4 <_printf_i>
 8002ebc:	e7e3      	b.n	8002e86 <_vfiprintf_r+0x1ea>
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	08003680 	.word	0x08003680
 8002ec4:	08003686 	.word	0x08003686
 8002ec8:	0800368a 	.word	0x0800368a
 8002ecc:	00000000 	.word	0x00000000
 8002ed0:	08002c77 	.word	0x08002c77

08002ed4 <_printf_common>:
 8002ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ed6:	0016      	movs	r6, r2
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	688a      	ldr	r2, [r1, #8]
 8002edc:	690b      	ldr	r3, [r1, #16]
 8002ede:	000c      	movs	r4, r1
 8002ee0:	9000      	str	r0, [sp, #0]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	da00      	bge.n	8002ee8 <_printf_common+0x14>
 8002ee6:	0013      	movs	r3, r2
 8002ee8:	0022      	movs	r2, r4
 8002eea:	6033      	str	r3, [r6, #0]
 8002eec:	3243      	adds	r2, #67	@ 0x43
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	d001      	beq.n	8002ef8 <_printf_common+0x24>
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	6033      	str	r3, [r6, #0]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	069b      	lsls	r3, r3, #26
 8002efc:	d502      	bpl.n	8002f04 <_printf_common+0x30>
 8002efe:	6833      	ldr	r3, [r6, #0]
 8002f00:	3302      	adds	r3, #2
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	2306      	movs	r3, #6
 8002f08:	0015      	movs	r5, r2
 8002f0a:	401d      	ands	r5, r3
 8002f0c:	421a      	tst	r2, r3
 8002f0e:	d027      	beq.n	8002f60 <_printf_common+0x8c>
 8002f10:	0023      	movs	r3, r4
 8002f12:	3343      	adds	r3, #67	@ 0x43
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	4193      	sbcs	r3, r2
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	0692      	lsls	r2, r2, #26
 8002f1e:	d430      	bmi.n	8002f82 <_printf_common+0xae>
 8002f20:	0022      	movs	r2, r4
 8002f22:	9901      	ldr	r1, [sp, #4]
 8002f24:	9800      	ldr	r0, [sp, #0]
 8002f26:	9d08      	ldr	r5, [sp, #32]
 8002f28:	3243      	adds	r2, #67	@ 0x43
 8002f2a:	47a8      	blx	r5
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d025      	beq.n	8002f7c <_printf_common+0xa8>
 8002f30:	2206      	movs	r2, #6
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	2500      	movs	r5, #0
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d105      	bne.n	8002f48 <_printf_common+0x74>
 8002f3c:	6833      	ldr	r3, [r6, #0]
 8002f3e:	68e5      	ldr	r5, [r4, #12]
 8002f40:	1aed      	subs	r5, r5, r3
 8002f42:	43eb      	mvns	r3, r5
 8002f44:	17db      	asrs	r3, r3, #31
 8002f46:	401d      	ands	r5, r3
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	6922      	ldr	r2, [r4, #16]
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	dd01      	ble.n	8002f54 <_printf_common+0x80>
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	18ed      	adds	r5, r5, r3
 8002f54:	2600      	movs	r6, #0
 8002f56:	42b5      	cmp	r5, r6
 8002f58:	d120      	bne.n	8002f9c <_printf_common+0xc8>
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e010      	b.n	8002f80 <_printf_common+0xac>
 8002f5e:	3501      	adds	r5, #1
 8002f60:	68e3      	ldr	r3, [r4, #12]
 8002f62:	6832      	ldr	r2, [r6, #0]
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	42ab      	cmp	r3, r5
 8002f68:	ddd2      	ble.n	8002f10 <_printf_common+0x3c>
 8002f6a:	0022      	movs	r2, r4
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	9901      	ldr	r1, [sp, #4]
 8002f70:	9800      	ldr	r0, [sp, #0]
 8002f72:	9f08      	ldr	r7, [sp, #32]
 8002f74:	3219      	adds	r2, #25
 8002f76:	47b8      	blx	r7
 8002f78:	3001      	adds	r0, #1
 8002f7a:	d1f0      	bne.n	8002f5e <_printf_common+0x8a>
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	4240      	negs	r0, r0
 8002f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f82:	2030      	movs	r0, #48	@ 0x30
 8002f84:	18e1      	adds	r1, r4, r3
 8002f86:	3143      	adds	r1, #67	@ 0x43
 8002f88:	7008      	strb	r0, [r1, #0]
 8002f8a:	0021      	movs	r1, r4
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	3145      	adds	r1, #69	@ 0x45
 8002f90:	7809      	ldrb	r1, [r1, #0]
 8002f92:	18a2      	adds	r2, r4, r2
 8002f94:	3243      	adds	r2, #67	@ 0x43
 8002f96:	3302      	adds	r3, #2
 8002f98:	7011      	strb	r1, [r2, #0]
 8002f9a:	e7c1      	b.n	8002f20 <_printf_common+0x4c>
 8002f9c:	0022      	movs	r2, r4
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9901      	ldr	r1, [sp, #4]
 8002fa2:	9800      	ldr	r0, [sp, #0]
 8002fa4:	9f08      	ldr	r7, [sp, #32]
 8002fa6:	321a      	adds	r2, #26
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	d0e6      	beq.n	8002f7c <_printf_common+0xa8>
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7d1      	b.n	8002f56 <_printf_common+0x82>
	...

08002fb4 <_printf_i>:
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b08b      	sub	sp, #44	@ 0x2c
 8002fb8:	9206      	str	r2, [sp, #24]
 8002fba:	000a      	movs	r2, r1
 8002fbc:	3243      	adds	r2, #67	@ 0x43
 8002fbe:	9307      	str	r3, [sp, #28]
 8002fc0:	9005      	str	r0, [sp, #20]
 8002fc2:	9203      	str	r2, [sp, #12]
 8002fc4:	7e0a      	ldrb	r2, [r1, #24]
 8002fc6:	000c      	movs	r4, r1
 8002fc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002fca:	2a78      	cmp	r2, #120	@ 0x78
 8002fcc:	d809      	bhi.n	8002fe2 <_printf_i+0x2e>
 8002fce:	2a62      	cmp	r2, #98	@ 0x62
 8002fd0:	d80b      	bhi.n	8002fea <_printf_i+0x36>
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d100      	bne.n	8002fd8 <_printf_i+0x24>
 8002fd6:	e0bc      	b.n	8003152 <_printf_i+0x19e>
 8002fd8:	497b      	ldr	r1, [pc, #492]	@ (80031c8 <_printf_i+0x214>)
 8002fda:	9104      	str	r1, [sp, #16]
 8002fdc:	2a58      	cmp	r2, #88	@ 0x58
 8002fde:	d100      	bne.n	8002fe2 <_printf_i+0x2e>
 8002fe0:	e090      	b.n	8003104 <_printf_i+0x150>
 8002fe2:	0025      	movs	r5, r4
 8002fe4:	3542      	adds	r5, #66	@ 0x42
 8002fe6:	702a      	strb	r2, [r5, #0]
 8002fe8:	e022      	b.n	8003030 <_printf_i+0x7c>
 8002fea:	0010      	movs	r0, r2
 8002fec:	3863      	subs	r0, #99	@ 0x63
 8002fee:	2815      	cmp	r0, #21
 8002ff0:	d8f7      	bhi.n	8002fe2 <_printf_i+0x2e>
 8002ff2:	f7fd f885 	bl	8000100 <__gnu_thumb1_case_shi>
 8002ff6:	0016      	.short	0x0016
 8002ff8:	fff6001f 	.word	0xfff6001f
 8002ffc:	fff6fff6 	.word	0xfff6fff6
 8003000:	001ffff6 	.word	0x001ffff6
 8003004:	fff6fff6 	.word	0xfff6fff6
 8003008:	fff6fff6 	.word	0xfff6fff6
 800300c:	003600a1 	.word	0x003600a1
 8003010:	fff60080 	.word	0xfff60080
 8003014:	00b2fff6 	.word	0x00b2fff6
 8003018:	0036fff6 	.word	0x0036fff6
 800301c:	fff6fff6 	.word	0xfff6fff6
 8003020:	0084      	.short	0x0084
 8003022:	0025      	movs	r5, r4
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	3542      	adds	r5, #66	@ 0x42
 8003028:	1d11      	adds	r1, r2, #4
 800302a:	6019      	str	r1, [r3, #0]
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	702b      	strb	r3, [r5, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	e0a0      	b.n	8003176 <_printf_i+0x1c2>
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	6809      	ldr	r1, [r1, #0]
 8003038:	1d02      	adds	r2, r0, #4
 800303a:	060d      	lsls	r5, r1, #24
 800303c:	d50b      	bpl.n	8003056 <_printf_i+0xa2>
 800303e:	6806      	ldr	r6, [r0, #0]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	2e00      	cmp	r6, #0
 8003044:	da03      	bge.n	800304e <_printf_i+0x9a>
 8003046:	232d      	movs	r3, #45	@ 0x2d
 8003048:	9a03      	ldr	r2, [sp, #12]
 800304a:	4276      	negs	r6, r6
 800304c:	7013      	strb	r3, [r2, #0]
 800304e:	4b5e      	ldr	r3, [pc, #376]	@ (80031c8 <_printf_i+0x214>)
 8003050:	270a      	movs	r7, #10
 8003052:	9304      	str	r3, [sp, #16]
 8003054:	e018      	b.n	8003088 <_printf_i+0xd4>
 8003056:	6806      	ldr	r6, [r0, #0]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	0649      	lsls	r1, r1, #25
 800305c:	d5f1      	bpl.n	8003042 <_printf_i+0x8e>
 800305e:	b236      	sxth	r6, r6
 8003060:	e7ef      	b.n	8003042 <_printf_i+0x8e>
 8003062:	6808      	ldr	r0, [r1, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	c940      	ldmia	r1!, {r6}
 8003068:	0605      	lsls	r5, r0, #24
 800306a:	d402      	bmi.n	8003072 <_printf_i+0xbe>
 800306c:	0640      	lsls	r0, r0, #25
 800306e:	d500      	bpl.n	8003072 <_printf_i+0xbe>
 8003070:	b2b6      	uxth	r6, r6
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	4b54      	ldr	r3, [pc, #336]	@ (80031c8 <_printf_i+0x214>)
 8003076:	270a      	movs	r7, #10
 8003078:	9304      	str	r3, [sp, #16]
 800307a:	2a6f      	cmp	r2, #111	@ 0x6f
 800307c:	d100      	bne.n	8003080 <_printf_i+0xcc>
 800307e:	3f02      	subs	r7, #2
 8003080:	0023      	movs	r3, r4
 8003082:	2200      	movs	r2, #0
 8003084:	3343      	adds	r3, #67	@ 0x43
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	60a3      	str	r3, [r4, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db03      	blt.n	8003098 <_printf_i+0xe4>
 8003090:	2104      	movs	r1, #4
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	438a      	bics	r2, r1
 8003096:	6022      	str	r2, [r4, #0]
 8003098:	2e00      	cmp	r6, #0
 800309a:	d102      	bne.n	80030a2 <_printf_i+0xee>
 800309c:	9d03      	ldr	r5, [sp, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <_printf_i+0x108>
 80030a2:	9d03      	ldr	r5, [sp, #12]
 80030a4:	0030      	movs	r0, r6
 80030a6:	0039      	movs	r1, r7
 80030a8:	f7fd f8ba 	bl	8000220 <__aeabi_uidivmod>
 80030ac:	9b04      	ldr	r3, [sp, #16]
 80030ae:	3d01      	subs	r5, #1
 80030b0:	5c5b      	ldrb	r3, [r3, r1]
 80030b2:	702b      	strb	r3, [r5, #0]
 80030b4:	0033      	movs	r3, r6
 80030b6:	0006      	movs	r6, r0
 80030b8:	429f      	cmp	r7, r3
 80030ba:	d9f3      	bls.n	80030a4 <_printf_i+0xf0>
 80030bc:	2f08      	cmp	r7, #8
 80030be:	d109      	bne.n	80030d4 <_printf_i+0x120>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	07db      	lsls	r3, r3, #31
 80030c4:	d506      	bpl.n	80030d4 <_printf_i+0x120>
 80030c6:	6862      	ldr	r2, [r4, #4]
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dc02      	bgt.n	80030d4 <_printf_i+0x120>
 80030ce:	2330      	movs	r3, #48	@ 0x30
 80030d0:	3d01      	subs	r5, #1
 80030d2:	702b      	strb	r3, [r5, #0]
 80030d4:	9b03      	ldr	r3, [sp, #12]
 80030d6:	1b5b      	subs	r3, r3, r5
 80030d8:	6123      	str	r3, [r4, #16]
 80030da:	9b07      	ldr	r3, [sp, #28]
 80030dc:	0021      	movs	r1, r4
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	9805      	ldr	r0, [sp, #20]
 80030e2:	9b06      	ldr	r3, [sp, #24]
 80030e4:	aa09      	add	r2, sp, #36	@ 0x24
 80030e6:	f7ff fef5 	bl	8002ed4 <_printf_common>
 80030ea:	3001      	adds	r0, #1
 80030ec:	d148      	bne.n	8003180 <_printf_i+0x1cc>
 80030ee:	2001      	movs	r0, #1
 80030f0:	4240      	negs	r0, r0
 80030f2:	b00b      	add	sp, #44	@ 0x2c
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	2220      	movs	r2, #32
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	2278      	movs	r2, #120	@ 0x78
 8003100:	4932      	ldr	r1, [pc, #200]	@ (80031cc <_printf_i+0x218>)
 8003102:	9104      	str	r1, [sp, #16]
 8003104:	0021      	movs	r1, r4
 8003106:	3145      	adds	r1, #69	@ 0x45
 8003108:	700a      	strb	r2, [r1, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	c940      	ldmia	r1!, {r6}
 8003110:	0610      	lsls	r0, r2, #24
 8003112:	d402      	bmi.n	800311a <_printf_i+0x166>
 8003114:	0650      	lsls	r0, r2, #25
 8003116:	d500      	bpl.n	800311a <_printf_i+0x166>
 8003118:	b2b6      	uxth	r6, r6
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	07d3      	lsls	r3, r2, #31
 800311e:	d502      	bpl.n	8003126 <_printf_i+0x172>
 8003120:	2320      	movs	r3, #32
 8003122:	4313      	orrs	r3, r2
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	2e00      	cmp	r6, #0
 8003128:	d001      	beq.n	800312e <_printf_i+0x17a>
 800312a:	2710      	movs	r7, #16
 800312c:	e7a8      	b.n	8003080 <_printf_i+0xcc>
 800312e:	2220      	movs	r2, #32
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	4393      	bics	r3, r2
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	e7f8      	b.n	800312a <_printf_i+0x176>
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	680d      	ldr	r5, [r1, #0]
 800313c:	1d10      	adds	r0, r2, #4
 800313e:	6949      	ldr	r1, [r1, #20]
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	062e      	lsls	r6, r5, #24
 8003146:	d501      	bpl.n	800314c <_printf_i+0x198>
 8003148:	6019      	str	r1, [r3, #0]
 800314a:	e002      	b.n	8003152 <_printf_i+0x19e>
 800314c:	066d      	lsls	r5, r5, #25
 800314e:	d5fb      	bpl.n	8003148 <_printf_i+0x194>
 8003150:	8019      	strh	r1, [r3, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	9d03      	ldr	r5, [sp, #12]
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	e7bf      	b.n	80030da <_printf_i+0x126>
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	1d11      	adds	r1, r2, #4
 800315e:	6019      	str	r1, [r3, #0]
 8003160:	6815      	ldr	r5, [r2, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	0028      	movs	r0, r5
 8003166:	6862      	ldr	r2, [r4, #4]
 8003168:	f000 f996 	bl	8003498 <memchr>
 800316c:	2800      	cmp	r0, #0
 800316e:	d001      	beq.n	8003174 <_printf_i+0x1c0>
 8003170:	1b40      	subs	r0, r0, r5
 8003172:	6060      	str	r0, [r4, #4]
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	6123      	str	r3, [r4, #16]
 8003178:	2300      	movs	r3, #0
 800317a:	9a03      	ldr	r2, [sp, #12]
 800317c:	7013      	strb	r3, [r2, #0]
 800317e:	e7ac      	b.n	80030da <_printf_i+0x126>
 8003180:	002a      	movs	r2, r5
 8003182:	6923      	ldr	r3, [r4, #16]
 8003184:	9906      	ldr	r1, [sp, #24]
 8003186:	9805      	ldr	r0, [sp, #20]
 8003188:	9d07      	ldr	r5, [sp, #28]
 800318a:	47a8      	blx	r5
 800318c:	3001      	adds	r0, #1
 800318e:	d0ae      	beq.n	80030ee <_printf_i+0x13a>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	079b      	lsls	r3, r3, #30
 8003194:	d415      	bmi.n	80031c2 <_printf_i+0x20e>
 8003196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003198:	68e0      	ldr	r0, [r4, #12]
 800319a:	4298      	cmp	r0, r3
 800319c:	daa9      	bge.n	80030f2 <_printf_i+0x13e>
 800319e:	0018      	movs	r0, r3
 80031a0:	e7a7      	b.n	80030f2 <_printf_i+0x13e>
 80031a2:	0022      	movs	r2, r4
 80031a4:	2301      	movs	r3, #1
 80031a6:	9906      	ldr	r1, [sp, #24]
 80031a8:	9805      	ldr	r0, [sp, #20]
 80031aa:	9e07      	ldr	r6, [sp, #28]
 80031ac:	3219      	adds	r2, #25
 80031ae:	47b0      	blx	r6
 80031b0:	3001      	adds	r0, #1
 80031b2:	d09c      	beq.n	80030ee <_printf_i+0x13a>
 80031b4:	3501      	adds	r5, #1
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	42ab      	cmp	r3, r5
 80031be:	dcf0      	bgt.n	80031a2 <_printf_i+0x1ee>
 80031c0:	e7e9      	b.n	8003196 <_printf_i+0x1e2>
 80031c2:	2500      	movs	r5, #0
 80031c4:	e7f7      	b.n	80031b6 <_printf_i+0x202>
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	08003691 	.word	0x08003691
 80031cc:	080036a2 	.word	0x080036a2

080031d0 <__sflush_r>:
 80031d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d2:	220c      	movs	r2, #12
 80031d4:	5e8b      	ldrsh	r3, [r1, r2]
 80031d6:	0005      	movs	r5, r0
 80031d8:	000c      	movs	r4, r1
 80031da:	071a      	lsls	r2, r3, #28
 80031dc:	d456      	bmi.n	800328c <__sflush_r+0xbc>
 80031de:	684a      	ldr	r2, [r1, #4]
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	dc02      	bgt.n	80031ea <__sflush_r+0x1a>
 80031e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	dd4e      	ble.n	8003288 <__sflush_r+0xb8>
 80031ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	d04b      	beq.n	8003288 <__sflush_r+0xb8>
 80031f0:	2200      	movs	r2, #0
 80031f2:	2080      	movs	r0, #128	@ 0x80
 80031f4:	682e      	ldr	r6, [r5, #0]
 80031f6:	602a      	str	r2, [r5, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	0140      	lsls	r0, r0, #5
 80031fc:	6a21      	ldr	r1, [r4, #32]
 80031fe:	4002      	ands	r2, r0
 8003200:	4203      	tst	r3, r0
 8003202:	d033      	beq.n	800326c <__sflush_r+0x9c>
 8003204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	075b      	lsls	r3, r3, #29
 800320a:	d506      	bpl.n	800321a <__sflush_r+0x4a>
 800320c:	6863      	ldr	r3, [r4, #4]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <__sflush_r+0x4a>
 8003216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	2300      	movs	r3, #0
 800321c:	0028      	movs	r0, r5
 800321e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003220:	6a21      	ldr	r1, [r4, #32]
 8003222:	47b8      	blx	r7
 8003224:	89a2      	ldrh	r2, [r4, #12]
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d106      	bne.n	8003238 <__sflush_r+0x68>
 800322a:	6829      	ldr	r1, [r5, #0]
 800322c:	291d      	cmp	r1, #29
 800322e:	d846      	bhi.n	80032be <__sflush_r+0xee>
 8003230:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <__sflush_r+0x108>)
 8003232:	410b      	asrs	r3, r1
 8003234:	07db      	lsls	r3, r3, #31
 8003236:	d442      	bmi.n	80032be <__sflush_r+0xee>
 8003238:	2300      	movs	r3, #0
 800323a:	6063      	str	r3, [r4, #4]
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	04d2      	lsls	r2, r2, #19
 8003242:	d505      	bpl.n	8003250 <__sflush_r+0x80>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d102      	bne.n	800324e <__sflush_r+0x7e>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d100      	bne.n	8003250 <__sflush_r+0x80>
 800324e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003252:	602e      	str	r6, [r5, #0]
 8003254:	2900      	cmp	r1, #0
 8003256:	d017      	beq.n	8003288 <__sflush_r+0xb8>
 8003258:	0023      	movs	r3, r4
 800325a:	3344      	adds	r3, #68	@ 0x44
 800325c:	4299      	cmp	r1, r3
 800325e:	d002      	beq.n	8003266 <__sflush_r+0x96>
 8003260:	0028      	movs	r0, r5
 8003262:	f7ff fbf7 	bl	8002a54 <_free_r>
 8003266:	2300      	movs	r3, #0
 8003268:	6363      	str	r3, [r4, #52]	@ 0x34
 800326a:	e00d      	b.n	8003288 <__sflush_r+0xb8>
 800326c:	2301      	movs	r3, #1
 800326e:	0028      	movs	r0, r5
 8003270:	47b8      	blx	r7
 8003272:	0002      	movs	r2, r0
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d1c6      	bne.n	8003206 <__sflush_r+0x36>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0c3      	beq.n	8003206 <__sflush_r+0x36>
 800327e:	2b1d      	cmp	r3, #29
 8003280:	d001      	beq.n	8003286 <__sflush_r+0xb6>
 8003282:	2b16      	cmp	r3, #22
 8003284:	d11a      	bne.n	80032bc <__sflush_r+0xec>
 8003286:	602e      	str	r6, [r5, #0]
 8003288:	2000      	movs	r0, #0
 800328a:	e01e      	b.n	80032ca <__sflush_r+0xfa>
 800328c:	690e      	ldr	r6, [r1, #16]
 800328e:	2e00      	cmp	r6, #0
 8003290:	d0fa      	beq.n	8003288 <__sflush_r+0xb8>
 8003292:	680f      	ldr	r7, [r1, #0]
 8003294:	600e      	str	r6, [r1, #0]
 8003296:	1bba      	subs	r2, r7, r6
 8003298:	9201      	str	r2, [sp, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	079b      	lsls	r3, r3, #30
 800329e:	d100      	bne.n	80032a2 <__sflush_r+0xd2>
 80032a0:	694a      	ldr	r2, [r1, #20]
 80032a2:	60a2      	str	r2, [r4, #8]
 80032a4:	9b01      	ldr	r3, [sp, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	ddee      	ble.n	8003288 <__sflush_r+0xb8>
 80032aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032ac:	0032      	movs	r2, r6
 80032ae:	001f      	movs	r7, r3
 80032b0:	0028      	movs	r0, r5
 80032b2:	9b01      	ldr	r3, [sp, #4]
 80032b4:	6a21      	ldr	r1, [r4, #32]
 80032b6:	47b8      	blx	r7
 80032b8:	2800      	cmp	r0, #0
 80032ba:	dc07      	bgt.n	80032cc <__sflush_r+0xfc>
 80032bc:	89a2      	ldrh	r2, [r4, #12]
 80032be:	2340      	movs	r3, #64	@ 0x40
 80032c0:	2001      	movs	r0, #1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b21b      	sxth	r3, r3
 80032c6:	81a3      	strh	r3, [r4, #12]
 80032c8:	4240      	negs	r0, r0
 80032ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032cc:	9b01      	ldr	r3, [sp, #4]
 80032ce:	1836      	adds	r6, r6, r0
 80032d0:	1a1b      	subs	r3, r3, r0
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	e7e6      	b.n	80032a4 <__sflush_r+0xd4>
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	dfbffffe 	.word	0xdfbffffe

080032dc <_fflush_r>:
 80032dc:	690b      	ldr	r3, [r1, #16]
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	0005      	movs	r5, r0
 80032e2:	000c      	movs	r4, r1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <_fflush_r+0x12>
 80032e8:	2500      	movs	r5, #0
 80032ea:	0028      	movs	r0, r5
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d004      	beq.n	80032fc <_fflush_r+0x20>
 80032f2:	6a03      	ldr	r3, [r0, #32]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <_fflush_r+0x20>
 80032f8:	f7ff fa98 	bl	800282c <__sinit>
 80032fc:	220c      	movs	r2, #12
 80032fe:	5ea3      	ldrsh	r3, [r4, r2]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f1      	beq.n	80032e8 <_fflush_r+0xc>
 8003304:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003306:	07d2      	lsls	r2, r2, #31
 8003308:	d404      	bmi.n	8003314 <_fflush_r+0x38>
 800330a:	059b      	lsls	r3, r3, #22
 800330c:	d402      	bmi.n	8003314 <_fflush_r+0x38>
 800330e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003310:	f7ff fb9d 	bl	8002a4e <__retarget_lock_acquire_recursive>
 8003314:	0028      	movs	r0, r5
 8003316:	0021      	movs	r1, r4
 8003318:	f7ff ff5a 	bl	80031d0 <__sflush_r>
 800331c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800331e:	0005      	movs	r5, r0
 8003320:	07db      	lsls	r3, r3, #31
 8003322:	d4e2      	bmi.n	80032ea <_fflush_r+0xe>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	059b      	lsls	r3, r3, #22
 8003328:	d4df      	bmi.n	80032ea <_fflush_r+0xe>
 800332a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800332c:	f7ff fb90 	bl	8002a50 <__retarget_lock_release_recursive>
 8003330:	e7db      	b.n	80032ea <_fflush_r+0xe>

08003332 <__swbuf_r>:
 8003332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003334:	0006      	movs	r6, r0
 8003336:	000d      	movs	r5, r1
 8003338:	0014      	movs	r4, r2
 800333a:	2800      	cmp	r0, #0
 800333c:	d004      	beq.n	8003348 <__swbuf_r+0x16>
 800333e:	6a03      	ldr	r3, [r0, #32]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <__swbuf_r+0x16>
 8003344:	f7ff fa72 	bl	800282c <__sinit>
 8003348:	69a3      	ldr	r3, [r4, #24]
 800334a:	60a3      	str	r3, [r4, #8]
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	071b      	lsls	r3, r3, #28
 8003350:	d502      	bpl.n	8003358 <__swbuf_r+0x26>
 8003352:	6923      	ldr	r3, [r4, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <__swbuf_r+0x3a>
 8003358:	0021      	movs	r1, r4
 800335a:	0030      	movs	r0, r6
 800335c:	f000 f82c 	bl	80033b8 <__swsetup_r>
 8003360:	2800      	cmp	r0, #0
 8003362:	d003      	beq.n	800336c <__swbuf_r+0x3a>
 8003364:	2501      	movs	r5, #1
 8003366:	426d      	negs	r5, r5
 8003368:	0028      	movs	r0, r5
 800336a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	b2ef      	uxtb	r7, r5
 8003372:	1ac0      	subs	r0, r0, r3
 8003374:	6963      	ldr	r3, [r4, #20]
 8003376:	b2ed      	uxtb	r5, r5
 8003378:	4283      	cmp	r3, r0
 800337a:	dc05      	bgt.n	8003388 <__swbuf_r+0x56>
 800337c:	0021      	movs	r1, r4
 800337e:	0030      	movs	r0, r6
 8003380:	f7ff ffac 	bl	80032dc <_fflush_r>
 8003384:	2800      	cmp	r0, #0
 8003386:	d1ed      	bne.n	8003364 <__swbuf_r+0x32>
 8003388:	68a3      	ldr	r3, [r4, #8]
 800338a:	3001      	adds	r0, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	60a3      	str	r3, [r4, #8]
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6022      	str	r2, [r4, #0]
 8003396:	701f      	strb	r7, [r3, #0]
 8003398:	6963      	ldr	r3, [r4, #20]
 800339a:	4283      	cmp	r3, r0
 800339c:	d004      	beq.n	80033a8 <__swbuf_r+0x76>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	07db      	lsls	r3, r3, #31
 80033a2:	d5e1      	bpl.n	8003368 <__swbuf_r+0x36>
 80033a4:	2d0a      	cmp	r5, #10
 80033a6:	d1df      	bne.n	8003368 <__swbuf_r+0x36>
 80033a8:	0021      	movs	r1, r4
 80033aa:	0030      	movs	r0, r6
 80033ac:	f7ff ff96 	bl	80032dc <_fflush_r>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d0d9      	beq.n	8003368 <__swbuf_r+0x36>
 80033b4:	e7d6      	b.n	8003364 <__swbuf_r+0x32>
	...

080033b8 <__swsetup_r>:
 80033b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <__swsetup_r+0xb8>)
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	0005      	movs	r5, r0
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	000c      	movs	r4, r1
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d004      	beq.n	80033d0 <__swsetup_r+0x18>
 80033c6:	6a03      	ldr	r3, [r0, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <__swsetup_r+0x18>
 80033cc:	f7ff fa2e 	bl	800282c <__sinit>
 80033d0:	230c      	movs	r3, #12
 80033d2:	5ee2      	ldrsh	r2, [r4, r3]
 80033d4:	0713      	lsls	r3, r2, #28
 80033d6:	d423      	bmi.n	8003420 <__swsetup_r+0x68>
 80033d8:	06d3      	lsls	r3, r2, #27
 80033da:	d407      	bmi.n	80033ec <__swsetup_r+0x34>
 80033dc:	2309      	movs	r3, #9
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	2340      	movs	r3, #64	@ 0x40
 80033e2:	2001      	movs	r0, #1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	4240      	negs	r0, r0
 80033ea:	e03a      	b.n	8003462 <__swsetup_r+0xaa>
 80033ec:	0752      	lsls	r2, r2, #29
 80033ee:	d513      	bpl.n	8003418 <__swsetup_r+0x60>
 80033f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033f2:	2900      	cmp	r1, #0
 80033f4:	d008      	beq.n	8003408 <__swsetup_r+0x50>
 80033f6:	0023      	movs	r3, r4
 80033f8:	3344      	adds	r3, #68	@ 0x44
 80033fa:	4299      	cmp	r1, r3
 80033fc:	d002      	beq.n	8003404 <__swsetup_r+0x4c>
 80033fe:	0028      	movs	r0, r5
 8003400:	f7ff fb28 	bl	8002a54 <_free_r>
 8003404:	2300      	movs	r3, #0
 8003406:	6363      	str	r3, [r4, #52]	@ 0x34
 8003408:	2224      	movs	r2, #36	@ 0x24
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	4393      	bics	r3, r2
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	2300      	movs	r3, #0
 8003412:	6063      	str	r3, [r4, #4]
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	2308      	movs	r3, #8
 800341a:	89a2      	ldrh	r2, [r4, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <__swsetup_r+0x86>
 8003426:	21a0      	movs	r1, #160	@ 0xa0
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	0089      	lsls	r1, r1, #2
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	400b      	ands	r3, r1
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <__swsetup_r+0x86>
 8003436:	0021      	movs	r1, r4
 8003438:	0028      	movs	r0, r5
 800343a:	f000 f863 	bl	8003504 <__smakebuf_r>
 800343e:	230c      	movs	r3, #12
 8003440:	5ee2      	ldrsh	r2, [r4, r3]
 8003442:	2101      	movs	r1, #1
 8003444:	0013      	movs	r3, r2
 8003446:	400b      	ands	r3, r1
 8003448:	420a      	tst	r2, r1
 800344a:	d00b      	beq.n	8003464 <__swsetup_r+0xac>
 800344c:	2300      	movs	r3, #0
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	6963      	ldr	r3, [r4, #20]
 8003452:	425b      	negs	r3, r3
 8003454:	61a3      	str	r3, [r4, #24]
 8003456:	2000      	movs	r0, #0
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	4283      	cmp	r3, r0
 800345c:	d101      	bne.n	8003462 <__swsetup_r+0xaa>
 800345e:	0613      	lsls	r3, r2, #24
 8003460:	d4be      	bmi.n	80033e0 <__swsetup_r+0x28>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	0791      	lsls	r1, r2, #30
 8003466:	d400      	bmi.n	800346a <__swsetup_r+0xb2>
 8003468:	6963      	ldr	r3, [r4, #20]
 800346a:	60a3      	str	r3, [r4, #8]
 800346c:	e7f3      	b.n	8003456 <__swsetup_r+0x9e>
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	20000018 	.word	0x20000018

08003474 <_sbrk_r>:
 8003474:	2300      	movs	r3, #0
 8003476:	b570      	push	{r4, r5, r6, lr}
 8003478:	4d06      	ldr	r5, [pc, #24]	@ (8003494 <_sbrk_r+0x20>)
 800347a:	0004      	movs	r4, r0
 800347c:	0008      	movs	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd f9d8 	bl	8000834 <_sbrk>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d103      	bne.n	8003490 <_sbrk_r+0x1c>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d000      	beq.n	8003490 <_sbrk_r+0x1c>
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	2000025c 	.word	0x2000025c

08003498 <memchr>:
 8003498:	b2c9      	uxtb	r1, r1
 800349a:	1882      	adds	r2, r0, r2
 800349c:	4290      	cmp	r0, r2
 800349e:	d101      	bne.n	80034a4 <memchr+0xc>
 80034a0:	2000      	movs	r0, #0
 80034a2:	4770      	bx	lr
 80034a4:	7803      	ldrb	r3, [r0, #0]
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d0fb      	beq.n	80034a2 <memchr+0xa>
 80034aa:	3001      	adds	r0, #1
 80034ac:	e7f6      	b.n	800349c <memchr+0x4>
	...

080034b0 <__swhatbuf_r>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	000e      	movs	r6, r1
 80034b4:	001d      	movs	r5, r3
 80034b6:	230e      	movs	r3, #14
 80034b8:	5ec9      	ldrsh	r1, [r1, r3]
 80034ba:	0014      	movs	r4, r2
 80034bc:	b096      	sub	sp, #88	@ 0x58
 80034be:	2900      	cmp	r1, #0
 80034c0:	da0c      	bge.n	80034dc <__swhatbuf_r+0x2c>
 80034c2:	89b2      	ldrh	r2, [r6, #12]
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	0011      	movs	r1, r2
 80034c8:	4019      	ands	r1, r3
 80034ca:	421a      	tst	r2, r3
 80034cc:	d114      	bne.n	80034f8 <__swhatbuf_r+0x48>
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	2000      	movs	r0, #0
 80034d4:	6029      	str	r1, [r5, #0]
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	b016      	add	sp, #88	@ 0x58
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	466a      	mov	r2, sp
 80034de:	f000 f853 	bl	8003588 <_fstat_r>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	dbed      	blt.n	80034c2 <__swhatbuf_r+0x12>
 80034e6:	23f0      	movs	r3, #240	@ 0xf0
 80034e8:	9901      	ldr	r1, [sp, #4]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	4019      	ands	r1, r3
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <__swhatbuf_r+0x50>)
 80034f0:	18c9      	adds	r1, r1, r3
 80034f2:	424b      	negs	r3, r1
 80034f4:	4159      	adcs	r1, r3
 80034f6:	e7ea      	b.n	80034ce <__swhatbuf_r+0x1e>
 80034f8:	2100      	movs	r1, #0
 80034fa:	2340      	movs	r3, #64	@ 0x40
 80034fc:	e7e9      	b.n	80034d2 <__swhatbuf_r+0x22>
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	ffffe000 	.word	0xffffe000

08003504 <__smakebuf_r>:
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	2602      	movs	r6, #2
 8003508:	898b      	ldrh	r3, [r1, #12]
 800350a:	0005      	movs	r5, r0
 800350c:	000c      	movs	r4, r1
 800350e:	b085      	sub	sp, #20
 8003510:	4233      	tst	r3, r6
 8003512:	d007      	beq.n	8003524 <__smakebuf_r+0x20>
 8003514:	0023      	movs	r3, r4
 8003516:	3347      	adds	r3, #71	@ 0x47
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	2301      	movs	r3, #1
 800351e:	6163      	str	r3, [r4, #20]
 8003520:	b005      	add	sp, #20
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003524:	ab03      	add	r3, sp, #12
 8003526:	aa02      	add	r2, sp, #8
 8003528:	f7ff ffc2 	bl	80034b0 <__swhatbuf_r>
 800352c:	9f02      	ldr	r7, [sp, #8]
 800352e:	9001      	str	r0, [sp, #4]
 8003530:	0039      	movs	r1, r7
 8003532:	0028      	movs	r0, r5
 8003534:	f7ff fafa 	bl	8002b2c <_malloc_r>
 8003538:	2800      	cmp	r0, #0
 800353a:	d108      	bne.n	800354e <__smakebuf_r+0x4a>
 800353c:	220c      	movs	r2, #12
 800353e:	5ea3      	ldrsh	r3, [r4, r2]
 8003540:	059a      	lsls	r2, r3, #22
 8003542:	d4ed      	bmi.n	8003520 <__smakebuf_r+0x1c>
 8003544:	2203      	movs	r2, #3
 8003546:	4393      	bics	r3, r2
 8003548:	431e      	orrs	r6, r3
 800354a:	81a6      	strh	r6, [r4, #12]
 800354c:	e7e2      	b.n	8003514 <__smakebuf_r+0x10>
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	89a2      	ldrh	r2, [r4, #12]
 8003552:	6020      	str	r0, [r4, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	6120      	str	r0, [r4, #16]
 800355c:	6167      	str	r7, [r4, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <__smakebuf_r+0x78>
 8003562:	0028      	movs	r0, r5
 8003564:	230e      	movs	r3, #14
 8003566:	5ee1      	ldrsh	r1, [r4, r3]
 8003568:	f000 f820 	bl	80035ac <_isatty_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	d005      	beq.n	800357c <__smakebuf_r+0x78>
 8003570:	2303      	movs	r3, #3
 8003572:	89a2      	ldrh	r2, [r4, #12]
 8003574:	439a      	bics	r2, r3
 8003576:	3b02      	subs	r3, #2
 8003578:	4313      	orrs	r3, r2
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	9a01      	ldr	r2, [sp, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	e7cc      	b.n	8003520 <__smakebuf_r+0x1c>
	...

08003588 <_fstat_r>:
 8003588:	2300      	movs	r3, #0
 800358a:	b570      	push	{r4, r5, r6, lr}
 800358c:	4d06      	ldr	r5, [pc, #24]	@ (80035a8 <_fstat_r+0x20>)
 800358e:	0004      	movs	r4, r0
 8003590:	0008      	movs	r0, r1
 8003592:	0011      	movs	r1, r2
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	f7fd f92b 	bl	80007f0 <_fstat>
 800359a:	1c43      	adds	r3, r0, #1
 800359c:	d103      	bne.n	80035a6 <_fstat_r+0x1e>
 800359e:	682b      	ldr	r3, [r5, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d000      	beq.n	80035a6 <_fstat_r+0x1e>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	2000025c 	.word	0x2000025c

080035ac <_isatty_r>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	4d06      	ldr	r5, [pc, #24]	@ (80035cc <_isatty_r+0x20>)
 80035b2:	0004      	movs	r4, r0
 80035b4:	0008      	movs	r0, r1
 80035b6:	602b      	str	r3, [r5, #0]
 80035b8:	f7fd f928 	bl	800080c <_isatty>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	d103      	bne.n	80035c8 <_isatty_r+0x1c>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d000      	beq.n	80035c8 <_isatty_r+0x1c>
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	bd70      	pop	{r4, r5, r6, pc}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	2000025c 	.word	0x2000025c

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
