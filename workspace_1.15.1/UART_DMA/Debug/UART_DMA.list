
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003114  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080031cc  080031cc  000041cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003254  08003254  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003254  08003254  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003254  08003254  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003254  08003254  00004254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003258  08003258  00004258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800325c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000018  08003274  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003274  00005190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b160  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce8  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00011e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000676  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145f0  00000000  00000000  00012d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b780  00000000  00000000  0002734e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806b9  00000000  00000000  00032ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca0  00000000  00000000  000b31cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b4e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080031b4 	.word	0x080031b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	080031b4 	.word	0x080031b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	while(1);
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	e7fd      	b.n	8000404 <HAL_UART_RxCpltCallback+0x8>

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fa8c 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f81a 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f000 f8d4 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000418:	f000 f8ac 	bl	8000574 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800041c:	f000 f85c 	bl	80004d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, buffer_rx, 10);
 8000420:	4906      	ldr	r1, [pc, #24]	@ (800043c <main+0x34>)
 8000422:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <main+0x38>)
 8000424:	220a      	movs	r2, #10
 8000426:	0018      	movs	r0, r3
 8000428:	f001 feee 	bl	8002208 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart1, buffer_tx, 10);
 800042c:	4905      	ldr	r1, [pc, #20]	@ (8000444 <main+0x3c>)
 800042e:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <main+0x38>)
 8000430:	220a      	movs	r2, #10
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fe56 	bl	80020e4 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	e7fd      	b.n	8000438 <main+0x30>
 800043c:	20000180 	.word	0x20000180
 8000440:	20000034 	.word	0x20000034
 8000444:	20000000 	.word	0x20000000

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2414      	movs	r4, #20
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2334      	movs	r3, #52	@ 0x34
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f002 fe7f 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f002 fe78 	bl	800315c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 ffa7 	bl	80013c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2240      	movs	r2, #64	@ 0x40
 800048e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	193b      	adds	r3, r7, r4
 8000498:	0018      	movs	r0, r3
 800049a:	f000 ffdf 	bl	800145c <HAL_RCC_OscConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004a2:	f000 f8f3 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2100      	movs	r1, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fada 	bl	8001a7c <HAL_RCC_ClockConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004cc:	f000 f8de 	bl	800068c <Error_Handler>
  }
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b013      	add	sp, #76	@ 0x4c
 80004d6:	bd90      	pop	{r4, r7, pc}

080004d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004de:	4a24      	ldr	r2, [pc, #144]	@ (8000570 <MX_USART1_UART_Init+0x98>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004e2:	4b22      	ldr	r3, [pc, #136]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004e4:	22e1      	movs	r2, #225	@ 0xe1
 80004e6:	0252      	lsls	r2, r2, #9
 80004e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b20      	ldr	r3, [pc, #128]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_USART1_UART_Init+0x94>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_USART1_UART_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000514:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_USART1_UART_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fd88 	bl	8002038 <HAL_UART_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800052c:	f000 f8ae 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000530:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000532:	2100      	movs	r1, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f002 fd31 	bl	8002f9c <HAL_UARTEx_SetTxFifoThreshold>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800053e:	f000 f8a5 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000544:	2100      	movs	r1, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f002 fd68 	bl	800301c <HAL_UARTEx_SetRxFifoThreshold>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000550:	f000 f89c 	bl	800068c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <MX_USART1_UART_Init+0x94>)
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fce6 	bl	8002f28 <HAL_UARTEx_DisableFifoMode>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000560:	f000 f894 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000034 	.word	0x20000034
 8000570:	40013800 	.word	0x40013800

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_DMA_Init+0x48>)
 800057c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <MX_DMA_Init+0x48>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <MX_DMA_Init+0x48>)
 8000588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2009      	movs	r0, #9
 8000598:	f000 fb0e 	bl	8000bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800059c:	2009      	movs	r0, #9
 800059e:	f000 fb20 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	200a      	movs	r0, #10
 80005a8:	f000 fb06 	bl	8000bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80005ac:	200a      	movs	r0, #10
 80005ae:	f000 fb18 	bl	8000be2 <HAL_NVIC_EnableIRQ>

}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	240c      	movs	r4, #12
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2314      	movs	r3, #20
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fdc3 	bl	800315c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005da:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005dc:	2104      	movs	r1, #4
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e6:	2204      	movs	r2, #4
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005f4:	2120      	movs	r1, #32
 80005f6:	430a      	orrs	r2, r1
 80005f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <MX_GPIO_Init+0xc8>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005fe:	2220      	movs	r2, #32
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_GPIO_Init+0xc8>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_GPIO_Init+0xc8>)
 800060c:	2101      	movs	r1, #1
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
 8000612:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <MX_GPIO_Init+0xc8>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000616:	2201      	movs	r2, #1
 8000618:	4013      	ands	r3, r2
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800061e:	23a0      	movs	r3, #160	@ 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	0018      	movs	r0, r3
 8000628:	f000 feae 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2202      	movs	r2, #2
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2201      	movs	r2, #1
 800063c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	193a      	adds	r2, r7, r4
 800064c:	23a0      	movs	r3, #160	@ 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fd34 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000658:	0021      	movs	r1, r4
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2220      	movs	r2, #32
 800065e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2202      	movs	r2, #2
 8000670:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000672:	187a      	adds	r2, r7, r1
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fd20 	bl	80010c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b009      	add	sp, #36	@ 0x24
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006bc:	2180      	movs	r1, #128	@ 0x80
 80006be:	0549      	lsls	r1, r1, #21
 80006c0:	430a      	orrs	r2, r1
 80006c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_MspInit+0x4c>)
 80006c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006c8:	2380      	movs	r3, #128	@ 0x80
 80006ca:	055b      	lsls	r3, r3, #21
 80006cc:	4013      	ands	r3, r2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006d2:	23c0      	movs	r3, #192	@ 0xc0
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f9ac 	bl	8000a34 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b091      	sub	sp, #68	@ 0x44
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	232c      	movs	r3, #44	@ 0x2c
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 fd2e 	bl	800315c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	2410      	movs	r4, #16
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	231c      	movs	r3, #28
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f002 fd26 	bl	800315c <memset>
  if(huart->Instance==USART1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a4c      	ldr	r2, [pc, #304]	@ (8000848 <HAL_UART_MspInit+0x160>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d000      	beq.n	800071c <HAL_UART_MspInit+0x34>
 800071a:	e090      	b.n	800083e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000728:	193b      	adds	r3, r7, r4
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fb50 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000734:	f7ff ffaa 	bl	800068c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000738:	4b44      	ldr	r3, [pc, #272]	@ (800084c <HAL_UART_MspInit+0x164>)
 800073a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073c:	4b43      	ldr	r3, [pc, #268]	@ (800084c <HAL_UART_MspInit+0x164>)
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	01c9      	lsls	r1, r1, #7
 8000742:	430a      	orrs	r2, r1
 8000744:	641a      	str	r2, [r3, #64]	@ 0x40
 8000746:	4b41      	ldr	r3, [pc, #260]	@ (800084c <HAL_UART_MspInit+0x164>)
 8000748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074a:	2380      	movs	r3, #128	@ 0x80
 800074c:	01db      	lsls	r3, r3, #7
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <HAL_UART_MspInit+0x164>)
 8000756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000758:	4b3c      	ldr	r3, [pc, #240]	@ (800084c <HAL_UART_MspInit+0x164>)
 800075a:	2104      	movs	r1, #4
 800075c:	430a      	orrs	r2, r1
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000760:	4b3a      	ldr	r3, [pc, #232]	@ (800084c <HAL_UART_MspInit+0x164>)
 8000762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000764:	2204      	movs	r2, #4
 8000766:	4013      	ands	r3, r2
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800076c:	212c      	movs	r1, #44	@ 0x2c
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2230      	movs	r2, #48	@ 0x30
 8000772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2201      	movs	r2, #1
 800078a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	187b      	adds	r3, r7, r1
 800078e:	4a30      	ldr	r2, [pc, #192]	@ (8000850 <HAL_UART_MspInit+0x168>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f000 fc94 	bl	80010c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000798:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 800079a:	4a2f      	ldr	r2, [pc, #188]	@ (8000858 <HAL_UART_MspInit+0x170>)
 800079c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007a0:	2233      	movs	r2, #51	@ 0x33
 80007a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007a6:	2210      	movs	r2, #16
 80007a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007bc:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fa23 	bl	8000c1c <HAL_DMA_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80007da:	f7ff ff57 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_UART_MspInit+0x16c>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <HAL_UART_MspInit+0x174>)
 80007ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000860 <HAL_UART_MspInit+0x178>)
 80007ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <HAL_UART_MspInit+0x174>)
 80007f2:	2232      	movs	r2, #50	@ 0x32
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <HAL_UART_MspInit+0x174>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <HAL_UART_MspInit+0x174>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <HAL_UART_MspInit+0x174>)
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <HAL_UART_MspInit+0x174>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <HAL_UART_MspInit+0x174>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <HAL_UART_MspInit+0x174>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <HAL_UART_MspInit+0x174>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <HAL_UART_MspInit+0x174>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f9fa 	bl	8000c1c <HAL_DMA_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 800082c:	f7ff ff2e 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	4a09      	ldr	r2, [pc, #36]	@ (800085c <HAL_UART_MspInit+0x174>)
 8000836:	505a      	str	r2, [r3, r1]
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <HAL_UART_MspInit+0x174>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b011      	add	sp, #68	@ 0x44
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	50000800 	.word	0x50000800
 8000854:	200000c8 	.word	0x200000c8
 8000858:	40020008 	.word	0x40020008
 800085c:	20000124 	.word	0x20000124
 8000860:	4002001c 	.word	0x4002001c

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f8b6 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <DMA1_Channel1_IRQHandler+0x14>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 facc 	bl	8000e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	200000c8 	.word	0x200000c8

080008b0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fac0 	bl	8000e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000124 	.word	0x20000124

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	@ (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff fff6 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f002 fc33 	bl	800316c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000906:	f7ff fd7f 	bl	8000408 <main>

0800090a <LoopForever>:

LoopForever:
  b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000918:	0800325c 	.word	0x0800325c
  ldr r2, =_sbss
 800091c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000920:	20000190 	.word	0x20000190

08000924 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>
	...

08000928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_Init+0x3c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_Init+0x3c>)
 800093a:	2180      	movs	r1, #128	@ 0x80
 800093c:	0049      	lsls	r1, r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f810 	bl	8000968 <HAL_InitTick>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d003      	beq.n	8000954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff fea0 	bl	8000698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_InitTick+0x88>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02b      	beq.n	80009d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0x8c>)
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <HAL_InitTick+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	23fa      	movs	r3, #250	@ 0xfa
 800098c:	0098      	lsls	r0, r3, #2
 800098e:	f7ff fbb7 	bl	8000100 <__udivsi3>
 8000992:	0003      	movs	r3, r0
 8000994:	0019      	movs	r1, r3
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff fbb2 	bl	8000100 <__udivsi3>
 800099c:	0003      	movs	r3, r0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f92f 	bl	8000c02 <HAL_SYSTICK_Config>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d112      	bne.n	80009ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d80a      	bhi.n	80009c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	425b      	negs	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f8fe 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_InitTick+0x90>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e00d      	b.n	80009e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e008      	b.n	80009e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	230f      	movs	r3, #15
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b005      	add	sp, #20
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000014 	.word	0x20000014
 80009f4:	2000000c 	.word	0x2000000c
 80009f8:	20000010 	.word	0x20000010

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	2000018c 	.word	0x2000018c

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	2000018c 	.word	0x2000018c

08000a34 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	0019      	movs	r1, r3
 8000a46:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	fffff9ff 	.word	0xfffff9ff

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a72:	d809      	bhi.n	8000a88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_EnableIRQ+0x30>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	4091      	lsls	r1, r2
 8000a84:	000a      	movs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa8:	d828      	bhi.n	8000afc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	33c0      	adds	r3, #192	@ 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	589b      	ldr	r3, [r3, r2]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	@ 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	@ 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	430a      	orrs	r2, r1
 8000af4:	33c0      	adds	r3, #192	@ 0xc0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afa:	e031      	b.n	8000b60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <__NVIC_SetPriority+0xd8>)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0019      	movs	r1, r3
 8000b04:	230f      	movs	r3, #15
 8000b06:	400b      	ands	r3, r1
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3306      	adds	r3, #6
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	3304      	adds	r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	@ 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	@ 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <__NVIC_SetPriority+0xd8>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4023      	ands	r3, r4
 8000b50:	3b08      	subs	r3, #8
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	3306      	adds	r3, #6
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	18c3      	adds	r3, r0, r3
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	045b      	lsls	r3, r3, #17
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d301      	bcc.n	8000b88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b84:	2301      	movs	r3, #1
 8000b86:	e010      	b.n	8000baa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <SysTick_Config+0x44>)
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2103      	movs	r1, #3
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ff7c 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <SysTick_Config+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <SysTick_Config+0x44>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	0002      	movs	r2, r0
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff33 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ffaf 	bl	8000b70 <SysTick_Config>
 8000c12:	0003      	movs	r3, r0
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e077      	b.n	8000d1e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a3d      	ldr	r2, [pc, #244]	@ (8000d28 <HAL_DMA_Init+0x10c>)
 8000c34:	4694      	mov	ip, r2
 8000c36:	4463      	add	r3, ip
 8000c38:	2114      	movs	r1, #20
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fa60 	bl	8000100 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	009a      	lsls	r2, r3, #2
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2225      	movs	r2, #37	@ 0x25
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4934      	ldr	r1, [pc, #208]	@ (8000d2c <HAL_DMA_Init+0x110>)
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 f9c1 	bl	8001020 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d102      	bne.n	8000cb0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb8:	213f      	movs	r1, #63	@ 0x3f
 8000cba:	400a      	ands	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000cc6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d011      	beq.n	8000cf4 <HAL_DMA_Init+0xd8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d80d      	bhi.n	8000cf4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f9cc 	bl	8001078 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	e008      	b.n	8000d06 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2225      	movs	r2, #37	@ 0x25
 8000d10:	2101      	movs	r1, #1
 8000d12:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2224      	movs	r2, #36	@ 0x24
 8000d18:	2100      	movs	r1, #0
 8000d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	bffdfff8 	.word	0xbffdfff8
 8000d2c:	ffff800f 	.word	0xffff800f

08000d30 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2317      	movs	r3, #23
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2224      	movs	r2, #36	@ 0x24
 8000d4a:	5c9b      	ldrb	r3, [r3, r2]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d101      	bne.n	8000d54 <HAL_DMA_Start_IT+0x24>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e06f      	b.n	8000e34 <HAL_DMA_Start_IT+0x104>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2224      	movs	r2, #36	@ 0x24
 8000d58:	2101      	movs	r1, #1
 8000d5a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2225      	movs	r2, #37	@ 0x25
 8000d60:	5c9b      	ldrb	r3, [r3, r2]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d157      	bne.n	8000e18 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2225      	movs	r2, #37	@ 0x25
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	438a      	bics	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f000 f907 	bl	8000fa0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	210e      	movs	r1, #14
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e00f      	b.n	8000dcc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2104      	movs	r1, #4
 8000db8:	438a      	bics	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	210a      	movs	r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d008      	beq.n	8000dec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0049      	lsls	r1, r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dfe:	2180      	movs	r1, #128	@ 0x80
 8000e00:	0049      	lsls	r1, r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e00a      	b.n	8000e2e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2280      	movs	r2, #128	@ 0x80
 8000e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2224      	movs	r2, #36	@ 0x24
 8000e22:	2100      	movs	r1, #0
 8000e24:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000e26:	2317      	movs	r3, #23
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e2e:	2317      	movs	r3, #23
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	781b      	ldrb	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000e44:	4b55      	ldr	r3, [pc, #340]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	221c      	movs	r2, #28
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	d027      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x7a>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d023      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2220      	movs	r2, #32
 8000e76:	4013      	ands	r3, r2
 8000e78:	d107      	bne.n	8000e8a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2104      	movs	r1, #4
 8000e86:	438a      	bics	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000e8a:	4b44      	ldr	r3, [pc, #272]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	221c      	movs	r2, #28
 8000e94:	4013      	ands	r3, r2
 8000e96:	2204      	movs	r2, #4
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	4b40      	ldr	r3, [pc, #256]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d100      	bne.n	8000eaa <HAL_DMA_IRQHandler+0x6e>
 8000ea8:	e073      	b.n	8000f92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000eb4:	e06d      	b.n	8000f92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	221c      	movs	r2, #28
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d02e      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xec>
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d02a      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	4013      	ands	r3, r2
 8000edc:	d10b      	bne.n	8000ef6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	210a      	movs	r1, #10
 8000eea:	438a      	bics	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2225      	movs	r2, #37	@ 0x25
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000ef6:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000ef8:	6859      	ldr	r1, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	221c      	movs	r2, #28
 8000f00:	4013      	ands	r3, r2
 8000f02:	2202      	movs	r2, #2
 8000f04:	409a      	lsls	r2, r3
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2224      	movs	r2, #36	@ 0x24
 8000f10:	2100      	movs	r1, #0
 8000f12:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d03a      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	0010      	movs	r0, r2
 8000f24:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000f26:	e034      	b.n	8000f92 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	221c      	movs	r2, #28
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2208      	movs	r2, #8
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d02b      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x158>
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2208      	movs	r2, #8
 8000f40:	4013      	ands	r3, r2
 8000f42:	d027      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	210e      	movs	r1, #14
 8000f50:	438a      	bics	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	221c      	movs	r2, #28
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2201      	movs	r2, #1
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <HAL_DMA_IRQHandler+0x160>)
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2225      	movs	r2, #37	@ 0x25
 8000f74:	2101      	movs	r1, #1
 8000f76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2224      	movs	r2, #36	@ 0x24
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	0010      	movs	r0, r2
 8000f90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46c0      	nop			@ (mov r8, r8)
}
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b004      	add	sp, #16
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000fb6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <DMA_SetConfig+0x7c>)
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	221c      	movs	r2, #28
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <DMA_SetConfig+0x7c>)
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b10      	cmp	r3, #16
 8000fee:	d108      	bne.n	8001002 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001000:	e007      	b.n	8001012 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	60da      	str	r2, [r3, #12]
}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	40020000 	.word	0x40020000

08001020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001030:	4694      	mov	ip, r2
 8001032:	4463      	add	r3, ip
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	001a      	movs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	23ff      	movs	r3, #255	@ 0xff
 8001044:	4013      	ands	r3, r2
 8001046:	3b08      	subs	r3, #8
 8001048:	2114      	movs	r1, #20
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff f858 	bl	8000100 <__udivsi3>
 8001050:	0003      	movs	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001058:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	221f      	movs	r2, #31
 800105e:	4013      	ands	r3, r2
 8001060:	2201      	movs	r2, #1
 8001062:	409a      	lsls	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bd80      	pop	{r7, pc}
 8001070:	10008200 	.word	0x10008200
 8001074:	40020880 	.word	0x40020880

08001078 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	223f      	movs	r2, #63	@ 0x3f
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800108e:	4694      	mov	ip, r2
 8001090:	4463      	add	r3, ip
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	001a      	movs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800109e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	4013      	ands	r3, r2
 80010a8:	2201      	movs	r2, #1
 80010aa:	409a      	lsls	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	1000823f 	.word	0x1000823f
 80010bc:	40020940 	.word	0x40020940

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e147      	b.n	8001360 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4091      	lsls	r1, r2
 80010da:	000a      	movs	r2, r1
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <HAL_GPIO_Init+0x28>
 80010e6:	e138      	b.n	800135a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <HAL_GPIO_Init+0x40>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	2201      	movs	r2, #1
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b03      	cmp	r3, #3
 800116c:	d017      	beq.n	800119e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d123      	bne.n	80011f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	58d3      	ldr	r3, [r2, r3]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2207      	movs	r2, #7
 80011bc:	4013      	ands	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2107      	movs	r1, #7
 80011d6:	400b      	ands	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	6939      	ldr	r1, [r7, #16]
 80011f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	401a      	ands	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	23c0      	movs	r3, #192	@ 0xc0
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x174>
 8001232:	e092      	b.n	800135a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001234:	4a50      	ldr	r2, [pc, #320]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3318      	adds	r3, #24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	589b      	ldr	r3, [r3, r2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	220f      	movs	r2, #15
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	23a0      	movs	r3, #160	@ 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	429a      	cmp	r2, r3
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1ca>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a45      	ldr	r2, [pc, #276]	@ (800137c <HAL_GPIO_Init+0x2bc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1c6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a44      	ldr	r2, [pc, #272]	@ (8001380 <HAL_GPIO_Init+0x2c0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1c2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a43      	ldr	r2, [pc, #268]	@ (8001384 <HAL_GPIO_Init+0x2c4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1be>
 800127a:	2303      	movs	r3, #3
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 800127e:	2305      	movs	r3, #5
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 800128a:	2300      	movs	r3, #0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	2103      	movs	r1, #3
 8001290:	400a      	ands	r2, r1
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	4093      	lsls	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800129c:	4936      	ldr	r1, [pc, #216]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3318      	adds	r3, #24
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012aa:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	035b      	lsls	r3, r3, #13
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	039b      	lsls	r3, r3, #14
 80012ec:	4013      	ands	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001300:	2384      	movs	r3, #132	@ 0x84
 8001302:	58d3      	ldr	r3, [r2, r3]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43da      	mvns	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4914      	ldr	r1, [pc, #80]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001326:	2284      	movs	r2, #132	@ 0x84
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001352:	4909      	ldr	r1, [pc, #36]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	40da      	lsrs	r2, r3
 8001368:	1e13      	subs	r3, r2, #0
 800136a:	d000      	beq.n	800136e <HAL_GPIO_Init+0x2ae>
 800136c:	e6b0      	b.n	80010d0 <HAL_GPIO_Init+0x10>
  }
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021800 	.word	0x40021800
 800137c:	50000400 	.word	0x50000400
 8001380:	50000800 	.word	0x50000800
 8001384:	50000c00 	.word	0x50000c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	0008      	movs	r0, r1
 8001392:	0011      	movs	r1, r2
 8001394:	1cbb      	adds	r3, r7, #2
 8001396:	1c02      	adds	r2, r0, #0
 8001398:	801a      	strh	r2, [r3, #0]
 800139a:	1c7b      	adds	r3, r7, #1
 800139c:	1c0a      	adds	r2, r1, #0
 800139e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	1c7b      	adds	r3, r7, #1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d11f      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	0013      	movs	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	189b      	adds	r3, r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4912      	ldr	r1, [pc, #72]	@ (8001440 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7fe fe82 	bl	8000100 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001402:	e008      	b.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3b01      	subs	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e001      	b.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e009      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	401a      	ands	r2, r3
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	429a      	cmp	r2, r3
 8001426:	d0ed      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	40007000 	.word	0x40007000
 8001438:	fffff9ff 	.word	0xfffff9ff
 800143c:	2000000c 	.word	0x2000000c
 8001440:	000f4240 	.word	0x000f4240

08001444 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <LL_RCC_GetAPB1Prescaler+0x14>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	23e0      	movs	r3, #224	@ 0xe0
 800144e:	01db      	lsls	r3, r3, #7
 8001450:	4013      	ands	r3, r2
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e2f3      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	4013      	ands	r3, r2
 8001476:	d100      	bne.n	800147a <HAL_RCC_OscConfig+0x1e>
 8001478:	e07c      	b.n	8001574 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147a:	4bc3      	ldr	r3, [pc, #780]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2238      	movs	r2, #56	@ 0x38
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001484:	4bc0      	ldr	r3, [pc, #768]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b10      	cmp	r3, #16
 8001492:	d102      	bne.n	800149a <HAL_RCC_OscConfig+0x3e>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b08      	cmp	r3, #8
 800149e:	d10b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	d062      	beq.n	8001572 <HAL_RCC_OscConfig+0x116>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d15e      	bne.n	8001572 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e2ce      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d107      	bne.n	80014d4 <HAL_RCC_OscConfig+0x78>
 80014c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4baf      	ldr	r3, [pc, #700]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e020      	b.n	8001516 <HAL_RCC_OscConfig+0xba>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	23a0      	movs	r3, #160	@ 0xa0
 80014da:	02db      	lsls	r3, r3, #11
 80014dc:	429a      	cmp	r2, r3
 80014de:	d10e      	bne.n	80014fe <HAL_RCC_OscConfig+0xa2>
 80014e0:	4ba9      	ldr	r3, [pc, #676]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	2180      	movs	r1, #128	@ 0x80
 80014e8:	02c9      	lsls	r1, r1, #11
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	0249      	lsls	r1, r1, #9
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0xba>
 80014fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4ba1      	ldr	r3, [pc, #644]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001504:	49a1      	ldr	r1, [pc, #644]	@ (800178c <HAL_RCC_OscConfig+0x330>)
 8001506:	400a      	ands	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	4b9f      	ldr	r3, [pc, #636]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b9e      	ldr	r3, [pc, #632]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001510:	499f      	ldr	r1, [pc, #636]	@ (8001790 <HAL_RCC_OscConfig+0x334>)
 8001512:	400a      	ands	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d014      	beq.n	8001548 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fa7f 	bl	8000a20 <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fa7a 	bl	8000a20 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e28d      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153a:	4b93      	ldr	r3, [pc, #588]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4013      	ands	r3, r2
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xcc>
 8001546:	e015      	b.n	8001574 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fa6a 	bl	8000a20 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fa65 	bl	8000a20 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	@ 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e278      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001564:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0xf6>
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001572:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2202      	movs	r2, #2
 800157a:	4013      	ands	r3, r2
 800157c:	d100      	bne.n	8001580 <HAL_RCC_OscConfig+0x124>
 800157e:	e099      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001580:	4b81      	ldr	r3, [pc, #516]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2238      	movs	r2, #56	@ 0x38
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158a:	4b7f      	ldr	r3, [pc, #508]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2203      	movs	r2, #3
 8001590:	4013      	ands	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d102      	bne.n	80015a0 <HAL_RCC_OscConfig+0x144>
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d002      	beq.n	80015a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d135      	bne.n	8001612 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a6:	4b78      	ldr	r3, [pc, #480]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	@ 0x80
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x162>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24b      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a74      	ldr	r2, [pc, #464]	@ (8001794 <HAL_RCC_OscConfig+0x338>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d112      	bne.n	8001600 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015da:	4b6b      	ldr	r3, [pc, #428]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6e      	ldr	r2, [pc, #440]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	4b67      	ldr	r3, [pc, #412]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015ee:	4b66      	ldr	r3, [pc, #408]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0adb      	lsrs	r3, r3, #11
 80015f4:	2207      	movs	r2, #7
 80015f6:	4013      	ands	r3, r2
 80015f8:	4a68      	ldr	r2, [pc, #416]	@ (800179c <HAL_RCC_OscConfig+0x340>)
 80015fa:	40da      	lsrs	r2, r3
 80015fc:	4b68      	ldr	r3, [pc, #416]	@ (80017a0 <HAL_RCC_OscConfig+0x344>)
 80015fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001600:	4b68      	ldr	r3, [pc, #416]	@ (80017a4 <HAL_RCC_OscConfig+0x348>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff f9af 	bl	8000968 <HAL_InitTick>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d051      	beq.n	80016b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e221      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d030      	beq.n	800167c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800161a:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5e      	ldr	r2, [pc, #376]	@ (8001798 <HAL_RCC_OscConfig+0x33c>)
 8001620:	4013      	ands	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	4b57      	ldr	r3, [pc, #348]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b56      	ldr	r3, [pc, #344]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b55      	ldr	r3, [pc, #340]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	0049      	lsls	r1, r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff f9f0 	bl	8000a20 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff f9eb 	bl	8000a20 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1fe      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b4b      	ldr	r3, [pc, #300]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4013      	ands	r3, r2
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b48      	ldr	r3, [pc, #288]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a4a      	ldr	r2, [pc, #296]	@ (8001794 <HAL_RCC_OscConfig+0x338>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	021a      	lsls	r2, r3, #8
 8001674:	4b44      	ldr	r3, [pc, #272]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b42      	ldr	r3, [pc, #264]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001682:	4949      	ldr	r1, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x34c>)
 8001684:	400a      	ands	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff f9ca 	bl	8000a20 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff f9c5 	bl	8000a20 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1d8      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a4:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x236>
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2208      	movs	r2, #8
 80016ba:	4013      	ands	r3, r2
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016be:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2238      	movs	r2, #56	@ 0x38
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b18      	cmp	r3, #24
 80016c8:	d10a      	bne.n	80016e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d03c      	beq.n	800174e <HAL_RCC_OscConfig+0x2f2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d138      	bne.n	800174e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e1ba      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d019      	beq.n	800171c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f994 	bl	8000a20 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff f98f 	bl	8000a20 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1a2      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d0f1      	beq.n	80016fe <HAL_RCC_OscConfig+0x2a2>
 800171a:	e018      	b.n	800174e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 800171e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f97a 	bl	8000a20 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff f975 	bl	8000a20 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e188      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001744:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2204      	movs	r2, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x2fe>
 8001758:	e0c6      	b.n	80018e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2238      	movs	r2, #56	@ 0x38
 8001768:	4013      	ands	r3, r2
 800176a:	2b20      	cmp	r3, #32
 800176c:	d11e      	bne.n	80017ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_OscConfig+0x32c>)
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x31e>
 8001778:	e0b6      	b.n	80018e8 <HAL_RCC_OscConfig+0x48c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d000      	beq.n	8001784 <HAL_RCC_OscConfig+0x328>
 8001782:	e0b1      	b.n	80018e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e166      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
 8001788:	40021000 	.word	0x40021000
 800178c:	fffeffff 	.word	0xfffeffff
 8001790:	fffbffff 	.word	0xfffbffff
 8001794:	ffff80ff 	.word	0xffff80ff
 8001798:	ffffc7ff 	.word	0xffffc7ff
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	20000010 	.word	0x20000010
 80017a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017ac:	4bac      	ldr	r3, [pc, #688]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80017ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	055b      	lsls	r3, r3, #21
 80017b4:	4013      	ands	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x360>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x362>
 80017bc:	2300      	movs	r3, #0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d011      	beq.n	80017e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4ba7      	ldr	r3, [pc, #668]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80017c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	430a      	orrs	r2, r1
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d0:	4ba3      	ldr	r3, [pc, #652]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80017d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017de:	231f      	movs	r3, #31
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	4b9f      	ldr	r3, [pc, #636]	@ (8001a64 <HAL_RCC_OscConfig+0x608>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f2:	4b9c      	ldr	r3, [pc, #624]	@ (8001a64 <HAL_RCC_OscConfig+0x608>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b9b      	ldr	r3, [pc, #620]	@ (8001a64 <HAL_RCC_OscConfig+0x608>)
 80017f8:	2180      	movs	r1, #128	@ 0x80
 80017fa:	0049      	lsls	r1, r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001800:	f7ff f90e 	bl	8000a20 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff f909 	bl	8000a20 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e11c      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181c:	4b91      	ldr	r3, [pc, #580]	@ (8001a64 <HAL_RCC_OscConfig+0x608>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x3e2>
 8001830:	4b8b      	ldr	r3, [pc, #556]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001832:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001834:	4b8a      	ldr	r3, [pc, #552]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x41c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x404>
 8001846:	4b86      	ldr	r3, [pc, #536]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800184a:	4b85      	ldr	r3, [pc, #532]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800184c:	2104      	movs	r1, #4
 800184e:	430a      	orrs	r2, r1
 8001850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001852:	4b83      	ldr	r3, [pc, #524]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001854:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001856:	4b82      	ldr	r3, [pc, #520]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x41c>
 8001860:	4b7f      	ldr	r3, [pc, #508]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001864:	4b7e      	ldr	r3, [pc, #504]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800186c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800186e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001870:	4b7b      	ldr	r3, [pc, #492]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001872:	2104      	movs	r1, #4
 8001874:	438a      	bics	r2, r1
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d014      	beq.n	80018aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f8ce 	bl	8000a20 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001888:	e009      	b.n	800189e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f8c9 	bl	8000a20 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a74      	ldr	r2, [pc, #464]	@ (8001a68 <HAL_RCC_OscConfig+0x60c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0db      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189e:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80018a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x42e>
 80018a8:	e013      	b.n	80018d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff f8b9 	bl	8000a20 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b2:	e009      	b.n	80018c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f8b4 	bl	8000a20 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a6a      	ldr	r2, [pc, #424]	@ (8001a68 <HAL_RCC_OscConfig+0x60c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0c6      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80018ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018d2:	231f      	movs	r3, #31
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80018de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80018e2:	4962      	ldr	r1, [pc, #392]	@ (8001a6c <HAL_RCC_OscConfig+0x610>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d100      	bne.n	80018f2 <HAL_RCC_OscConfig+0x496>
 80018f0:	e0b0      	b.n	8001a54 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2238      	movs	r2, #56	@ 0x38
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d100      	bne.n	8001900 <HAL_RCC_OscConfig+0x4a4>
 80018fe:	e078      	b.n	80019f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d153      	bne.n	80019b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b55      	ldr	r3, [pc, #340]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b54      	ldr	r3, [pc, #336]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800190e:	4958      	ldr	r1, [pc, #352]	@ (8001a70 <HAL_RCC_OscConfig+0x614>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f884 	bl	8000a20 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f87f 	bl	8000a20 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e092      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	4b4b      	ldr	r3, [pc, #300]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	049b      	lsls	r3, r3, #18
 8001938:	4013      	ands	r3, r2
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <HAL_RCC_OscConfig+0x618>)
 8001942:	4013      	ands	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	431a      	orrs	r2, r3
 8001964:	4b3e      	ldr	r3, [pc, #248]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001966:	430a      	orrs	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	0449      	lsls	r1, r1, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001978:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0549      	lsls	r1, r1, #21
 8001982:	430a      	orrs	r2, r1
 8001984:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f84b 	bl	8000a20 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f846 	bl	8000a20 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e059      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x534>
 80019ae:	e051      	b.n	8001a54 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019b6:	492e      	ldr	r1, [pc, #184]	@ (8001a70 <HAL_RCC_OscConfig+0x614>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f830 	bl	8000a20 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f82b 	bl	8000a20 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e03e      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	049b      	lsls	r3, r3, #18
 80019e0:	4013      	ands	r3, r2
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 80019ea:	4923      	ldr	r1, [pc, #140]	@ (8001a78 <HAL_RCC_OscConfig+0x61c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	e030      	b.n	8001a54 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e02b      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_RCC_OscConfig+0x604>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2203      	movs	r2, #3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2270      	movs	r2, #112	@ 0x70
 8001a16:	401a      	ands	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d117      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	23fe      	movs	r3, #254	@ 0xfe
 8001a24:	01db      	lsls	r3, r3, #7
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10e      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	23f8      	movs	r3, #248	@ 0xf8
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	0f5b      	lsrs	r3, r3, #29
 8001a46:	075a      	lsls	r2, r3, #29
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b008      	add	sp, #32
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40007000 	.word	0x40007000
 8001a68:	00001388 	.word	0x00001388
 8001a6c:	efffffff 	.word	0xefffffff
 8001a70:	feffffff 	.word	0xfeffffff
 8001a74:	1fc1808c 	.word	0x1fc1808c
 8001a78:	effefffc 	.word	0xeffefffc

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0e9      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b76      	ldr	r3, [pc, #472]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d91e      	bls.n	8001adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b73      	ldr	r3, [pc, #460]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b70      	ldr	r3, [pc, #448]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe ffb6 	bl	8000a20 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe ffb1 	bl	8000a20 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0ca      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ace:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d015      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d006      	beq.n	8001afe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001af0:	4b60      	ldr	r3, [pc, #384]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	21e0      	movs	r1, #224	@ 0xe0
 8001af8:	01c9      	lsls	r1, r1, #7
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afe:	4b5d      	ldr	r3, [pc, #372]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a5d      	ldr	r2, [pc, #372]	@ (8001c78 <HAL_RCC_ClockConfig+0x1fc>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b59      	ldr	r3, [pc, #356]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d057      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d12b      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e097      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	049b      	lsls	r3, r3, #18
 8001b44:	4013      	ands	r3, r2
 8001b46:	d11f      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e08b      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e07f      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e074      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e06d      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9c:	f7fe ff40 	bl	8000a20 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7fe ff3b 	bl	8000a20 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e054      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	@ 0x38
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d21e      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ff18 	bl	8000a20 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7fe ff13 	bl	8000a20 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e02c      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_RCC_ClockConfig+0x200>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c36:	f000 f829 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c3a:	0001      	movs	r1, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	220f      	movs	r2, #15
 8001c44:	401a      	ands	r2, r3
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_RCC_ClockConfig+0x204>)
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	58d3      	ldr	r3, [r2, r3]
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	4013      	ands	r3, r2
 8001c50:	000a      	movs	r2, r1
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x208>)
 8001c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_ClockConfig+0x20c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fe83 	bl	8000968 <HAL_InitTick>
 8001c62:	0003      	movs	r3, r0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b004      	add	sp, #16
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	00001388 	.word	0x00001388
 8001c74:	40021000 	.word	0x40021000
 8001c78:	fffff0ff 	.word	0xfffff0ff
 8001c7c:	ffff8fff 	.word	0xffff8fff
 8001c80:	080031cc 	.word	0x080031cc
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	4b3c      	ldr	r3, [pc, #240]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2238      	movs	r2, #56	@ 0x38
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d10f      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0adb      	lsrs	r3, r3, #11
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	0013      	movs	r3, r2
 8001cac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	4835      	ldr	r0, [pc, #212]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cb2:	f7fe fa25 	bl	8000100 <__udivsi3>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e05d      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2238      	movs	r2, #56	@ 0x38
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	@ 0x38
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d138      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce4:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d10d      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	4824      	ldr	r0, [pc, #144]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8001cfc:	f7fe fa00 	bl	8000100 <__udivsi3>
 8001d00:	0003      	movs	r3, r0
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	227f      	movs	r2, #127	@ 0x7f
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	434b      	muls	r3, r1
 8001d10:	617b      	str	r3, [r7, #20]
        break;
 8001d12:	e00d      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	481c      	ldr	r0, [pc, #112]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d18:	f7fe f9f2 	bl	8000100 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	0019      	movs	r1, r3
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	227f      	movs	r2, #127	@ 0x7f
 8001d28:	4013      	ands	r3, r2
 8001d2a:	434b      	muls	r3, r1
 8001d2c:	617b      	str	r3, [r7, #20]
        break;
 8001d2e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0f5b      	lsrs	r3, r3, #29
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f7fe f9dd 	bl	8000100 <__udivsi3>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2238      	movs	r2, #56	@ 0x38
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d103      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2238      	movs	r2, #56	@ 0x38
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b18      	cmp	r3, #24
 8001d6a:	d103      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d6c:	23fa      	movs	r3, #250	@ 0xfa
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	e001      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d78:	693b      	ldr	r3, [r7, #16]
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b006      	add	sp, #24
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	40021000 	.word	0x40021000
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b02      	ldr	r3, [pc, #8]	@ (8001da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	2000000c 	.word	0x2000000c

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001da8:	f7ff fff2 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dac:	0004      	movs	r4, r0
 8001dae:	f7ff fb49 	bl	8001444 <LL_RCC_GetAPB1Prescaler>
 8001db2:	0003      	movs	r3, r0
 8001db4:	0b1a      	lsrs	r2, r3, #12
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	58d3      	ldr	r3, [r2, r3]
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	40dc      	lsrs	r4, r3
 8001dc2:	0023      	movs	r3, r4
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	0800320c 	.word	0x0800320c

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dd8:	2313      	movs	r3, #19
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001de0:	2312      	movs	r3, #18
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001df4:	e0a3      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2011      	movs	r0, #17
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	055b      	lsls	r3, r3, #21
 8001e06:	4013      	ands	r3, r2
 8001e08:	d110      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b83      	ldr	r3, [pc, #524]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e0e:	4b82      	ldr	r3, [pc, #520]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	0549      	lsls	r1, r1, #21
 8001e14:	430a      	orrs	r2, r1
 8001e16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e18:	4b7f      	ldr	r3, [pc, #508]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b7a      	ldr	r3, [pc, #488]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	0049      	lsls	r1, r1, #1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e3a:	f7fe fdf1 	bl	8000a20 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e42:	e00b      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e44:	f7fe fdec 	bl	8000a20 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d904      	bls.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e52:	2313      	movs	r3, #19
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2203      	movs	r2, #3
 8001e58:	701a      	strb	r2, [r3, #0]
        break;
 8001e5a:	e005      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0ed      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e68:	2313      	movs	r3, #19
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d154      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e72:	4b69      	ldr	r3, [pc, #420]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e76:	23c0      	movs	r3, #192	@ 0xc0
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d019      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d014      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e8e:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	4a63      	ldr	r2, [pc, #396]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e98:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0249      	lsls	r1, r1, #9
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ea8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eac:	495d      	ldr	r1, [pc, #372]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eb2:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d016      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fdae 	bl	8000a20 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec8:	e00c      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fda9 	bl	8000a20 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d904      	bls.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001eda:	2313      	movs	r3, #19
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2203      	movs	r2, #3
 8001ee0:	701a      	strb	r2, [r3, #0]
            break;
 8001ee2:	e004      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d0ed      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001eee:	2313      	movs	r3, #19
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef8:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f0c:	e00c      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2213      	movs	r2, #19
 8001f14:	18ba      	adds	r2, r7, r2
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e005      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2213      	movs	r2, #19
 8001f22:	18ba      	adds	r2, r7, r2
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f28:	2311      	movs	r3, #17
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f38:	493c      	ldr	r1, [pc, #240]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f48:	4b33      	ldr	r3, [pc, #204]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4b30      	ldr	r3, [pc, #192]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f66:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	4a29      	ldr	r2, [pc, #164]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d015      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	0899      	lsrs	r1, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	05db      	lsls	r3, r3, #23
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc8:	2180      	movs	r1, #128	@ 0x80
 8001fca:	0249      	lsls	r1, r1, #9
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d016      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	0249      	lsls	r1, r1, #9
 8002006:	430a      	orrs	r2, r1
 8002008:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800200a:	2312      	movs	r3, #18
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b006      	add	sp, #24
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	fffffcff 	.word	0xfffffcff
 8002024:	fffeffff 	.word	0xfffeffff
 8002028:	00001388 	.word	0x00001388
 800202c:	efffffff 	.word	0xefffffff
 8002030:	ffffcfff 	.word	0xffffcfff
 8002034:	ffff3fff 	.word	0xffff3fff

08002038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e046      	b.n	80020d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2288      	movs	r2, #136	@ 0x88
 800204e:	589b      	ldr	r3, [r3, r2]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2284      	movs	r2, #132	@ 0x84
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe fb42 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2288      	movs	r2, #136	@ 0x88
 8002068:	2124      	movs	r1, #36	@ 0x24
 800206a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 fadc 	bl	8002644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f934 	bl	80022fc <UART_SetConfig>
 8002094:	0003      	movs	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e01c      	b.n	80020d8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	490d      	ldr	r1, [pc, #52]	@ (80020e0 <HAL_UART_Init+0xa8>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	212a      	movs	r1, #42	@ 0x2a
 80020ba:	438a      	bics	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fb6b 	bl	80027ac <UART_CheckIdleState>
 80020d6:	0003      	movs	r3, r0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	ffffb7ff 	.word	0xffffb7ff

080020e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2288      	movs	r2, #136	@ 0x88
 80020f6:	589b      	ldr	r3, [r3, r2]
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d000      	beq.n	80020fe <HAL_UART_Transmit_DMA+0x1a>
 80020fc:	e079      	b.n	80021f2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_UART_Transmit_DMA+0x28>
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e071      	b.n	80021f4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	429a      	cmp	r2, r3
 800211a:	d109      	bne.n	8002130 <HAL_UART_Transmit_DMA+0x4c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d001      	beq.n	8002130 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e061      	b.n	80021f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1dba      	adds	r2, r7, #6
 800213a:	2154      	movs	r1, #84	@ 0x54
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1dba      	adds	r2, r7, #6
 8002144:	2156      	movs	r1, #86	@ 0x56
 8002146:	8812      	ldrh	r2, [r2, #0]
 8002148:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2290      	movs	r2, #144	@ 0x90
 800214e:	2100      	movs	r1, #0
 8002150:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2288      	movs	r2, #136	@ 0x88
 8002156:	2121      	movs	r1, #33	@ 0x21
 8002158:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d028      	beq.n	80021b4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002166:	4a25      	ldr	r2, [pc, #148]	@ (80021fc <HAL_UART_Transmit_DMA+0x118>)
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800216e:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <HAL_UART_Transmit_DMA+0x11c>)
 8002170:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002176:	4a23      	ldr	r2, [pc, #140]	@ (8002204 <HAL_UART_Transmit_DMA+0x120>)
 8002178:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800217e:	2200      	movs	r2, #0
 8002180:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	0019      	movs	r1, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3328      	adds	r3, #40	@ 0x28
 8002192:	001a      	movs	r2, r3
 8002194:	1dbb      	adds	r3, r7, #6
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	f7fe fdca 	bl	8000d30 <HAL_DMA_Start_IT>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d009      	beq.n	80021b4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2290      	movs	r2, #144	@ 0x90
 80021a4:	2110      	movs	r1, #16
 80021a6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2288      	movs	r2, #136	@ 0x88
 80021ac:	2120      	movs	r1, #32
 80021ae:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e01f      	b.n	80021f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2240      	movs	r2, #64	@ 0x40
 80021ba:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021bc:	f3ef 8310 	mrs	r3, PRIMASK
 80021c0:	613b      	str	r3, [r7, #16]
  return(result);
 80021c2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	2301      	movs	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	46c0      	nop			@ (mov r8, r8)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f383 8810 	msr	PRIMASK, r3
}
 80021ec:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b008      	add	sp, #32
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	08002c79 	.word	0x08002c79
 8002200:	08002d11 	.word	0x08002d11
 8002204:	08002ea3 	.word	0x08002ea3

08002208 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	1dbb      	adds	r3, r7, #6
 8002214:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	228c      	movs	r2, #140	@ 0x8c
 800221a:	589b      	ldr	r3, [r3, r2]
 800221c:	2b20      	cmp	r3, #32
 800221e:	d145      	bne.n	80022ac <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_UART_Receive_DMA+0x26>
 8002226:	1dbb      	adds	r3, r7, #6
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e03d      	b.n	80022ae <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	429a      	cmp	r2, r3
 800223c:	d109      	bne.n	8002252 <HAL_UART_Receive_DMA+0x4a>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	d001      	beq.n	8002252 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e02d      	b.n	80022ae <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	4013      	ands	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002266:	f3ef 8310 	mrs	r3, PRIMASK
 800226a:	613b      	str	r3, [r7, #16]
  return(result);
 800226c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	2301      	movs	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f383 8810 	msr	PRIMASK, r3
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2180      	movs	r1, #128	@ 0x80
 8002288:	04c9      	lsls	r1, r1, #19
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f383 8810 	msr	PRIMASK, r3
}
 8002298:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	881a      	ldrh	r2, [r3, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fb9c 	bl	80029e0 <UART_Start_Receive_DMA>
 80022a8:	0003      	movs	r3, r0
 80022aa:	e000      	b.n	80022ae <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b008      	add	sp, #32
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	000a      	movs	r2, r1
 80022f0:	1cbb      	adds	r3, r7, #2
 80022f2:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002304:	231a      	movs	r3, #26
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4313      	orrs	r3, r2
 8002322:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4abc      	ldr	r2, [pc, #752]	@ (800261c <UART_SetConfig+0x320>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4ab7      	ldr	r2, [pc, #732]	@ (8002620 <UART_SetConfig+0x324>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	4313      	orrs	r3, r2
 8002360:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4aae      	ldr	r2, [pc, #696]	@ (8002624 <UART_SetConfig+0x328>)
 800236a:	4013      	ands	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	220f      	movs	r2, #15
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4aa4      	ldr	r2, [pc, #656]	@ (8002628 <UART_SetConfig+0x32c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d127      	bne.n	80023ea <UART_SetConfig+0xee>
 800239a:	4ba4      	ldr	r3, [pc, #656]	@ (800262c <UART_SetConfig+0x330>)
 800239c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239e:	2203      	movs	r2, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <UART_SetConfig+0xda>
 80023a6:	d81b      	bhi.n	80023e0 <UART_SetConfig+0xe4>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d00a      	beq.n	80023c2 <UART_SetConfig+0xc6>
 80023ac:	d818      	bhi.n	80023e0 <UART_SetConfig+0xe4>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <UART_SetConfig+0xbc>
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d00a      	beq.n	80023cc <UART_SetConfig+0xd0>
 80023b6:	e013      	b.n	80023e0 <UART_SetConfig+0xe4>
 80023b8:	231b      	movs	r3, #27
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e058      	b.n	8002474 <UART_SetConfig+0x178>
 80023c2:	231b      	movs	r3, #27
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e053      	b.n	8002474 <UART_SetConfig+0x178>
 80023cc:	231b      	movs	r3, #27
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2204      	movs	r2, #4
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e04e      	b.n	8002474 <UART_SetConfig+0x178>
 80023d6:	231b      	movs	r3, #27
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2208      	movs	r2, #8
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e049      	b.n	8002474 <UART_SetConfig+0x178>
 80023e0:	231b      	movs	r3, #27
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2210      	movs	r2, #16
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e044      	b.n	8002474 <UART_SetConfig+0x178>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a90      	ldr	r2, [pc, #576]	@ (8002630 <UART_SetConfig+0x334>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d127      	bne.n	8002444 <UART_SetConfig+0x148>
 80023f4:	4b8d      	ldr	r3, [pc, #564]	@ (800262c <UART_SetConfig+0x330>)
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	220c      	movs	r2, #12
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d017      	beq.n	8002430 <UART_SetConfig+0x134>
 8002400:	d81b      	bhi.n	800243a <UART_SetConfig+0x13e>
 8002402:	2b08      	cmp	r3, #8
 8002404:	d00a      	beq.n	800241c <UART_SetConfig+0x120>
 8002406:	d818      	bhi.n	800243a <UART_SetConfig+0x13e>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <UART_SetConfig+0x116>
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00a      	beq.n	8002426 <UART_SetConfig+0x12a>
 8002410:	e013      	b.n	800243a <UART_SetConfig+0x13e>
 8002412:	231b      	movs	r3, #27
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e02b      	b.n	8002474 <UART_SetConfig+0x178>
 800241c:	231b      	movs	r3, #27
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e026      	b.n	8002474 <UART_SetConfig+0x178>
 8002426:	231b      	movs	r3, #27
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2204      	movs	r2, #4
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e021      	b.n	8002474 <UART_SetConfig+0x178>
 8002430:	231b      	movs	r3, #27
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2208      	movs	r2, #8
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e01c      	b.n	8002474 <UART_SetConfig+0x178>
 800243a:	231b      	movs	r3, #27
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2210      	movs	r2, #16
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e017      	b.n	8002474 <UART_SetConfig+0x178>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7a      	ldr	r2, [pc, #488]	@ (8002634 <UART_SetConfig+0x338>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d104      	bne.n	8002458 <UART_SetConfig+0x15c>
 800244e:	231b      	movs	r3, #27
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e00d      	b.n	8002474 <UART_SetConfig+0x178>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a76      	ldr	r2, [pc, #472]	@ (8002638 <UART_SetConfig+0x33c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d104      	bne.n	800246c <UART_SetConfig+0x170>
 8002462:	231b      	movs	r3, #27
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e003      	b.n	8002474 <UART_SetConfig+0x178>
 800246c:	231b      	movs	r3, #27
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2210      	movs	r2, #16
 8002472:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	429a      	cmp	r2, r3
 800247e:	d000      	beq.n	8002482 <UART_SetConfig+0x186>
 8002480:	e065      	b.n	800254e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002482:	231b      	movs	r3, #27
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d015      	beq.n	80024b8 <UART_SetConfig+0x1bc>
 800248c:	dc18      	bgt.n	80024c0 <UART_SetConfig+0x1c4>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00d      	beq.n	80024ae <UART_SetConfig+0x1b2>
 8002492:	dc15      	bgt.n	80024c0 <UART_SetConfig+0x1c4>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <UART_SetConfig+0x1a2>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d005      	beq.n	80024a8 <UART_SetConfig+0x1ac>
 800249c:	e010      	b.n	80024c0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff fc81 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 80024a2:	0003      	movs	r3, r0
 80024a4:	617b      	str	r3, [r7, #20]
        break;
 80024a6:	e012      	b.n	80024ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024a8:	4b64      	ldr	r3, [pc, #400]	@ (800263c <UART_SetConfig+0x340>)
 80024aa:	617b      	str	r3, [r7, #20]
        break;
 80024ac:	e00f      	b.n	80024ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ae:	f7ff fbed 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 80024b2:	0003      	movs	r3, r0
 80024b4:	617b      	str	r3, [r7, #20]
        break;
 80024b6:	e00a      	b.n	80024ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	617b      	str	r3, [r7, #20]
        break;
 80024be:	e006      	b.n	80024ce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80024c4:	231a      	movs	r3, #26
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
        break;
 80024cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d100      	bne.n	80024d6 <UART_SetConfig+0x1da>
 80024d4:	e08d      	b.n	80025f2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024da:	4b59      	ldr	r3, [pc, #356]	@ (8002640 <UART_SetConfig+0x344>)
 80024dc:	0052      	lsls	r2, r2, #1
 80024de:	5ad3      	ldrh	r3, [r2, r3]
 80024e0:	0019      	movs	r1, r3
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7fd fe0c 	bl	8000100 <__udivsi3>
 80024e8:	0003      	movs	r3, r0
 80024ea:	005a      	lsls	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	18d2      	adds	r2, r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0019      	movs	r1, r3
 80024fa:	0010      	movs	r0, r2
 80024fc:	f7fd fe00 	bl	8000100 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d91c      	bls.n	8002544 <UART_SetConfig+0x248>
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	429a      	cmp	r2, r3
 8002512:	d217      	bcs.n	8002544 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	b29a      	uxth	r2, r3
 8002518:	200e      	movs	r0, #14
 800251a:	183b      	adds	r3, r7, r0
 800251c:	210f      	movs	r1, #15
 800251e:	438a      	bics	r2, r1
 8002520:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	2207      	movs	r2, #7
 800252a:	4013      	ands	r3, r2
 800252c:	b299      	uxth	r1, r3
 800252e:	183b      	adds	r3, r7, r0
 8002530:	183a      	adds	r2, r7, r0
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	183a      	adds	r2, r7, r0
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e056      	b.n	80025f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002544:	231a      	movs	r3, #26
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e051      	b.n	80025f2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800254e:	231b      	movs	r3, #27
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d015      	beq.n	8002584 <UART_SetConfig+0x288>
 8002558:	dc18      	bgt.n	800258c <UART_SetConfig+0x290>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00d      	beq.n	800257a <UART_SetConfig+0x27e>
 800255e:	dc15      	bgt.n	800258c <UART_SetConfig+0x290>
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <UART_SetConfig+0x26e>
 8002564:	2b02      	cmp	r3, #2
 8002566:	d005      	beq.n	8002574 <UART_SetConfig+0x278>
 8002568:	e010      	b.n	800258c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800256a:	f7ff fc1b 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 800256e:	0003      	movs	r3, r0
 8002570:	617b      	str	r3, [r7, #20]
        break;
 8002572:	e012      	b.n	800259a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002574:	4b31      	ldr	r3, [pc, #196]	@ (800263c <UART_SetConfig+0x340>)
 8002576:	617b      	str	r3, [r7, #20]
        break;
 8002578:	e00f      	b.n	800259a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800257a:	f7ff fb87 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800257e:	0003      	movs	r3, r0
 8002580:	617b      	str	r3, [r7, #20]
        break;
 8002582:	e00a      	b.n	800259a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	617b      	str	r3, [r7, #20]
        break;
 800258a:	e006      	b.n	800259a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002590:	231a      	movs	r3, #26
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
        break;
 8002598:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d028      	beq.n	80025f2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a4:	4b26      	ldr	r3, [pc, #152]	@ (8002640 <UART_SetConfig+0x344>)
 80025a6:	0052      	lsls	r2, r2, #1
 80025a8:	5ad3      	ldrh	r3, [r2, r3]
 80025aa:	0019      	movs	r1, r3
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7fd fda7 	bl	8000100 <__udivsi3>
 80025b2:	0003      	movs	r3, r0
 80025b4:	001a      	movs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	18d2      	adds	r2, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f7fd fd9b 	bl	8000100 <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d90a      	bls.n	80025ea <UART_SetConfig+0x2ee>
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	429a      	cmp	r2, r3
 80025dc:	d205      	bcs.n	80025ea <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	e003      	b.n	80025f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80025ea:	231a      	movs	r3, #26
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	226a      	movs	r2, #106	@ 0x6a
 80025f6:	2101      	movs	r1, #1
 80025f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2268      	movs	r2, #104	@ 0x68
 80025fe:	2101      	movs	r1, #1
 8002600:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800260e:	231a      	movs	r3, #26
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	781b      	ldrb	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b008      	add	sp, #32
 800261a:	bd80      	pop	{r7, pc}
 800261c:	cfff69f3 	.word	0xcfff69f3
 8002620:	ffffcfff 	.word	0xffffcfff
 8002624:	11fff4ff 	.word	0x11fff4ff
 8002628:	40013800 	.word	0x40013800
 800262c:	40021000 	.word	0x40021000
 8002630:	40004400 	.word	0x40004400
 8002634:	40004800 	.word	0x40004800
 8002638:	40004c00 	.word	0x40004c00
 800263c:	00f42400 	.word	0x00f42400
 8002640:	0800322c 	.word	0x0800322c

08002644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2208      	movs	r2, #8
 8002652:	4013      	ands	r3, r2
 8002654:	d00b      	beq.n	800266e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <UART_AdvFeatureConfig+0x144>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	d00b      	beq.n	8002690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a43      	ldr	r2, [pc, #268]	@ (800278c <UART_AdvFeatureConfig+0x148>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d00b      	beq.n	80026b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <UART_AdvFeatureConfig+0x14c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	2204      	movs	r2, #4
 80026b8:	4013      	ands	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <UART_AdvFeatureConfig+0x150>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	2210      	movs	r2, #16
 80026da:	4013      	ands	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002798 <UART_AdvFeatureConfig+0x154>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	2220      	movs	r2, #32
 80026fc:	4013      	ands	r3, r2
 80026fe:	d00b      	beq.n	8002718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4a25      	ldr	r2, [pc, #148]	@ (800279c <UART_AdvFeatureConfig+0x158>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	4013      	ands	r3, r2
 8002720:	d01d      	beq.n	800275e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <UART_AdvFeatureConfig+0x15c>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	035b      	lsls	r3, r3, #13
 8002742:	429a      	cmp	r2, r3
 8002744:	d10b      	bne.n	800275e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <UART_AdvFeatureConfig+0x160>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	2280      	movs	r2, #128	@ 0x80
 8002764:	4013      	ands	r3, r2
 8002766:	d00b      	beq.n	8002780 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a0e      	ldr	r2, [pc, #56]	@ (80027a8 <UART_AdvFeatureConfig+0x164>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}
 8002788:	ffff7fff 	.word	0xffff7fff
 800278c:	fffdffff 	.word	0xfffdffff
 8002790:	fffeffff 	.word	0xfffeffff
 8002794:	fffbffff 	.word	0xfffbffff
 8002798:	ffffefff 	.word	0xffffefff
 800279c:	ffffdfff 	.word	0xffffdfff
 80027a0:	ffefffff 	.word	0xffefffff
 80027a4:	ff9fffff 	.word	0xff9fffff
 80027a8:	fff7ffff 	.word	0xfff7ffff

080027ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b092      	sub	sp, #72	@ 0x48
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2290      	movs	r2, #144	@ 0x90
 80027b8:	2100      	movs	r1, #0
 80027ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027bc:	f7fe f930 	bl	8000a20 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d12d      	bne.n	800282e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	0391      	lsls	r1, r2, #14
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4a47      	ldr	r2, [pc, #284]	@ (80028f8 <UART_CheckIdleState+0x14c>)
 80027dc:	9200      	str	r2, [sp, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	f000 f88e 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80027e4:	1e03      	subs	r3, r0, #0
 80027e6:	d022      	beq.n	800282e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e8:	f3ef 8310 	mrs	r3, PRIMASK
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80027f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f2:	2301      	movs	r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	f383 8810 	msr	PRIMASK, r3
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2180      	movs	r1, #128	@ 0x80
 800280a:	438a      	bics	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	f383 8810 	msr	PRIMASK, r3
}
 8002818:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2288      	movs	r2, #136	@ 0x88
 800281e:	2120      	movs	r1, #32
 8002820:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2284      	movs	r2, #132	@ 0x84
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e060      	b.n	80028f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2204      	movs	r2, #4
 8002836:	4013      	ands	r3, r2
 8002838:	2b04      	cmp	r3, #4
 800283a:	d146      	bne.n	80028ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800283c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800283e:	2280      	movs	r2, #128	@ 0x80
 8002840:	03d1      	lsls	r1, r2, #15
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4a2c      	ldr	r2, [pc, #176]	@ (80028f8 <UART_CheckIdleState+0x14c>)
 8002846:	9200      	str	r2, [sp, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	f000 f859 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 800284e:	1e03      	subs	r3, r0, #0
 8002850:	d03b      	beq.n	80028ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	60fb      	str	r3, [r7, #12]
  return(result);
 8002858:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800285a:	637b      	str	r3, [r7, #52]	@ 0x34
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4922      	ldr	r1, [pc, #136]	@ (80028fc <UART_CheckIdleState+0x150>)
 8002874:	400a      	ands	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	61bb      	str	r3, [r7, #24]
  return(result);
 800288a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	633b      	str	r3, [r7, #48]	@ 0x30
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f383 8810 	msr	PRIMASK, r3
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	438a      	bics	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f383 8810 	msr	PRIMASK, r3
}
 80028b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	228c      	movs	r2, #140	@ 0x8c
 80028ba:	2120      	movs	r1, #32
 80028bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2284      	movs	r2, #132	@ 0x84
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e012      	b.n	80028f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2288      	movs	r2, #136	@ 0x88
 80028ce:	2120      	movs	r1, #32
 80028d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	228c      	movs	r2, #140	@ 0x8c
 80028d6:	2120      	movs	r1, #32
 80028d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2284      	movs	r2, #132	@ 0x84
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b010      	add	sp, #64	@ 0x40
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	01ffffff 	.word	0x01ffffff
 80028fc:	fffffedf 	.word	0xfffffedf

08002900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	1dfb      	adds	r3, r7, #7
 800290e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002910:	e051      	b.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	3301      	adds	r3, #1
 8002916:	d04e      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7fe f882 	bl	8000a20 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	429a      	cmp	r2, r3
 8002926:	d302      	bcc.n	800292e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e051      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d03b      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b80      	cmp	r3, #128	@ 0x80
 8002942:	d038      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d035      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2208      	movs	r2, #8
 8002952:	4013      	ands	r3, r2
 8002954:	2b08      	cmp	r3, #8
 8002956:	d111      	bne.n	800297c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f922 	bl	8002bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2290      	movs	r2, #144	@ 0x90
 800296c:	2108      	movs	r1, #8
 800296e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2284      	movs	r2, #132	@ 0x84
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e02c      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	401a      	ands	r2, r3
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	429a      	cmp	r2, r3
 800298e:	d112      	bne.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 f905 	bl	8002bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2290      	movs	r2, #144	@ 0x90
 80029a6:	2120      	movs	r1, #32
 80029a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2284      	movs	r2, #132	@ 0x84
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	425a      	negs	r2, r3
 80029c6:	4153      	adcs	r3, r2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	001a      	movs	r2, r3
 80029cc:	1dfb      	adds	r3, r7, #7
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d09e      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b090      	sub	sp, #64	@ 0x40
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	1dbb      	adds	r3, r7, #6
 80029ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1dba      	adds	r2, r7, #6
 80029f8:	215c      	movs	r1, #92	@ 0x5c
 80029fa:	8812      	ldrh	r2, [r2, #0]
 80029fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2290      	movs	r2, #144	@ 0x90
 8002a02:	2100      	movs	r1, #0
 8002a04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	228c      	movs	r2, #140	@ 0x8c
 8002a0a:	2122      	movs	r1, #34	@ 0x22
 8002a0c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2280      	movs	r2, #128	@ 0x80
 8002a12:	589b      	ldr	r3, [r3, r2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02d      	beq.n	8002a74 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2280      	movs	r2, #128	@ 0x80
 8002a1c:	589b      	ldr	r3, [r3, r2]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	@ (8002b20 <UART_Start_Receive_DMA+0x140>)
 8002a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2280      	movs	r2, #128	@ 0x80
 8002a26:	589b      	ldr	r3, [r3, r2]
 8002a28:	4a3e      	ldr	r2, [pc, #248]	@ (8002b24 <UART_Start_Receive_DMA+0x144>)
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	589b      	ldr	r3, [r3, r2]
 8002a32:	4a3d      	ldr	r2, [pc, #244]	@ (8002b28 <UART_Start_Receive_DMA+0x148>)
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2280      	movs	r2, #128	@ 0x80
 8002a3a:	589b      	ldr	r3, [r3, r2]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2280      	movs	r2, #128	@ 0x80
 8002a44:	5898      	ldr	r0, [r3, r2]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3324      	adds	r3, #36	@ 0x24
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	001a      	movs	r2, r3
 8002a54:	1dbb      	adds	r3, r7, #6
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f7fe f96a 	bl	8000d30 <HAL_DMA_Start_IT>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d009      	beq.n	8002a74 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2290      	movs	r2, #144	@ 0x90
 8002a64:	2110      	movs	r1, #16
 8002a66:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	228c      	movs	r2, #140	@ 0x8c
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e050      	b.n	8002b16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d019      	beq.n	8002ab0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a86:	2301      	movs	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	f383 8810 	msr	PRIMASK, r3
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2180      	movs	r1, #128	@ 0x80
 8002a9e:	0049      	lsls	r1, r1, #1
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f383 8810 	msr	PRIMASK, r3
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ae8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aec:	2301      	movs	r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2140      	movs	r1, #64	@ 0x40
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b010      	add	sp, #64	@ 0x40
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	08002d31 	.word	0x08002d31
 8002b24:	08002e61 	.word	0x08002e61
 8002b28:	08002ea3 	.word	0x08002ea3

08002b2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	@ 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b34:	f3ef 8310 	mrs	r3, PRIMASK
 8002b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3e:	2301      	movs	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	21c0      	movs	r1, #192	@ 0xc0
 8002b56:	438a      	bics	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b66:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8002b6c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	2301      	movs	r3, #1
 8002b72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4908      	ldr	r1, [pc, #32]	@ (8002ba8 <UART_EndTxTransfer+0x7c>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2288      	movs	r2, #136	@ 0x88
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	5099      	str	r1, [r3, r2]
}
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b00a      	add	sp, #40	@ 0x28
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	ff7fffff 	.word	0xff7fffff

08002bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	@ 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4926      	ldr	r1, [pc, #152]	@ (8002c70 <UART_EndRxTransfer+0xc4>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f383 8810 	msr	PRIMASK, r3
}
 8002be4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bea:	623b      	str	r3, [r7, #32]
  return(result);
 8002bec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	f383 8810 	msr	PRIMASK, r3
}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	491b      	ldr	r1, [pc, #108]	@ (8002c74 <UART_EndRxTransfer+0xc8>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	f383 8810 	msr	PRIMASK, r3
}
 8002c16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d118      	bne.n	8002c52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f383 8810 	msr	PRIMASK, r3
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2110      	movs	r1, #16
 8002c42:	438a      	bics	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	228c      	movs	r2, #140	@ 0x8c
 8002c56:	2120      	movs	r1, #32
 8002c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b00e      	add	sp, #56	@ 0x38
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	fffffedf 	.word	0xfffffedf
 8002c74:	effffffe 	.word	0xeffffffe

08002c78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	@ 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d135      	bne.n	8002cfe <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	2256      	movs	r2, #86	@ 0x56
 8002c96:	2100      	movs	r1, #0
 8002c98:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ca0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2140      	movs	r1, #64	@ 0x40
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	e004      	b.n	8002d08 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd fb73 	bl	80003ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b00c      	add	sp, #48	@ 0x30
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fac8 	bl	80022b6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	@ 0x50
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2220      	movs	r2, #32
 8002d46:	4013      	ands	r3, r2
 8002d48:	d16f      	bne.n	8002e2a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d4c:	225e      	movs	r2, #94	@ 0x5e
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d52:	f3ef 8310 	mrs	r3, PRIMASK
 8002d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d58:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	493a      	ldr	r1, [pc, #232]	@ (8002e5c <UART_DMAReceiveCplt+0x12c>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8e:	2301      	movs	r3, #1
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	438a      	bics	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	438a      	bics	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dea:	228c      	movs	r2, #140	@ 0x8c
 8002dec:	2120      	movs	r1, #32
 8002dee:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d118      	bne.n	8002e2a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e02:	2301      	movs	r3, #1
 8002e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2110      	movs	r1, #16
 8002e1a:	438a      	bics	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d108      	bne.n	8002e4a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e3a:	225c      	movs	r2, #92	@ 0x5c
 8002e3c:	5a9a      	ldrh	r2, [r3, r2]
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e40:	0011      	movs	r1, r2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff fa4f 	bl	80022e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e48:	e003      	b.n	8002e52 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fd fad5 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b014      	add	sp, #80	@ 0x50
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	fffffeff 	.word	0xfffffeff

08002e60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10a      	bne.n	8002e92 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	225c      	movs	r2, #92	@ 0x5c
 8002e80:	5a9b      	ldrh	r3, [r3, r2]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0011      	movs	r1, r2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff fa2b 	bl	80022e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e90:	e003      	b.n	8002e9a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff fa16 	bl	80022c6 <HAL_UART_RxHalfCpltCallback>
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2288      	movs	r2, #136	@ 0x88
 8002eb4:	589b      	ldr	r3, [r3, r2]
 8002eb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	228c      	movs	r2, #140	@ 0x8c
 8002ebc:	589b      	ldr	r3, [r3, r2]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2280      	movs	r2, #128	@ 0x80
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b80      	cmp	r3, #128	@ 0x80
 8002ecc:	d10a      	bne.n	8002ee4 <UART_DMAError+0x42>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b21      	cmp	r3, #33	@ 0x21
 8002ed2:	d107      	bne.n	8002ee4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2256      	movs	r2, #86	@ 0x56
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff fe24 	bl	8002b2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2240      	movs	r2, #64	@ 0x40
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b40      	cmp	r3, #64	@ 0x40
 8002ef0:	d10a      	bne.n	8002f08 <UART_DMAError+0x66>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b22      	cmp	r3, #34	@ 0x22
 8002ef6:	d107      	bne.n	8002f08 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	225e      	movs	r2, #94	@ 0x5e
 8002efc:	2100      	movs	r1, #0
 8002efe:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff fe52 	bl	8002bac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2290      	movs	r2, #144	@ 0x90
 8002f0c:	589b      	ldr	r3, [r3, r2]
 8002f0e:	2210      	movs	r2, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2190      	movs	r1, #144	@ 0x90
 8002f16:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff f9db 	bl	80022d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b006      	add	sp, #24
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2284      	movs	r2, #132	@ 0x84
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e027      	b.n	8002f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2284      	movs	r2, #132	@ 0x84
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2288      	movs	r2, #136	@ 0x88
 8002f4a:	2124      	movs	r1, #36	@ 0x24
 8002f4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	438a      	bics	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2288      	movs	r2, #136	@ 0x88
 8002f80:	2120      	movs	r1, #32
 8002f82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2284      	movs	r2, #132	@ 0x84
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	dfffffff 	.word	0xdfffffff

08002f9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2284      	movs	r2, #132	@ 0x84
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e02e      	b.n	8003012 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2284      	movs	r2, #132	@ 0x84
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2288      	movs	r2, #136	@ 0x88
 8002fc0:	2124      	movs	r1, #36	@ 0x24
 8002fc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	08d9      	lsrs	r1, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f854 	bl	80030a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2288      	movs	r2, #136	@ 0x88
 8003004:	2120      	movs	r1, #32
 8003006:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2284      	movs	r2, #132	@ 0x84
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2284      	movs	r2, #132	@ 0x84
 800302a:	5c9b      	ldrb	r3, [r3, r2]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003030:	2302      	movs	r3, #2
 8003032:	e02f      	b.n	8003094 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2284      	movs	r2, #132	@ 0x84
 8003038:	2101      	movs	r1, #1
 800303a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2288      	movs	r2, #136	@ 0x88
 8003040:	2124      	movs	r1, #36	@ 0x24
 8003042:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4a0e      	ldr	r2, [pc, #56]	@ (800309c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f813 	bl	80030a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2288      	movs	r2, #136	@ 0x88
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2284      	movs	r2, #132	@ 0x84
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}
 800309c:	f1ffffff 	.word	0xf1ffffff

080030a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d108      	bne.n	80030c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	226a      	movs	r2, #106	@ 0x6a
 80030b4:	2101      	movs	r1, #1
 80030b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2268      	movs	r2, #104	@ 0x68
 80030bc:	2101      	movs	r1, #1
 80030be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030c0:	e043      	b.n	800314a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80030c2:	260f      	movs	r6, #15
 80030c4:	19bb      	adds	r3, r7, r6
 80030c6:	2208      	movs	r2, #8
 80030c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80030ca:	200e      	movs	r0, #14
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	0e5b      	lsrs	r3, r3, #25
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	240d      	movs	r4, #13
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2107      	movs	r1, #7
 80030e2:	400a      	ands	r2, r1
 80030e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	0f5b      	lsrs	r3, r3, #29
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	250c      	movs	r5, #12
 80030f2:	197b      	adds	r3, r7, r5
 80030f4:	2107      	movs	r1, #7
 80030f6:	400a      	ands	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030fa:	183b      	adds	r3, r7, r0
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	197a      	adds	r2, r7, r5
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	4914      	ldr	r1, [pc, #80]	@ (8003154 <UARTEx_SetNbDataToProcess+0xb4>)
 8003104:	5c8a      	ldrb	r2, [r1, r2]
 8003106:	435a      	muls	r2, r3
 8003108:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800310a:	197b      	adds	r3, r7, r5
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <UARTEx_SetNbDataToProcess+0xb8>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003112:	0019      	movs	r1, r3
 8003114:	f7fd f87e 	bl	8000214 <__divsi3>
 8003118:	0003      	movs	r3, r0
 800311a:	b299      	uxth	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	226a      	movs	r2, #106	@ 0x6a
 8003120:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003122:	19bb      	adds	r3, r7, r6
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	193a      	adds	r2, r7, r4
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	490a      	ldr	r1, [pc, #40]	@ (8003154 <UARTEx_SetNbDataToProcess+0xb4>)
 800312c:	5c8a      	ldrb	r2, [r1, r2]
 800312e:	435a      	muls	r2, r3
 8003130:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003132:	193b      	adds	r3, r7, r4
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <UARTEx_SetNbDataToProcess+0xb8>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800313a:	0019      	movs	r1, r3
 800313c:	f7fd f86a 	bl	8000214 <__divsi3>
 8003140:	0003      	movs	r3, r0
 8003142:	b299      	uxth	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2268      	movs	r2, #104	@ 0x68
 8003148:	5299      	strh	r1, [r3, r2]
}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b005      	add	sp, #20
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	08003244 	.word	0x08003244
 8003158:	0800324c 	.word	0x0800324c

0800315c <memset>:
 800315c:	0003      	movs	r3, r0
 800315e:	1882      	adds	r2, r0, r2
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	7019      	strb	r1, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2600      	movs	r6, #0
 8003170:	4c0c      	ldr	r4, [pc, #48]	@ (80031a4 <__libc_init_array+0x38>)
 8003172:	4d0d      	ldr	r5, [pc, #52]	@ (80031a8 <__libc_init_array+0x3c>)
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	2600      	movs	r6, #0
 800317e:	f000 f819 	bl	80031b4 <_init>
 8003182:	4c0a      	ldr	r4, [pc, #40]	@ (80031ac <__libc_init_array+0x40>)
 8003184:	4d0a      	ldr	r5, [pc, #40]	@ (80031b0 <__libc_init_array+0x44>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	00b3      	lsls	r3, r6, #2
 8003192:	58eb      	ldr	r3, [r5, r3]
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	00b3      	lsls	r3, r6, #2
 800319c:	58eb      	ldr	r3, [r5, r3]
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08003254 	.word	0x08003254
 80031a8:	08003254 	.word	0x08003254
 80031ac:	08003258 	.word	0x08003258
 80031b0:	08003254 	.word	0x08003254

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
