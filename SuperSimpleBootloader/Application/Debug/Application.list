
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080080b8  080080b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08018000  08018000  00005068  2**0
                  CONTENTS
  3 .rodata       00000098  0800b0c0  0800b0c0  000040c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800b158  0800b158  00005068  2**0
                  CONTENTS
  5 .ARM          00000000  0800b158  0800b158  00005068  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800b158  0800b158  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800b158  0800b158  00004158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800b15c  0800b15c  0000415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  0800b160  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000204  20000068  0800b1c8  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  0800b1c8  0000526c  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac54  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c98  00000000  00000000  0000fce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  00011980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000678  00000000  00000000  000121f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e42  00000000  00000000  00012870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8bc  00000000  00000000  000286b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c2c  00000000  00000000  00033f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9b9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002308  00000000  00000000  000b9be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000bbee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080b8 <__do_global_dtors_aux>:
 80080b8:	b510      	push	{r4, lr}
 80080ba:	4c06      	ldr	r4, [pc, #24]	@ (80080d4 <__do_global_dtors_aux+0x1c>)
 80080bc:	7823      	ldrb	r3, [r4, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d107      	bne.n	80080d2 <__do_global_dtors_aux+0x1a>
 80080c2:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <__do_global_dtors_aux+0x20>)
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <__do_global_dtors_aux+0x16>
 80080c8:	4804      	ldr	r0, [pc, #16]	@ (80080dc <__do_global_dtors_aux+0x24>)
 80080ca:	e000      	b.n	80080ce <__do_global_dtors_aux+0x16>
 80080cc:	bf00      	nop
 80080ce:	2301      	movs	r3, #1
 80080d0:	7023      	strb	r3, [r4, #0]
 80080d2:	bd10      	pop	{r4, pc}
 80080d4:	20000068 	.word	0x20000068
 80080d8:	00000000 	.word	0x00000000
 80080dc:	0800b0a8 	.word	0x0800b0a8

080080e0 <frame_dummy>:
 80080e0:	4b04      	ldr	r3, [pc, #16]	@ (80080f4 <frame_dummy+0x14>)
 80080e2:	b510      	push	{r4, lr}
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <frame_dummy+0x10>
 80080e8:	4903      	ldr	r1, [pc, #12]	@ (80080f8 <frame_dummy+0x18>)
 80080ea:	4804      	ldr	r0, [pc, #16]	@ (80080fc <frame_dummy+0x1c>)
 80080ec:	e000      	b.n	80080f0 <frame_dummy+0x10>
 80080ee:	bf00      	nop
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	46c0      	nop			@ (mov r8, r8)
 80080f4:	00000000 	.word	0x00000000
 80080f8:	2000006c 	.word	0x2000006c
 80080fc:	0800b0a8 	.word	0x0800b0a8

08008100 <__udivsi3>:
 8008100:	2200      	movs	r2, #0
 8008102:	0843      	lsrs	r3, r0, #1
 8008104:	428b      	cmp	r3, r1
 8008106:	d374      	bcc.n	80081f2 <__udivsi3+0xf2>
 8008108:	0903      	lsrs	r3, r0, #4
 800810a:	428b      	cmp	r3, r1
 800810c:	d35f      	bcc.n	80081ce <__udivsi3+0xce>
 800810e:	0a03      	lsrs	r3, r0, #8
 8008110:	428b      	cmp	r3, r1
 8008112:	d344      	bcc.n	800819e <__udivsi3+0x9e>
 8008114:	0b03      	lsrs	r3, r0, #12
 8008116:	428b      	cmp	r3, r1
 8008118:	d328      	bcc.n	800816c <__udivsi3+0x6c>
 800811a:	0c03      	lsrs	r3, r0, #16
 800811c:	428b      	cmp	r3, r1
 800811e:	d30d      	bcc.n	800813c <__udivsi3+0x3c>
 8008120:	22ff      	movs	r2, #255	@ 0xff
 8008122:	0209      	lsls	r1, r1, #8
 8008124:	ba12      	rev	r2, r2
 8008126:	0c03      	lsrs	r3, r0, #16
 8008128:	428b      	cmp	r3, r1
 800812a:	d302      	bcc.n	8008132 <__udivsi3+0x32>
 800812c:	1212      	asrs	r2, r2, #8
 800812e:	0209      	lsls	r1, r1, #8
 8008130:	d065      	beq.n	80081fe <__udivsi3+0xfe>
 8008132:	0b03      	lsrs	r3, r0, #12
 8008134:	428b      	cmp	r3, r1
 8008136:	d319      	bcc.n	800816c <__udivsi3+0x6c>
 8008138:	e000      	b.n	800813c <__udivsi3+0x3c>
 800813a:	0a09      	lsrs	r1, r1, #8
 800813c:	0bc3      	lsrs	r3, r0, #15
 800813e:	428b      	cmp	r3, r1
 8008140:	d301      	bcc.n	8008146 <__udivsi3+0x46>
 8008142:	03cb      	lsls	r3, r1, #15
 8008144:	1ac0      	subs	r0, r0, r3
 8008146:	4152      	adcs	r2, r2
 8008148:	0b83      	lsrs	r3, r0, #14
 800814a:	428b      	cmp	r3, r1
 800814c:	d301      	bcc.n	8008152 <__udivsi3+0x52>
 800814e:	038b      	lsls	r3, r1, #14
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	4152      	adcs	r2, r2
 8008154:	0b43      	lsrs	r3, r0, #13
 8008156:	428b      	cmp	r3, r1
 8008158:	d301      	bcc.n	800815e <__udivsi3+0x5e>
 800815a:	034b      	lsls	r3, r1, #13
 800815c:	1ac0      	subs	r0, r0, r3
 800815e:	4152      	adcs	r2, r2
 8008160:	0b03      	lsrs	r3, r0, #12
 8008162:	428b      	cmp	r3, r1
 8008164:	d301      	bcc.n	800816a <__udivsi3+0x6a>
 8008166:	030b      	lsls	r3, r1, #12
 8008168:	1ac0      	subs	r0, r0, r3
 800816a:	4152      	adcs	r2, r2
 800816c:	0ac3      	lsrs	r3, r0, #11
 800816e:	428b      	cmp	r3, r1
 8008170:	d301      	bcc.n	8008176 <__udivsi3+0x76>
 8008172:	02cb      	lsls	r3, r1, #11
 8008174:	1ac0      	subs	r0, r0, r3
 8008176:	4152      	adcs	r2, r2
 8008178:	0a83      	lsrs	r3, r0, #10
 800817a:	428b      	cmp	r3, r1
 800817c:	d301      	bcc.n	8008182 <__udivsi3+0x82>
 800817e:	028b      	lsls	r3, r1, #10
 8008180:	1ac0      	subs	r0, r0, r3
 8008182:	4152      	adcs	r2, r2
 8008184:	0a43      	lsrs	r3, r0, #9
 8008186:	428b      	cmp	r3, r1
 8008188:	d301      	bcc.n	800818e <__udivsi3+0x8e>
 800818a:	024b      	lsls	r3, r1, #9
 800818c:	1ac0      	subs	r0, r0, r3
 800818e:	4152      	adcs	r2, r2
 8008190:	0a03      	lsrs	r3, r0, #8
 8008192:	428b      	cmp	r3, r1
 8008194:	d301      	bcc.n	800819a <__udivsi3+0x9a>
 8008196:	020b      	lsls	r3, r1, #8
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	4152      	adcs	r2, r2
 800819c:	d2cd      	bcs.n	800813a <__udivsi3+0x3a>
 800819e:	09c3      	lsrs	r3, r0, #7
 80081a0:	428b      	cmp	r3, r1
 80081a2:	d301      	bcc.n	80081a8 <__udivsi3+0xa8>
 80081a4:	01cb      	lsls	r3, r1, #7
 80081a6:	1ac0      	subs	r0, r0, r3
 80081a8:	4152      	adcs	r2, r2
 80081aa:	0983      	lsrs	r3, r0, #6
 80081ac:	428b      	cmp	r3, r1
 80081ae:	d301      	bcc.n	80081b4 <__udivsi3+0xb4>
 80081b0:	018b      	lsls	r3, r1, #6
 80081b2:	1ac0      	subs	r0, r0, r3
 80081b4:	4152      	adcs	r2, r2
 80081b6:	0943      	lsrs	r3, r0, #5
 80081b8:	428b      	cmp	r3, r1
 80081ba:	d301      	bcc.n	80081c0 <__udivsi3+0xc0>
 80081bc:	014b      	lsls	r3, r1, #5
 80081be:	1ac0      	subs	r0, r0, r3
 80081c0:	4152      	adcs	r2, r2
 80081c2:	0903      	lsrs	r3, r0, #4
 80081c4:	428b      	cmp	r3, r1
 80081c6:	d301      	bcc.n	80081cc <__udivsi3+0xcc>
 80081c8:	010b      	lsls	r3, r1, #4
 80081ca:	1ac0      	subs	r0, r0, r3
 80081cc:	4152      	adcs	r2, r2
 80081ce:	08c3      	lsrs	r3, r0, #3
 80081d0:	428b      	cmp	r3, r1
 80081d2:	d301      	bcc.n	80081d8 <__udivsi3+0xd8>
 80081d4:	00cb      	lsls	r3, r1, #3
 80081d6:	1ac0      	subs	r0, r0, r3
 80081d8:	4152      	adcs	r2, r2
 80081da:	0883      	lsrs	r3, r0, #2
 80081dc:	428b      	cmp	r3, r1
 80081de:	d301      	bcc.n	80081e4 <__udivsi3+0xe4>
 80081e0:	008b      	lsls	r3, r1, #2
 80081e2:	1ac0      	subs	r0, r0, r3
 80081e4:	4152      	adcs	r2, r2
 80081e6:	0843      	lsrs	r3, r0, #1
 80081e8:	428b      	cmp	r3, r1
 80081ea:	d301      	bcc.n	80081f0 <__udivsi3+0xf0>
 80081ec:	004b      	lsls	r3, r1, #1
 80081ee:	1ac0      	subs	r0, r0, r3
 80081f0:	4152      	adcs	r2, r2
 80081f2:	1a41      	subs	r1, r0, r1
 80081f4:	d200      	bcs.n	80081f8 <__udivsi3+0xf8>
 80081f6:	4601      	mov	r1, r0
 80081f8:	4152      	adcs	r2, r2
 80081fa:	4610      	mov	r0, r2
 80081fc:	4770      	bx	lr
 80081fe:	e7ff      	b.n	8008200 <__udivsi3+0x100>
 8008200:	b501      	push	{r0, lr}
 8008202:	2000      	movs	r0, #0
 8008204:	f000 f8f0 	bl	80083e8 <__aeabi_idiv0>
 8008208:	bd02      	pop	{r1, pc}
 800820a:	46c0      	nop			@ (mov r8, r8)

0800820c <__aeabi_uidivmod>:
 800820c:	2900      	cmp	r1, #0
 800820e:	d0f7      	beq.n	8008200 <__udivsi3+0x100>
 8008210:	e776      	b.n	8008100 <__udivsi3>
 8008212:	4770      	bx	lr

08008214 <__divsi3>:
 8008214:	4603      	mov	r3, r0
 8008216:	430b      	orrs	r3, r1
 8008218:	d47f      	bmi.n	800831a <__divsi3+0x106>
 800821a:	2200      	movs	r2, #0
 800821c:	0843      	lsrs	r3, r0, #1
 800821e:	428b      	cmp	r3, r1
 8008220:	d374      	bcc.n	800830c <__divsi3+0xf8>
 8008222:	0903      	lsrs	r3, r0, #4
 8008224:	428b      	cmp	r3, r1
 8008226:	d35f      	bcc.n	80082e8 <__divsi3+0xd4>
 8008228:	0a03      	lsrs	r3, r0, #8
 800822a:	428b      	cmp	r3, r1
 800822c:	d344      	bcc.n	80082b8 <__divsi3+0xa4>
 800822e:	0b03      	lsrs	r3, r0, #12
 8008230:	428b      	cmp	r3, r1
 8008232:	d328      	bcc.n	8008286 <__divsi3+0x72>
 8008234:	0c03      	lsrs	r3, r0, #16
 8008236:	428b      	cmp	r3, r1
 8008238:	d30d      	bcc.n	8008256 <__divsi3+0x42>
 800823a:	22ff      	movs	r2, #255	@ 0xff
 800823c:	0209      	lsls	r1, r1, #8
 800823e:	ba12      	rev	r2, r2
 8008240:	0c03      	lsrs	r3, r0, #16
 8008242:	428b      	cmp	r3, r1
 8008244:	d302      	bcc.n	800824c <__divsi3+0x38>
 8008246:	1212      	asrs	r2, r2, #8
 8008248:	0209      	lsls	r1, r1, #8
 800824a:	d065      	beq.n	8008318 <__divsi3+0x104>
 800824c:	0b03      	lsrs	r3, r0, #12
 800824e:	428b      	cmp	r3, r1
 8008250:	d319      	bcc.n	8008286 <__divsi3+0x72>
 8008252:	e000      	b.n	8008256 <__divsi3+0x42>
 8008254:	0a09      	lsrs	r1, r1, #8
 8008256:	0bc3      	lsrs	r3, r0, #15
 8008258:	428b      	cmp	r3, r1
 800825a:	d301      	bcc.n	8008260 <__divsi3+0x4c>
 800825c:	03cb      	lsls	r3, r1, #15
 800825e:	1ac0      	subs	r0, r0, r3
 8008260:	4152      	adcs	r2, r2
 8008262:	0b83      	lsrs	r3, r0, #14
 8008264:	428b      	cmp	r3, r1
 8008266:	d301      	bcc.n	800826c <__divsi3+0x58>
 8008268:	038b      	lsls	r3, r1, #14
 800826a:	1ac0      	subs	r0, r0, r3
 800826c:	4152      	adcs	r2, r2
 800826e:	0b43      	lsrs	r3, r0, #13
 8008270:	428b      	cmp	r3, r1
 8008272:	d301      	bcc.n	8008278 <__divsi3+0x64>
 8008274:	034b      	lsls	r3, r1, #13
 8008276:	1ac0      	subs	r0, r0, r3
 8008278:	4152      	adcs	r2, r2
 800827a:	0b03      	lsrs	r3, r0, #12
 800827c:	428b      	cmp	r3, r1
 800827e:	d301      	bcc.n	8008284 <__divsi3+0x70>
 8008280:	030b      	lsls	r3, r1, #12
 8008282:	1ac0      	subs	r0, r0, r3
 8008284:	4152      	adcs	r2, r2
 8008286:	0ac3      	lsrs	r3, r0, #11
 8008288:	428b      	cmp	r3, r1
 800828a:	d301      	bcc.n	8008290 <__divsi3+0x7c>
 800828c:	02cb      	lsls	r3, r1, #11
 800828e:	1ac0      	subs	r0, r0, r3
 8008290:	4152      	adcs	r2, r2
 8008292:	0a83      	lsrs	r3, r0, #10
 8008294:	428b      	cmp	r3, r1
 8008296:	d301      	bcc.n	800829c <__divsi3+0x88>
 8008298:	028b      	lsls	r3, r1, #10
 800829a:	1ac0      	subs	r0, r0, r3
 800829c:	4152      	adcs	r2, r2
 800829e:	0a43      	lsrs	r3, r0, #9
 80082a0:	428b      	cmp	r3, r1
 80082a2:	d301      	bcc.n	80082a8 <__divsi3+0x94>
 80082a4:	024b      	lsls	r3, r1, #9
 80082a6:	1ac0      	subs	r0, r0, r3
 80082a8:	4152      	adcs	r2, r2
 80082aa:	0a03      	lsrs	r3, r0, #8
 80082ac:	428b      	cmp	r3, r1
 80082ae:	d301      	bcc.n	80082b4 <__divsi3+0xa0>
 80082b0:	020b      	lsls	r3, r1, #8
 80082b2:	1ac0      	subs	r0, r0, r3
 80082b4:	4152      	adcs	r2, r2
 80082b6:	d2cd      	bcs.n	8008254 <__divsi3+0x40>
 80082b8:	09c3      	lsrs	r3, r0, #7
 80082ba:	428b      	cmp	r3, r1
 80082bc:	d301      	bcc.n	80082c2 <__divsi3+0xae>
 80082be:	01cb      	lsls	r3, r1, #7
 80082c0:	1ac0      	subs	r0, r0, r3
 80082c2:	4152      	adcs	r2, r2
 80082c4:	0983      	lsrs	r3, r0, #6
 80082c6:	428b      	cmp	r3, r1
 80082c8:	d301      	bcc.n	80082ce <__divsi3+0xba>
 80082ca:	018b      	lsls	r3, r1, #6
 80082cc:	1ac0      	subs	r0, r0, r3
 80082ce:	4152      	adcs	r2, r2
 80082d0:	0943      	lsrs	r3, r0, #5
 80082d2:	428b      	cmp	r3, r1
 80082d4:	d301      	bcc.n	80082da <__divsi3+0xc6>
 80082d6:	014b      	lsls	r3, r1, #5
 80082d8:	1ac0      	subs	r0, r0, r3
 80082da:	4152      	adcs	r2, r2
 80082dc:	0903      	lsrs	r3, r0, #4
 80082de:	428b      	cmp	r3, r1
 80082e0:	d301      	bcc.n	80082e6 <__divsi3+0xd2>
 80082e2:	010b      	lsls	r3, r1, #4
 80082e4:	1ac0      	subs	r0, r0, r3
 80082e6:	4152      	adcs	r2, r2
 80082e8:	08c3      	lsrs	r3, r0, #3
 80082ea:	428b      	cmp	r3, r1
 80082ec:	d301      	bcc.n	80082f2 <__divsi3+0xde>
 80082ee:	00cb      	lsls	r3, r1, #3
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	4152      	adcs	r2, r2
 80082f4:	0883      	lsrs	r3, r0, #2
 80082f6:	428b      	cmp	r3, r1
 80082f8:	d301      	bcc.n	80082fe <__divsi3+0xea>
 80082fa:	008b      	lsls	r3, r1, #2
 80082fc:	1ac0      	subs	r0, r0, r3
 80082fe:	4152      	adcs	r2, r2
 8008300:	0843      	lsrs	r3, r0, #1
 8008302:	428b      	cmp	r3, r1
 8008304:	d301      	bcc.n	800830a <__divsi3+0xf6>
 8008306:	004b      	lsls	r3, r1, #1
 8008308:	1ac0      	subs	r0, r0, r3
 800830a:	4152      	adcs	r2, r2
 800830c:	1a41      	subs	r1, r0, r1
 800830e:	d200      	bcs.n	8008312 <__divsi3+0xfe>
 8008310:	4601      	mov	r1, r0
 8008312:	4152      	adcs	r2, r2
 8008314:	4610      	mov	r0, r2
 8008316:	4770      	bx	lr
 8008318:	e05d      	b.n	80083d6 <__divsi3+0x1c2>
 800831a:	0fca      	lsrs	r2, r1, #31
 800831c:	d000      	beq.n	8008320 <__divsi3+0x10c>
 800831e:	4249      	negs	r1, r1
 8008320:	1003      	asrs	r3, r0, #32
 8008322:	d300      	bcc.n	8008326 <__divsi3+0x112>
 8008324:	4240      	negs	r0, r0
 8008326:	4053      	eors	r3, r2
 8008328:	2200      	movs	r2, #0
 800832a:	469c      	mov	ip, r3
 800832c:	0903      	lsrs	r3, r0, #4
 800832e:	428b      	cmp	r3, r1
 8008330:	d32d      	bcc.n	800838e <__divsi3+0x17a>
 8008332:	0a03      	lsrs	r3, r0, #8
 8008334:	428b      	cmp	r3, r1
 8008336:	d312      	bcc.n	800835e <__divsi3+0x14a>
 8008338:	22fc      	movs	r2, #252	@ 0xfc
 800833a:	0189      	lsls	r1, r1, #6
 800833c:	ba12      	rev	r2, r2
 800833e:	0a03      	lsrs	r3, r0, #8
 8008340:	428b      	cmp	r3, r1
 8008342:	d30c      	bcc.n	800835e <__divsi3+0x14a>
 8008344:	0189      	lsls	r1, r1, #6
 8008346:	1192      	asrs	r2, r2, #6
 8008348:	428b      	cmp	r3, r1
 800834a:	d308      	bcc.n	800835e <__divsi3+0x14a>
 800834c:	0189      	lsls	r1, r1, #6
 800834e:	1192      	asrs	r2, r2, #6
 8008350:	428b      	cmp	r3, r1
 8008352:	d304      	bcc.n	800835e <__divsi3+0x14a>
 8008354:	0189      	lsls	r1, r1, #6
 8008356:	d03a      	beq.n	80083ce <__divsi3+0x1ba>
 8008358:	1192      	asrs	r2, r2, #6
 800835a:	e000      	b.n	800835e <__divsi3+0x14a>
 800835c:	0989      	lsrs	r1, r1, #6
 800835e:	09c3      	lsrs	r3, r0, #7
 8008360:	428b      	cmp	r3, r1
 8008362:	d301      	bcc.n	8008368 <__divsi3+0x154>
 8008364:	01cb      	lsls	r3, r1, #7
 8008366:	1ac0      	subs	r0, r0, r3
 8008368:	4152      	adcs	r2, r2
 800836a:	0983      	lsrs	r3, r0, #6
 800836c:	428b      	cmp	r3, r1
 800836e:	d301      	bcc.n	8008374 <__divsi3+0x160>
 8008370:	018b      	lsls	r3, r1, #6
 8008372:	1ac0      	subs	r0, r0, r3
 8008374:	4152      	adcs	r2, r2
 8008376:	0943      	lsrs	r3, r0, #5
 8008378:	428b      	cmp	r3, r1
 800837a:	d301      	bcc.n	8008380 <__divsi3+0x16c>
 800837c:	014b      	lsls	r3, r1, #5
 800837e:	1ac0      	subs	r0, r0, r3
 8008380:	4152      	adcs	r2, r2
 8008382:	0903      	lsrs	r3, r0, #4
 8008384:	428b      	cmp	r3, r1
 8008386:	d301      	bcc.n	800838c <__divsi3+0x178>
 8008388:	010b      	lsls	r3, r1, #4
 800838a:	1ac0      	subs	r0, r0, r3
 800838c:	4152      	adcs	r2, r2
 800838e:	08c3      	lsrs	r3, r0, #3
 8008390:	428b      	cmp	r3, r1
 8008392:	d301      	bcc.n	8008398 <__divsi3+0x184>
 8008394:	00cb      	lsls	r3, r1, #3
 8008396:	1ac0      	subs	r0, r0, r3
 8008398:	4152      	adcs	r2, r2
 800839a:	0883      	lsrs	r3, r0, #2
 800839c:	428b      	cmp	r3, r1
 800839e:	d301      	bcc.n	80083a4 <__divsi3+0x190>
 80083a0:	008b      	lsls	r3, r1, #2
 80083a2:	1ac0      	subs	r0, r0, r3
 80083a4:	4152      	adcs	r2, r2
 80083a6:	d2d9      	bcs.n	800835c <__divsi3+0x148>
 80083a8:	0843      	lsrs	r3, r0, #1
 80083aa:	428b      	cmp	r3, r1
 80083ac:	d301      	bcc.n	80083b2 <__divsi3+0x19e>
 80083ae:	004b      	lsls	r3, r1, #1
 80083b0:	1ac0      	subs	r0, r0, r3
 80083b2:	4152      	adcs	r2, r2
 80083b4:	1a41      	subs	r1, r0, r1
 80083b6:	d200      	bcs.n	80083ba <__divsi3+0x1a6>
 80083b8:	4601      	mov	r1, r0
 80083ba:	4663      	mov	r3, ip
 80083bc:	4152      	adcs	r2, r2
 80083be:	105b      	asrs	r3, r3, #1
 80083c0:	4610      	mov	r0, r2
 80083c2:	d301      	bcc.n	80083c8 <__divsi3+0x1b4>
 80083c4:	4240      	negs	r0, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d500      	bpl.n	80083cc <__divsi3+0x1b8>
 80083ca:	4249      	negs	r1, r1
 80083cc:	4770      	bx	lr
 80083ce:	4663      	mov	r3, ip
 80083d0:	105b      	asrs	r3, r3, #1
 80083d2:	d300      	bcc.n	80083d6 <__divsi3+0x1c2>
 80083d4:	4240      	negs	r0, r0
 80083d6:	b501      	push	{r0, lr}
 80083d8:	2000      	movs	r0, #0
 80083da:	f000 f805 	bl	80083e8 <__aeabi_idiv0>
 80083de:	bd02      	pop	{r1, pc}

080083e0 <__aeabi_idivmod>:
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d0f8      	beq.n	80083d6 <__divsi3+0x1c2>
 80083e4:	e716      	b.n	8008214 <__divsi3>
 80083e6:	4770      	bx	lr

080083e8 <__aeabi_idiv0>:
 80083e8:	4770      	bx	lr
 80083ea:	46c0      	nop			@ (mov r8, r8)

080083ec <_write>:
	void(*TurnOff)(void);
};



int _write(int file, char *ptr, int len){
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	e00a      	b.n	8008414 <_write+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	1c4b      	adds	r3, r1, #1
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	4808      	ldr	r0, [pc, #32]	@ (8008428 <_write+0x3c>)
 8008406:	2364      	movs	r3, #100	@ 0x64
 8008408:	2201      	movs	r2, #1
 800840a:	f001 fbd3 	bl	8009bb4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	429a      	cmp	r2, r3
 800841a:	dbf0      	blt.n	80083fe <_write+0x12>
	}

	return len;
 800841c:	687b      	ldr	r3, [r7, #4]
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b006      	add	sp, #24
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	20000084 	.word	0x20000084

0800842c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  struct BootloaderAPI *api = (struct BootloaderAPI *) 0x8018000;
 8008432:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <main+0x30>)
 8008434:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008436:	f000 fa4d 	bl	80088d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800843a:	f000 f813 	bl	8008464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800843e:	f000 f8a7 	bl	8008590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008442:	f000 f857 	bl	80084f4 <MX_USART2_UART_Init>
//	Blink(100);
//	  TurnOnLED(GPIO_PIN_SET);
#ifdef FIRST_VIDEO
	  (*Functions[0])(100);
#endif
	  printf("APP Running\r\n");
 8008446:	4b06      	ldr	r3, [pc, #24]	@ (8008460 <main+0x34>)
 8008448:	0018      	movs	r0, r3
 800844a:	f002 fa63 	bl	800a914 <puts>
	  HAL_Delay(1000);
 800844e:	23fa      	movs	r3, #250	@ 0xfa
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	0018      	movs	r0, r3
 8008454:	f000 fac4 	bl	80089e0 <HAL_Delay>
	  printf("APP Running\r\n");
 8008458:	46c0      	nop			@ (mov r8, r8)
 800845a:	e7f4      	b.n	8008446 <main+0x1a>
 800845c:	08018000 	.word	0x08018000
 8008460:	0800b0c0 	.word	0x0800b0c0

08008464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b093      	sub	sp, #76	@ 0x4c
 8008468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800846a:	2414      	movs	r4, #20
 800846c:	193b      	adds	r3, r7, r4
 800846e:	0018      	movs	r0, r3
 8008470:	2334      	movs	r3, #52	@ 0x34
 8008472:	001a      	movs	r2, r3
 8008474:	2100      	movs	r1, #0
 8008476:	f002 fb43 	bl	800ab00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800847a:	1d3b      	adds	r3, r7, #4
 800847c:	0018      	movs	r0, r3
 800847e:	2310      	movs	r3, #16
 8008480:	001a      	movs	r2, r3
 8008482:	2100      	movs	r1, #0
 8008484:	f002 fb3c 	bl	800ab00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008488:	2380      	movs	r3, #128	@ 0x80
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	0018      	movs	r0, r3
 800848e:	f000 fd01 	bl	8008e94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008492:	193b      	adds	r3, r7, r4
 8008494:	2202      	movs	r2, #2
 8008496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008498:	193b      	adds	r3, r7, r4
 800849a:	2280      	movs	r2, #128	@ 0x80
 800849c:	0052      	lsls	r2, r2, #1
 800849e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80084a0:	193b      	adds	r3, r7, r4
 80084a2:	2200      	movs	r2, #0
 80084a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80084a6:	193b      	adds	r3, r7, r4
 80084a8:	2240      	movs	r2, #64	@ 0x40
 80084aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80084ac:	193b      	adds	r3, r7, r4
 80084ae:	2200      	movs	r2, #0
 80084b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084b2:	193b      	adds	r3, r7, r4
 80084b4:	0018      	movs	r0, r3
 80084b6:	f000 fd39 	bl	8008f2c <HAL_RCC_OscConfig>
 80084ba:	1e03      	subs	r3, r0, #0
 80084bc:	d001      	beq.n	80084c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80084be:	f000 f8b7 	bl	8008630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	2207      	movs	r2, #7
 80084c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	2200      	movs	r2, #0
 80084cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	2200      	movs	r2, #0
 80084d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80084d4:	1d3b      	adds	r3, r7, #4
 80084d6:	2200      	movs	r2, #0
 80084d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80084da:	1d3b      	adds	r3, r7, #4
 80084dc:	2100      	movs	r1, #0
 80084de:	0018      	movs	r0, r3
 80084e0:	f001 f834 	bl	800954c <HAL_RCC_ClockConfig>
 80084e4:	1e03      	subs	r3, r0, #0
 80084e6:	d001      	beq.n	80084ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80084e8:	f000 f8a2 	bl	8008630 <Error_Handler>
  }
}
 80084ec:	46c0      	nop			@ (mov r8, r8)
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b013      	add	sp, #76	@ 0x4c
 80084f2:	bd90      	pop	{r4, r7, pc}

080084f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80084f8:	4b23      	ldr	r3, [pc, #140]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 80084fa:	4a24      	ldr	r2, [pc, #144]	@ (800858c <MX_USART2_UART_Init+0x98>)
 80084fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80084fe:	4b22      	ldr	r3, [pc, #136]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008500:	22e1      	movs	r2, #225	@ 0xe1
 8008502:	0252      	lsls	r2, r2, #9
 8008504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008506:	4b20      	ldr	r3, [pc, #128]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008508:	2200      	movs	r2, #0
 800850a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800850c:	4b1e      	ldr	r3, [pc, #120]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 800850e:	2200      	movs	r2, #0
 8008510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008512:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008514:	2200      	movs	r2, #0
 8008516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008518:	4b1b      	ldr	r3, [pc, #108]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 800851a:	220c      	movs	r2, #12
 800851c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800851e:	4b1a      	ldr	r3, [pc, #104]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008524:	4b18      	ldr	r3, [pc, #96]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008526:	2200      	movs	r2, #0
 8008528:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800852a:	4b17      	ldr	r3, [pc, #92]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 800852c:	2200      	movs	r2, #0
 800852e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008530:	4b15      	ldr	r3, [pc, #84]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008532:	2200      	movs	r2, #0
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008536:	4b14      	ldr	r3, [pc, #80]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008538:	2200      	movs	r2, #0
 800853a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800853c:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 800853e:	0018      	movs	r0, r3
 8008540:	f001 fae2 	bl	8009b08 <HAL_UART_Init>
 8008544:	1e03      	subs	r3, r0, #0
 8008546:	d001      	beq.n	800854c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008548:	f000 f872 	bl	8008630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800854c:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 800854e:	2100      	movs	r1, #0
 8008550:	0018      	movs	r0, r3
 8008552:	f001 ffe5 	bl	800a520 <HAL_UARTEx_SetTxFifoThreshold>
 8008556:	1e03      	subs	r3, r0, #0
 8008558:	d001      	beq.n	800855e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800855a:	f000 f869 	bl	8008630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800855e:	4b0a      	ldr	r3, [pc, #40]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008560:	2100      	movs	r1, #0
 8008562:	0018      	movs	r0, r3
 8008564:	f002 f81c 	bl	800a5a0 <HAL_UARTEx_SetRxFifoThreshold>
 8008568:	1e03      	subs	r3, r0, #0
 800856a:	d001      	beq.n	8008570 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800856c:	f000 f860 	bl	8008630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <MX_USART2_UART_Init+0x94>)
 8008572:	0018      	movs	r0, r3
 8008574:	f001 ff9a 	bl	800a4ac <HAL_UARTEx_DisableFifoMode>
 8008578:	1e03      	subs	r3, r0, #0
 800857a:	d001      	beq.n	8008580 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800857c:	f000 f858 	bl	8008630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008580:	46c0      	nop			@ (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	46c0      	nop			@ (mov r8, r8)
 8008588:	20000084 	.word	0x20000084
 800858c:	40004400 	.word	0x40004400

08008590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008596:	240c      	movs	r4, #12
 8008598:	193b      	adds	r3, r7, r4
 800859a:	0018      	movs	r0, r3
 800859c:	2314      	movs	r3, #20
 800859e:	001a      	movs	r2, r3
 80085a0:	2100      	movs	r1, #0
 80085a2:	f002 faad 	bl	800ab00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085a6:	4b21      	ldr	r3, [pc, #132]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085aa:	4b20      	ldr	r3, [pc, #128]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085ac:	2104      	movs	r1, #4
 80085ae:	430a      	orrs	r2, r1
 80085b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80085b2:	4b1e      	ldr	r3, [pc, #120]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b6:	2204      	movs	r2, #4
 80085b8:	4013      	ands	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80085be:	4b1b      	ldr	r3, [pc, #108]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085c2:	4b1a      	ldr	r3, [pc, #104]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085c4:	2120      	movs	r1, #32
 80085c6:	430a      	orrs	r2, r1
 80085c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80085ca:	4b18      	ldr	r3, [pc, #96]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ce:	2220      	movs	r2, #32
 80085d0:	4013      	ands	r3, r2
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d6:	4b15      	ldr	r3, [pc, #84]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085da:	4b14      	ldr	r3, [pc, #80]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085dc:	2101      	movs	r1, #1
 80085de:	430a      	orrs	r2, r1
 80085e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80085e2:	4b12      	ldr	r3, [pc, #72]	@ (800862c <MX_GPIO_Init+0x9c>)
 80085e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e6:	2201      	movs	r2, #1
 80085e8:	4013      	ands	r3, r2
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80085ee:	23a0      	movs	r3, #160	@ 0xa0
 80085f0:	05db      	lsls	r3, r3, #23
 80085f2:	2200      	movs	r2, #0
 80085f4:	2120      	movs	r1, #32
 80085f6:	0018      	movs	r0, r3
 80085f8:	f000 fc2e 	bl	8008e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80085fc:	0021      	movs	r1, r4
 80085fe:	187b      	adds	r3, r7, r1
 8008600:	2220      	movs	r2, #32
 8008602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008604:	187b      	adds	r3, r7, r1
 8008606:	2201      	movs	r2, #1
 8008608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860a:	187b      	adds	r3, r7, r1
 800860c:	2200      	movs	r2, #0
 800860e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008610:	187b      	adds	r3, r7, r1
 8008612:	2202      	movs	r2, #2
 8008614:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8008616:	187a      	adds	r2, r7, r1
 8008618:	23a0      	movs	r3, #160	@ 0xa0
 800861a:	05db      	lsls	r3, r3, #23
 800861c:	0011      	movs	r1, r2
 800861e:	0018      	movs	r0, r3
 8008620:	f000 fab6 	bl	8008b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008624:	46c0      	nop			@ (mov r8, r8)
 8008626:	46bd      	mov	sp, r7
 8008628:	b009      	add	sp, #36	@ 0x24
 800862a:	bd90      	pop	{r4, r7, pc}
 800862c:	40021000 	.word	0x40021000

08008630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008634:	b672      	cpsid	i
}
 8008636:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008638:	46c0      	nop			@ (mov r8, r8)
 800863a:	e7fd      	b.n	8008638 <Error_Handler+0x8>

0800863c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008642:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <HAL_MspInit+0x44>)
 8008644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008646:	4b0e      	ldr	r3, [pc, #56]	@ (8008680 <HAL_MspInit+0x44>)
 8008648:	2101      	movs	r1, #1
 800864a:	430a      	orrs	r2, r1
 800864c:	641a      	str	r2, [r3, #64]	@ 0x40
 800864e:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <HAL_MspInit+0x44>)
 8008650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008652:	2201      	movs	r2, #1
 8008654:	4013      	ands	r3, r2
 8008656:	607b      	str	r3, [r7, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800865a:	4b09      	ldr	r3, [pc, #36]	@ (8008680 <HAL_MspInit+0x44>)
 800865c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800865e:	4b08      	ldr	r3, [pc, #32]	@ (8008680 <HAL_MspInit+0x44>)
 8008660:	2180      	movs	r1, #128	@ 0x80
 8008662:	0549      	lsls	r1, r1, #21
 8008664:	430a      	orrs	r2, r1
 8008666:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008668:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <HAL_MspInit+0x44>)
 800866a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800866c:	2380      	movs	r3, #128	@ 0x80
 800866e:	055b      	lsls	r3, r3, #21
 8008670:	4013      	ands	r3, r2
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008676:	46c0      	nop			@ (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b002      	add	sp, #8
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			@ (mov r8, r8)
 8008680:	40021000 	.word	0x40021000

08008684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b091      	sub	sp, #68	@ 0x44
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868c:	232c      	movs	r3, #44	@ 0x2c
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	0018      	movs	r0, r3
 8008692:	2314      	movs	r3, #20
 8008694:	001a      	movs	r2, r3
 8008696:	2100      	movs	r1, #0
 8008698:	f002 fa32 	bl	800ab00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800869c:	2410      	movs	r4, #16
 800869e:	193b      	adds	r3, r7, r4
 80086a0:	0018      	movs	r0, r3
 80086a2:	231c      	movs	r3, #28
 80086a4:	001a      	movs	r2, r3
 80086a6:	2100      	movs	r1, #0
 80086a8:	f002 fa2a 	bl	800ab00 <memset>
  if(huart->Instance==USART2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a22      	ldr	r2, [pc, #136]	@ (800873c <HAL_UART_MspInit+0xb8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d13e      	bne.n	8008734 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80086b6:	193b      	adds	r3, r7, r4
 80086b8:	2202      	movs	r2, #2
 80086ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80086bc:	193b      	adds	r3, r7, r4
 80086be:	2200      	movs	r2, #0
 80086c0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086c2:	193b      	adds	r3, r7, r4
 80086c4:	0018      	movs	r0, r3
 80086c6:	f001 f8eb 	bl	80098a0 <HAL_RCCEx_PeriphCLKConfig>
 80086ca:	1e03      	subs	r3, r0, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80086ce:	f7ff ffaf 	bl	8008630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80086d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086d8:	2180      	movs	r1, #128	@ 0x80
 80086da:	0289      	lsls	r1, r1, #10
 80086dc:	430a      	orrs	r2, r1
 80086de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80086e0:	4b17      	ldr	r3, [pc, #92]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e4:	2380      	movs	r3, #128	@ 0x80
 80086e6:	029b      	lsls	r3, r3, #10
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ee:	4b14      	ldr	r3, [pc, #80]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086f2:	4b13      	ldr	r3, [pc, #76]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086f4:	2101      	movs	r1, #1
 80086f6:	430a      	orrs	r2, r1
 80086f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80086fa:	4b11      	ldr	r3, [pc, #68]	@ (8008740 <HAL_UART_MspInit+0xbc>)
 80086fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fe:	2201      	movs	r2, #1
 8008700:	4013      	ands	r3, r2
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008706:	212c      	movs	r1, #44	@ 0x2c
 8008708:	187b      	adds	r3, r7, r1
 800870a:	220c      	movs	r2, #12
 800870c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870e:	187b      	adds	r3, r7, r1
 8008710:	2202      	movs	r2, #2
 8008712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008714:	187b      	adds	r3, r7, r1
 8008716:	2201      	movs	r2, #1
 8008718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800871a:	187b      	adds	r3, r7, r1
 800871c:	2200      	movs	r2, #0
 800871e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008720:	187b      	adds	r3, r7, r1
 8008722:	2201      	movs	r2, #1
 8008724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008726:	187a      	adds	r2, r7, r1
 8008728:	23a0      	movs	r3, #160	@ 0xa0
 800872a:	05db      	lsls	r3, r3, #23
 800872c:	0011      	movs	r1, r2
 800872e:	0018      	movs	r0, r3
 8008730:	f000 fa2e 	bl	8008b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008734:	46c0      	nop			@ (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b011      	add	sp, #68	@ 0x44
 800873a:	bd90      	pop	{r4, r7, pc}
 800873c:	40004400 	.word	0x40004400
 8008740:	40021000 	.word	0x40021000

08008744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008748:	46c0      	nop			@ (mov r8, r8)
 800874a:	e7fd      	b.n	8008748 <NMI_Handler+0x4>

0800874c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008750:	46c0      	nop			@ (mov r8, r8)
 8008752:	e7fd      	b.n	8008750 <HardFault_Handler+0x4>

08008754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800876c:	f000 f91c 	bl	80089a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008770:	46c0      	nop			@ (mov r8, r8)
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	e00a      	b.n	800879e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008788:	e000      	b.n	800878c <_read+0x16>
 800878a:	bf00      	nop
 800878c:	0001      	movs	r1, r0
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	60ba      	str	r2, [r7, #8]
 8008794:	b2ca      	uxtb	r2, r1
 8008796:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	3301      	adds	r3, #1
 800879c:	617b      	str	r3, [r7, #20]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	dbf0      	blt.n	8008788 <_read+0x12>
  }

  return len;
 80087a6:	687b      	ldr	r3, [r7, #4]
}
 80087a8:	0018      	movs	r0, r3
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b006      	add	sp, #24
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80087b8:	2301      	movs	r3, #1
 80087ba:	425b      	negs	r3, r3
}
 80087bc:	0018      	movs	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	b002      	add	sp, #8
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2280      	movs	r2, #128	@ 0x80
 80087d2:	0192      	lsls	r2, r2, #6
 80087d4:	605a      	str	r2, [r3, #4]
  return 0;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	0018      	movs	r0, r3
 80087da:	46bd      	mov	sp, r7
 80087dc:	b002      	add	sp, #8
 80087de:	bd80      	pop	{r7, pc}

080087e0 <_isatty>:

int _isatty(int file)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80087e8:	2301      	movs	r3, #1
}
 80087ea:	0018      	movs	r0, r3
 80087ec:	46bd      	mov	sp, r7
 80087ee:	b002      	add	sp, #8
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	0018      	movs	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	b004      	add	sp, #16
 8008806:	bd80      	pop	{r7, pc}

08008808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008810:	4a14      	ldr	r2, [pc, #80]	@ (8008864 <_sbrk+0x5c>)
 8008812:	4b15      	ldr	r3, [pc, #84]	@ (8008868 <_sbrk+0x60>)
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800881c:	4b13      	ldr	r3, [pc, #76]	@ (800886c <_sbrk+0x64>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d102      	bne.n	800882a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008824:	4b11      	ldr	r3, [pc, #68]	@ (800886c <_sbrk+0x64>)
 8008826:	4a12      	ldr	r2, [pc, #72]	@ (8008870 <_sbrk+0x68>)
 8008828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800882a:	4b10      	ldr	r3, [pc, #64]	@ (800886c <_sbrk+0x64>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	18d3      	adds	r3, r2, r3
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	d207      	bcs.n	8008848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008838:	f002 f9b8 	bl	800abac <__errno>
 800883c:	0003      	movs	r3, r0
 800883e:	220c      	movs	r2, #12
 8008840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008842:	2301      	movs	r3, #1
 8008844:	425b      	negs	r3, r3
 8008846:	e009      	b.n	800885c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008848:	4b08      	ldr	r3, [pc, #32]	@ (800886c <_sbrk+0x64>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800884e:	4b07      	ldr	r3, [pc, #28]	@ (800886c <_sbrk+0x64>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	18d2      	adds	r2, r2, r3
 8008856:	4b05      	ldr	r3, [pc, #20]	@ (800886c <_sbrk+0x64>)
 8008858:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800885a:	68fb      	ldr	r3, [r7, #12]
}
 800885c:	0018      	movs	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	b006      	add	sp, #24
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20009000 	.word	0x20009000
 8008868:	00000400 	.word	0x00000400
 800886c:	20000118 	.word	0x20000118
 8008870:	20000270 	.word	0x20000270

08008874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008878:	46c0      	nop			@ (mov r8, r8)
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008880:	480d      	ldr	r0, [pc, #52]	@ (80088b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008882:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008884:	f7ff fff6 	bl	8008874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008888:	480c      	ldr	r0, [pc, #48]	@ (80088bc <LoopForever+0x6>)
  ldr r1, =_edata
 800888a:	490d      	ldr	r1, [pc, #52]	@ (80088c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800888c:	4a0d      	ldr	r2, [pc, #52]	@ (80088c4 <LoopForever+0xe>)
  movs r3, #0
 800888e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008890:	e002      	b.n	8008898 <LoopCopyDataInit>

08008892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008896:	3304      	adds	r3, #4

08008898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800889a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800889c:	d3f9      	bcc.n	8008892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800889e:	4a0a      	ldr	r2, [pc, #40]	@ (80088c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80088a0:	4c0a      	ldr	r4, [pc, #40]	@ (80088cc <LoopForever+0x16>)
  movs r3, #0
 80088a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088a4:	e001      	b.n	80088aa <LoopFillZerobss>

080088a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088a8:	3204      	adds	r2, #4

080088aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088ac:	d3fb      	bcc.n	80088a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80088ae:	f002 f983 	bl	800abb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80088b2:	f7ff fdbb 	bl	800842c <main>

080088b6 <LoopForever>:

LoopForever:
  b LoopForever
 80088b6:	e7fe      	b.n	80088b6 <LoopForever>
  ldr   r0, =_estack
 80088b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80088bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80088c4:	0800b160 	.word	0x0800b160
  ldr r2, =_sbss
 80088c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80088cc:	2000026c 	.word	0x2000026c

080088d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80088d0:	e7fe      	b.n	80088d0 <ADC1_IRQHandler>
	...

080088d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80088da:	1dfb      	adds	r3, r7, #7
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <HAL_Init+0x3c>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <HAL_Init+0x3c>)
 80088e6:	2180      	movs	r1, #128	@ 0x80
 80088e8:	0049      	lsls	r1, r1, #1
 80088ea:	430a      	orrs	r2, r1
 80088ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80088ee:	2000      	movs	r0, #0
 80088f0:	f000 f810 	bl	8008914 <HAL_InitTick>
 80088f4:	1e03      	subs	r3, r0, #0
 80088f6:	d003      	beq.n	8008900 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80088f8:	1dfb      	adds	r3, r7, #7
 80088fa:	2201      	movs	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e001      	b.n	8008904 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008900:	f7ff fe9c 	bl	800863c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008904:	1dfb      	adds	r3, r7, #7
 8008906:	781b      	ldrb	r3, [r3, #0]
}
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b002      	add	sp, #8
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40022000 	.word	0x40022000

08008914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800891c:	230f      	movs	r3, #15
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008924:	4b1d      	ldr	r3, [pc, #116]	@ (800899c <HAL_InitTick+0x88>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02b      	beq.n	8008984 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800892c:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <HAL_InitTick+0x8c>)
 800892e:	681c      	ldr	r4, [r3, #0]
 8008930:	4b1a      	ldr	r3, [pc, #104]	@ (800899c <HAL_InitTick+0x88>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	0019      	movs	r1, r3
 8008936:	23fa      	movs	r3, #250	@ 0xfa
 8008938:	0098      	lsls	r0, r3, #2
 800893a:	f7ff fbe1 	bl	8008100 <__udivsi3>
 800893e:	0003      	movs	r3, r0
 8008940:	0019      	movs	r1, r3
 8008942:	0020      	movs	r0, r4
 8008944:	f7ff fbdc 	bl	8008100 <__udivsi3>
 8008948:	0003      	movs	r3, r0
 800894a:	0018      	movs	r0, r3
 800894c:	f000 f913 	bl	8008b76 <HAL_SYSTICK_Config>
 8008950:	1e03      	subs	r3, r0, #0
 8008952:	d112      	bne.n	800897a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b03      	cmp	r3, #3
 8008958:	d80a      	bhi.n	8008970 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	2301      	movs	r3, #1
 800895e:	425b      	negs	r3, r3
 8008960:	2200      	movs	r2, #0
 8008962:	0018      	movs	r0, r3
 8008964:	f000 f8f2 	bl	8008b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008968:	4b0e      	ldr	r3, [pc, #56]	@ (80089a4 <HAL_InitTick+0x90>)
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e00d      	b.n	800898c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008970:	230f      	movs	r3, #15
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	e008      	b.n	800898c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800897a:	230f      	movs	r3, #15
 800897c:	18fb      	adds	r3, r7, r3
 800897e:	2201      	movs	r2, #1
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	e003      	b.n	800898c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008984:	230f      	movs	r3, #15
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	2201      	movs	r2, #1
 800898a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800898c:	230f      	movs	r3, #15
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	781b      	ldrb	r3, [r3, #0]
}
 8008992:	0018      	movs	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	b005      	add	sp, #20
 8008998:	bd90      	pop	{r4, r7, pc}
 800899a:	46c0      	nop			@ (mov r8, r8)
 800899c:	20000008 	.word	0x20000008
 80089a0:	20000000 	.word	0x20000000
 80089a4:	20000004 	.word	0x20000004

080089a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80089ac:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <HAL_IncTick+0x1c>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	001a      	movs	r2, r3
 80089b2:	4b05      	ldr	r3, [pc, #20]	@ (80089c8 <HAL_IncTick+0x20>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	18d2      	adds	r2, r2, r3
 80089b8:	4b03      	ldr	r3, [pc, #12]	@ (80089c8 <HAL_IncTick+0x20>)
 80089ba:	601a      	str	r2, [r3, #0]
}
 80089bc:	46c0      	nop			@ (mov r8, r8)
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	46c0      	nop			@ (mov r8, r8)
 80089c4:	20000008 	.word	0x20000008
 80089c8:	2000011c 	.word	0x2000011c

080089cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  return uwTick;
 80089d0:	4b02      	ldr	r3, [pc, #8]	@ (80089dc <HAL_GetTick+0x10>)
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	46c0      	nop			@ (mov r8, r8)
 80089dc:	2000011c 	.word	0x2000011c

080089e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089e8:	f7ff fff0 	bl	80089cc <HAL_GetTick>
 80089ec:	0003      	movs	r3, r0
 80089ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	d005      	beq.n	8008a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80089fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <HAL_Delay+0x44>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	001a      	movs	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a06:	46c0      	nop			@ (mov r8, r8)
 8008a08:	f7ff ffe0 	bl	80089cc <HAL_GetTick>
 8008a0c:	0002      	movs	r2, r0
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d8f7      	bhi.n	8008a08 <HAL_Delay+0x28>
  {
  }
}
 8008a18:	46c0      	nop			@ (mov r8, r8)
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b004      	add	sp, #16
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	46c0      	nop			@ (mov r8, r8)
 8008a24:	20000008 	.word	0x20000008

08008a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	0002      	movs	r2, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	1dfb      	adds	r3, r7, #7
 8008a34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a3c:	d828      	bhi.n	8008a90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8008afc <__NVIC_SetPriority+0xd4>)
 8008a40:	1dfb      	adds	r3, r7, #7
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	33c0      	adds	r3, #192	@ 0xc0
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	589b      	ldr	r3, [r3, r2]
 8008a4e:	1dfa      	adds	r2, r7, #7
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	0011      	movs	r1, r2
 8008a54:	2203      	movs	r2, #3
 8008a56:	400a      	ands	r2, r1
 8008a58:	00d2      	lsls	r2, r2, #3
 8008a5a:	21ff      	movs	r1, #255	@ 0xff
 8008a5c:	4091      	lsls	r1, r2
 8008a5e:	000a      	movs	r2, r1
 8008a60:	43d2      	mvns	r2, r2
 8008a62:	401a      	ands	r2, r3
 8008a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	019b      	lsls	r3, r3, #6
 8008a6a:	22ff      	movs	r2, #255	@ 0xff
 8008a6c:	401a      	ands	r2, r3
 8008a6e:	1dfb      	adds	r3, r7, #7
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	0018      	movs	r0, r3
 8008a74:	2303      	movs	r3, #3
 8008a76:	4003      	ands	r3, r0
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a7c:	481f      	ldr	r0, [pc, #124]	@ (8008afc <__NVIC_SetPriority+0xd4>)
 8008a7e:	1dfb      	adds	r3, r7, #7
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	430a      	orrs	r2, r1
 8008a88:	33c0      	adds	r3, #192	@ 0xc0
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008a8e:	e031      	b.n	8008af4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008a90:	4a1b      	ldr	r2, [pc, #108]	@ (8008b00 <__NVIC_SetPriority+0xd8>)
 8008a92:	1dfb      	adds	r3, r7, #7
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	0019      	movs	r1, r3
 8008a98:	230f      	movs	r3, #15
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	3b08      	subs	r3, #8
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	3306      	adds	r3, #6
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	18d3      	adds	r3, r2, r3
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	1dfa      	adds	r2, r7, #7
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	0011      	movs	r1, r2
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	400a      	ands	r2, r1
 8008ab4:	00d2      	lsls	r2, r2, #3
 8008ab6:	21ff      	movs	r1, #255	@ 0xff
 8008ab8:	4091      	lsls	r1, r2
 8008aba:	000a      	movs	r2, r1
 8008abc:	43d2      	mvns	r2, r2
 8008abe:	401a      	ands	r2, r3
 8008ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	019b      	lsls	r3, r3, #6
 8008ac6:	22ff      	movs	r2, #255	@ 0xff
 8008ac8:	401a      	ands	r2, r3
 8008aca:	1dfb      	adds	r3, r7, #7
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	0018      	movs	r0, r3
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	4003      	ands	r3, r0
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008ad8:	4809      	ldr	r0, [pc, #36]	@ (8008b00 <__NVIC_SetPriority+0xd8>)
 8008ada:	1dfb      	adds	r3, r7, #7
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	001c      	movs	r4, r3
 8008ae0:	230f      	movs	r3, #15
 8008ae2:	4023      	ands	r3, r4
 8008ae4:	3b08      	subs	r3, #8
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	3306      	adds	r3, #6
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	18c3      	adds	r3, r0, r3
 8008af0:	3304      	adds	r3, #4
 8008af2:	601a      	str	r2, [r3, #0]
}
 8008af4:	46c0      	nop			@ (mov r8, r8)
 8008af6:	46bd      	mov	sp, r7
 8008af8:	b003      	add	sp, #12
 8008afa:	bd90      	pop	{r4, r7, pc}
 8008afc:	e000e100 	.word	0xe000e100
 8008b00:	e000ed00 	.word	0xe000ed00

08008b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	1e5a      	subs	r2, r3, #1
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	045b      	lsls	r3, r3, #17
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d301      	bcc.n	8008b1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e010      	b.n	8008b3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <SysTick_Config+0x44>)
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	3a01      	subs	r2, #1
 8008b22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b24:	2301      	movs	r3, #1
 8008b26:	425b      	negs	r3, r3
 8008b28:	2103      	movs	r1, #3
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff ff7c 	bl	8008a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b30:	4b05      	ldr	r3, [pc, #20]	@ (8008b48 <SysTick_Config+0x44>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b36:	4b04      	ldr	r3, [pc, #16]	@ (8008b48 <SysTick_Config+0x44>)
 8008b38:	2207      	movs	r2, #7
 8008b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	0018      	movs	r0, r3
 8008b40:	46bd      	mov	sp, r7
 8008b42:	b002      	add	sp, #8
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	e000e010 	.word	0xe000e010

08008b4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	210f      	movs	r1, #15
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	1c02      	adds	r2, r0, #0
 8008b5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	0011      	movs	r1, r2
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7ff ff5d 	bl	8008a28 <__NVIC_SetPriority>
}
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b004      	add	sp, #16
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff ffbf 	bl	8008b04 <SysTick_Config>
 8008b86:	0003      	movs	r3, r0
}
 8008b88:	0018      	movs	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b002      	add	sp, #8
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b9e:	e147      	b.n	8008e30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4091      	lsls	r1, r2
 8008baa:	000a      	movs	r2, r1
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d100      	bne.n	8008bb8 <HAL_GPIO_Init+0x28>
 8008bb6:	e138      	b.n	8008e2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d005      	beq.n	8008bd0 <HAL_GPIO_Init+0x40>
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2203      	movs	r2, #3
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d130      	bne.n	8008c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	2203      	movs	r2, #3
 8008bdc:	409a      	lsls	r2, r3
 8008bde:	0013      	movs	r3, r2
 8008be0:	43da      	mvns	r2, r3
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	4013      	ands	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	409a      	lsls	r2, r3
 8008bf2:	0013      	movs	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c06:	2201      	movs	r2, #1
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	409a      	lsls	r2, r3
 8008c0c:	0013      	movs	r3, r2
 8008c0e:	43da      	mvns	r2, r3
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	4013      	ands	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	091b      	lsrs	r3, r3, #4
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	401a      	ands	r2, r3
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	409a      	lsls	r2, r3
 8008c24:	0013      	movs	r3, r2
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2203      	movs	r2, #3
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d017      	beq.n	8008c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	2203      	movs	r2, #3
 8008c4a:	409a      	lsls	r2, r3
 8008c4c:	0013      	movs	r3, r2
 8008c4e:	43da      	mvns	r2, r3
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4013      	ands	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	409a      	lsls	r2, r3
 8008c60:	0013      	movs	r3, r2
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2203      	movs	r2, #3
 8008c74:	4013      	ands	r3, r2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d123      	bne.n	8008cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	08da      	lsrs	r2, r3, #3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3208      	adds	r2, #8
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	58d3      	ldr	r3, [r2, r3]
 8008c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2207      	movs	r2, #7
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	220f      	movs	r2, #15
 8008c92:	409a      	lsls	r2, r3
 8008c94:	0013      	movs	r3, r2
 8008c96:	43da      	mvns	r2, r3
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691a      	ldr	r2, [r3, #16]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2107      	movs	r1, #7
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	409a      	lsls	r2, r3
 8008cac:	0013      	movs	r3, r2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	08da      	lsrs	r2, r3, #3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3208      	adds	r2, #8
 8008cbc:	0092      	lsls	r2, r2, #2
 8008cbe:	6939      	ldr	r1, [r7, #16]
 8008cc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	2203      	movs	r2, #3
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	0013      	movs	r3, r2
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2203      	movs	r2, #3
 8008ce0:	401a      	ands	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	409a      	lsls	r2, r3
 8008ce8:	0013      	movs	r3, r2
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	23c0      	movs	r3, #192	@ 0xc0
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d100      	bne.n	8008d04 <HAL_GPIO_Init+0x174>
 8008d02:	e092      	b.n	8008e2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008d04:	4a50      	ldr	r2, [pc, #320]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	089b      	lsrs	r3, r3, #2
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	589b      	ldr	r3, [r3, r2]
 8008d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2203      	movs	r2, #3
 8008d16:	4013      	ands	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	220f      	movs	r2, #15
 8008d1c:	409a      	lsls	r2, r3
 8008d1e:	0013      	movs	r3, r2
 8008d20:	43da      	mvns	r2, r3
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	4013      	ands	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	23a0      	movs	r3, #160	@ 0xa0
 8008d2c:	05db      	lsls	r3, r3, #23
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d013      	beq.n	8008d5a <HAL_GPIO_Init+0x1ca>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a45      	ldr	r2, [pc, #276]	@ (8008e4c <HAL_GPIO_Init+0x2bc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00d      	beq.n	8008d56 <HAL_GPIO_Init+0x1c6>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a44      	ldr	r2, [pc, #272]	@ (8008e50 <HAL_GPIO_Init+0x2c0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d007      	beq.n	8008d52 <HAL_GPIO_Init+0x1c2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a43      	ldr	r2, [pc, #268]	@ (8008e54 <HAL_GPIO_Init+0x2c4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d101      	bne.n	8008d4e <HAL_GPIO_Init+0x1be>
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e006      	b.n	8008d5c <HAL_GPIO_Init+0x1cc>
 8008d4e:	2305      	movs	r3, #5
 8008d50:	e004      	b.n	8008d5c <HAL_GPIO_Init+0x1cc>
 8008d52:	2302      	movs	r3, #2
 8008d54:	e002      	b.n	8008d5c <HAL_GPIO_Init+0x1cc>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <HAL_GPIO_Init+0x1cc>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	2103      	movs	r1, #3
 8008d60:	400a      	ands	r2, r1
 8008d62:	00d2      	lsls	r2, r2, #3
 8008d64:	4093      	lsls	r3, r2
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008d6c:	4936      	ldr	r1, [pc, #216]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	089b      	lsrs	r3, r3, #2
 8008d72:	3318      	adds	r3, #24
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d7a:	4b33      	ldr	r3, [pc, #204]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	43da      	mvns	r2, r3
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4013      	ands	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	2380      	movs	r3, #128	@ 0x80
 8008d90:	035b      	lsls	r3, r3, #13
 8008d92:	4013      	ands	r3, r2
 8008d94:	d003      	beq.n	8008d9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008da4:	4b28      	ldr	r3, [pc, #160]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	43da      	mvns	r2, r3
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	4013      	ands	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	2380      	movs	r3, #128	@ 0x80
 8008dba:	039b      	lsls	r3, r3, #14
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d003      	beq.n	8008dc8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008dce:	4a1e      	ldr	r2, [pc, #120]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008dd0:	2384      	movs	r3, #132	@ 0x84
 8008dd2:	58d3      	ldr	r3, [r2, r3]
 8008dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	43da      	mvns	r2, r3
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	029b      	lsls	r3, r3, #10
 8008de8:	4013      	ands	r3, r2
 8008dea:	d003      	beq.n	8008df4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008df4:	4914      	ldr	r1, [pc, #80]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008df6:	2284      	movs	r2, #132	@ 0x84
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008dfc:	4a12      	ldr	r2, [pc, #72]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008dfe:	2380      	movs	r3, #128	@ 0x80
 8008e00:	58d3      	ldr	r3, [r2, r3]
 8008e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	43da      	mvns	r2, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	025b      	lsls	r3, r3, #9
 8008e16:	4013      	ands	r3, r2
 8008e18:	d003      	beq.n	8008e22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e22:	4909      	ldr	r1, [pc, #36]	@ (8008e48 <HAL_GPIO_Init+0x2b8>)
 8008e24:	2280      	movs	r2, #128	@ 0x80
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	40da      	lsrs	r2, r3
 8008e38:	1e13      	subs	r3, r2, #0
 8008e3a:	d000      	beq.n	8008e3e <HAL_GPIO_Init+0x2ae>
 8008e3c:	e6b0      	b.n	8008ba0 <HAL_GPIO_Init+0x10>
  }
}
 8008e3e:	46c0      	nop			@ (mov r8, r8)
 8008e40:	46c0      	nop			@ (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b006      	add	sp, #24
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40021800 	.word	0x40021800
 8008e4c:	50000400 	.word	0x50000400
 8008e50:	50000800 	.word	0x50000800
 8008e54:	50000c00 	.word	0x50000c00

08008e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	0008      	movs	r0, r1
 8008e62:	0011      	movs	r1, r2
 8008e64:	1cbb      	adds	r3, r7, #2
 8008e66:	1c02      	adds	r2, r0, #0
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	1c7b      	adds	r3, r7, #1
 8008e6c:	1c0a      	adds	r2, r1, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e70:	1c7b      	adds	r3, r7, #1
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e78:	1cbb      	adds	r3, r7, #2
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e80:	e003      	b.n	8008e8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e82:	1cbb      	adds	r3, r7, #2
 8008e84:	881a      	ldrh	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e8a:	46c0      	nop			@ (mov r8, r8)
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b002      	add	sp, #8
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008e9c:	4b19      	ldr	r3, [pc, #100]	@ (8008f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a19      	ldr	r2, [pc, #100]	@ (8008f08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	4b17      	ldr	r3, [pc, #92]	@ (8008f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	2380      	movs	r3, #128	@ 0x80
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d11f      	bne.n	8008ef8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008eb8:	4b14      	ldr	r3, [pc, #80]	@ (8008f0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	0013      	movs	r3, r2
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	189b      	adds	r3, r3, r2
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	4912      	ldr	r1, [pc, #72]	@ (8008f10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f7ff f91a 	bl	8008100 <__udivsi3>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ed2:	e008      	b.n	8008ee6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	e001      	b.n	8008ee6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e009      	b.n	8008efa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ee6:	4b07      	ldr	r3, [pc, #28]	@ (8008f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008ee8:	695a      	ldr	r2, [r3, #20]
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	401a      	ands	r2, r3
 8008ef0:	2380      	movs	r3, #128	@ 0x80
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d0ed      	beq.n	8008ed4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	0018      	movs	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	b004      	add	sp, #16
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	46c0      	nop			@ (mov r8, r8)
 8008f04:	40007000 	.word	0x40007000
 8008f08:	fffff9ff 	.word	0xfffff9ff
 8008f0c:	20000000 	.word	0x20000000
 8008f10:	000f4240 	.word	0x000f4240

08008f14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008f18:	4b03      	ldr	r3, [pc, #12]	@ (8008f28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	23e0      	movs	r3, #224	@ 0xe0
 8008f1e:	01db      	lsls	r3, r3, #7
 8008f20:	4013      	ands	r3, r2
}
 8008f22:	0018      	movs	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	40021000 	.word	0x40021000

08008f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e2f3      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2201      	movs	r2, #1
 8008f44:	4013      	ands	r3, r2
 8008f46:	d100      	bne.n	8008f4a <HAL_RCC_OscConfig+0x1e>
 8008f48:	e07c      	b.n	8009044 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f4a:	4bc3      	ldr	r3, [pc, #780]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2238      	movs	r2, #56	@ 0x38
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f54:	4bc0      	ldr	r3, [pc, #768]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d102      	bne.n	8008f6a <HAL_RCC_OscConfig+0x3e>
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d002      	beq.n	8008f70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	d10b      	bne.n	8008f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f70:	4bb9      	ldr	r3, [pc, #740]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	029b      	lsls	r3, r3, #10
 8008f78:	4013      	ands	r3, r2
 8008f7a:	d062      	beq.n	8009042 <HAL_RCC_OscConfig+0x116>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d15e      	bne.n	8009042 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e2ce      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	2380      	movs	r3, #128	@ 0x80
 8008f8e:	025b      	lsls	r3, r3, #9
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x78>
 8008f94:	4bb0      	ldr	r3, [pc, #704]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4baf      	ldr	r3, [pc, #700]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008f9a:	2180      	movs	r1, #128	@ 0x80
 8008f9c:	0249      	lsls	r1, r1, #9
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	e020      	b.n	8008fe6 <HAL_RCC_OscConfig+0xba>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	23a0      	movs	r3, #160	@ 0xa0
 8008faa:	02db      	lsls	r3, r3, #11
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10e      	bne.n	8008fce <HAL_RCC_OscConfig+0xa2>
 8008fb0:	4ba9      	ldr	r3, [pc, #676]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fb6:	2180      	movs	r1, #128	@ 0x80
 8008fb8:	02c9      	lsls	r1, r1, #11
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	4ba6      	ldr	r3, [pc, #664]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4ba5      	ldr	r3, [pc, #660]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fc4:	2180      	movs	r1, #128	@ 0x80
 8008fc6:	0249      	lsls	r1, r1, #9
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	e00b      	b.n	8008fe6 <HAL_RCC_OscConfig+0xba>
 8008fce:	4ba2      	ldr	r3, [pc, #648]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fd4:	49a1      	ldr	r1, [pc, #644]	@ (800925c <HAL_RCC_OscConfig+0x330>)
 8008fd6:	400a      	ands	r2, r1
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	4b9f      	ldr	r3, [pc, #636]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b9e      	ldr	r3, [pc, #632]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8008fe0:	499f      	ldr	r1, [pc, #636]	@ (8009260 <HAL_RCC_OscConfig+0x334>)
 8008fe2:	400a      	ands	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d014      	beq.n	8009018 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fee:	f7ff fced 	bl	80089cc <HAL_GetTick>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ff8:	f7ff fce8 	bl	80089cc <HAL_GetTick>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	@ 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e28d      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800900a:	4b93      	ldr	r3, [pc, #588]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	2380      	movs	r3, #128	@ 0x80
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	4013      	ands	r3, r2
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xcc>
 8009016:	e015      	b.n	8009044 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009018:	f7ff fcd8 	bl	80089cc <HAL_GetTick>
 800901c:	0003      	movs	r3, r0
 800901e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009020:	e008      	b.n	8009034 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009022:	f7ff fcd3 	bl	80089cc <HAL_GetTick>
 8009026:	0002      	movs	r2, r0
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b64      	cmp	r3, #100	@ 0x64
 800902e:	d901      	bls.n	8009034 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e278      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009034:	4b88      	ldr	r3, [pc, #544]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	2380      	movs	r3, #128	@ 0x80
 800903a:	029b      	lsls	r3, r3, #10
 800903c:	4013      	ands	r3, r2
 800903e:	d1f0      	bne.n	8009022 <HAL_RCC_OscConfig+0xf6>
 8009040:	e000      	b.n	8009044 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009042:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2202      	movs	r2, #2
 800904a:	4013      	ands	r3, r2
 800904c:	d100      	bne.n	8009050 <HAL_RCC_OscConfig+0x124>
 800904e:	e099      	b.n	8009184 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009050:	4b81      	ldr	r3, [pc, #516]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2238      	movs	r2, #56	@ 0x38
 8009056:	4013      	ands	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800905a:	4b7f      	ldr	r3, [pc, #508]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	2203      	movs	r2, #3
 8009060:	4013      	ands	r3, r2
 8009062:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	2b10      	cmp	r3, #16
 8009068:	d102      	bne.n	8009070 <HAL_RCC_OscConfig+0x144>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d002      	beq.n	8009076 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d135      	bne.n	80090e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009076:	4b78      	ldr	r3, [pc, #480]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	2380      	movs	r3, #128	@ 0x80
 800907c:	00db      	lsls	r3, r3, #3
 800907e:	4013      	ands	r3, r2
 8009080:	d005      	beq.n	800908e <HAL_RCC_OscConfig+0x162>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e24b      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800908e:	4b72      	ldr	r3, [pc, #456]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4a74      	ldr	r2, [pc, #464]	@ (8009264 <HAL_RCC_OscConfig+0x338>)
 8009094:	4013      	ands	r3, r2
 8009096:	0019      	movs	r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	021a      	lsls	r2, r3, #8
 800909e:	4b6e      	ldr	r3, [pc, #440]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090a0:	430a      	orrs	r2, r1
 80090a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d112      	bne.n	80090d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80090aa:	4b6b      	ldr	r3, [pc, #428]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a6e      	ldr	r2, [pc, #440]	@ (8009268 <HAL_RCC_OscConfig+0x33c>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	0019      	movs	r1, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691a      	ldr	r2, [r3, #16]
 80090b8:	4b67      	ldr	r3, [pc, #412]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090ba:	430a      	orrs	r2, r1
 80090bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80090be:	4b66      	ldr	r3, [pc, #408]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	0adb      	lsrs	r3, r3, #11
 80090c4:	2207      	movs	r2, #7
 80090c6:	4013      	ands	r3, r2
 80090c8:	4a68      	ldr	r2, [pc, #416]	@ (800926c <HAL_RCC_OscConfig+0x340>)
 80090ca:	40da      	lsrs	r2, r3
 80090cc:	4b68      	ldr	r3, [pc, #416]	@ (8009270 <HAL_RCC_OscConfig+0x344>)
 80090ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80090d0:	4b68      	ldr	r3, [pc, #416]	@ (8009274 <HAL_RCC_OscConfig+0x348>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7ff fc1d 	bl	8008914 <HAL_InitTick>
 80090da:	1e03      	subs	r3, r0, #0
 80090dc:	d051      	beq.n	8009182 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e221      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d030      	beq.n	800914c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80090ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a5e      	ldr	r2, [pc, #376]	@ (8009268 <HAL_RCC_OscConfig+0x33c>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	0019      	movs	r1, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	4b57      	ldr	r3, [pc, #348]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80090fa:	430a      	orrs	r2, r1
 80090fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80090fe:	4b56      	ldr	r3, [pc, #344]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b55      	ldr	r3, [pc, #340]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009104:	2180      	movs	r1, #128	@ 0x80
 8009106:	0049      	lsls	r1, r1, #1
 8009108:	430a      	orrs	r2, r1
 800910a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7ff fc5e 	bl	80089cc <HAL_GetTick>
 8009110:	0003      	movs	r3, r0
 8009112:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009114:	e008      	b.n	8009128 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009116:	f7ff fc59 	bl	80089cc <HAL_GetTick>
 800911a:	0002      	movs	r2, r0
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e1fe      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009128:	4b4b      	ldr	r3, [pc, #300]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	2380      	movs	r3, #128	@ 0x80
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4013      	ands	r3, r2
 8009132:	d0f0      	beq.n	8009116 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009134:	4b48      	ldr	r3, [pc, #288]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4a4a      	ldr	r2, [pc, #296]	@ (8009264 <HAL_RCC_OscConfig+0x338>)
 800913a:	4013      	ands	r3, r2
 800913c:	0019      	movs	r1, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	021a      	lsls	r2, r3, #8
 8009144:	4b44      	ldr	r3, [pc, #272]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009146:	430a      	orrs	r2, r1
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	e01b      	b.n	8009184 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800914c:	4b42      	ldr	r3, [pc, #264]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	4b41      	ldr	r3, [pc, #260]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009152:	4949      	ldr	r1, [pc, #292]	@ (8009278 <HAL_RCC_OscConfig+0x34c>)
 8009154:	400a      	ands	r2, r1
 8009156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009158:	f7ff fc38 	bl	80089cc <HAL_GetTick>
 800915c:	0003      	movs	r3, r0
 800915e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009160:	e008      	b.n	8009174 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009162:	f7ff fc33 	bl	80089cc <HAL_GetTick>
 8009166:	0002      	movs	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e1d8      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009174:	4b38      	ldr	r3, [pc, #224]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	2380      	movs	r3, #128	@ 0x80
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	4013      	ands	r3, r2
 800917e:	d1f0      	bne.n	8009162 <HAL_RCC_OscConfig+0x236>
 8009180:	e000      	b.n	8009184 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009182:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2208      	movs	r2, #8
 800918a:	4013      	ands	r3, r2
 800918c:	d047      	beq.n	800921e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800918e:	4b32      	ldr	r3, [pc, #200]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2238      	movs	r2, #56	@ 0x38
 8009194:	4013      	ands	r3, r2
 8009196:	2b18      	cmp	r3, #24
 8009198:	d10a      	bne.n	80091b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800919a:	4b2f      	ldr	r3, [pc, #188]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 800919c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800919e:	2202      	movs	r2, #2
 80091a0:	4013      	ands	r3, r2
 80091a2:	d03c      	beq.n	800921e <HAL_RCC_OscConfig+0x2f2>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d138      	bne.n	800921e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e1ba      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d019      	beq.n	80091ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80091b8:	4b27      	ldr	r3, [pc, #156]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80091ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80091bc:	4b26      	ldr	r3, [pc, #152]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80091be:	2101      	movs	r1, #1
 80091c0:	430a      	orrs	r2, r1
 80091c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7ff fc02 	bl	80089cc <HAL_GetTick>
 80091c8:	0003      	movs	r3, r0
 80091ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091cc:	e008      	b.n	80091e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091ce:	f7ff fbfd 	bl	80089cc <HAL_GetTick>
 80091d2:	0002      	movs	r2, r0
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e1a2      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80091e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e4:	2202      	movs	r2, #2
 80091e6:	4013      	ands	r3, r2
 80091e8:	d0f1      	beq.n	80091ce <HAL_RCC_OscConfig+0x2a2>
 80091ea:	e018      	b.n	800921e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80091ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80091ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80091f0:	4b19      	ldr	r3, [pc, #100]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 80091f2:	2101      	movs	r1, #1
 80091f4:	438a      	bics	r2, r1
 80091f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f8:	f7ff fbe8 	bl	80089cc <HAL_GetTick>
 80091fc:	0003      	movs	r3, r0
 80091fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009202:	f7ff fbe3 	bl	80089cc <HAL_GetTick>
 8009206:	0002      	movs	r2, r0
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e188      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009214:	4b10      	ldr	r3, [pc, #64]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009218:	2202      	movs	r2, #2
 800921a:	4013      	ands	r3, r2
 800921c:	d1f1      	bne.n	8009202 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2204      	movs	r2, #4
 8009224:	4013      	ands	r3, r2
 8009226:	d100      	bne.n	800922a <HAL_RCC_OscConfig+0x2fe>
 8009228:	e0c6      	b.n	80093b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922a:	231f      	movs	r3, #31
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009232:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	2238      	movs	r2, #56	@ 0x38
 8009238:	4013      	ands	r3, r2
 800923a:	2b20      	cmp	r3, #32
 800923c:	d11e      	bne.n	800927c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800923e:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <HAL_RCC_OscConfig+0x32c>)
 8009240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009242:	2202      	movs	r2, #2
 8009244:	4013      	ands	r3, r2
 8009246:	d100      	bne.n	800924a <HAL_RCC_OscConfig+0x31e>
 8009248:	e0b6      	b.n	80093b8 <HAL_RCC_OscConfig+0x48c>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d000      	beq.n	8009254 <HAL_RCC_OscConfig+0x328>
 8009252:	e0b1      	b.n	80093b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e166      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
 8009258:	40021000 	.word	0x40021000
 800925c:	fffeffff 	.word	0xfffeffff
 8009260:	fffbffff 	.word	0xfffbffff
 8009264:	ffff80ff 	.word	0xffff80ff
 8009268:	ffffc7ff 	.word	0xffffc7ff
 800926c:	00f42400 	.word	0x00f42400
 8009270:	20000000 	.word	0x20000000
 8009274:	20000004 	.word	0x20000004
 8009278:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800927c:	4bac      	ldr	r3, [pc, #688]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800927e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009280:	2380      	movs	r3, #128	@ 0x80
 8009282:	055b      	lsls	r3, r3, #21
 8009284:	4013      	ands	r3, r2
 8009286:	d101      	bne.n	800928c <HAL_RCC_OscConfig+0x360>
 8009288:	2301      	movs	r3, #1
 800928a:	e000      	b.n	800928e <HAL_RCC_OscConfig+0x362>
 800928c:	2300      	movs	r3, #0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d011      	beq.n	80092b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009292:	4ba7      	ldr	r3, [pc, #668]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009296:	4ba6      	ldr	r3, [pc, #664]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009298:	2180      	movs	r1, #128	@ 0x80
 800929a:	0549      	lsls	r1, r1, #21
 800929c:	430a      	orrs	r2, r1
 800929e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80092a0:	4ba3      	ldr	r3, [pc, #652]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80092a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092a4:	2380      	movs	r3, #128	@ 0x80
 80092a6:	055b      	lsls	r3, r3, #21
 80092a8:	4013      	ands	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80092ae:	231f      	movs	r3, #31
 80092b0:	18fb      	adds	r3, r7, r3
 80092b2:	2201      	movs	r2, #1
 80092b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092b6:	4b9f      	ldr	r3, [pc, #636]	@ (8009534 <HAL_RCC_OscConfig+0x608>)
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	2380      	movs	r3, #128	@ 0x80
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4013      	ands	r3, r2
 80092c0:	d11a      	bne.n	80092f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092c2:	4b9c      	ldr	r3, [pc, #624]	@ (8009534 <HAL_RCC_OscConfig+0x608>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	4b9b      	ldr	r3, [pc, #620]	@ (8009534 <HAL_RCC_OscConfig+0x608>)
 80092c8:	2180      	movs	r1, #128	@ 0x80
 80092ca:	0049      	lsls	r1, r1, #1
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80092d0:	f7ff fb7c 	bl	80089cc <HAL_GetTick>
 80092d4:	0003      	movs	r3, r0
 80092d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092da:	f7ff fb77 	bl	80089cc <HAL_GetTick>
 80092de:	0002      	movs	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e11c      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ec:	4b91      	ldr	r3, [pc, #580]	@ (8009534 <HAL_RCC_OscConfig+0x608>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	2380      	movs	r3, #128	@ 0x80
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	4013      	ands	r3, r2
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d106      	bne.n	800930e <HAL_RCC_OscConfig+0x3e2>
 8009300:	4b8b      	ldr	r3, [pc, #556]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009304:	4b8a      	ldr	r3, [pc, #552]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009306:	2101      	movs	r1, #1
 8009308:	430a      	orrs	r2, r1
 800930a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800930c:	e01c      	b.n	8009348 <HAL_RCC_OscConfig+0x41c>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b05      	cmp	r3, #5
 8009314:	d10c      	bne.n	8009330 <HAL_RCC_OscConfig+0x404>
 8009316:	4b86      	ldr	r3, [pc, #536]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800931a:	4b85      	ldr	r3, [pc, #532]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800931c:	2104      	movs	r1, #4
 800931e:	430a      	orrs	r2, r1
 8009320:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009322:	4b83      	ldr	r3, [pc, #524]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009324:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009326:	4b82      	ldr	r3, [pc, #520]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009328:	2101      	movs	r1, #1
 800932a:	430a      	orrs	r2, r1
 800932c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800932e:	e00b      	b.n	8009348 <HAL_RCC_OscConfig+0x41c>
 8009330:	4b7f      	ldr	r3, [pc, #508]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009334:	4b7e      	ldr	r3, [pc, #504]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009336:	2101      	movs	r1, #1
 8009338:	438a      	bics	r2, r1
 800933a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800933c:	4b7c      	ldr	r3, [pc, #496]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800933e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009340:	4b7b      	ldr	r3, [pc, #492]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009342:	2104      	movs	r1, #4
 8009344:	438a      	bics	r2, r1
 8009346:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d014      	beq.n	800937a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7ff fb3c 	bl	80089cc <HAL_GetTick>
 8009354:	0003      	movs	r3, r0
 8009356:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009358:	e009      	b.n	800936e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935a:	f7ff fb37 	bl	80089cc <HAL_GetTick>
 800935e:	0002      	movs	r2, r0
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	4a74      	ldr	r2, [pc, #464]	@ (8009538 <HAL_RCC_OscConfig+0x60c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e0db      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800936e:	4b70      	ldr	r3, [pc, #448]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009372:	2202      	movs	r2, #2
 8009374:	4013      	ands	r3, r2
 8009376:	d0f0      	beq.n	800935a <HAL_RCC_OscConfig+0x42e>
 8009378:	e013      	b.n	80093a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800937a:	f7ff fb27 	bl	80089cc <HAL_GetTick>
 800937e:	0003      	movs	r3, r0
 8009380:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009382:	e009      	b.n	8009398 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009384:	f7ff fb22 	bl	80089cc <HAL_GetTick>
 8009388:	0002      	movs	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	4a6a      	ldr	r2, [pc, #424]	@ (8009538 <HAL_RCC_OscConfig+0x60c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d901      	bls.n	8009398 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e0c6      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009398:	4b65      	ldr	r3, [pc, #404]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800939a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800939c:	2202      	movs	r2, #2
 800939e:	4013      	ands	r3, r2
 80093a0:	d1f0      	bne.n	8009384 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80093a2:	231f      	movs	r3, #31
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d105      	bne.n	80093b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80093ac:	4b60      	ldr	r3, [pc, #384]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80093ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093b0:	4b5f      	ldr	r3, [pc, #380]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80093b2:	4962      	ldr	r1, [pc, #392]	@ (800953c <HAL_RCC_OscConfig+0x610>)
 80093b4:	400a      	ands	r2, r1
 80093b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d100      	bne.n	80093c2 <HAL_RCC_OscConfig+0x496>
 80093c0:	e0b0      	b.n	8009524 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093c2:	4b5b      	ldr	r3, [pc, #364]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	2238      	movs	r2, #56	@ 0x38
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b10      	cmp	r3, #16
 80093cc:	d100      	bne.n	80093d0 <HAL_RCC_OscConfig+0x4a4>
 80093ce:	e078      	b.n	80094c2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d153      	bne.n	8009480 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d8:	4b55      	ldr	r3, [pc, #340]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	4b54      	ldr	r3, [pc, #336]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80093de:	4958      	ldr	r1, [pc, #352]	@ (8009540 <HAL_RCC_OscConfig+0x614>)
 80093e0:	400a      	ands	r2, r1
 80093e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e4:	f7ff faf2 	bl	80089cc <HAL_GetTick>
 80093e8:	0003      	movs	r3, r0
 80093ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093ec:	e008      	b.n	8009400 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093ee:	f7ff faed 	bl	80089cc <HAL_GetTick>
 80093f2:	0002      	movs	r2, r0
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e092      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009400:	4b4b      	ldr	r3, [pc, #300]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	2380      	movs	r3, #128	@ 0x80
 8009406:	049b      	lsls	r3, r3, #18
 8009408:	4013      	ands	r3, r2
 800940a:	d1f0      	bne.n	80093ee <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800940c:	4b48      	ldr	r3, [pc, #288]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a4c      	ldr	r2, [pc, #304]	@ (8009544 <HAL_RCC_OscConfig+0x618>)
 8009412:	4013      	ands	r3, r2
 8009414:	0019      	movs	r1, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1a      	ldr	r2, [r3, #32]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009432:	431a      	orrs	r2, r3
 8009434:	4b3e      	ldr	r3, [pc, #248]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009436:	430a      	orrs	r2, r1
 8009438:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800943a:	4b3d      	ldr	r3, [pc, #244]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4b3c      	ldr	r3, [pc, #240]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009440:	2180      	movs	r1, #128	@ 0x80
 8009442:	0449      	lsls	r1, r1, #17
 8009444:	430a      	orrs	r2, r1
 8009446:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009448:	4b39      	ldr	r3, [pc, #228]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	4b38      	ldr	r3, [pc, #224]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 800944e:	2180      	movs	r1, #128	@ 0x80
 8009450:	0549      	lsls	r1, r1, #21
 8009452:	430a      	orrs	r2, r1
 8009454:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009456:	f7ff fab9 	bl	80089cc <HAL_GetTick>
 800945a:	0003      	movs	r3, r0
 800945c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800945e:	e008      	b.n	8009472 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009460:	f7ff fab4 	bl	80089cc <HAL_GetTick>
 8009464:	0002      	movs	r2, r0
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	2b02      	cmp	r3, #2
 800946c:	d901      	bls.n	8009472 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e059      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009472:	4b2f      	ldr	r3, [pc, #188]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	2380      	movs	r3, #128	@ 0x80
 8009478:	049b      	lsls	r3, r3, #18
 800947a:	4013      	ands	r3, r2
 800947c:	d0f0      	beq.n	8009460 <HAL_RCC_OscConfig+0x534>
 800947e:	e051      	b.n	8009524 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009480:	4b2b      	ldr	r3, [pc, #172]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b2a      	ldr	r3, [pc, #168]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 8009486:	492e      	ldr	r1, [pc, #184]	@ (8009540 <HAL_RCC_OscConfig+0x614>)
 8009488:	400a      	ands	r2, r1
 800948a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7ff fa9e 	bl	80089cc <HAL_GetTick>
 8009490:	0003      	movs	r3, r0
 8009492:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009494:	e008      	b.n	80094a8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009496:	f7ff fa99 	bl	80089cc <HAL_GetTick>
 800949a:	0002      	movs	r2, r0
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d901      	bls.n	80094a8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e03e      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094a8:	4b21      	ldr	r3, [pc, #132]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	2380      	movs	r3, #128	@ 0x80
 80094ae:	049b      	lsls	r3, r3, #18
 80094b0:	4013      	ands	r3, r2
 80094b2:	d1f0      	bne.n	8009496 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80094b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80094ba:	4923      	ldr	r1, [pc, #140]	@ (8009548 <HAL_RCC_OscConfig+0x61c>)
 80094bc:	400a      	ands	r2, r1
 80094be:	60da      	str	r2, [r3, #12]
 80094c0:	e030      	b.n	8009524 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e02b      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80094ce:	4b18      	ldr	r3, [pc, #96]	@ (8009530 <HAL_RCC_OscConfig+0x604>)
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2203      	movs	r2, #3
 80094d8:	401a      	ands	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d11e      	bne.n	8009520 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2270      	movs	r2, #112	@ 0x70
 80094e6:	401a      	ands	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d117      	bne.n	8009520 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	23fe      	movs	r3, #254	@ 0xfe
 80094f4:	01db      	lsls	r3, r3, #7
 80094f6:	401a      	ands	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80094fe:	429a      	cmp	r2, r3
 8009500:	d10e      	bne.n	8009520 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	23f8      	movs	r3, #248	@ 0xf8
 8009506:	039b      	lsls	r3, r3, #14
 8009508:	401a      	ands	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800950e:	429a      	cmp	r2, r3
 8009510:	d106      	bne.n	8009520 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	0f5b      	lsrs	r3, r3, #29
 8009516:	075a      	lsls	r2, r3, #29
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800951c:	429a      	cmp	r2, r3
 800951e:	d001      	beq.n	8009524 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	0018      	movs	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	b008      	add	sp, #32
 800952c:	bd80      	pop	{r7, pc}
 800952e:	46c0      	nop			@ (mov r8, r8)
 8009530:	40021000 	.word	0x40021000
 8009534:	40007000 	.word	0x40007000
 8009538:	00001388 	.word	0x00001388
 800953c:	efffffff 	.word	0xefffffff
 8009540:	feffffff 	.word	0xfeffffff
 8009544:	1fc1808c 	.word	0x1fc1808c
 8009548:	effefffc 	.word	0xeffefffc

0800954c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0e9      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009560:	4b76      	ldr	r3, [pc, #472]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2207      	movs	r2, #7
 8009566:	4013      	ands	r3, r2
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d91e      	bls.n	80095ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956e:	4b73      	ldr	r3, [pc, #460]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2207      	movs	r2, #7
 8009574:	4393      	bics	r3, r2
 8009576:	0019      	movs	r1, r3
 8009578:	4b70      	ldr	r3, [pc, #448]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009580:	f7ff fa24 	bl	80089cc <HAL_GetTick>
 8009584:	0003      	movs	r3, r0
 8009586:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009588:	e009      	b.n	800959e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800958a:	f7ff fa1f 	bl	80089cc <HAL_GetTick>
 800958e:	0002      	movs	r2, r0
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	4a6a      	ldr	r2, [pc, #424]	@ (8009740 <HAL_RCC_ClockConfig+0x1f4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d901      	bls.n	800959e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e0ca      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800959e:	4b67      	ldr	r3, [pc, #412]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2207      	movs	r2, #7
 80095a4:	4013      	ands	r3, r2
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d1ee      	bne.n	800958a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2202      	movs	r2, #2
 80095b2:	4013      	ands	r3, r2
 80095b4:	d015      	beq.n	80095e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2204      	movs	r2, #4
 80095bc:	4013      	ands	r3, r2
 80095be:	d006      	beq.n	80095ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80095c0:	4b60      	ldr	r3, [pc, #384]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80095c6:	21e0      	movs	r1, #224	@ 0xe0
 80095c8:	01c9      	lsls	r1, r1, #7
 80095ca:	430a      	orrs	r2, r1
 80095cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ce:	4b5d      	ldr	r3, [pc, #372]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	4a5d      	ldr	r2, [pc, #372]	@ (8009748 <HAL_RCC_ClockConfig+0x1fc>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	0019      	movs	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	4b59      	ldr	r3, [pc, #356]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80095de:	430a      	orrs	r2, r1
 80095e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2201      	movs	r2, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	d057      	beq.n	800969c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d107      	bne.n	8009604 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095f4:	4b53      	ldr	r3, [pc, #332]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	2380      	movs	r3, #128	@ 0x80
 80095fa:	029b      	lsls	r3, r3, #10
 80095fc:	4013      	ands	r3, r2
 80095fe:	d12b      	bne.n	8009658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e097      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d107      	bne.n	800961c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800960c:	4b4d      	ldr	r3, [pc, #308]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	2380      	movs	r3, #128	@ 0x80
 8009612:	049b      	lsls	r3, r3, #18
 8009614:	4013      	ands	r3, r2
 8009616:	d11f      	bne.n	8009658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e08b      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d107      	bne.n	8009634 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009624:	4b47      	ldr	r3, [pc, #284]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	2380      	movs	r3, #128	@ 0x80
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4013      	ands	r3, r2
 800962e:	d113      	bne.n	8009658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e07f      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d106      	bne.n	800964a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800963c:	4b41      	ldr	r3, [pc, #260]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800963e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009640:	2202      	movs	r2, #2
 8009642:	4013      	ands	r3, r2
 8009644:	d108      	bne.n	8009658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e074      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800964a:	4b3e      	ldr	r3, [pc, #248]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800964c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800964e:	2202      	movs	r2, #2
 8009650:	4013      	ands	r3, r2
 8009652:	d101      	bne.n	8009658 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e06d      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009658:	4b3a      	ldr	r3, [pc, #232]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2207      	movs	r2, #7
 800965e:	4393      	bics	r3, r2
 8009660:	0019      	movs	r1, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b37      	ldr	r3, [pc, #220]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 8009668:	430a      	orrs	r2, r1
 800966a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800966c:	f7ff f9ae 	bl	80089cc <HAL_GetTick>
 8009670:	0003      	movs	r3, r0
 8009672:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009674:	e009      	b.n	800968a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009676:	f7ff f9a9 	bl	80089cc <HAL_GetTick>
 800967a:	0002      	movs	r2, r0
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	4a2f      	ldr	r2, [pc, #188]	@ (8009740 <HAL_RCC_ClockConfig+0x1f4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d901      	bls.n	800968a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e054      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800968a:	4b2e      	ldr	r3, [pc, #184]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2238      	movs	r2, #56	@ 0x38
 8009690:	401a      	ands	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	429a      	cmp	r2, r3
 800969a:	d1ec      	bne.n	8009676 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800969c:	4b27      	ldr	r3, [pc, #156]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2207      	movs	r2, #7
 80096a2:	4013      	ands	r3, r2
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d21e      	bcs.n	80096e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096aa:	4b24      	ldr	r3, [pc, #144]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2207      	movs	r2, #7
 80096b0:	4393      	bics	r3, r2
 80096b2:	0019      	movs	r1, r3
 80096b4:	4b21      	ldr	r3, [pc, #132]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80096bc:	f7ff f986 	bl	80089cc <HAL_GetTick>
 80096c0:	0003      	movs	r3, r0
 80096c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096c4:	e009      	b.n	80096da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c6:	f7ff f981 	bl	80089cc <HAL_GetTick>
 80096ca:	0002      	movs	r2, r0
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009740 <HAL_RCC_ClockConfig+0x1f4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d901      	bls.n	80096da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e02c      	b.n	8009734 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096da:	4b18      	ldr	r3, [pc, #96]	@ (800973c <HAL_RCC_ClockConfig+0x1f0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2207      	movs	r2, #7
 80096e0:	4013      	ands	r3, r2
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d1ee      	bne.n	80096c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2204      	movs	r2, #4
 80096ee:	4013      	ands	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80096f2:	4b14      	ldr	r3, [pc, #80]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	4a15      	ldr	r2, [pc, #84]	@ (800974c <HAL_RCC_ClockConfig+0x200>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	0019      	movs	r1, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 8009702:	430a      	orrs	r2, r1
 8009704:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009706:	f000 f829 	bl	800975c <HAL_RCC_GetSysClockFreq>
 800970a:	0001      	movs	r1, r0
 800970c:	4b0d      	ldr	r3, [pc, #52]	@ (8009744 <HAL_RCC_ClockConfig+0x1f8>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	220f      	movs	r2, #15
 8009714:	401a      	ands	r2, r3
 8009716:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_RCC_ClockConfig+0x204>)
 8009718:	0092      	lsls	r2, r2, #2
 800971a:	58d3      	ldr	r3, [r2, r3]
 800971c:	221f      	movs	r2, #31
 800971e:	4013      	ands	r3, r2
 8009720:	000a      	movs	r2, r1
 8009722:	40da      	lsrs	r2, r3
 8009724:	4b0b      	ldr	r3, [pc, #44]	@ (8009754 <HAL_RCC_ClockConfig+0x208>)
 8009726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009728:	4b0b      	ldr	r3, [pc, #44]	@ (8009758 <HAL_RCC_ClockConfig+0x20c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	0018      	movs	r0, r3
 800972e:	f7ff f8f1 	bl	8008914 <HAL_InitTick>
 8009732:	0003      	movs	r3, r0
}
 8009734:	0018      	movs	r0, r3
 8009736:	46bd      	mov	sp, r7
 8009738:	b004      	add	sp, #16
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40022000 	.word	0x40022000
 8009740:	00001388 	.word	0x00001388
 8009744:	40021000 	.word	0x40021000
 8009748:	fffff0ff 	.word	0xfffff0ff
 800974c:	ffff8fff 	.word	0xffff8fff
 8009750:	0800b0d0 	.word	0x0800b0d0
 8009754:	20000000 	.word	0x20000000
 8009758:	20000004 	.word	0x20000004

0800975c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009762:	4b3c      	ldr	r3, [pc, #240]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2238      	movs	r2, #56	@ 0x38
 8009768:	4013      	ands	r3, r2
 800976a:	d10f      	bne.n	800978c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800976c:	4b39      	ldr	r3, [pc, #228]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	0adb      	lsrs	r3, r3, #11
 8009772:	2207      	movs	r2, #7
 8009774:	4013      	ands	r3, r2
 8009776:	2201      	movs	r2, #1
 8009778:	409a      	lsls	r2, r3
 800977a:	0013      	movs	r3, r2
 800977c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	4835      	ldr	r0, [pc, #212]	@ (8009858 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009782:	f7fe fcbd 	bl	8008100 <__udivsi3>
 8009786:	0003      	movs	r3, r0
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	e05d      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800978c:	4b31      	ldr	r3, [pc, #196]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2238      	movs	r2, #56	@ 0x38
 8009792:	4013      	ands	r3, r2
 8009794:	2b08      	cmp	r3, #8
 8009796:	d102      	bne.n	800979e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009798:	4b30      	ldr	r3, [pc, #192]	@ (800985c <HAL_RCC_GetSysClockFreq+0x100>)
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	e054      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800979e:	4b2d      	ldr	r3, [pc, #180]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2238      	movs	r2, #56	@ 0x38
 80097a4:	4013      	ands	r3, r2
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d138      	bne.n	800981c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80097aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	2203      	movs	r2, #3
 80097b0:	4013      	ands	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80097b4:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	091b      	lsrs	r3, r3, #4
 80097ba:	2207      	movs	r2, #7
 80097bc:	4013      	ands	r3, r2
 80097be:	3301      	adds	r3, #1
 80097c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d10d      	bne.n	80097e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	4824      	ldr	r0, [pc, #144]	@ (800985c <HAL_RCC_GetSysClockFreq+0x100>)
 80097cc:	f7fe fc98 	bl	8008100 <__udivsi3>
 80097d0:	0003      	movs	r3, r0
 80097d2:	0019      	movs	r1, r3
 80097d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	227f      	movs	r2, #127	@ 0x7f
 80097dc:	4013      	ands	r3, r2
 80097de:	434b      	muls	r3, r1
 80097e0:	617b      	str	r3, [r7, #20]
        break;
 80097e2:	e00d      	b.n	8009800 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	481c      	ldr	r0, [pc, #112]	@ (8009858 <HAL_RCC_GetSysClockFreq+0xfc>)
 80097e8:	f7fe fc8a 	bl	8008100 <__udivsi3>
 80097ec:	0003      	movs	r3, r0
 80097ee:	0019      	movs	r1, r3
 80097f0:	4b18      	ldr	r3, [pc, #96]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	227f      	movs	r2, #127	@ 0x7f
 80097f8:	4013      	ands	r3, r2
 80097fa:	434b      	muls	r3, r1
 80097fc:	617b      	str	r3, [r7, #20]
        break;
 80097fe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009800:	4b14      	ldr	r3, [pc, #80]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	0f5b      	lsrs	r3, r3, #29
 8009806:	2207      	movs	r2, #7
 8009808:	4013      	ands	r3, r2
 800980a:	3301      	adds	r3, #1
 800980c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	6978      	ldr	r0, [r7, #20]
 8009812:	f7fe fc75 	bl	8008100 <__udivsi3>
 8009816:	0003      	movs	r3, r0
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	e015      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800981c:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2238      	movs	r2, #56	@ 0x38
 8009822:	4013      	ands	r3, r2
 8009824:	2b20      	cmp	r3, #32
 8009826:	d103      	bne.n	8009830 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	e00b      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009830:	4b08      	ldr	r3, [pc, #32]	@ (8009854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	2238      	movs	r2, #56	@ 0x38
 8009836:	4013      	ands	r3, r2
 8009838:	2b18      	cmp	r3, #24
 800983a:	d103      	bne.n	8009844 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800983c:	23fa      	movs	r3, #250	@ 0xfa
 800983e:	01db      	lsls	r3, r3, #7
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	e001      	b.n	8009848 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009848:	693b      	ldr	r3, [r7, #16]
}
 800984a:	0018      	movs	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	b006      	add	sp, #24
 8009850:	bd80      	pop	{r7, pc}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	40021000 	.word	0x40021000
 8009858:	00f42400 	.word	0x00f42400
 800985c:	007a1200 	.word	0x007a1200

08009860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009864:	4b02      	ldr	r3, [pc, #8]	@ (8009870 <HAL_RCC_GetHCLKFreq+0x10>)
 8009866:	681b      	ldr	r3, [r3, #0]
}
 8009868:	0018      	movs	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	46c0      	nop			@ (mov r8, r8)
 8009870:	20000000 	.word	0x20000000

08009874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009874:	b5b0      	push	{r4, r5, r7, lr}
 8009876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009878:	f7ff fff2 	bl	8009860 <HAL_RCC_GetHCLKFreq>
 800987c:	0004      	movs	r4, r0
 800987e:	f7ff fb49 	bl	8008f14 <LL_RCC_GetAPB1Prescaler>
 8009882:	0003      	movs	r3, r0
 8009884:	0b1a      	lsrs	r2, r3, #12
 8009886:	4b05      	ldr	r3, [pc, #20]	@ (800989c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009888:	0092      	lsls	r2, r2, #2
 800988a:	58d3      	ldr	r3, [r2, r3]
 800988c:	221f      	movs	r2, #31
 800988e:	4013      	ands	r3, r2
 8009890:	40dc      	lsrs	r4, r3
 8009892:	0023      	movs	r3, r4
}
 8009894:	0018      	movs	r0, r3
 8009896:	46bd      	mov	sp, r7
 8009898:	bdb0      	pop	{r4, r5, r7, pc}
 800989a:	46c0      	nop			@ (mov r8, r8)
 800989c:	0800b110 	.word	0x0800b110

080098a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80098a8:	2313      	movs	r3, #19
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098b0:	2312      	movs	r3, #18
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	2380      	movs	r3, #128	@ 0x80
 80098be:	029b      	lsls	r3, r3, #10
 80098c0:	4013      	ands	r3, r2
 80098c2:	d100      	bne.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80098c4:	e0a3      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098c6:	2011      	movs	r0, #17
 80098c8:	183b      	adds	r3, r7, r0
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098ce:	4b86      	ldr	r3, [pc, #536]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80098d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098d2:	2380      	movs	r3, #128	@ 0x80
 80098d4:	055b      	lsls	r3, r3, #21
 80098d6:	4013      	ands	r3, r2
 80098d8:	d110      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098da:	4b83      	ldr	r3, [pc, #524]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80098dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098de:	4b82      	ldr	r3, [pc, #520]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80098e0:	2180      	movs	r1, #128	@ 0x80
 80098e2:	0549      	lsls	r1, r1, #21
 80098e4:	430a      	orrs	r2, r1
 80098e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80098e8:	4b7f      	ldr	r3, [pc, #508]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80098ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098ec:	2380      	movs	r3, #128	@ 0x80
 80098ee:	055b      	lsls	r3, r3, #21
 80098f0:	4013      	ands	r3, r2
 80098f2:	60bb      	str	r3, [r7, #8]
 80098f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098f6:	183b      	adds	r3, r7, r0
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098fc:	4b7b      	ldr	r3, [pc, #492]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b7a      	ldr	r3, [pc, #488]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009902:	2180      	movs	r1, #128	@ 0x80
 8009904:	0049      	lsls	r1, r1, #1
 8009906:	430a      	orrs	r2, r1
 8009908:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800990a:	f7ff f85f 	bl	80089cc <HAL_GetTick>
 800990e:	0003      	movs	r3, r0
 8009910:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009912:	e00b      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009914:	f7ff f85a 	bl	80089cc <HAL_GetTick>
 8009918:	0002      	movs	r2, r0
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d904      	bls.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009922:	2313      	movs	r3, #19
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	2203      	movs	r2, #3
 8009928:	701a      	strb	r2, [r3, #0]
        break;
 800992a:	e005      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800992c:	4b6f      	ldr	r3, [pc, #444]	@ (8009aec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	2380      	movs	r3, #128	@ 0x80
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	4013      	ands	r3, r2
 8009936:	d0ed      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009938:	2313      	movs	r3, #19
 800993a:	18fb      	adds	r3, r7, r3
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d154      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009942:	4b69      	ldr	r3, [pc, #420]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009944:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009946:	23c0      	movs	r3, #192	@ 0xc0
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4013      	ands	r3, r2
 800994c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d019      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d014      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800995e:	4b62      	ldr	r3, [pc, #392]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009962:	4a63      	ldr	r2, [pc, #396]	@ (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009964:	4013      	ands	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009968:	4b5f      	ldr	r3, [pc, #380]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800996a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800996c:	4b5e      	ldr	r3, [pc, #376]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800996e:	2180      	movs	r1, #128	@ 0x80
 8009970:	0249      	lsls	r1, r1, #9
 8009972:	430a      	orrs	r2, r1
 8009974:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009976:	4b5c      	ldr	r3, [pc, #368]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009978:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800997a:	4b5b      	ldr	r3, [pc, #364]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800997c:	495d      	ldr	r1, [pc, #372]	@ (8009af4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800997e:	400a      	ands	r2, r1
 8009980:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009982:	4b59      	ldr	r3, [pc, #356]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2201      	movs	r2, #1
 800998c:	4013      	ands	r3, r2
 800998e:	d016      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7ff f81c 	bl	80089cc <HAL_GetTick>
 8009994:	0003      	movs	r3, r0
 8009996:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009998:	e00c      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999a:	f7ff f817 	bl	80089cc <HAL_GetTick>
 800999e:	0002      	movs	r2, r0
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	4a54      	ldr	r2, [pc, #336]	@ (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d904      	bls.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80099aa:	2313      	movs	r3, #19
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	2203      	movs	r2, #3
 80099b0:	701a      	strb	r2, [r3, #0]
            break;
 80099b2:	e004      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099b4:	4b4c      	ldr	r3, [pc, #304]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80099b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b8:	2202      	movs	r2, #2
 80099ba:	4013      	ands	r3, r2
 80099bc:	d0ed      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80099be:	2313      	movs	r3, #19
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099c8:	4b47      	ldr	r3, [pc, #284]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80099ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099cc:	4a48      	ldr	r2, [pc, #288]	@ (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	0019      	movs	r1, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	4b44      	ldr	r3, [pc, #272]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80099d8:	430a      	orrs	r2, r1
 80099da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80099dc:	e00c      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099de:	2312      	movs	r3, #18
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	2213      	movs	r2, #19
 80099e4:	18ba      	adds	r2, r7, r2
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	e005      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ec:	2312      	movs	r3, #18
 80099ee:	18fb      	adds	r3, r7, r3
 80099f0:	2213      	movs	r2, #19
 80099f2:	18ba      	adds	r2, r7, r2
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099f8:	2311      	movs	r3, #17
 80099fa:	18fb      	adds	r3, r7, r3
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d105      	bne.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a02:	4b39      	ldr	r3, [pc, #228]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a06:	4b38      	ldr	r3, [pc, #224]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a08:	493c      	ldr	r1, [pc, #240]	@ (8009afc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009a0a:	400a      	ands	r2, r1
 8009a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2201      	movs	r2, #1
 8009a14:	4013      	ands	r3, r2
 8009a16:	d009      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a18:	4b33      	ldr	r3, [pc, #204]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	4393      	bics	r3, r2
 8009a20:	0019      	movs	r1, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	4b30      	ldr	r3, [pc, #192]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2202      	movs	r2, #2
 8009a32:	4013      	ands	r3, r2
 8009a34:	d009      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a36:	4b2c      	ldr	r3, [pc, #176]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a3a:	220c      	movs	r2, #12
 8009a3c:	4393      	bics	r3, r2
 8009a3e:	0019      	movs	r1, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	4b28      	ldr	r3, [pc, #160]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a46:	430a      	orrs	r2, r1
 8009a48:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	4013      	ands	r3, r2
 8009a52:	d009      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a54:	4b24      	ldr	r3, [pc, #144]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a58:	4a29      	ldr	r2, [pc, #164]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	0019      	movs	r1, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	4b21      	ldr	r3, [pc, #132]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a64:	430a      	orrs	r2, r1
 8009a66:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	01db      	lsls	r3, r3, #7
 8009a70:	4013      	ands	r3, r2
 8009a72:	d015      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	0899      	lsrs	r1, r3, #2
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	695a      	ldr	r2, [r3, #20]
 8009a80:	4b19      	ldr	r3, [pc, #100]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a82:	430a      	orrs	r2, r1
 8009a84:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	695a      	ldr	r2, [r3, #20]
 8009a8a:	2380      	movs	r3, #128	@ 0x80
 8009a8c:	05db      	lsls	r3, r3, #23
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d106      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009a92:	4b15      	ldr	r3, [pc, #84]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	4b14      	ldr	r3, [pc, #80]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009a98:	2180      	movs	r1, #128	@ 0x80
 8009a9a:	0249      	lsls	r1, r1, #9
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	2380      	movs	r3, #128	@ 0x80
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d016      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009aac:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab0:	4a14      	ldr	r2, [pc, #80]	@ (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	0019      	movs	r1, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691a      	ldr	r2, [r3, #16]
 8009aba:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009abc:	430a      	orrs	r2, r1
 8009abe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	2380      	movs	r3, #128	@ 0x80
 8009ac6:	01db      	lsls	r3, r3, #7
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d106      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	4b05      	ldr	r3, [pc, #20]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009ad2:	2180      	movs	r1, #128	@ 0x80
 8009ad4:	0249      	lsls	r1, r1, #9
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009ada:	2312      	movs	r3, #18
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	781b      	ldrb	r3, [r3, #0]
}
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b006      	add	sp, #24
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	40021000 	.word	0x40021000
 8009aec:	40007000 	.word	0x40007000
 8009af0:	fffffcff 	.word	0xfffffcff
 8009af4:	fffeffff 	.word	0xfffeffff
 8009af8:	00001388 	.word	0x00001388
 8009afc:	efffffff 	.word	0xefffffff
 8009b00:	ffffcfff 	.word	0xffffcfff
 8009b04:	ffff3fff 	.word	0xffff3fff

08009b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e046      	b.n	8009ba8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2288      	movs	r2, #136	@ 0x88
 8009b1e:	589b      	ldr	r3, [r3, r2]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d107      	bne.n	8009b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2284      	movs	r2, #132	@ 0x84
 8009b28:	2100      	movs	r1, #0
 8009b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7fe fda8 	bl	8008684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2288      	movs	r2, #136	@ 0x88
 8009b38:	2124      	movs	r1, #36	@ 0x24
 8009b3a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2101      	movs	r1, #1
 8009b48:	438a      	bics	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	0018      	movs	r0, r3
 8009b58:	f000 fa74 	bl	800a044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f000 f8cc 	bl	8009cfc <UART_SetConfig>
 8009b64:	0003      	movs	r3, r0
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e01c      	b.n	8009ba8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	490d      	ldr	r1, [pc, #52]	@ (8009bb0 <HAL_UART_Init+0xa8>)
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	212a      	movs	r1, #42	@ 0x2a
 8009b8a:	438a      	bics	r2, r1
 8009b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2101      	movs	r1, #1
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 fb03 	bl	800a1ac <UART_CheckIdleState>
 8009ba6:	0003      	movs	r3, r0
}
 8009ba8:	0018      	movs	r0, r3
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b002      	add	sp, #8
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	ffffb7ff 	.word	0xffffb7ff

08009bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	@ 0x28
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	1dbb      	adds	r3, r7, #6
 8009bc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2288      	movs	r2, #136	@ 0x88
 8009bc8:	589b      	ldr	r3, [r3, r2]
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d000      	beq.n	8009bd0 <HAL_UART_Transmit+0x1c>
 8009bce:	e090      	b.n	8009cf2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_UART_Transmit+0x2a>
 8009bd6:	1dbb      	adds	r3, r7, #6
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e088      	b.n	8009cf4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689a      	ldr	r2, [r3, #8]
 8009be6:	2380      	movs	r3, #128	@ 0x80
 8009be8:	015b      	lsls	r3, r3, #5
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d109      	bne.n	8009c02 <HAL_UART_Transmit+0x4e>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	d001      	beq.n	8009c02 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e078      	b.n	8009cf4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2290      	movs	r2, #144	@ 0x90
 8009c06:	2100      	movs	r1, #0
 8009c08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2288      	movs	r2, #136	@ 0x88
 8009c0e:	2121      	movs	r1, #33	@ 0x21
 8009c10:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c12:	f7fe fedb 	bl	80089cc <HAL_GetTick>
 8009c16:	0003      	movs	r3, r0
 8009c18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	1dba      	adds	r2, r7, #6
 8009c1e:	2154      	movs	r1, #84	@ 0x54
 8009c20:	8812      	ldrh	r2, [r2, #0]
 8009c22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	1dba      	adds	r2, r7, #6
 8009c28:	2156      	movs	r1, #86	@ 0x56
 8009c2a:	8812      	ldrh	r2, [r2, #0]
 8009c2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	2380      	movs	r3, #128	@ 0x80
 8009c34:	015b      	lsls	r3, r3, #5
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d108      	bne.n	8009c4c <HAL_UART_Transmit+0x98>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d104      	bne.n	8009c4c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	e003      	b.n	8009c54 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c54:	e030      	b.n	8009cb8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	0013      	movs	r3, r2
 8009c60:	2200      	movs	r2, #0
 8009c62:	2180      	movs	r1, #128	@ 0x80
 8009c64:	f000 fb4c 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 8009c68:	1e03      	subs	r3, r0, #0
 8009c6a:	d005      	beq.n	8009c78 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2288      	movs	r2, #136	@ 0x88
 8009c70:	2120      	movs	r1, #32
 8009c72:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e03d      	b.n	8009cf4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	001a      	movs	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	05d2      	lsls	r2, r2, #23
 8009c8a:	0dd2      	lsrs	r2, r2, #23
 8009c8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	3302      	adds	r3, #2
 8009c92:	61bb      	str	r3, [r7, #24]
 8009c94:	e007      	b.n	8009ca6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2256      	movs	r2, #86	@ 0x56
 8009caa:	5a9b      	ldrh	r3, [r3, r2]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b299      	uxth	r1, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2256      	movs	r2, #86	@ 0x56
 8009cb6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2256      	movs	r2, #86	@ 0x56
 8009cbc:	5a9b      	ldrh	r3, [r3, r2]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1c8      	bne.n	8009c56 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	0013      	movs	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2140      	movs	r1, #64	@ 0x40
 8009cd2:	f000 fb15 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 8009cd6:	1e03      	subs	r3, r0, #0
 8009cd8:	d005      	beq.n	8009ce6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2288      	movs	r2, #136	@ 0x88
 8009cde:	2120      	movs	r1, #32
 8009ce0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e006      	b.n	8009cf4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2288      	movs	r2, #136	@ 0x88
 8009cea:	2120      	movs	r1, #32
 8009cec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e000      	b.n	8009cf4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8009cf2:	2302      	movs	r3, #2
  }
}
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	b008      	add	sp, #32
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d04:	231a      	movs	r3, #26
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4abc      	ldr	r2, [pc, #752]	@ (800a01c <UART_SetConfig+0x320>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	0019      	movs	r1, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4ab7      	ldr	r2, [pc, #732]	@ (800a020 <UART_SetConfig+0x324>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	0019      	movs	r1, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	69fa      	ldr	r2, [r7, #28]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	4aae      	ldr	r2, [pc, #696]	@ (800a024 <UART_SetConfig+0x328>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	0019      	movs	r1, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7e:	220f      	movs	r2, #15
 8009d80:	4393      	bics	r3, r2
 8009d82:	0019      	movs	r1, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4aa4      	ldr	r2, [pc, #656]	@ (800a028 <UART_SetConfig+0x32c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d127      	bne.n	8009dea <UART_SetConfig+0xee>
 8009d9a:	4ba4      	ldr	r3, [pc, #656]	@ (800a02c <UART_SetConfig+0x330>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9e:	2203      	movs	r2, #3
 8009da0:	4013      	ands	r3, r2
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d017      	beq.n	8009dd6 <UART_SetConfig+0xda>
 8009da6:	d81b      	bhi.n	8009de0 <UART_SetConfig+0xe4>
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d00a      	beq.n	8009dc2 <UART_SetConfig+0xc6>
 8009dac:	d818      	bhi.n	8009de0 <UART_SetConfig+0xe4>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <UART_SetConfig+0xbc>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d00a      	beq.n	8009dcc <UART_SetConfig+0xd0>
 8009db6:	e013      	b.n	8009de0 <UART_SetConfig+0xe4>
 8009db8:	231b      	movs	r3, #27
 8009dba:	18fb      	adds	r3, r7, r3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e058      	b.n	8009e74 <UART_SetConfig+0x178>
 8009dc2:	231b      	movs	r3, #27
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	e053      	b.n	8009e74 <UART_SetConfig+0x178>
 8009dcc:	231b      	movs	r3, #27
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	701a      	strb	r2, [r3, #0]
 8009dd4:	e04e      	b.n	8009e74 <UART_SetConfig+0x178>
 8009dd6:	231b      	movs	r3, #27
 8009dd8:	18fb      	adds	r3, r7, r3
 8009dda:	2208      	movs	r2, #8
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	e049      	b.n	8009e74 <UART_SetConfig+0x178>
 8009de0:	231b      	movs	r3, #27
 8009de2:	18fb      	adds	r3, r7, r3
 8009de4:	2210      	movs	r2, #16
 8009de6:	701a      	strb	r2, [r3, #0]
 8009de8:	e044      	b.n	8009e74 <UART_SetConfig+0x178>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a90      	ldr	r2, [pc, #576]	@ (800a030 <UART_SetConfig+0x334>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d127      	bne.n	8009e44 <UART_SetConfig+0x148>
 8009df4:	4b8d      	ldr	r3, [pc, #564]	@ (800a02c <UART_SetConfig+0x330>)
 8009df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df8:	220c      	movs	r2, #12
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b0c      	cmp	r3, #12
 8009dfe:	d017      	beq.n	8009e30 <UART_SetConfig+0x134>
 8009e00:	d81b      	bhi.n	8009e3a <UART_SetConfig+0x13e>
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d00a      	beq.n	8009e1c <UART_SetConfig+0x120>
 8009e06:	d818      	bhi.n	8009e3a <UART_SetConfig+0x13e>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <UART_SetConfig+0x116>
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d00a      	beq.n	8009e26 <UART_SetConfig+0x12a>
 8009e10:	e013      	b.n	8009e3a <UART_SetConfig+0x13e>
 8009e12:	231b      	movs	r3, #27
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	2200      	movs	r2, #0
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e02b      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e1c:	231b      	movs	r3, #27
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	2202      	movs	r2, #2
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e026      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e26:	231b      	movs	r3, #27
 8009e28:	18fb      	adds	r3, r7, r3
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e021      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e30:	231b      	movs	r3, #27
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2208      	movs	r2, #8
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	e01c      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e3a:	231b      	movs	r3, #27
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	2210      	movs	r2, #16
 8009e40:	701a      	strb	r2, [r3, #0]
 8009e42:	e017      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a7a      	ldr	r2, [pc, #488]	@ (800a034 <UART_SetConfig+0x338>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d104      	bne.n	8009e58 <UART_SetConfig+0x15c>
 8009e4e:	231b      	movs	r3, #27
 8009e50:	18fb      	adds	r3, r7, r3
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	e00d      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a76      	ldr	r2, [pc, #472]	@ (800a038 <UART_SetConfig+0x33c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d104      	bne.n	8009e6c <UART_SetConfig+0x170>
 8009e62:	231b      	movs	r3, #27
 8009e64:	18fb      	adds	r3, r7, r3
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	e003      	b.n	8009e74 <UART_SetConfig+0x178>
 8009e6c:	231b      	movs	r3, #27
 8009e6e:	18fb      	adds	r3, r7, r3
 8009e70:	2210      	movs	r2, #16
 8009e72:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	2380      	movs	r3, #128	@ 0x80
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d000      	beq.n	8009e82 <UART_SetConfig+0x186>
 8009e80:	e065      	b.n	8009f4e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8009e82:	231b      	movs	r3, #27
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d015      	beq.n	8009eb8 <UART_SetConfig+0x1bc>
 8009e8c:	dc18      	bgt.n	8009ec0 <UART_SetConfig+0x1c4>
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d00d      	beq.n	8009eae <UART_SetConfig+0x1b2>
 8009e92:	dc15      	bgt.n	8009ec0 <UART_SetConfig+0x1c4>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <UART_SetConfig+0x1a2>
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d005      	beq.n	8009ea8 <UART_SetConfig+0x1ac>
 8009e9c:	e010      	b.n	8009ec0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e9e:	f7ff fce9 	bl	8009874 <HAL_RCC_GetPCLK1Freq>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	617b      	str	r3, [r7, #20]
        break;
 8009ea6:	e012      	b.n	8009ece <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ea8:	4b64      	ldr	r3, [pc, #400]	@ (800a03c <UART_SetConfig+0x340>)
 8009eaa:	617b      	str	r3, [r7, #20]
        break;
 8009eac:	e00f      	b.n	8009ece <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eae:	f7ff fc55 	bl	800975c <HAL_RCC_GetSysClockFreq>
 8009eb2:	0003      	movs	r3, r0
 8009eb4:	617b      	str	r3, [r7, #20]
        break;
 8009eb6:	e00a      	b.n	8009ece <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eb8:	2380      	movs	r3, #128	@ 0x80
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	617b      	str	r3, [r7, #20]
        break;
 8009ebe:	e006      	b.n	8009ece <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ec4:	231a      	movs	r3, #26
 8009ec6:	18fb      	adds	r3, r7, r3
 8009ec8:	2201      	movs	r2, #1
 8009eca:	701a      	strb	r2, [r3, #0]
        break;
 8009ecc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d100      	bne.n	8009ed6 <UART_SetConfig+0x1da>
 8009ed4:	e08d      	b.n	8009ff2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009eda:	4b59      	ldr	r3, [pc, #356]	@ (800a040 <UART_SetConfig+0x344>)
 8009edc:	0052      	lsls	r2, r2, #1
 8009ede:	5ad3      	ldrh	r3, [r2, r3]
 8009ee0:	0019      	movs	r1, r3
 8009ee2:	6978      	ldr	r0, [r7, #20]
 8009ee4:	f7fe f90c 	bl	8008100 <__udivsi3>
 8009ee8:	0003      	movs	r3, r0
 8009eea:	005a      	lsls	r2, r3, #1
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	085b      	lsrs	r3, r3, #1
 8009ef2:	18d2      	adds	r2, r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	0019      	movs	r1, r3
 8009efa:	0010      	movs	r0, r2
 8009efc:	f7fe f900 	bl	8008100 <__udivsi3>
 8009f00:	0003      	movs	r3, r0
 8009f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d91c      	bls.n	8009f44 <UART_SetConfig+0x248>
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	2380      	movs	r3, #128	@ 0x80
 8009f0e:	025b      	lsls	r3, r3, #9
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d217      	bcs.n	8009f44 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	200e      	movs	r0, #14
 8009f1a:	183b      	adds	r3, r7, r0
 8009f1c:	210f      	movs	r1, #15
 8009f1e:	438a      	bics	r2, r1
 8009f20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	2207      	movs	r2, #7
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	b299      	uxth	r1, r3
 8009f2e:	183b      	adds	r3, r7, r0
 8009f30:	183a      	adds	r2, r7, r0
 8009f32:	8812      	ldrh	r2, [r2, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	183a      	adds	r2, r7, r0
 8009f3e:	8812      	ldrh	r2, [r2, #0]
 8009f40:	60da      	str	r2, [r3, #12]
 8009f42:	e056      	b.n	8009ff2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009f44:	231a      	movs	r3, #26
 8009f46:	18fb      	adds	r3, r7, r3
 8009f48:	2201      	movs	r2, #1
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	e051      	b.n	8009ff2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f4e:	231b      	movs	r3, #27
 8009f50:	18fb      	adds	r3, r7, r3
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d015      	beq.n	8009f84 <UART_SetConfig+0x288>
 8009f58:	dc18      	bgt.n	8009f8c <UART_SetConfig+0x290>
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d00d      	beq.n	8009f7a <UART_SetConfig+0x27e>
 8009f5e:	dc15      	bgt.n	8009f8c <UART_SetConfig+0x290>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <UART_SetConfig+0x26e>
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d005      	beq.n	8009f74 <UART_SetConfig+0x278>
 8009f68:	e010      	b.n	8009f8c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f6a:	f7ff fc83 	bl	8009874 <HAL_RCC_GetPCLK1Freq>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	617b      	str	r3, [r7, #20]
        break;
 8009f72:	e012      	b.n	8009f9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f74:	4b31      	ldr	r3, [pc, #196]	@ (800a03c <UART_SetConfig+0x340>)
 8009f76:	617b      	str	r3, [r7, #20]
        break;
 8009f78:	e00f      	b.n	8009f9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f7a:	f7ff fbef 	bl	800975c <HAL_RCC_GetSysClockFreq>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	617b      	str	r3, [r7, #20]
        break;
 8009f82:	e00a      	b.n	8009f9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f84:	2380      	movs	r3, #128	@ 0x80
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	617b      	str	r3, [r7, #20]
        break;
 8009f8a:	e006      	b.n	8009f9a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f90:	231a      	movs	r3, #26
 8009f92:	18fb      	adds	r3, r7, r3
 8009f94:	2201      	movs	r2, #1
 8009f96:	701a      	strb	r2, [r3, #0]
        break;
 8009f98:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d028      	beq.n	8009ff2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fa4:	4b26      	ldr	r3, [pc, #152]	@ (800a040 <UART_SetConfig+0x344>)
 8009fa6:	0052      	lsls	r2, r2, #1
 8009fa8:	5ad3      	ldrh	r3, [r2, r3]
 8009faa:	0019      	movs	r1, r3
 8009fac:	6978      	ldr	r0, [r7, #20]
 8009fae:	f7fe f8a7 	bl	8008100 <__udivsi3>
 8009fb2:	0003      	movs	r3, r0
 8009fb4:	001a      	movs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	085b      	lsrs	r3, r3, #1
 8009fbc:	18d2      	adds	r2, r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	0019      	movs	r1, r3
 8009fc4:	0010      	movs	r0, r2
 8009fc6:	f7fe f89b 	bl	8008100 <__udivsi3>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b0f      	cmp	r3, #15
 8009fd2:	d90a      	bls.n	8009fea <UART_SetConfig+0x2ee>
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	2380      	movs	r3, #128	@ 0x80
 8009fd8:	025b      	lsls	r3, r3, #9
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d205      	bcs.n	8009fea <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60da      	str	r2, [r3, #12]
 8009fe8:	e003      	b.n	8009ff2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009fea:	231a      	movs	r3, #26
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	2201      	movs	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	226a      	movs	r2, #106	@ 0x6a
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2268      	movs	r2, #104	@ 0x68
 8009ffe:	2101      	movs	r1, #1
 800a000:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a00e:	231a      	movs	r3, #26
 800a010:	18fb      	adds	r3, r7, r3
 800a012:	781b      	ldrb	r3, [r3, #0]
}
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	b008      	add	sp, #32
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	cfff69f3 	.word	0xcfff69f3
 800a020:	ffffcfff 	.word	0xffffcfff
 800a024:	11fff4ff 	.word	0x11fff4ff
 800a028:	40013800 	.word	0x40013800
 800a02c:	40021000 	.word	0x40021000
 800a030:	40004400 	.word	0x40004400
 800a034:	40004800 	.word	0x40004800
 800a038:	40004c00 	.word	0x40004c00
 800a03c:	00f42400 	.word	0x00f42400
 800a040:	0800b130 	.word	0x0800b130

0800a044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a050:	2208      	movs	r2, #8
 800a052:	4013      	ands	r3, r2
 800a054:	d00b      	beq.n	800a06e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4a4a      	ldr	r2, [pc, #296]	@ (800a188 <UART_AdvFeatureConfig+0x144>)
 800a05e:	4013      	ands	r3, r2
 800a060:	0019      	movs	r1, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	2201      	movs	r2, #1
 800a074:	4013      	ands	r3, r2
 800a076:	d00b      	beq.n	800a090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4a43      	ldr	r2, [pc, #268]	@ (800a18c <UART_AdvFeatureConfig+0x148>)
 800a080:	4013      	ands	r3, r2
 800a082:	0019      	movs	r1, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a094:	2202      	movs	r2, #2
 800a096:	4013      	ands	r3, r2
 800a098:	d00b      	beq.n	800a0b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4a3b      	ldr	r2, [pc, #236]	@ (800a190 <UART_AdvFeatureConfig+0x14c>)
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	0019      	movs	r1, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	d00b      	beq.n	800a0d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	4a34      	ldr	r2, [pc, #208]	@ (800a194 <UART_AdvFeatureConfig+0x150>)
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	0019      	movs	r1, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d8:	2210      	movs	r2, #16
 800a0da:	4013      	ands	r3, r2
 800a0dc:	d00b      	beq.n	800a0f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	4a2c      	ldr	r2, [pc, #176]	@ (800a198 <UART_AdvFeatureConfig+0x154>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	0019      	movs	r1, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d00b      	beq.n	800a118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	4a25      	ldr	r2, [pc, #148]	@ (800a19c <UART_AdvFeatureConfig+0x158>)
 800a108:	4013      	ands	r3, r2
 800a10a:	0019      	movs	r1, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11c:	2240      	movs	r2, #64	@ 0x40
 800a11e:	4013      	ands	r3, r2
 800a120:	d01d      	beq.n	800a15e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a0 <UART_AdvFeatureConfig+0x15c>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	0019      	movs	r1, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a13e:	2380      	movs	r3, #128	@ 0x80
 800a140:	035b      	lsls	r3, r3, #13
 800a142:	429a      	cmp	r2, r3
 800a144:	d10b      	bne.n	800a15e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	4a15      	ldr	r2, [pc, #84]	@ (800a1a4 <UART_AdvFeatureConfig+0x160>)
 800a14e:	4013      	ands	r3, r2
 800a150:	0019      	movs	r1, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a162:	2280      	movs	r2, #128	@ 0x80
 800a164:	4013      	ands	r3, r2
 800a166:	d00b      	beq.n	800a180 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4a0e      	ldr	r2, [pc, #56]	@ (800a1a8 <UART_AdvFeatureConfig+0x164>)
 800a170:	4013      	ands	r3, r2
 800a172:	0019      	movs	r1, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	605a      	str	r2, [r3, #4]
  }
}
 800a180:	46c0      	nop			@ (mov r8, r8)
 800a182:	46bd      	mov	sp, r7
 800a184:	b002      	add	sp, #8
 800a186:	bd80      	pop	{r7, pc}
 800a188:	ffff7fff 	.word	0xffff7fff
 800a18c:	fffdffff 	.word	0xfffdffff
 800a190:	fffeffff 	.word	0xfffeffff
 800a194:	fffbffff 	.word	0xfffbffff
 800a198:	ffffefff 	.word	0xffffefff
 800a19c:	ffffdfff 	.word	0xffffdfff
 800a1a0:	ffefffff 	.word	0xffefffff
 800a1a4:	ff9fffff 	.word	0xff9fffff
 800a1a8:	fff7ffff 	.word	0xfff7ffff

0800a1ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b092      	sub	sp, #72	@ 0x48
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2290      	movs	r2, #144	@ 0x90
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1bc:	f7fe fc06 	bl	80089cc <HAL_GetTick>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	d12d      	bne.n	800a22e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d4:	2280      	movs	r2, #128	@ 0x80
 800a1d6:	0391      	lsls	r1, r2, #14
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4a47      	ldr	r2, [pc, #284]	@ (800a2f8 <UART_CheckIdleState+0x14c>)
 800a1dc:	9200      	str	r2, [sp, #0]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f000 f88e 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 800a1e4:	1e03      	subs	r3, r0, #0
 800a1e6:	d022      	beq.n	800a22e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f8:	f383 8810 	msr	PRIMASK, r3
}
 800a1fc:	46c0      	nop			@ (mov r8, r8)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2180      	movs	r1, #128	@ 0x80
 800a20a:	438a      	bics	r2, r1
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	f383 8810 	msr	PRIMASK, r3
}
 800a218:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2288      	movs	r2, #136	@ 0x88
 800a21e:	2120      	movs	r1, #32
 800a220:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2284      	movs	r2, #132	@ 0x84
 800a226:	2100      	movs	r1, #0
 800a228:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e060      	b.n	800a2f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2204      	movs	r2, #4
 800a236:	4013      	ands	r3, r2
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d146      	bne.n	800a2ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23e:	2280      	movs	r2, #128	@ 0x80
 800a240:	03d1      	lsls	r1, r2, #15
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4a2c      	ldr	r2, [pc, #176]	@ (800a2f8 <UART_CheckIdleState+0x14c>)
 800a246:	9200      	str	r2, [sp, #0]
 800a248:	2200      	movs	r2, #0
 800a24a:	f000 f859 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 800a24e:	1e03      	subs	r3, r0, #0
 800a250:	d03b      	beq.n	800a2ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a252:	f3ef 8310 	mrs	r3, PRIMASK
 800a256:	60fb      	str	r3, [r7, #12]
  return(result);
 800a258:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25c:	2301      	movs	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f383 8810 	msr	PRIMASK, r3
}
 800a266:	46c0      	nop			@ (mov r8, r8)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4922      	ldr	r1, [pc, #136]	@ (800a2fc <UART_CheckIdleState+0x150>)
 800a274:	400a      	ands	r2, r1
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f383 8810 	msr	PRIMASK, r3
}
 800a282:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a284:	f3ef 8310 	mrs	r3, PRIMASK
 800a288:	61bb      	str	r3, [r7, #24]
  return(result);
 800a28a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a28e:	2301      	movs	r3, #1
 800a290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	f383 8810 	msr	PRIMASK, r3
}
 800a298:	46c0      	nop			@ (mov r8, r8)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	438a      	bics	r2, r1
 800a2a8:	609a      	str	r2, [r3, #8]
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	f383 8810 	msr	PRIMASK, r3
}
 800a2b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	228c      	movs	r2, #140	@ 0x8c
 800a2ba:	2120      	movs	r1, #32
 800a2bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2284      	movs	r2, #132	@ 0x84
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e012      	b.n	800a2f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2288      	movs	r2, #136	@ 0x88
 800a2ce:	2120      	movs	r1, #32
 800a2d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	228c      	movs	r2, #140	@ 0x8c
 800a2d6:	2120      	movs	r1, #32
 800a2d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2284      	movs	r2, #132	@ 0x84
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b010      	add	sp, #64	@ 0x40
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	01ffffff 	.word	0x01ffffff
 800a2fc:	fffffedf 	.word	0xfffffedf

0800a300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	1dfb      	adds	r3, r7, #7
 800a30e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a310:	e051      	b.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	3301      	adds	r3, #1
 800a316:	d04e      	beq.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a318:	f7fe fb58 	bl	80089cc <HAL_GetTick>
 800a31c:	0002      	movs	r2, r0
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	429a      	cmp	r2, r3
 800a326:	d302      	bcc.n	800a32e <UART_WaitOnFlagUntilTimeout+0x2e>
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e051      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2204      	movs	r2, #4
 800a33a:	4013      	ands	r3, r2
 800a33c:	d03b      	beq.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b80      	cmp	r3, #128	@ 0x80
 800a342:	d038      	beq.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b40      	cmp	r3, #64	@ 0x40
 800a348:	d035      	beq.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	2208      	movs	r2, #8
 800a352:	4013      	ands	r3, r2
 800a354:	2b08      	cmp	r3, #8
 800a356:	d111      	bne.n	800a37c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2208      	movs	r2, #8
 800a35e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	0018      	movs	r0, r3
 800a364:	f000 f83c 	bl	800a3e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2290      	movs	r2, #144	@ 0x90
 800a36c:	2108      	movs	r1, #8
 800a36e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2284      	movs	r2, #132	@ 0x84
 800a374:	2100      	movs	r1, #0
 800a376:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e02c      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	69da      	ldr	r2, [r3, #28]
 800a382:	2380      	movs	r3, #128	@ 0x80
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	401a      	ands	r2, r3
 800a388:	2380      	movs	r3, #128	@ 0x80
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d112      	bne.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2280      	movs	r2, #128	@ 0x80
 800a396:	0112      	lsls	r2, r2, #4
 800a398:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	0018      	movs	r0, r3
 800a39e:	f000 f81f 	bl	800a3e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2290      	movs	r2, #144	@ 0x90
 800a3a6:	2120      	movs	r1, #32
 800a3a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2284      	movs	r2, #132	@ 0x84
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e00f      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	4013      	ands	r3, r2
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	425a      	negs	r2, r3
 800a3c6:	4153      	adcs	r3, r2
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	001a      	movs	r2, r3
 800a3cc:	1dfb      	adds	r3, r7, #7
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d09e      	beq.n	800a312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	b004      	add	sp, #16
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	@ 0x38
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ec:	617b      	str	r3, [r7, #20]
  return(result);
 800a3ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	f383 8810 	msr	PRIMASK, r3
}
 800a3fc:	46c0      	nop			@ (mov r8, r8)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4926      	ldr	r1, [pc, #152]	@ (800a4a4 <UART_EndRxTransfer+0xc4>)
 800a40a:	400a      	ands	r2, r1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	f383 8810 	msr	PRIMASK, r3
}
 800a418:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a41a:	f3ef 8310 	mrs	r3, PRIMASK
 800a41e:	623b      	str	r3, [r7, #32]
  return(result);
 800a420:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a422:	633b      	str	r3, [r7, #48]	@ 0x30
 800a424:	2301      	movs	r3, #1
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	f383 8810 	msr	PRIMASK, r3
}
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	491b      	ldr	r1, [pc, #108]	@ (800a4a8 <UART_EndRxTransfer+0xc8>)
 800a43c:	400a      	ands	r2, r1
 800a43e:	609a      	str	r2, [r3, #8]
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	f383 8810 	msr	PRIMASK, r3
}
 800a44a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a450:	2b01      	cmp	r3, #1
 800a452:	d118      	bne.n	800a486 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a454:	f3ef 8310 	mrs	r3, PRIMASK
 800a458:	60bb      	str	r3, [r7, #8]
  return(result);
 800a45a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a45e:	2301      	movs	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f383 8810 	msr	PRIMASK, r3
}
 800a468:	46c0      	nop			@ (mov r8, r8)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2110      	movs	r1, #16
 800a476:	438a      	bics	r2, r1
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f383 8810 	msr	PRIMASK, r3
}
 800a484:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	228c      	movs	r2, #140	@ 0x8c
 800a48a:	2120      	movs	r1, #32
 800a48c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a49a:	46c0      	nop			@ (mov r8, r8)
 800a49c:	46bd      	mov	sp, r7
 800a49e:	b00e      	add	sp, #56	@ 0x38
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	fffffedf 	.word	0xfffffedf
 800a4a8:	effffffe 	.word	0xeffffffe

0800a4ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2284      	movs	r2, #132	@ 0x84
 800a4b8:	5c9b      	ldrb	r3, [r3, r2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e027      	b.n	800a512 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2284      	movs	r2, #132	@ 0x84
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2288      	movs	r2, #136	@ 0x88
 800a4ce:	2124      	movs	r1, #36	@ 0x24
 800a4d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	438a      	bics	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a51c <HAL_UARTEx_DisableFifoMode+0x70>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2288      	movs	r2, #136	@ 0x88
 800a504:	2120      	movs	r1, #32
 800a506:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2284      	movs	r2, #132	@ 0x84
 800a50c:	2100      	movs	r1, #0
 800a50e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	0018      	movs	r0, r3
 800a514:	46bd      	mov	sp, r7
 800a516:	b004      	add	sp, #16
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	46c0      	nop			@ (mov r8, r8)
 800a51c:	dfffffff 	.word	0xdfffffff

0800a520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2284      	movs	r2, #132	@ 0x84
 800a52e:	5c9b      	ldrb	r3, [r3, r2]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a534:	2302      	movs	r3, #2
 800a536:	e02e      	b.n	800a596 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2284      	movs	r2, #132	@ 0x84
 800a53c:	2101      	movs	r1, #1
 800a53e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2288      	movs	r2, #136	@ 0x88
 800a544:	2124      	movs	r1, #36	@ 0x24
 800a546:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2101      	movs	r1, #1
 800a55c:	438a      	bics	r2, r1
 800a55e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	08d9      	lsrs	r1, r3, #3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	0018      	movs	r0, r3
 800a578:	f000 f854 	bl	800a624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2288      	movs	r2, #136	@ 0x88
 800a588:	2120      	movs	r1, #32
 800a58a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2284      	movs	r2, #132	@ 0x84
 800a590:	2100      	movs	r1, #0
 800a592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	0018      	movs	r0, r3
 800a598:	46bd      	mov	sp, r7
 800a59a:	b004      	add	sp, #16
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2284      	movs	r2, #132	@ 0x84
 800a5ae:	5c9b      	ldrb	r3, [r3, r2]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e02f      	b.n	800a618 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2284      	movs	r2, #132	@ 0x84
 800a5bc:	2101      	movs	r1, #1
 800a5be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2288      	movs	r2, #136	@ 0x88
 800a5c4:	2124      	movs	r1, #36	@ 0x24
 800a5c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2101      	movs	r1, #1
 800a5dc:	438a      	bics	r2, r1
 800a5de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	4a0e      	ldr	r2, [pc, #56]	@ (800a620 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	0019      	movs	r1, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 f813 	bl	800a624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2288      	movs	r2, #136	@ 0x88
 800a60a:	2120      	movs	r1, #32
 800a60c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2284      	movs	r2, #132	@ 0x84
 800a612:	2100      	movs	r1, #0
 800a614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	0018      	movs	r0, r3
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b004      	add	sp, #16
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	f1ffffff 	.word	0xf1ffffff

0800a624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a630:	2b00      	cmp	r3, #0
 800a632:	d108      	bne.n	800a646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	226a      	movs	r2, #106	@ 0x6a
 800a638:	2101      	movs	r1, #1
 800a63a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2268      	movs	r2, #104	@ 0x68
 800a640:	2101      	movs	r1, #1
 800a642:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a644:	e043      	b.n	800a6ce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a646:	260f      	movs	r6, #15
 800a648:	19bb      	adds	r3, r7, r6
 800a64a:	2208      	movs	r2, #8
 800a64c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a64e:	200e      	movs	r0, #14
 800a650:	183b      	adds	r3, r7, r0
 800a652:	2208      	movs	r2, #8
 800a654:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	0e5b      	lsrs	r3, r3, #25
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	240d      	movs	r4, #13
 800a662:	193b      	adds	r3, r7, r4
 800a664:	2107      	movs	r1, #7
 800a666:	400a      	ands	r2, r1
 800a668:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	0f5b      	lsrs	r3, r3, #29
 800a672:	b2da      	uxtb	r2, r3
 800a674:	250c      	movs	r5, #12
 800a676:	197b      	adds	r3, r7, r5
 800a678:	2107      	movs	r1, #7
 800a67a:	400a      	ands	r2, r1
 800a67c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a67e:	183b      	adds	r3, r7, r0
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	197a      	adds	r2, r7, r5
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	4914      	ldr	r1, [pc, #80]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a688:	5c8a      	ldrb	r2, [r1, r2]
 800a68a:	435a      	muls	r2, r3
 800a68c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a68e:	197b      	adds	r3, r7, r5
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	4a12      	ldr	r2, [pc, #72]	@ (800a6dc <UARTEx_SetNbDataToProcess+0xb8>)
 800a694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a696:	0019      	movs	r1, r3
 800a698:	f7fd fdbc 	bl	8008214 <__divsi3>
 800a69c:	0003      	movs	r3, r0
 800a69e:	b299      	uxth	r1, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	226a      	movs	r2, #106	@ 0x6a
 800a6a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6a6:	19bb      	adds	r3, r7, r6
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	193a      	adds	r2, r7, r4
 800a6ac:	7812      	ldrb	r2, [r2, #0]
 800a6ae:	490a      	ldr	r1, [pc, #40]	@ (800a6d8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a6b0:	5c8a      	ldrb	r2, [r1, r2]
 800a6b2:	435a      	muls	r2, r3
 800a6b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6b6:	193b      	adds	r3, r7, r4
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4a08      	ldr	r2, [pc, #32]	@ (800a6dc <UARTEx_SetNbDataToProcess+0xb8>)
 800a6bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6be:	0019      	movs	r1, r3
 800a6c0:	f7fd fda8 	bl	8008214 <__divsi3>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	b299      	uxth	r1, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2268      	movs	r2, #104	@ 0x68
 800a6cc:	5299      	strh	r1, [r3, r2]
}
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b005      	add	sp, #20
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	46c0      	nop			@ (mov r8, r8)
 800a6d8:	0800b148 	.word	0x0800b148
 800a6dc:	0800b150 	.word	0x0800b150

0800a6e0 <std>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	0004      	movs	r4, r0
 800a6e6:	6003      	str	r3, [r0, #0]
 800a6e8:	6043      	str	r3, [r0, #4]
 800a6ea:	6083      	str	r3, [r0, #8]
 800a6ec:	8181      	strh	r1, [r0, #12]
 800a6ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6f0:	81c2      	strh	r2, [r0, #14]
 800a6f2:	6103      	str	r3, [r0, #16]
 800a6f4:	6143      	str	r3, [r0, #20]
 800a6f6:	6183      	str	r3, [r0, #24]
 800a6f8:	0019      	movs	r1, r3
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	305c      	adds	r0, #92	@ 0x5c
 800a6fe:	f000 f9ff 	bl	800ab00 <memset>
 800a702:	4b0b      	ldr	r3, [pc, #44]	@ (800a730 <std+0x50>)
 800a704:	6224      	str	r4, [r4, #32]
 800a706:	6263      	str	r3, [r4, #36]	@ 0x24
 800a708:	4b0a      	ldr	r3, [pc, #40]	@ (800a734 <std+0x54>)
 800a70a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a70c:	4b0a      	ldr	r3, [pc, #40]	@ (800a738 <std+0x58>)
 800a70e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a710:	4b0a      	ldr	r3, [pc, #40]	@ (800a73c <std+0x5c>)
 800a712:	6323      	str	r3, [r4, #48]	@ 0x30
 800a714:	4b0a      	ldr	r3, [pc, #40]	@ (800a740 <std+0x60>)
 800a716:	429c      	cmp	r4, r3
 800a718:	d005      	beq.n	800a726 <std+0x46>
 800a71a:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <std+0x64>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d002      	beq.n	800a726 <std+0x46>
 800a720:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <std+0x68>)
 800a722:	429c      	cmp	r4, r3
 800a724:	d103      	bne.n	800a72e <std+0x4e>
 800a726:	0020      	movs	r0, r4
 800a728:	3058      	adds	r0, #88	@ 0x58
 800a72a:	f000 fa69 	bl	800ac00 <__retarget_lock_init_recursive>
 800a72e:	bd10      	pop	{r4, pc}
 800a730:	0800a929 	.word	0x0800a929
 800a734:	0800a951 	.word	0x0800a951
 800a738:	0800a989 	.word	0x0800a989
 800a73c:	0800a9b5 	.word	0x0800a9b5
 800a740:	20000120 	.word	0x20000120
 800a744:	20000188 	.word	0x20000188
 800a748:	200001f0 	.word	0x200001f0

0800a74c <stdio_exit_handler>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4a03      	ldr	r2, [pc, #12]	@ (800a75c <stdio_exit_handler+0x10>)
 800a750:	4903      	ldr	r1, [pc, #12]	@ (800a760 <stdio_exit_handler+0x14>)
 800a752:	4804      	ldr	r0, [pc, #16]	@ (800a764 <stdio_exit_handler+0x18>)
 800a754:	f000 f86c 	bl	800a830 <_fwalk_sglue>
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	46c0      	nop			@ (mov r8, r8)
 800a75c:	2000000c 	.word	0x2000000c
 800a760:	0800af0d 	.word	0x0800af0d
 800a764:	2000001c 	.word	0x2000001c

0800a768 <cleanup_stdio>:
 800a768:	6841      	ldr	r1, [r0, #4]
 800a76a:	4b0b      	ldr	r3, [pc, #44]	@ (800a798 <cleanup_stdio+0x30>)
 800a76c:	b510      	push	{r4, lr}
 800a76e:	0004      	movs	r4, r0
 800a770:	4299      	cmp	r1, r3
 800a772:	d001      	beq.n	800a778 <cleanup_stdio+0x10>
 800a774:	f000 fbca 	bl	800af0c <_fflush_r>
 800a778:	68a1      	ldr	r1, [r4, #8]
 800a77a:	4b08      	ldr	r3, [pc, #32]	@ (800a79c <cleanup_stdio+0x34>)
 800a77c:	4299      	cmp	r1, r3
 800a77e:	d002      	beq.n	800a786 <cleanup_stdio+0x1e>
 800a780:	0020      	movs	r0, r4
 800a782:	f000 fbc3 	bl	800af0c <_fflush_r>
 800a786:	68e1      	ldr	r1, [r4, #12]
 800a788:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <cleanup_stdio+0x38>)
 800a78a:	4299      	cmp	r1, r3
 800a78c:	d002      	beq.n	800a794 <cleanup_stdio+0x2c>
 800a78e:	0020      	movs	r0, r4
 800a790:	f000 fbbc 	bl	800af0c <_fflush_r>
 800a794:	bd10      	pop	{r4, pc}
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	20000120 	.word	0x20000120
 800a79c:	20000188 	.word	0x20000188
 800a7a0:	200001f0 	.word	0x200001f0

0800a7a4 <global_stdio_init.part.0>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4b09      	ldr	r3, [pc, #36]	@ (800a7cc <global_stdio_init.part.0+0x28>)
 800a7a8:	4a09      	ldr	r2, [pc, #36]	@ (800a7d0 <global_stdio_init.part.0+0x2c>)
 800a7aa:	2104      	movs	r1, #4
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	4809      	ldr	r0, [pc, #36]	@ (800a7d4 <global_stdio_init.part.0+0x30>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f7ff ff95 	bl	800a6e0 <std>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	2109      	movs	r1, #9
 800a7ba:	4807      	ldr	r0, [pc, #28]	@ (800a7d8 <global_stdio_init.part.0+0x34>)
 800a7bc:	f7ff ff90 	bl	800a6e0 <std>
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	2112      	movs	r1, #18
 800a7c4:	4805      	ldr	r0, [pc, #20]	@ (800a7dc <global_stdio_init.part.0+0x38>)
 800a7c6:	f7ff ff8b 	bl	800a6e0 <std>
 800a7ca:	bd10      	pop	{r4, pc}
 800a7cc:	20000258 	.word	0x20000258
 800a7d0:	0800a74d 	.word	0x0800a74d
 800a7d4:	20000120 	.word	0x20000120
 800a7d8:	20000188 	.word	0x20000188
 800a7dc:	200001f0 	.word	0x200001f0

0800a7e0 <__sfp_lock_acquire>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	4802      	ldr	r0, [pc, #8]	@ (800a7ec <__sfp_lock_acquire+0xc>)
 800a7e4:	f000 fa0d 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	46c0      	nop			@ (mov r8, r8)
 800a7ec:	20000261 	.word	0x20000261

0800a7f0 <__sfp_lock_release>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4802      	ldr	r0, [pc, #8]	@ (800a7fc <__sfp_lock_release+0xc>)
 800a7f4:	f000 fa06 	bl	800ac04 <__retarget_lock_release_recursive>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	46c0      	nop			@ (mov r8, r8)
 800a7fc:	20000261 	.word	0x20000261

0800a800 <__sinit>:
 800a800:	b510      	push	{r4, lr}
 800a802:	0004      	movs	r4, r0
 800a804:	f7ff ffec 	bl	800a7e0 <__sfp_lock_acquire>
 800a808:	6a23      	ldr	r3, [r4, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <__sinit+0x14>
 800a80e:	f7ff ffef 	bl	800a7f0 <__sfp_lock_release>
 800a812:	bd10      	pop	{r4, pc}
 800a814:	4b04      	ldr	r3, [pc, #16]	@ (800a828 <__sinit+0x28>)
 800a816:	6223      	str	r3, [r4, #32]
 800a818:	4b04      	ldr	r3, [pc, #16]	@ (800a82c <__sinit+0x2c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1f6      	bne.n	800a80e <__sinit+0xe>
 800a820:	f7ff ffc0 	bl	800a7a4 <global_stdio_init.part.0>
 800a824:	e7f3      	b.n	800a80e <__sinit+0xe>
 800a826:	46c0      	nop			@ (mov r8, r8)
 800a828:	0800a769 	.word	0x0800a769
 800a82c:	20000258 	.word	0x20000258

0800a830 <_fwalk_sglue>:
 800a830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a832:	0014      	movs	r4, r2
 800a834:	2600      	movs	r6, #0
 800a836:	9000      	str	r0, [sp, #0]
 800a838:	9101      	str	r1, [sp, #4]
 800a83a:	68a5      	ldr	r5, [r4, #8]
 800a83c:	6867      	ldr	r7, [r4, #4]
 800a83e:	3f01      	subs	r7, #1
 800a840:	d504      	bpl.n	800a84c <_fwalk_sglue+0x1c>
 800a842:	6824      	ldr	r4, [r4, #0]
 800a844:	2c00      	cmp	r4, #0
 800a846:	d1f8      	bne.n	800a83a <_fwalk_sglue+0xa>
 800a848:	0030      	movs	r0, r6
 800a84a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a84c:	89ab      	ldrh	r3, [r5, #12]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d908      	bls.n	800a864 <_fwalk_sglue+0x34>
 800a852:	220e      	movs	r2, #14
 800a854:	5eab      	ldrsh	r3, [r5, r2]
 800a856:	3301      	adds	r3, #1
 800a858:	d004      	beq.n	800a864 <_fwalk_sglue+0x34>
 800a85a:	0029      	movs	r1, r5
 800a85c:	9800      	ldr	r0, [sp, #0]
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	4798      	blx	r3
 800a862:	4306      	orrs	r6, r0
 800a864:	3568      	adds	r5, #104	@ 0x68
 800a866:	e7ea      	b.n	800a83e <_fwalk_sglue+0xe>

0800a868 <_puts_r>:
 800a868:	6a03      	ldr	r3, [r0, #32]
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	0005      	movs	r5, r0
 800a86e:	000e      	movs	r6, r1
 800a870:	6884      	ldr	r4, [r0, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <_puts_r+0x12>
 800a876:	f7ff ffc3 	bl	800a800 <__sinit>
 800a87a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a87c:	07db      	lsls	r3, r3, #31
 800a87e:	d405      	bmi.n	800a88c <_puts_r+0x24>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	059b      	lsls	r3, r3, #22
 800a884:	d402      	bmi.n	800a88c <_puts_r+0x24>
 800a886:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a888:	f000 f9bb 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	071b      	lsls	r3, r3, #28
 800a890:	d502      	bpl.n	800a898 <_puts_r+0x30>
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11f      	bne.n	800a8d8 <_puts_r+0x70>
 800a898:	0021      	movs	r1, r4
 800a89a:	0028      	movs	r0, r5
 800a89c:	f000 f8d2 	bl	800aa44 <__swsetup_r>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d019      	beq.n	800a8d8 <_puts_r+0x70>
 800a8a4:	2501      	movs	r5, #1
 800a8a6:	426d      	negs	r5, r5
 800a8a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8aa:	07db      	lsls	r3, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_puts_r+0x52>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	059b      	lsls	r3, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_puts_r+0x52>
 800a8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8b6:	f000 f9a5 	bl	800ac04 <__retarget_lock_release_recursive>
 800a8ba:	0028      	movs	r0, r5
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
 800a8be:	3601      	adds	r6, #1
 800a8c0:	60a3      	str	r3, [r4, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	da04      	bge.n	800a8d0 <_puts_r+0x68>
 800a8c6:	69a2      	ldr	r2, [r4, #24]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	dc16      	bgt.n	800a8fa <_puts_r+0x92>
 800a8cc:	290a      	cmp	r1, #10
 800a8ce:	d014      	beq.n	800a8fa <_puts_r+0x92>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	6022      	str	r2, [r4, #0]
 800a8d6:	7019      	strb	r1, [r3, #0]
 800a8d8:	68a3      	ldr	r3, [r4, #8]
 800a8da:	7831      	ldrb	r1, [r6, #0]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d1ed      	bne.n	800a8be <_puts_r+0x56>
 800a8e2:	60a3      	str	r3, [r4, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da0f      	bge.n	800a908 <_puts_r+0xa0>
 800a8e8:	0022      	movs	r2, r4
 800a8ea:	0028      	movs	r0, r5
 800a8ec:	310a      	adds	r1, #10
 800a8ee:	f000 f867 	bl	800a9c0 <__swbuf_r>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d0d6      	beq.n	800a8a4 <_puts_r+0x3c>
 800a8f6:	250a      	movs	r5, #10
 800a8f8:	e7d6      	b.n	800a8a8 <_puts_r+0x40>
 800a8fa:	0022      	movs	r2, r4
 800a8fc:	0028      	movs	r0, r5
 800a8fe:	f000 f85f 	bl	800a9c0 <__swbuf_r>
 800a902:	3001      	adds	r0, #1
 800a904:	d1e8      	bne.n	800a8d8 <_puts_r+0x70>
 800a906:	e7cd      	b.n	800a8a4 <_puts_r+0x3c>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	6022      	str	r2, [r4, #0]
 800a90e:	220a      	movs	r2, #10
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	e7f0      	b.n	800a8f6 <_puts_r+0x8e>

0800a914 <puts>:
 800a914:	b510      	push	{r4, lr}
 800a916:	4b03      	ldr	r3, [pc, #12]	@ (800a924 <puts+0x10>)
 800a918:	0001      	movs	r1, r0
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	f7ff ffa4 	bl	800a868 <_puts_r>
 800a920:	bd10      	pop	{r4, pc}
 800a922:	46c0      	nop			@ (mov r8, r8)
 800a924:	20000018 	.word	0x20000018

0800a928 <__sread>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	000c      	movs	r4, r1
 800a92c:	250e      	movs	r5, #14
 800a92e:	5f49      	ldrsh	r1, [r1, r5]
 800a930:	f000 f914 	bl	800ab5c <_read_r>
 800a934:	2800      	cmp	r0, #0
 800a936:	db03      	blt.n	800a940 <__sread+0x18>
 800a938:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a93a:	181b      	adds	r3, r3, r0
 800a93c:	6563      	str	r3, [r4, #84]	@ 0x54
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	4a02      	ldr	r2, [pc, #8]	@ (800a94c <__sread+0x24>)
 800a944:	4013      	ands	r3, r2
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	e7f9      	b.n	800a93e <__sread+0x16>
 800a94a:	46c0      	nop			@ (mov r8, r8)
 800a94c:	ffffefff 	.word	0xffffefff

0800a950 <__swrite>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	001f      	movs	r7, r3
 800a954:	898b      	ldrh	r3, [r1, #12]
 800a956:	0005      	movs	r5, r0
 800a958:	000c      	movs	r4, r1
 800a95a:	0016      	movs	r6, r2
 800a95c:	05db      	lsls	r3, r3, #23
 800a95e:	d505      	bpl.n	800a96c <__swrite+0x1c>
 800a960:	230e      	movs	r3, #14
 800a962:	5ec9      	ldrsh	r1, [r1, r3]
 800a964:	2200      	movs	r2, #0
 800a966:	2302      	movs	r3, #2
 800a968:	f000 f8e4 	bl	800ab34 <_lseek_r>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	4a05      	ldr	r2, [pc, #20]	@ (800a984 <__swrite+0x34>)
 800a970:	0028      	movs	r0, r5
 800a972:	4013      	ands	r3, r2
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	0032      	movs	r2, r6
 800a978:	230e      	movs	r3, #14
 800a97a:	5ee1      	ldrsh	r1, [r4, r3]
 800a97c:	003b      	movs	r3, r7
 800a97e:	f000 f901 	bl	800ab84 <_write_r>
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	ffffefff 	.word	0xffffefff

0800a988 <__sseek>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	000c      	movs	r4, r1
 800a98c:	250e      	movs	r5, #14
 800a98e:	5f49      	ldrsh	r1, [r1, r5]
 800a990:	f000 f8d0 	bl	800ab34 <_lseek_r>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	1c42      	adds	r2, r0, #1
 800a998:	d103      	bne.n	800a9a2 <__sseek+0x1a>
 800a99a:	4a05      	ldr	r2, [pc, #20]	@ (800a9b0 <__sseek+0x28>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	2280      	movs	r2, #128	@ 0x80
 800a9a4:	0152      	lsls	r2, r2, #5
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9ac:	e7f8      	b.n	800a9a0 <__sseek+0x18>
 800a9ae:	46c0      	nop			@ (mov r8, r8)
 800a9b0:	ffffefff 	.word	0xffffefff

0800a9b4 <__sclose>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	230e      	movs	r3, #14
 800a9b8:	5ec9      	ldrsh	r1, [r1, r3]
 800a9ba:	f000 f8a9 	bl	800ab10 <_close_r>
 800a9be:	bd10      	pop	{r4, pc}

0800a9c0 <__swbuf_r>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	0006      	movs	r6, r0
 800a9c4:	000d      	movs	r5, r1
 800a9c6:	0014      	movs	r4, r2
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d004      	beq.n	800a9d6 <__swbuf_r+0x16>
 800a9cc:	6a03      	ldr	r3, [r0, #32]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <__swbuf_r+0x16>
 800a9d2:	f7ff ff15 	bl	800a800 <__sinit>
 800a9d6:	69a3      	ldr	r3, [r4, #24]
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	071b      	lsls	r3, r3, #28
 800a9de:	d502      	bpl.n	800a9e6 <__swbuf_r+0x26>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <__swbuf_r+0x3a>
 800a9e6:	0021      	movs	r1, r4
 800a9e8:	0030      	movs	r0, r6
 800a9ea:	f000 f82b 	bl	800aa44 <__swsetup_r>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d003      	beq.n	800a9fa <__swbuf_r+0x3a>
 800a9f2:	2501      	movs	r5, #1
 800a9f4:	426d      	negs	r5, r5
 800a9f6:	0028      	movs	r0, r5
 800a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	b2ef      	uxtb	r7, r5
 800aa00:	1ac0      	subs	r0, r0, r3
 800aa02:	6963      	ldr	r3, [r4, #20]
 800aa04:	b2ed      	uxtb	r5, r5
 800aa06:	4283      	cmp	r3, r0
 800aa08:	dc05      	bgt.n	800aa16 <__swbuf_r+0x56>
 800aa0a:	0021      	movs	r1, r4
 800aa0c:	0030      	movs	r0, r6
 800aa0e:	f000 fa7d 	bl	800af0c <_fflush_r>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d1ed      	bne.n	800a9f2 <__swbuf_r+0x32>
 800aa16:	68a3      	ldr	r3, [r4, #8]
 800aa18:	3001      	adds	r0, #1
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	6022      	str	r2, [r4, #0]
 800aa24:	701f      	strb	r7, [r3, #0]
 800aa26:	6963      	ldr	r3, [r4, #20]
 800aa28:	4283      	cmp	r3, r0
 800aa2a:	d004      	beq.n	800aa36 <__swbuf_r+0x76>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	07db      	lsls	r3, r3, #31
 800aa30:	d5e1      	bpl.n	800a9f6 <__swbuf_r+0x36>
 800aa32:	2d0a      	cmp	r5, #10
 800aa34:	d1df      	bne.n	800a9f6 <__swbuf_r+0x36>
 800aa36:	0021      	movs	r1, r4
 800aa38:	0030      	movs	r0, r6
 800aa3a:	f000 fa67 	bl	800af0c <_fflush_r>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d0d9      	beq.n	800a9f6 <__swbuf_r+0x36>
 800aa42:	e7d6      	b.n	800a9f2 <__swbuf_r+0x32>

0800aa44 <__swsetup_r>:
 800aa44:	4b2d      	ldr	r3, [pc, #180]	@ (800aafc <__swsetup_r+0xb8>)
 800aa46:	b570      	push	{r4, r5, r6, lr}
 800aa48:	0005      	movs	r5, r0
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	000c      	movs	r4, r1
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d004      	beq.n	800aa5c <__swsetup_r+0x18>
 800aa52:	6a03      	ldr	r3, [r0, #32]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <__swsetup_r+0x18>
 800aa58:	f7ff fed2 	bl	800a800 <__sinit>
 800aa5c:	230c      	movs	r3, #12
 800aa5e:	5ee2      	ldrsh	r2, [r4, r3]
 800aa60:	0713      	lsls	r3, r2, #28
 800aa62:	d423      	bmi.n	800aaac <__swsetup_r+0x68>
 800aa64:	06d3      	lsls	r3, r2, #27
 800aa66:	d407      	bmi.n	800aa78 <__swsetup_r+0x34>
 800aa68:	2309      	movs	r3, #9
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	2340      	movs	r3, #64	@ 0x40
 800aa6e:	2001      	movs	r0, #1
 800aa70:	4313      	orrs	r3, r2
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	4240      	negs	r0, r0
 800aa76:	e03a      	b.n	800aaee <__swsetup_r+0xaa>
 800aa78:	0752      	lsls	r2, r2, #29
 800aa7a:	d513      	bpl.n	800aaa4 <__swsetup_r+0x60>
 800aa7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d008      	beq.n	800aa94 <__swsetup_r+0x50>
 800aa82:	0023      	movs	r3, r4
 800aa84:	3344      	adds	r3, #68	@ 0x44
 800aa86:	4299      	cmp	r1, r3
 800aa88:	d002      	beq.n	800aa90 <__swsetup_r+0x4c>
 800aa8a:	0028      	movs	r0, r5
 800aa8c:	f000 f8bc 	bl	800ac08 <_free_r>
 800aa90:	2300      	movs	r3, #0
 800aa92:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa94:	2224      	movs	r2, #36	@ 0x24
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	4393      	bics	r3, r2
 800aa9a:	81a3      	strh	r3, [r4, #12]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	6023      	str	r3, [r4, #0]
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	89a2      	ldrh	r2, [r4, #12]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10b      	bne.n	800aaca <__swsetup_r+0x86>
 800aab2:	21a0      	movs	r1, #160	@ 0xa0
 800aab4:	2280      	movs	r2, #128	@ 0x80
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	0089      	lsls	r1, r1, #2
 800aaba:	0092      	lsls	r2, r2, #2
 800aabc:	400b      	ands	r3, r1
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <__swsetup_r+0x86>
 800aac2:	0021      	movs	r1, r4
 800aac4:	0028      	movs	r0, r5
 800aac6:	f000 fa77 	bl	800afb8 <__smakebuf_r>
 800aaca:	230c      	movs	r3, #12
 800aacc:	5ee2      	ldrsh	r2, [r4, r3]
 800aace:	2101      	movs	r1, #1
 800aad0:	0013      	movs	r3, r2
 800aad2:	400b      	ands	r3, r1
 800aad4:	420a      	tst	r2, r1
 800aad6:	d00b      	beq.n	800aaf0 <__swsetup_r+0xac>
 800aad8:	2300      	movs	r3, #0
 800aada:	60a3      	str	r3, [r4, #8]
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	425b      	negs	r3, r3
 800aae0:	61a3      	str	r3, [r4, #24]
 800aae2:	2000      	movs	r0, #0
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	4283      	cmp	r3, r0
 800aae8:	d101      	bne.n	800aaee <__swsetup_r+0xaa>
 800aaea:	0613      	lsls	r3, r2, #24
 800aaec:	d4be      	bmi.n	800aa6c <__swsetup_r+0x28>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	0791      	lsls	r1, r2, #30
 800aaf2:	d400      	bmi.n	800aaf6 <__swsetup_r+0xb2>
 800aaf4:	6963      	ldr	r3, [r4, #20]
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	e7f3      	b.n	800aae2 <__swsetup_r+0x9e>
 800aafa:	46c0      	nop			@ (mov r8, r8)
 800aafc:	20000018 	.word	0x20000018

0800ab00 <memset>:
 800ab00:	0003      	movs	r3, r0
 800ab02:	1882      	adds	r2, r0, r2
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d100      	bne.n	800ab0a <memset+0xa>
 800ab08:	4770      	bx	lr
 800ab0a:	7019      	strb	r1, [r3, #0]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	e7f9      	b.n	800ab04 <memset+0x4>

0800ab10 <_close_r>:
 800ab10:	2300      	movs	r3, #0
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	4d06      	ldr	r5, [pc, #24]	@ (800ab30 <_close_r+0x20>)
 800ab16:	0004      	movs	r4, r0
 800ab18:	0008      	movs	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7fd fe48 	bl	80087b0 <_close>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d103      	bne.n	800ab2c <_close_r+0x1c>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d000      	beq.n	800ab2c <_close_r+0x1c>
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	2000025c 	.word	0x2000025c

0800ab34 <_lseek_r>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	0004      	movs	r4, r0
 800ab38:	0008      	movs	r0, r1
 800ab3a:	0011      	movs	r1, r2
 800ab3c:	001a      	movs	r2, r3
 800ab3e:	2300      	movs	r3, #0
 800ab40:	4d05      	ldr	r5, [pc, #20]	@ (800ab58 <_lseek_r+0x24>)
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7fd fe55 	bl	80087f2 <_lseek>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d103      	bne.n	800ab54 <_lseek_r+0x20>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d000      	beq.n	800ab54 <_lseek_r+0x20>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd70      	pop	{r4, r5, r6, pc}
 800ab56:	46c0      	nop			@ (mov r8, r8)
 800ab58:	2000025c 	.word	0x2000025c

0800ab5c <_read_r>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	0004      	movs	r4, r0
 800ab60:	0008      	movs	r0, r1
 800ab62:	0011      	movs	r1, r2
 800ab64:	001a      	movs	r2, r3
 800ab66:	2300      	movs	r3, #0
 800ab68:	4d05      	ldr	r5, [pc, #20]	@ (800ab80 <_read_r+0x24>)
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7fd fe03 	bl	8008776 <_read>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d103      	bne.n	800ab7c <_read_r+0x20>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d000      	beq.n	800ab7c <_read_r+0x20>
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
 800ab7e:	46c0      	nop			@ (mov r8, r8)
 800ab80:	2000025c 	.word	0x2000025c

0800ab84 <_write_r>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	0004      	movs	r4, r0
 800ab88:	0008      	movs	r0, r1
 800ab8a:	0011      	movs	r1, r2
 800ab8c:	001a      	movs	r2, r3
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4d05      	ldr	r5, [pc, #20]	@ (800aba8 <_write_r+0x24>)
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	f7fd fc2a 	bl	80083ec <_write>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d103      	bne.n	800aba4 <_write_r+0x20>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d000      	beq.n	800aba4 <_write_r+0x20>
 800aba2:	6023      	str	r3, [r4, #0]
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
 800aba6:	46c0      	nop			@ (mov r8, r8)
 800aba8:	2000025c 	.word	0x2000025c

0800abac <__errno>:
 800abac:	4b01      	ldr	r3, [pc, #4]	@ (800abb4 <__errno+0x8>)
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	4770      	bx	lr
 800abb2:	46c0      	nop			@ (mov r8, r8)
 800abb4:	20000018 	.word	0x20000018

0800abb8 <__libc_init_array>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	2600      	movs	r6, #0
 800abbc:	4c0c      	ldr	r4, [pc, #48]	@ (800abf0 <__libc_init_array+0x38>)
 800abbe:	4d0d      	ldr	r5, [pc, #52]	@ (800abf4 <__libc_init_array+0x3c>)
 800abc0:	1b64      	subs	r4, r4, r5
 800abc2:	10a4      	asrs	r4, r4, #2
 800abc4:	42a6      	cmp	r6, r4
 800abc6:	d109      	bne.n	800abdc <__libc_init_array+0x24>
 800abc8:	2600      	movs	r6, #0
 800abca:	f000 fa6d 	bl	800b0a8 <_init>
 800abce:	4c0a      	ldr	r4, [pc, #40]	@ (800abf8 <__libc_init_array+0x40>)
 800abd0:	4d0a      	ldr	r5, [pc, #40]	@ (800abfc <__libc_init_array+0x44>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	42a6      	cmp	r6, r4
 800abd8:	d105      	bne.n	800abe6 <__libc_init_array+0x2e>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	00b3      	lsls	r3, r6, #2
 800abde:	58eb      	ldr	r3, [r5, r3]
 800abe0:	4798      	blx	r3
 800abe2:	3601      	adds	r6, #1
 800abe4:	e7ee      	b.n	800abc4 <__libc_init_array+0xc>
 800abe6:	00b3      	lsls	r3, r6, #2
 800abe8:	58eb      	ldr	r3, [r5, r3]
 800abea:	4798      	blx	r3
 800abec:	3601      	adds	r6, #1
 800abee:	e7f2      	b.n	800abd6 <__libc_init_array+0x1e>
 800abf0:	0800b158 	.word	0x0800b158
 800abf4:	0800b158 	.word	0x0800b158
 800abf8:	0800b15c 	.word	0x0800b15c
 800abfc:	0800b158 	.word	0x0800b158

0800ac00 <__retarget_lock_init_recursive>:
 800ac00:	4770      	bx	lr

0800ac02 <__retarget_lock_acquire_recursive>:
 800ac02:	4770      	bx	lr

0800ac04 <__retarget_lock_release_recursive>:
 800ac04:	4770      	bx	lr
	...

0800ac08 <_free_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	0005      	movs	r5, r0
 800ac0c:	1e0c      	subs	r4, r1, #0
 800ac0e:	d010      	beq.n	800ac32 <_free_r+0x2a>
 800ac10:	3c04      	subs	r4, #4
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	da00      	bge.n	800ac1a <_free_r+0x12>
 800ac18:	18e4      	adds	r4, r4, r3
 800ac1a:	0028      	movs	r0, r5
 800ac1c:	f000 f8e0 	bl	800ade0 <__malloc_lock>
 800ac20:	4a1d      	ldr	r2, [pc, #116]	@ (800ac98 <_free_r+0x90>)
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d105      	bne.n	800ac34 <_free_r+0x2c>
 800ac28:	6063      	str	r3, [r4, #4]
 800ac2a:	6014      	str	r4, [r2, #0]
 800ac2c:	0028      	movs	r0, r5
 800ac2e:	f000 f8df 	bl	800adf0 <__malloc_unlock>
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d908      	bls.n	800ac4a <_free_r+0x42>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	1821      	adds	r1, r4, r0
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	d1f3      	bne.n	800ac28 <_free_r+0x20>
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	1809      	adds	r1, r1, r0
 800ac46:	6021      	str	r1, [r4, #0]
 800ac48:	e7ee      	b.n	800ac28 <_free_r+0x20>
 800ac4a:	001a      	movs	r2, r3
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <_free_r+0x4e>
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	d9f9      	bls.n	800ac4a <_free_r+0x42>
 800ac56:	6811      	ldr	r1, [r2, #0]
 800ac58:	1850      	adds	r0, r2, r1
 800ac5a:	42a0      	cmp	r0, r4
 800ac5c:	d10b      	bne.n	800ac76 <_free_r+0x6e>
 800ac5e:	6820      	ldr	r0, [r4, #0]
 800ac60:	1809      	adds	r1, r1, r0
 800ac62:	1850      	adds	r0, r2, r1
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	4283      	cmp	r3, r0
 800ac68:	d1e0      	bne.n	800ac2c <_free_r+0x24>
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	1841      	adds	r1, r0, r1
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	6053      	str	r3, [r2, #4]
 800ac74:	e7da      	b.n	800ac2c <_free_r+0x24>
 800ac76:	42a0      	cmp	r0, r4
 800ac78:	d902      	bls.n	800ac80 <_free_r+0x78>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	e7d5      	b.n	800ac2c <_free_r+0x24>
 800ac80:	6820      	ldr	r0, [r4, #0]
 800ac82:	1821      	adds	r1, r4, r0
 800ac84:	428b      	cmp	r3, r1
 800ac86:	d103      	bne.n	800ac90 <_free_r+0x88>
 800ac88:	6819      	ldr	r1, [r3, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	1809      	adds	r1, r1, r0
 800ac8e:	6021      	str	r1, [r4, #0]
 800ac90:	6063      	str	r3, [r4, #4]
 800ac92:	6054      	str	r4, [r2, #4]
 800ac94:	e7ca      	b.n	800ac2c <_free_r+0x24>
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	20000268 	.word	0x20000268

0800ac9c <sbrk_aligned>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	4e0f      	ldr	r6, [pc, #60]	@ (800acdc <sbrk_aligned+0x40>)
 800aca0:	000d      	movs	r5, r1
 800aca2:	6831      	ldr	r1, [r6, #0]
 800aca4:	0004      	movs	r4, r0
 800aca6:	2900      	cmp	r1, #0
 800aca8:	d102      	bne.n	800acb0 <sbrk_aligned+0x14>
 800acaa:	f000 f9eb 	bl	800b084 <_sbrk_r>
 800acae:	6030      	str	r0, [r6, #0]
 800acb0:	0029      	movs	r1, r5
 800acb2:	0020      	movs	r0, r4
 800acb4:	f000 f9e6 	bl	800b084 <_sbrk_r>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d103      	bne.n	800acc4 <sbrk_aligned+0x28>
 800acbc:	2501      	movs	r5, #1
 800acbe:	426d      	negs	r5, r5
 800acc0:	0028      	movs	r0, r5
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	2303      	movs	r3, #3
 800acc6:	1cc5      	adds	r5, r0, #3
 800acc8:	439d      	bics	r5, r3
 800acca:	42a8      	cmp	r0, r5
 800accc:	d0f8      	beq.n	800acc0 <sbrk_aligned+0x24>
 800acce:	1a29      	subs	r1, r5, r0
 800acd0:	0020      	movs	r0, r4
 800acd2:	f000 f9d7 	bl	800b084 <_sbrk_r>
 800acd6:	3001      	adds	r0, #1
 800acd8:	d1f2      	bne.n	800acc0 <sbrk_aligned+0x24>
 800acda:	e7ef      	b.n	800acbc <sbrk_aligned+0x20>
 800acdc:	20000264 	.word	0x20000264

0800ace0 <_malloc_r>:
 800ace0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace2:	2203      	movs	r2, #3
 800ace4:	1ccb      	adds	r3, r1, #3
 800ace6:	4393      	bics	r3, r2
 800ace8:	3308      	adds	r3, #8
 800acea:	0005      	movs	r5, r0
 800acec:	001f      	movs	r7, r3
 800acee:	2b0c      	cmp	r3, #12
 800acf0:	d234      	bcs.n	800ad5c <_malloc_r+0x7c>
 800acf2:	270c      	movs	r7, #12
 800acf4:	42b9      	cmp	r1, r7
 800acf6:	d833      	bhi.n	800ad60 <_malloc_r+0x80>
 800acf8:	0028      	movs	r0, r5
 800acfa:	f000 f871 	bl	800ade0 <__malloc_lock>
 800acfe:	4e37      	ldr	r6, [pc, #220]	@ (800addc <_malloc_r+0xfc>)
 800ad00:	6833      	ldr	r3, [r6, #0]
 800ad02:	001c      	movs	r4, r3
 800ad04:	2c00      	cmp	r4, #0
 800ad06:	d12f      	bne.n	800ad68 <_malloc_r+0x88>
 800ad08:	0039      	movs	r1, r7
 800ad0a:	0028      	movs	r0, r5
 800ad0c:	f7ff ffc6 	bl	800ac9c <sbrk_aligned>
 800ad10:	0004      	movs	r4, r0
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d15f      	bne.n	800add6 <_malloc_r+0xf6>
 800ad16:	6834      	ldr	r4, [r6, #0]
 800ad18:	9400      	str	r4, [sp, #0]
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d14a      	bne.n	800adb6 <_malloc_r+0xd6>
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d052      	beq.n	800adca <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	0028      	movs	r0, r5
 800ad28:	18e3      	adds	r3, r4, r3
 800ad2a:	9900      	ldr	r1, [sp, #0]
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	f000 f9a9 	bl	800b084 <_sbrk_r>
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	4283      	cmp	r3, r0
 800ad36:	d148      	bne.n	800adca <_malloc_r+0xea>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	0028      	movs	r0, r5
 800ad3c:	1aff      	subs	r7, r7, r3
 800ad3e:	0039      	movs	r1, r7
 800ad40:	f7ff ffac 	bl	800ac9c <sbrk_aligned>
 800ad44:	3001      	adds	r0, #1
 800ad46:	d040      	beq.n	800adca <_malloc_r+0xea>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	19db      	adds	r3, r3, r7
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	6833      	ldr	r3, [r6, #0]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	d133      	bne.n	800adbe <_malloc_r+0xde>
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	6033      	str	r3, [r6, #0]
 800ad5a:	e019      	b.n	800ad90 <_malloc_r+0xb0>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dac9      	bge.n	800acf4 <_malloc_r+0x14>
 800ad60:	230c      	movs	r3, #12
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	2000      	movs	r0, #0
 800ad66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad68:	6821      	ldr	r1, [r4, #0]
 800ad6a:	1bc9      	subs	r1, r1, r7
 800ad6c:	d420      	bmi.n	800adb0 <_malloc_r+0xd0>
 800ad6e:	290b      	cmp	r1, #11
 800ad70:	d90a      	bls.n	800ad88 <_malloc_r+0xa8>
 800ad72:	19e2      	adds	r2, r4, r7
 800ad74:	6027      	str	r7, [r4, #0]
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	d104      	bne.n	800ad84 <_malloc_r+0xa4>
 800ad7a:	6032      	str	r2, [r6, #0]
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	6011      	str	r1, [r2, #0]
 800ad80:	6053      	str	r3, [r2, #4]
 800ad82:	e005      	b.n	800ad90 <_malloc_r+0xb0>
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	e7f9      	b.n	800ad7c <_malloc_r+0x9c>
 800ad88:	6862      	ldr	r2, [r4, #4]
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	d10e      	bne.n	800adac <_malloc_r+0xcc>
 800ad8e:	6032      	str	r2, [r6, #0]
 800ad90:	0028      	movs	r0, r5
 800ad92:	f000 f82d 	bl	800adf0 <__malloc_unlock>
 800ad96:	0020      	movs	r0, r4
 800ad98:	2207      	movs	r2, #7
 800ad9a:	300b      	adds	r0, #11
 800ad9c:	1d23      	adds	r3, r4, #4
 800ad9e:	4390      	bics	r0, r2
 800ada0:	1ac2      	subs	r2, r0, r3
 800ada2:	4298      	cmp	r0, r3
 800ada4:	d0df      	beq.n	800ad66 <_malloc_r+0x86>
 800ada6:	1a1b      	subs	r3, r3, r0
 800ada8:	50a3      	str	r3, [r4, r2]
 800adaa:	e7dc      	b.n	800ad66 <_malloc_r+0x86>
 800adac:	605a      	str	r2, [r3, #4]
 800adae:	e7ef      	b.n	800ad90 <_malloc_r+0xb0>
 800adb0:	0023      	movs	r3, r4
 800adb2:	6864      	ldr	r4, [r4, #4]
 800adb4:	e7a6      	b.n	800ad04 <_malloc_r+0x24>
 800adb6:	9c00      	ldr	r4, [sp, #0]
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	e7ad      	b.n	800ad1a <_malloc_r+0x3a>
 800adbe:	001a      	movs	r2, r3
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	42a3      	cmp	r3, r4
 800adc4:	d1fb      	bne.n	800adbe <_malloc_r+0xde>
 800adc6:	2300      	movs	r3, #0
 800adc8:	e7da      	b.n	800ad80 <_malloc_r+0xa0>
 800adca:	230c      	movs	r3, #12
 800adcc:	0028      	movs	r0, r5
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	f000 f80e 	bl	800adf0 <__malloc_unlock>
 800add4:	e7c6      	b.n	800ad64 <_malloc_r+0x84>
 800add6:	6007      	str	r7, [r0, #0]
 800add8:	e7da      	b.n	800ad90 <_malloc_r+0xb0>
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	20000268 	.word	0x20000268

0800ade0 <__malloc_lock>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	4802      	ldr	r0, [pc, #8]	@ (800adec <__malloc_lock+0xc>)
 800ade4:	f7ff ff0d 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	46c0      	nop			@ (mov r8, r8)
 800adec:	20000260 	.word	0x20000260

0800adf0 <__malloc_unlock>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4802      	ldr	r0, [pc, #8]	@ (800adfc <__malloc_unlock+0xc>)
 800adf4:	f7ff ff06 	bl	800ac04 <__retarget_lock_release_recursive>
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	46c0      	nop			@ (mov r8, r8)
 800adfc:	20000260 	.word	0x20000260

0800ae00 <__sflush_r>:
 800ae00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae02:	220c      	movs	r2, #12
 800ae04:	5e8b      	ldrsh	r3, [r1, r2]
 800ae06:	0005      	movs	r5, r0
 800ae08:	000c      	movs	r4, r1
 800ae0a:	071a      	lsls	r2, r3, #28
 800ae0c:	d456      	bmi.n	800aebc <__sflush_r+0xbc>
 800ae0e:	684a      	ldr	r2, [r1, #4]
 800ae10:	2a00      	cmp	r2, #0
 800ae12:	dc02      	bgt.n	800ae1a <__sflush_r+0x1a>
 800ae14:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ae16:	2a00      	cmp	r2, #0
 800ae18:	dd4e      	ble.n	800aeb8 <__sflush_r+0xb8>
 800ae1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	d04b      	beq.n	800aeb8 <__sflush_r+0xb8>
 800ae20:	2200      	movs	r2, #0
 800ae22:	2080      	movs	r0, #128	@ 0x80
 800ae24:	682e      	ldr	r6, [r5, #0]
 800ae26:	602a      	str	r2, [r5, #0]
 800ae28:	001a      	movs	r2, r3
 800ae2a:	0140      	lsls	r0, r0, #5
 800ae2c:	6a21      	ldr	r1, [r4, #32]
 800ae2e:	4002      	ands	r2, r0
 800ae30:	4203      	tst	r3, r0
 800ae32:	d033      	beq.n	800ae9c <__sflush_r+0x9c>
 800ae34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	075b      	lsls	r3, r3, #29
 800ae3a:	d506      	bpl.n	800ae4a <__sflush_r+0x4a>
 800ae3c:	6863      	ldr	r3, [r4, #4]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <__sflush_r+0x4a>
 800ae46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae48:	1ad2      	subs	r2, r2, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	0028      	movs	r0, r5
 800ae4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ae50:	6a21      	ldr	r1, [r4, #32]
 800ae52:	47b8      	blx	r7
 800ae54:	89a2      	ldrh	r2, [r4, #12]
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d106      	bne.n	800ae68 <__sflush_r+0x68>
 800ae5a:	6829      	ldr	r1, [r5, #0]
 800ae5c:	291d      	cmp	r1, #29
 800ae5e:	d846      	bhi.n	800aeee <__sflush_r+0xee>
 800ae60:	4b29      	ldr	r3, [pc, #164]	@ (800af08 <__sflush_r+0x108>)
 800ae62:	410b      	asrs	r3, r1
 800ae64:	07db      	lsls	r3, r3, #31
 800ae66:	d442      	bmi.n	800aeee <__sflush_r+0xee>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	6063      	str	r3, [r4, #4]
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	04d2      	lsls	r2, r2, #19
 800ae72:	d505      	bpl.n	800ae80 <__sflush_r+0x80>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d102      	bne.n	800ae7e <__sflush_r+0x7e>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d100      	bne.n	800ae80 <__sflush_r+0x80>
 800ae7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae82:	602e      	str	r6, [r5, #0]
 800ae84:	2900      	cmp	r1, #0
 800ae86:	d017      	beq.n	800aeb8 <__sflush_r+0xb8>
 800ae88:	0023      	movs	r3, r4
 800ae8a:	3344      	adds	r3, #68	@ 0x44
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	d002      	beq.n	800ae96 <__sflush_r+0x96>
 800ae90:	0028      	movs	r0, r5
 800ae92:	f7ff feb9 	bl	800ac08 <_free_r>
 800ae96:	2300      	movs	r3, #0
 800ae98:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae9a:	e00d      	b.n	800aeb8 <__sflush_r+0xb8>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	0028      	movs	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	0002      	movs	r2, r0
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d1c6      	bne.n	800ae36 <__sflush_r+0x36>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c3      	beq.n	800ae36 <__sflush_r+0x36>
 800aeae:	2b1d      	cmp	r3, #29
 800aeb0:	d001      	beq.n	800aeb6 <__sflush_r+0xb6>
 800aeb2:	2b16      	cmp	r3, #22
 800aeb4:	d11a      	bne.n	800aeec <__sflush_r+0xec>
 800aeb6:	602e      	str	r6, [r5, #0]
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e01e      	b.n	800aefa <__sflush_r+0xfa>
 800aebc:	690e      	ldr	r6, [r1, #16]
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	d0fa      	beq.n	800aeb8 <__sflush_r+0xb8>
 800aec2:	680f      	ldr	r7, [r1, #0]
 800aec4:	600e      	str	r6, [r1, #0]
 800aec6:	1bba      	subs	r2, r7, r6
 800aec8:	9201      	str	r2, [sp, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	079b      	lsls	r3, r3, #30
 800aece:	d100      	bne.n	800aed2 <__sflush_r+0xd2>
 800aed0:	694a      	ldr	r2, [r1, #20]
 800aed2:	60a2      	str	r2, [r4, #8]
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	ddee      	ble.n	800aeb8 <__sflush_r+0xb8>
 800aeda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aedc:	0032      	movs	r2, r6
 800aede:	001f      	movs	r7, r3
 800aee0:	0028      	movs	r0, r5
 800aee2:	9b01      	ldr	r3, [sp, #4]
 800aee4:	6a21      	ldr	r1, [r4, #32]
 800aee6:	47b8      	blx	r7
 800aee8:	2800      	cmp	r0, #0
 800aeea:	dc07      	bgt.n	800aefc <__sflush_r+0xfc>
 800aeec:	89a2      	ldrh	r2, [r4, #12]
 800aeee:	2340      	movs	r3, #64	@ 0x40
 800aef0:	2001      	movs	r0, #1
 800aef2:	4313      	orrs	r3, r2
 800aef4:	b21b      	sxth	r3, r3
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	4240      	negs	r0, r0
 800aefa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aefc:	9b01      	ldr	r3, [sp, #4]
 800aefe:	1836      	adds	r6, r6, r0
 800af00:	1a1b      	subs	r3, r3, r0
 800af02:	9301      	str	r3, [sp, #4]
 800af04:	e7e6      	b.n	800aed4 <__sflush_r+0xd4>
 800af06:	46c0      	nop			@ (mov r8, r8)
 800af08:	dfbffffe 	.word	0xdfbffffe

0800af0c <_fflush_r>:
 800af0c:	690b      	ldr	r3, [r1, #16]
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	0005      	movs	r5, r0
 800af12:	000c      	movs	r4, r1
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <_fflush_r+0x12>
 800af18:	2500      	movs	r5, #0
 800af1a:	0028      	movs	r0, r5
 800af1c:	bd70      	pop	{r4, r5, r6, pc}
 800af1e:	2800      	cmp	r0, #0
 800af20:	d004      	beq.n	800af2c <_fflush_r+0x20>
 800af22:	6a03      	ldr	r3, [r0, #32]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <_fflush_r+0x20>
 800af28:	f7ff fc6a 	bl	800a800 <__sinit>
 800af2c:	220c      	movs	r2, #12
 800af2e:	5ea3      	ldrsh	r3, [r4, r2]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0f1      	beq.n	800af18 <_fflush_r+0xc>
 800af34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af36:	07d2      	lsls	r2, r2, #31
 800af38:	d404      	bmi.n	800af44 <_fflush_r+0x38>
 800af3a:	059b      	lsls	r3, r3, #22
 800af3c:	d402      	bmi.n	800af44 <_fflush_r+0x38>
 800af3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af40:	f7ff fe5f 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800af44:	0028      	movs	r0, r5
 800af46:	0021      	movs	r1, r4
 800af48:	f7ff ff5a 	bl	800ae00 <__sflush_r>
 800af4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af4e:	0005      	movs	r5, r0
 800af50:	07db      	lsls	r3, r3, #31
 800af52:	d4e2      	bmi.n	800af1a <_fflush_r+0xe>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	059b      	lsls	r3, r3, #22
 800af58:	d4df      	bmi.n	800af1a <_fflush_r+0xe>
 800af5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af5c:	f7ff fe52 	bl	800ac04 <__retarget_lock_release_recursive>
 800af60:	e7db      	b.n	800af1a <_fflush_r+0xe>
	...

0800af64 <__swhatbuf_r>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	000e      	movs	r6, r1
 800af68:	001d      	movs	r5, r3
 800af6a:	230e      	movs	r3, #14
 800af6c:	5ec9      	ldrsh	r1, [r1, r3]
 800af6e:	0014      	movs	r4, r2
 800af70:	b096      	sub	sp, #88	@ 0x58
 800af72:	2900      	cmp	r1, #0
 800af74:	da0c      	bge.n	800af90 <__swhatbuf_r+0x2c>
 800af76:	89b2      	ldrh	r2, [r6, #12]
 800af78:	2380      	movs	r3, #128	@ 0x80
 800af7a:	0011      	movs	r1, r2
 800af7c:	4019      	ands	r1, r3
 800af7e:	421a      	tst	r2, r3
 800af80:	d114      	bne.n	800afac <__swhatbuf_r+0x48>
 800af82:	2380      	movs	r3, #128	@ 0x80
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	2000      	movs	r0, #0
 800af88:	6029      	str	r1, [r5, #0]
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	b016      	add	sp, #88	@ 0x58
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 800af90:	466a      	mov	r2, sp
 800af92:	f000 f853 	bl	800b03c <_fstat_r>
 800af96:	2800      	cmp	r0, #0
 800af98:	dbed      	blt.n	800af76 <__swhatbuf_r+0x12>
 800af9a:	23f0      	movs	r3, #240	@ 0xf0
 800af9c:	9901      	ldr	r1, [sp, #4]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	4019      	ands	r1, r3
 800afa2:	4b04      	ldr	r3, [pc, #16]	@ (800afb4 <__swhatbuf_r+0x50>)
 800afa4:	18c9      	adds	r1, r1, r3
 800afa6:	424b      	negs	r3, r1
 800afa8:	4159      	adcs	r1, r3
 800afaa:	e7ea      	b.n	800af82 <__swhatbuf_r+0x1e>
 800afac:	2100      	movs	r1, #0
 800afae:	2340      	movs	r3, #64	@ 0x40
 800afb0:	e7e9      	b.n	800af86 <__swhatbuf_r+0x22>
 800afb2:	46c0      	nop			@ (mov r8, r8)
 800afb4:	ffffe000 	.word	0xffffe000

0800afb8 <__smakebuf_r>:
 800afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afba:	2602      	movs	r6, #2
 800afbc:	898b      	ldrh	r3, [r1, #12]
 800afbe:	0005      	movs	r5, r0
 800afc0:	000c      	movs	r4, r1
 800afc2:	b085      	sub	sp, #20
 800afc4:	4233      	tst	r3, r6
 800afc6:	d007      	beq.n	800afd8 <__smakebuf_r+0x20>
 800afc8:	0023      	movs	r3, r4
 800afca:	3347      	adds	r3, #71	@ 0x47
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	2301      	movs	r3, #1
 800afd2:	6163      	str	r3, [r4, #20]
 800afd4:	b005      	add	sp, #20
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	aa02      	add	r2, sp, #8
 800afdc:	f7ff ffc2 	bl	800af64 <__swhatbuf_r>
 800afe0:	9f02      	ldr	r7, [sp, #8]
 800afe2:	9001      	str	r0, [sp, #4]
 800afe4:	0039      	movs	r1, r7
 800afe6:	0028      	movs	r0, r5
 800afe8:	f7ff fe7a 	bl	800ace0 <_malloc_r>
 800afec:	2800      	cmp	r0, #0
 800afee:	d108      	bne.n	800b002 <__smakebuf_r+0x4a>
 800aff0:	220c      	movs	r2, #12
 800aff2:	5ea3      	ldrsh	r3, [r4, r2]
 800aff4:	059a      	lsls	r2, r3, #22
 800aff6:	d4ed      	bmi.n	800afd4 <__smakebuf_r+0x1c>
 800aff8:	2203      	movs	r2, #3
 800affa:	4393      	bics	r3, r2
 800affc:	431e      	orrs	r6, r3
 800affe:	81a6      	strh	r6, [r4, #12]
 800b000:	e7e2      	b.n	800afc8 <__smakebuf_r+0x10>
 800b002:	2380      	movs	r3, #128	@ 0x80
 800b004:	89a2      	ldrh	r2, [r4, #12]
 800b006:	6020      	str	r0, [r4, #0]
 800b008:	4313      	orrs	r3, r2
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	6120      	str	r0, [r4, #16]
 800b010:	6167      	str	r7, [r4, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00c      	beq.n	800b030 <__smakebuf_r+0x78>
 800b016:	0028      	movs	r0, r5
 800b018:	230e      	movs	r3, #14
 800b01a:	5ee1      	ldrsh	r1, [r4, r3]
 800b01c:	f000 f820 	bl	800b060 <_isatty_r>
 800b020:	2800      	cmp	r0, #0
 800b022:	d005      	beq.n	800b030 <__smakebuf_r+0x78>
 800b024:	2303      	movs	r3, #3
 800b026:	89a2      	ldrh	r2, [r4, #12]
 800b028:	439a      	bics	r2, r3
 800b02a:	3b02      	subs	r3, #2
 800b02c:	4313      	orrs	r3, r2
 800b02e:	81a3      	strh	r3, [r4, #12]
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	9a01      	ldr	r2, [sp, #4]
 800b034:	4313      	orrs	r3, r2
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	e7cc      	b.n	800afd4 <__smakebuf_r+0x1c>
	...

0800b03c <_fstat_r>:
 800b03c:	2300      	movs	r3, #0
 800b03e:	b570      	push	{r4, r5, r6, lr}
 800b040:	4d06      	ldr	r5, [pc, #24]	@ (800b05c <_fstat_r+0x20>)
 800b042:	0004      	movs	r4, r0
 800b044:	0008      	movs	r0, r1
 800b046:	0011      	movs	r1, r2
 800b048:	602b      	str	r3, [r5, #0]
 800b04a:	f7fd fbbb 	bl	80087c4 <_fstat>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	d103      	bne.n	800b05a <_fstat_r+0x1e>
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d000      	beq.n	800b05a <_fstat_r+0x1e>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	2000025c 	.word	0x2000025c

0800b060 <_isatty_r>:
 800b060:	2300      	movs	r3, #0
 800b062:	b570      	push	{r4, r5, r6, lr}
 800b064:	4d06      	ldr	r5, [pc, #24]	@ (800b080 <_isatty_r+0x20>)
 800b066:	0004      	movs	r4, r0
 800b068:	0008      	movs	r0, r1
 800b06a:	602b      	str	r3, [r5, #0]
 800b06c:	f7fd fbb8 	bl	80087e0 <_isatty>
 800b070:	1c43      	adds	r3, r0, #1
 800b072:	d103      	bne.n	800b07c <_isatty_r+0x1c>
 800b074:	682b      	ldr	r3, [r5, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d000      	beq.n	800b07c <_isatty_r+0x1c>
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	46c0      	nop			@ (mov r8, r8)
 800b080:	2000025c 	.word	0x2000025c

0800b084 <_sbrk_r>:
 800b084:	2300      	movs	r3, #0
 800b086:	b570      	push	{r4, r5, r6, lr}
 800b088:	4d06      	ldr	r5, [pc, #24]	@ (800b0a4 <_sbrk_r+0x20>)
 800b08a:	0004      	movs	r4, r0
 800b08c:	0008      	movs	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7fd fbba 	bl	8008808 <_sbrk>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d103      	bne.n	800b0a0 <_sbrk_r+0x1c>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d000      	beq.n	800b0a0 <_sbrk_r+0x1c>
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	bd70      	pop	{r4, r5, r6, pc}
 800b0a2:	46c0      	nop			@ (mov r8, r8)
 800b0a4:	2000025c 	.word	0x2000025c

0800b0a8 <_init>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr

0800b0b4 <_fini>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	46c0      	nop			@ (mov r8, r8)
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr
