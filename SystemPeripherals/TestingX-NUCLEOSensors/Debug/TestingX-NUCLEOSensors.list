
TestingX-NUCLEOSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c24  08009c24  0000b13c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c24  08009c24  0000ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c2c  08009c2c  0000b13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c30  08009c30  0000ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  08009c34  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000013c  08009d70  0000b13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08009d70  0000b488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b13  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  00034c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002298  00000000  00000000  00037fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ac8  00000000  00000000  0003a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002511a  00000000  00000000  0003bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de41  00000000  00000000  00060e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0ae8  00000000  00000000  0007ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f75b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c80  00000000  00000000  0015f7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00169420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000013c 	.word	0x2000013c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b88 	.word	0x08009b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000140 	.word	0x20000140
 80001dc:	08009b88 	.word	0x08009b88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f005 f9f2 	bl	800595c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f81a 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f89a 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f868 	bl	8000654 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  IKS01A3_MOTION_SENSOR_Init(USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0, MOTION_ACCELERO);
 8000584:	2102      	movs	r1, #2
 8000586:	2001      	movs	r0, #1
 8000588:	f004 fe98 	bl	80052bc <IKS01A3_MOTION_SENSOR_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IKS01A3_MOTION_SENSOR_GetAxes(USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0, MOTION_ACCELERO, &Axes);
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <main+0x38>)
 800058e:	2102      	movs	r1, #2
 8000590:	2001      	movs	r0, #1
 8000592:	f004 ff8f 	bl	80054b4 <IKS01A3_MOTION_SENSOR_GetAxes>
	  printf("%ld \r\n", Axes.x);
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <main+0x38>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x3c>)
 800059e:	f008 fc85 	bl	8008eac <iprintf>
	  IKS01A3_MOTION_SENSOR_GetAxes(USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0, MOTION_ACCELERO, &Axes);
 80005a2:	bf00      	nop
 80005a4:	e7f2      	b.n	800058c <main+0x1c>
 80005a6:	bf00      	nop
 80005a8:	200001e0 	.word	0x200001e0
 80005ac:	08009ba0 	.word	0x08009ba0

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	@ 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	@ 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f008 fcc9 	bl	8008f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005d6:	f006 fc41 	bl	8006e5c <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f8e0 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005ee:	2340      	movs	r3, #64	@ 0x40
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fc78 	bl	8006f08 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f8c1 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f007 f878 	bl	8007730 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000646:	f000 f8ad 	bl	80007a4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	@ 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <MX_USART2_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000698:	f007 fdcc 	bl	8008234 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f87f 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000158 	.word	0x20000158
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000732:	f005 fced 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0xc8>)
 800074e:	f005 fa8b 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076c:	f005 fa7c 	bl	8005c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000800 	.word	0x48000800

08000780 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078e:	2201      	movs	r2, #1
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <__io_putchar+0x20>)
 8000792:	f007 fd9d 	bl	80082d0 <HAL_UART_Transmit>

  return ch;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000158 	.word	0x20000158

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0a4      	sub	sp, #144	@ 0x90
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2268      	movs	r2, #104	@ 0x68
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f008 fb9c 	bl	8008f56 <memset>
  if(huart->Instance==USART2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <HAL_UART_MspInit+0xb0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d13a      	bne.n	800089e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4618      	mov	r0, r3
 8000836:	f007 f99f 	bl	8007b78 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000840:	f7ff ffb0 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 8000846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_UART_MspInit+0xb4>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000874:	230c      	movs	r3, #12
 8000876:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f005 f9e5 	bl	8005c68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800089e:	bf00      	nop
 80008a0:	3790      	adds	r7, #144	@ 0x90
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f005 f885 	bl	8005a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <BSP_I2C1_Init+0x70>)
 800091c:	4a19      	ldr	r2, [pc, #100]	@ (8000984 <BSP_I2C1_Init+0x74>)
 800091e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <BSP_I2C1_Init+0x78>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	4918      	ldr	r1, [pc, #96]	@ (8000988 <BSP_I2C1_Init+0x78>)
 8000928:	600a      	str	r2, [r1, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d122      	bne.n	8000974 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <BSP_I2C1_Init+0x70>)
 8000930:	f005 ff12 	bl	8006758 <HAL_I2C_GetState>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11c      	bne.n	8000974 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <BSP_I2C1_Init+0x70>)
 800093c:	f000 f8fe 	bl	8000b3c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d116      	bne.n	8000974 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <BSP_I2C1_Init+0x70>)
 8000948:	f000 f8b4 	bl	8000ab4 <MX_I2C1_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000952:	f06f 0307 	mvn.w	r3, #7
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	e00c      	b.n	8000974 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <BSP_I2C1_Init+0x70>)
 800095e:	f006 f9d7 	bl	8006d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000968:	f06f 0307 	mvn.w	r3, #7
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e001      	b.n	8000974 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001ec 	.word	0x200001ec
 8000984:	40005400 	.word	0x40005400
 8000988:	20000240 	.word	0x20000240

0800098c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <BSP_I2C1_DeInit+0x48>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d014      	beq.n	80009c8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <BSP_I2C1_DeInit+0x48>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <BSP_I2C1_DeInit+0x48>)
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <BSP_I2C1_DeInit+0x48>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10b      	bne.n	80009c8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <BSP_I2C1_DeInit+0x4c>)
 80009b2:	f000 f921 	bl	8000bf8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <BSP_I2C1_DeInit+0x4c>)
 80009b8:	f005 fc5d 	bl	8006276 <HAL_I2C_DeInit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80009c2:	f06f 0307 	mvn.w	r3, #7
 80009c6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000240 	.word	0x20000240
 80009d8:	200001ec 	.word	0x200001ec

080009dc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af04      	add	r7, sp, #16
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4603      	mov	r3, r0
 80009e8:	81fb      	strh	r3, [r7, #14]
 80009ea:	460b      	mov	r3, r1
 80009ec:	81bb      	strh	r3, [r7, #12]
 80009ee:	4613      	mov	r3, r2
 80009f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80009f6:	89ba      	ldrh	r2, [r7, #12]
 80009f8:	89f9      	ldrh	r1, [r7, #14]
 80009fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <BSP_I2C1_WriteReg+0x60>)
 8000a0c:	f005 fc76 	bl	80062fc <HAL_I2C_Mem_Write>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00c      	beq.n	8000a30 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000a16:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <BSP_I2C1_WriteReg+0x60>)
 8000a18:	f005 feac 	bl	8006774 <HAL_I2C_GetError>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d103      	bne.n	8000a2a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000a22:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e002      	b.n	8000a30 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000a2a:	f06f 0303 	mvn.w	r3, #3
 8000a2e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000a30:	697b      	ldr	r3, [r7, #20]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001ec 	.word	0x200001ec

08000a40 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	60ba      	str	r2, [r7, #8]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	81fb      	strh	r3, [r7, #14]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	81bb      	strh	r3, [r7, #12]
 8000a52:	4613      	mov	r3, r2
 8000a54:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000a5a:	89ba      	ldrh	r2, [r7, #12]
 8000a5c:	89f9      	ldrh	r1, [r7, #14]
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <BSP_I2C1_ReadReg+0x60>)
 8000a70:	f005 fd58 	bl	8006524 <HAL_I2C_Mem_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00c      	beq.n	8000a94 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <BSP_I2C1_ReadReg+0x60>)
 8000a7c:	f005 fe7a 	bl	8006774 <HAL_I2C_GetError>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d103      	bne.n	8000a8e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000a86:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e002      	b.n	8000a94 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000a8e:	f06f 0303 	mvn.w	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000a94:	697b      	ldr	r3, [r7, #20]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001ec 	.word	0x200001ec

08000aa4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000aa8:	f004 ffc8 	bl	8005a3c <HAL_GetTick>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x80>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10D19CE4;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x84>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f005 fb22 	bl	8006140 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f006 f901 	bl	8006d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f006 f943 	bl	8006da6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10d19ce4 	.word	0x10d19ce4

08000b3c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0a4      	sub	sp, #144	@ 0x90
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2268      	movs	r2, #104	@ 0x68
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 fa02 	bl	8008f56 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b52:	2340      	movs	r3, #64	@ 0x40
 8000b54:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 f80a 	bl	8007b78 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b82:	2312      	movs	r3, #18
 8000b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000b94:	2304      	movs	r3, #4
 8000b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b9a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <I2C1_MspInit+0xb8>)
 8000ba2:	f005 f861 	bl	8005c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000bc4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <I2C1_MspInit+0xb8>)
 8000bcc:	f005 f84c 	bl	8005c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd4:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000bd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <I2C1_MspInit+0xb4>)
 8000bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3790      	adds	r7, #144	@ 0x90
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <I2C1_MspDeInit+0x30>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <I2C1_MspDeInit+0x30>)
 8000c06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000c0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c10:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <I2C1_MspDeInit+0x34>)
 8000c12:	f005 f9a3 	bl	8005f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000c16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <I2C1_MspDeInit+0x34>)
 8000c1c:	f005 f99e 	bl	8005f5c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
  }

  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e009      	b.n	8000c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd7b 	bl	8000780 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf1      	blt.n	8000c7c <_write+0x12>
  }
  return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_close>:

int _close(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cca:	605a      	str	r2, [r3, #4]
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_isatty>:

int _isatty(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f008 f95a 	bl	8008ff4 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20028000 	.word	0x20028000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000244 	.word	0x20000244
 8000d74:	20000488 	.word	0x20000488

08000d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ffea 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	@ (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f008 f919 	bl	8009000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fbcf 	bl	8000570 <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000de0:	08009c34 	.word	0x08009c34
  ldr r2, =_sbss
 8000de4:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000de8:	20000488 	.word	0x20000488

08000dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_IRQHandler>
	...

08000df0 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d103      	bne.n	8000e0c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e051      	b.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	7b1a      	ldrb	r2, [r3, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	699a      	ldr	r2, [r3, #24]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <LIS2DW12_RegisterBusIO+0xcc>)
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <LIS2DW12_RegisterBusIO+0xd0>)
 8000e4e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	69da      	ldr	r2, [r3, #28]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e020      	b.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4798      	blx	r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e016      	b.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d112      	bne.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10d      	bne.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000e94:	2305      	movs	r3, #5
 8000e96:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2121      	movs	r1, #33	@ 0x21
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 fcc1 	bl	8001826 <LIS2DW12_Write_Reg>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08001bb9 	.word	0x08001bb9
 8000ec0:	08001bef 	.word	0x08001bef

08000ec4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3320      	adds	r3, #32
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f9cb 	bl	800226e <lis2dw12_auto_increment_set>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e04b      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3320      	adds	r3, #32
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f8e2 	bl	80020b4 <lis2dw12_block_data_update_set>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e03f      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3320      	adds	r3, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f9d9 	bl	80022ba <lis2dw12_fifo_mode_set>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e033      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3320      	adds	r3, #32
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 feb2 	bl	8001c84 <lis2dw12_power_mode_set>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e027      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <LIS2DW12_Init+0xc0>)
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3320      	adds	r3, #32
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 ffa3 	bl	8001e94 <lis2dw12_data_rate_set>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e010      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3320      	adds	r3, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f8cd 	bl	8002100 <lis2dw12_full_scale_set>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	e004      	b.n	8000f7c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	42c80000 	.word	0x42c80000

08000f88 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f888 	bl	80010a6 <LIS2DW12_ACC_Disable>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	e010      	b.n	8000fc4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3320      	adds	r3, #32
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 f935 	bl	800224c <lis2dw12_device_id_get>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	e000      	b.n	8000ff0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2210      	movs	r2, #16
 8001024:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <LIS2DW12_GetCapabilities+0x58>)
 8001038:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	44c80000 	.word	0x44c80000

08001054 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e019      	b.n	800109e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800107c:	461a      	mov	r2, r3
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fbea 	bl	800185c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e004      	b.n	800109e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e010      	b.n	80010de <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3320      	adds	r3, #32
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fee6 	bl	8001e94 <lis2dw12_data_rate_set>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e004      	b.n	80010de <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3320      	adds	r3, #32
 80010fa:	f107 020b 	add.w	r2, r7, #11
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f001 f823 	bl	800214c <lis2dw12_full_scale_get>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	e080      	b.n	8001214 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3320      	adds	r3, #32
 8001116:	f107 020a 	add.w	r2, r7, #10
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fdff 	bl	8001d20 <lis2dw12_power_mode_get>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e072      	b.n	8001214 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 800112e:	7abb      	ldrb	r3, [r7, #10]
 8001130:	2b1b      	cmp	r3, #27
 8001132:	bf8c      	ite	hi
 8001134:	2201      	movhi	r2, #1
 8001136:	2200      	movls	r2, #0
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	2a00      	cmp	r2, #0
 800113c:	d162      	bne.n	8001204 <LIS2DW12_ACC_GetSensitivity+0x11c>
 800113e:	2201      	movs	r2, #1
 8001140:	409a      	lsls	r2, r3
 8001142:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8001146:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d12f      	bne.n	80011b8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8001158:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d04c      	beq.n	8001204 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d81b      	bhi.n	80011a8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8001170:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001189 	.word	0x08001189
 800117c:	08001191 	.word	0x08001191
 8001180:	08001199 	.word	0x08001199
 8001184:	080011a1 	.word	0x080011a1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	4a24      	ldr	r2, [pc, #144]	@ (800121c <LIS2DW12_ACC_GetSensitivity+0x134>)
 800118c:	601a      	str	r2, [r3, #0]
          break;
 800118e:	e012      	b.n	80011b6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4a23      	ldr	r2, [pc, #140]	@ (8001220 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8001194:	601a      	str	r2, [r3, #0]
          break;
 8001196:	e00e      	b.n	80011b6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 800119c:	601a      	str	r2, [r3, #0]
          break;
 800119e:	e00a      	b.n	80011b6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <LIS2DW12_ACC_GetSensitivity+0x140>)
 80011a4:	601a      	str	r2, [r3, #0]
          break;
 80011a6:	e006      	b.n	80011b6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4a20      	ldr	r2, [pc, #128]	@ (800122c <LIS2DW12_ACC_GetSensitivity+0x144>)
 80011ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	60fb      	str	r3, [r7, #12]
          break;
 80011b4:	bf00      	nop
      }
      break;
 80011b6:	e02c      	b.n	8001212 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d81a      	bhi.n	80011f4 <LIS2DW12_ACC_GetSensitivity+0x10c>
 80011be:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	080011e5 	.word	0x080011e5
 80011d0:	080011ed 	.word	0x080011ed
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <LIS2DW12_ACC_GetSensitivity+0x148>)
 80011d8:	601a      	str	r2, [r3, #0]
          break;
 80011da:	e012      	b.n	8001202 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 80011e0:	601a      	str	r2, [r3, #0]
          break;
 80011e2:	e00e      	b.n	8001202 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LIS2DW12_ACC_GetSensitivity+0x134>)
 80011e8:	601a      	str	r2, [r3, #0]
          break;
 80011ea:	e00a      	b.n	8001202 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <LIS2DW12_ACC_GetSensitivity+0x138>)
 80011f0:	601a      	str	r2, [r3, #0]
          break;
 80011f2:	e006      	b.n	8001202 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LIS2DW12_ACC_GetSensitivity+0x144>)
 80011f8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	60fb      	str	r3, [r7, #12]
          break;
 8001200:	bf00      	nop
      }
      break;
 8001202:	e006      	b.n	8001212 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8001208:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	60fb      	str	r3, [r7, #12]
      break;
 8001210:	bf00      	nop
  }

  return ret;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	3f79db23 	.word	0x3f79db23
 8001220:	3ff9db23 	.word	0x3ff9db23
 8001224:	4079db23 	.word	0x4079db23
 8001228:	40f9db23 	.word	0x40f9db23
 800122c:	bf800000 	.word	0xbf800000
 8001230:	3e79db23 	.word	0x3e79db23
 8001234:	3ef9db23 	.word	0x3ef9db23

08001238 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3320      	adds	r3, #32
 800124a:	f107 020b 	add.w	r2, r7, #11
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fe65 	bl	8001f20 <lis2dw12_data_rate_get>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	e14f      	b.n	8001502 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3320      	adds	r3, #32
 8001266:	f107 020a 	add.w	r2, r7, #10
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fd57 	bl	8001d20 <lis2dw12_power_mode_get>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	e141      	b.n	8001502 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b32      	cmp	r3, #50	@ 0x32
 8001282:	f200 8136 	bhi.w	80014f2 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	08001359 	.word	0x08001359
 8001290:	08001363 	.word	0x08001363
 8001294:	080013bd 	.word	0x080013bd
 8001298:	080013c5 	.word	0x080013c5
 800129c:	080013cd 	.word	0x080013cd
 80012a0:	080013d5 	.word	0x080013d5
 80012a4:	080013dd 	.word	0x080013dd
 80012a8:	080013e5 	.word	0x080013e5
 80012ac:	0800143f 	.word	0x0800143f
 80012b0:	08001499 	.word	0x08001499
 80012b4:	080014f3 	.word	0x080014f3
 80012b8:	080014f3 	.word	0x080014f3
 80012bc:	080014f3 	.word	0x080014f3
 80012c0:	080014f3 	.word	0x080014f3
 80012c4:	080014f3 	.word	0x080014f3
 80012c8:	080014f3 	.word	0x080014f3
 80012cc:	080014f3 	.word	0x080014f3
 80012d0:	080014f3 	.word	0x080014f3
 80012d4:	08001359 	.word	0x08001359
 80012d8:	080014f3 	.word	0x080014f3
 80012dc:	080014f3 	.word	0x080014f3
 80012e0:	080014f3 	.word	0x080014f3
 80012e4:	080014f3 	.word	0x080014f3
 80012e8:	080014f3 	.word	0x080014f3
 80012ec:	080014f3 	.word	0x080014f3
 80012f0:	080014f3 	.word	0x080014f3
 80012f4:	080014f3 	.word	0x080014f3
 80012f8:	080014f3 	.word	0x080014f3
 80012fc:	080014f3 	.word	0x080014f3
 8001300:	080014f3 	.word	0x080014f3
 8001304:	080014f3 	.word	0x080014f3
 8001308:	080014f3 	.word	0x080014f3
 800130c:	080014f3 	.word	0x080014f3
 8001310:	080014f3 	.word	0x080014f3
 8001314:	080014f3 	.word	0x080014f3
 8001318:	080014f3 	.word	0x080014f3
 800131c:	080014f3 	.word	0x080014f3
 8001320:	080014f3 	.word	0x080014f3
 8001324:	080014f3 	.word	0x080014f3
 8001328:	080014f3 	.word	0x080014f3
 800132c:	080014f3 	.word	0x080014f3
 8001330:	080014f3 	.word	0x080014f3
 8001334:	080014f3 	.word	0x080014f3
 8001338:	080014f3 	.word	0x080014f3
 800133c:	080014f3 	.word	0x080014f3
 8001340:	080014f3 	.word	0x080014f3
 8001344:	080014f3 	.word	0x080014f3
 8001348:	080014f3 	.word	0x080014f3
 800134c:	080014f3 	.word	0x080014f3
 8001350:	080014f3 	.word	0x080014f3
 8001354:	08001359 	.word	0x08001359
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
      break;
 8001360:	e0ce      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001362:	7abb      	ldrb	r3, [r7, #10]
 8001364:	2b1b      	cmp	r3, #27
 8001366:	bf8c      	ite	hi
 8001368:	2201      	movhi	r2, #1
 800136a:	2200      	movls	r2, #0
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	2a00      	cmp	r2, #0
 8001370:	d11c      	bne.n	80013ac <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 800137c:	2a00      	cmp	r2, #0
 800137e:	bf14      	ite	ne
 8001380:	2201      	movne	r2, #1
 8001382:	2200      	moveq	r2, #0
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	2a00      	cmp	r2, #0
 8001388:	d10c      	bne.n	80013a4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 800138a:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf14      	ite	ne
 8001392:	2301      	movne	r3, #1
 8001394:	2300      	moveq	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4a5b      	ldr	r2, [pc, #364]	@ (800150c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80013a0:	601a      	str	r2, [r3, #0]
          break;
 80013a2:	e00a      	b.n	80013ba <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001510 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 80013a8:	601a      	str	r2, [r3, #0]
          break;
 80013aa:	e006      	b.n	80013ba <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4a59      	ldr	r2, [pc, #356]	@ (8001514 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80013b0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	60fb      	str	r3, [r7, #12]
          break;
 80013b8:	bf00      	nop
      }
      break;
 80013ba:	e0a1      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4a53      	ldr	r2, [pc, #332]	@ (800150c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 80013c0:	601a      	str	r2, [r3, #0]
      break;
 80013c2:	e09d      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4a54      	ldr	r2, [pc, #336]	@ (8001518 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 80013c8:	601a      	str	r2, [r3, #0]
      break;
 80013ca:	e099      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4a53      	ldr	r2, [pc, #332]	@ (800151c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 80013d0:	601a      	str	r2, [r3, #0]
      break;
 80013d2:	e095      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4a52      	ldr	r2, [pc, #328]	@ (8001520 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 80013d8:	601a      	str	r2, [r3, #0]
      break;
 80013da:	e091      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80013e0:	601a      	str	r2, [r3, #0]
      break;
 80013e2:	e08d      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80013e4:	7abb      	ldrb	r3, [r7, #10]
 80013e6:	2b1b      	cmp	r3, #27
 80013e8:	bf8c      	ite	hi
 80013ea:	2201      	movhi	r2, #1
 80013ec:	2200      	movls	r2, #0
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d11c      	bne.n	800142e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 80013f4:	2201      	movs	r2, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80013fe:	2a00      	cmp	r2, #0
 8001400:	bf14      	ite	ne
 8001402:	2201      	movne	r2, #1
 8001404:	2200      	moveq	r2, #0
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	2a00      	cmp	r2, #0
 800140a:	d10c      	bne.n	8001426 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 800140c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	4a41      	ldr	r2, [pc, #260]	@ (8001528 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8001422:	601a      	str	r2, [r3, #0]
          break;
 8001424:	e00a      	b.n	800143c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	4a3e      	ldr	r2, [pc, #248]	@ (8001524 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800142a:	601a      	str	r2, [r3, #0]
          break;
 800142c:	e006      	b.n	800143c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8001432:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	60fb      	str	r3, [r7, #12]
          break;
 800143a:	bf00      	nop
      }
      break;
 800143c:	e060      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800143e:	7abb      	ldrb	r3, [r7, #10]
 8001440:	2b1b      	cmp	r3, #27
 8001442:	bf8c      	ite	hi
 8001444:	2201      	movhi	r2, #1
 8001446:	2200      	movls	r2, #0
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	2a00      	cmp	r2, #0
 800144c:	d11c      	bne.n	8001488 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 800144e:	2201      	movs	r2, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8001458:	2a00      	cmp	r2, #0
 800145a:	bf14      	ite	ne
 800145c:	2201      	movne	r2, #1
 800145e:	2200      	moveq	r2, #0
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	2a00      	cmp	r2, #0
 8001464:	d10c      	bne.n	8001480 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8001466:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf14      	ite	ne
 800146e:	2301      	movne	r3, #1
 8001470:	2300      	moveq	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a2c      	ldr	r2, [pc, #176]	@ (800152c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 800147c:	601a      	str	r2, [r3, #0]
          break;
 800147e:	e00a      	b.n	8001496 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8001484:	601a      	str	r2, [r3, #0]
          break;
 8001486:	e006      	b.n	8001496 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800148c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	60fb      	str	r3, [r7, #12]
          break;
 8001494:	bf00      	nop
      }
      break;
 8001496:	e033      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	2b1b      	cmp	r3, #27
 800149c:	bf8c      	ite	hi
 800149e:	2201      	movhi	r2, #1
 80014a0:	2200      	movls	r2, #0
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d11c      	bne.n	80014e2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 80014a8:	2201      	movs	r2, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2201      	movne	r2, #1
 80014b8:	2200      	moveq	r2, #0
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d10c      	bne.n	80014da <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 80014c0:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80014d6:	601a      	str	r2, [r3, #0]
          break;
 80014d8:	e00a      	b.n	80014f0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80014de:	601a      	str	r2, [r3, #0]
          break;
 80014e0:	e006      	b.n	80014f0 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80014e6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	60fb      	str	r3, [r7, #12]
          break;
 80014ee:	bf00      	nop
      }
      break;
 80014f0:	e006      	b.n	8001500 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80014f6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	60fb      	str	r3, [r7, #12]
      break;
 80014fe:	bf00      	nop
  }

  return ret;
 8001500:	68fb      	ldr	r3, [r7, #12]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	41480000 	.word	0x41480000
 8001510:	3fcccccd 	.word	0x3fcccccd
 8001514:	bf800000 	.word	0xbf800000
 8001518:	41c80000 	.word	0x41c80000
 800151c:	42480000 	.word	0x42480000
 8001520:	42c80000 	.word	0x42c80000
 8001524:	43480000 	.word	0x43480000
 8001528:	43c80000 	.word	0x43c80000
 800152c:	44480000 	.word	0x44480000
 8001530:	44c80000 	.word	0x44c80000

08001534 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	ed97 0a00 	vldr	s0, [r7]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f805 	bl	8001558 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800154e:	4603      	mov	r3, r0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	ed87 0a02 	vstr	s0, [r7, #8]
 8001564:	460b      	mov	r3, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001572:	2b01      	cmp	r3, #1
 8001574:	d109      	bne.n	800158a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4619      	mov	r1, r3
 800157c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f96b 	bl	800185c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001586:	4603      	mov	r3, r0
 8001588:	e008      	b.n	800159c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800158a:	79ba      	ldrb	r2, [r7, #6]
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4619      	mov	r1, r3
 8001590:	ed97 0a02 	vldr	s0, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 fa7d 	bl	8001a94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800159a:	4603      	mov	r3, r0
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3320      	adds	r3, #32
 80015b6:	f107 020b 	add.w	r2, r7, #11
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fdc5 	bl	800214c <lis2dw12_full_scale_get>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e027      	b.n	800161e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d81b      	bhi.n	800160c <LIS2DW12_ACC_GetFullScale+0x68>
 80015d4:	a201      	add	r2, pc, #4	@ (adr r2, 80015dc <LIS2DW12_ACC_GetFullScale+0x38>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015f5 	.word	0x080015f5
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001605 	.word	0x08001605
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
      break;
 80015f2:	e013      	b.n	800161c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	601a      	str	r2, [r3, #0]
      break;
 80015fa:	e00f      	b.n	800161c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2208      	movs	r2, #8
 8001600:	601a      	str	r2, [r3, #0]
      break;
 8001602:	e00b      	b.n	800161c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2210      	movs	r2, #16
 8001608:	601a      	str	r2, [r3, #0]
      break;
 800160a:	e007      	b.n	800161c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f04f 32ff 	mov.w	r2, #4294967295
 8001612:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	60fb      	str	r3, [r7, #12]
      break;
 800161a:	bf00      	nop
  }

  return ret;
 800161c:	68fb      	ldr	r3, [r7, #12]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop

08001628 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	dd0b      	ble.n	8001650 <LIS2DW12_ACC_SetFullScale+0x28>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2b04      	cmp	r3, #4
 800163c:	dd06      	ble.n	800164c <LIS2DW12_ACC_SetFullScale+0x24>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b08      	cmp	r3, #8
 8001642:	dc01      	bgt.n	8001648 <LIS2DW12_ACC_SetFullScale+0x20>
 8001644:	2302      	movs	r3, #2
 8001646:	e004      	b.n	8001652 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001648:	2303      	movs	r3, #3
 800164a:	e002      	b.n	8001652 <LIS2DW12_ACC_SetFullScale+0x2a>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001650:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001652:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3320      	adds	r3, #32
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fd4f 	bl	8002100 <lis2dw12_full_scale_set>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	e000      	b.n	8001670 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3320      	adds	r3, #32
 800168a:	f107 020b 	add.w	r2, r7, #11
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fb45 	bl	8001d20 <lis2dw12_power_mode_get>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	e068      	b.n	8001774 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3320      	adds	r3, #32
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd85 	bl	80021bc <lis2dw12_acceleration_raw_get>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	e05a      	b.n	8001774 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	2b1b      	cmp	r3, #27
 80016c2:	bf8c      	ite	hi
 80016c4:	2201      	movhi	r2, #1
 80016c6:	2200      	movls	r2, #0
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d14d      	bne.n	800176a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80016ce:	2201      	movs	r2, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 80016d6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d124      	bne.n	8001732 <LIS2DW12_ACC_GetAxesRaw+0xba>
 80016e8:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d037      	beq.n	800176a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80016fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da00      	bge.n	8001704 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8001702:	330f      	adds	r3, #15
 8001704:	111b      	asrs	r3, r3, #4
 8001706:	b21a      	sxth	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	2b00      	cmp	r3, #0
 8001712:	da00      	bge.n	8001716 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8001714:	330f      	adds	r3, #15
 8001716:	111b      	asrs	r3, r3, #4
 8001718:	b21a      	sxth	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800171e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da00      	bge.n	8001728 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8001726:	330f      	adds	r3, #15
 8001728:	111b      	asrs	r3, r3, #4
 800172a:	b21a      	sxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	809a      	strh	r2, [r3, #4]
      break;
 8001730:	e01f      	b.n	8001772 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	da00      	bge.n	800173c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800173a:	3303      	adds	r3, #3
 800173c:	109b      	asrs	r3, r3, #2
 800173e:	b21a      	sxth	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da00      	bge.n	800174e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800174c:	3303      	adds	r3, #3
 800174e:	109b      	asrs	r3, r3, #2
 8001750:	b21a      	sxth	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001756:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175a:	2b00      	cmp	r3, #0
 800175c:	da00      	bge.n	8001760 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800175e:	3303      	adds	r3, #3
 8001760:	109b      	asrs	r3, r3, #2
 8001762:	b21a      	sxth	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	809a      	strh	r2, [r3, #4]
      break;
 8001768:	e003      	b.n	8001772 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	617b      	str	r3, [r7, #20]
      break;
 8001770:	bf00      	nop
  }

  return ret;
 8001772:	697b      	ldr	r3, [r7, #20]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff70 	bl	8001678 <LIS2DW12_ACC_GetAxesRaw>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e03c      	b.n	800181e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fc9c 	bl	80010e8 <LIS2DW12_ACC_GetSensitivity>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e030      	b.n	800181e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80017bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d4:	ee17 2a90 	vmov	r2, s15
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80017dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f4:	ee17 2a90 	vmov	r2, s15
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80017fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001808:	edd7 7a03 	vldr	s15, [r7, #12]
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	ee17 2a90 	vmov	r2, s15
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	4613      	mov	r3, r2
 8001834:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f103 0020 	add.w	r0, r3, #32
 800183c:	1cba      	adds	r2, r7, #2
 800183e:	78f9      	ldrb	r1, [r7, #3]
 8001840:	2301      	movs	r3, #1
 8001842:	f000 fa07 	bl	8001c54 <lis2dw12_write_reg>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e000      	b.n	8001854 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	ed87 0a02 	vstr	s0, [r7, #8]
 8001868:	460b      	mov	r3, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3b01      	subs	r3, #1
 8001874:	2b03      	cmp	r3, #3
 8001876:	d80b      	bhi.n	8001890 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001878:	a201      	add	r2, pc, #4	@ (adr r2, 8001880 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018bd 	.word	0x080018bd
 8001884:	080018e9 	.word	0x080018e9
 8001888:	08001915 	.word	0x08001915
 800188c:	08001941 	.word	0x08001941
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001896:	2304      	movs	r3, #4
 8001898:	75fb      	strb	r3, [r7, #23]
          break;
 800189a:	e002      	b.n	80018a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800189c:	2314      	movs	r3, #20
 800189e:	75fb      	strb	r3, [r7, #23]
          break;
 80018a0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80018a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80018aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	d400      	bmi.n	80018b6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80018b4:	e05a      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80018b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80018b8:	60bb      	str	r3, [r7, #8]
      break;
 80018ba:	e057      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d002      	beq.n	80018c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80018c2:	2303      	movs	r3, #3
 80018c4:	75fb      	strb	r3, [r7, #23]
          break;
 80018c6:	e002      	b.n	80018ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80018c8:	2313      	movs	r3, #19
 80018ca:	75fb      	strb	r3, [r7, #23]
          break;
 80018cc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80018ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	dc00      	bgt.n	80018e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80018e0:	e044      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80018e2:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80018e4:	60bb      	str	r3, [r7, #8]
      break;
 80018e6:	e041      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d002      	beq.n	80018f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80018ee:	2302      	movs	r3, #2
 80018f0:	75fb      	strb	r3, [r7, #23]
          break;
 80018f2:	e002      	b.n	80018fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80018f4:	2312      	movs	r3, #18
 80018f6:	75fb      	strb	r3, [r7, #23]
          break;
 80018f8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80018fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80018fe:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dc00      	bgt.n	800190e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800190c:	e02e      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800190e:	4b5b      	ldr	r3, [pc, #364]	@ (8001a7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001910:	60bb      	str	r3, [r7, #8]
      break;
 8001912:	e02b      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800191a:	2301      	movs	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
          break;
 800191e:	e002      	b.n	8001926 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001920:	2311      	movs	r3, #17
 8001922:	75fb      	strb	r3, [r7, #23]
          break;
 8001924:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001926:	edd7 7a02 	vldr	s15, [r7, #8]
 800192a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dc00      	bgt.n	800193a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001938:	e018      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800193a:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800193c:	60bb      	str	r3, [r7, #8]
      break;
 800193e:	e015      	b.n	800196c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d002      	beq.n	800194c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
          break;
 800194a:	e002      	b.n	8001952 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800194c:	2310      	movs	r3, #16
 800194e:	75fb      	strb	r3, [r7, #23]
          break;
 8001950:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001952:	edd7 7a02 	vldr	s15, [r7, #8]
 8001956:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dc00      	bgt.n	8001966 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001964:	e001      	b.n	800196a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001968:	60bb      	str	r3, [r7, #8]
      break;
 800196a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001a80 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d801      	bhi.n	8001982 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800197e:	2301      	movs	r3, #1
 8001980:	e04d      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001982:	edd7 7a02 	vldr	s15, [r7, #8]
 8001986:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800198a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	d801      	bhi.n	8001998 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001994:	2302      	movs	r3, #2
 8001996:	e042      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001998:	edd7 7a02 	vldr	s15, [r7, #8]
 800199c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80019a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	d801      	bhi.n	80019ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e037      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80019ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80019b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d801      	bhi.n	80019c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e02c      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80019c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d801      	bhi.n	80019da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e021      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80019da:	edd7 7a02 	vldr	s15, [r7, #8]
 80019de:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d801      	bhi.n	80019f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80019ec:	2306      	movs	r3, #6
 80019ee:	e016      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80019f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001a8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80019f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d801      	bhi.n	8001a06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001a02:	2307      	movs	r3, #7
 8001a04:	e00b      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001a90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d801      	bhi.n	8001a1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001a18:	2308      	movs	r3, #8
 8001a1a:	e000      	b.n	8001a1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001a1c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001a1e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3320      	adds	r3, #32
 8001a24:	7dba      	ldrb	r2, [r7, #22]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fa33 	bl	8001e94 <lis2dw12_data_rate_set>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e018      	b.n	8001a6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	7dfa      	ldrb	r2, [r7, #23]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f91e 	bl	8001c84 <lis2dw12_power_mode_set>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e00b      	b.n	8001a6c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	79ba      	ldrb	r2, [r7, #6]
 8001a66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	41480000 	.word	0x41480000
 8001a78:	43480000 	.word	0x43480000
 8001a7c:	43480000 	.word	0x43480000
 8001a80:	3fcccccd 	.word	0x3fcccccd
 8001a84:	42480000 	.word	0x42480000
 8001a88:	42c80000 	.word	0x42c80000
 8001a8c:	43c80000 	.word	0x43c80000
 8001a90:	44480000 	.word	0x44480000

08001a94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	79ba      	ldrb	r2, [r7, #6]
 8001ab4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001b7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	d801      	bhi.n	8001ace <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001aca:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001acc:	e04d      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d801      	bhi.n	8001ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001ae2:	e042      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d801      	bhi.n	8001afa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001af8:	e037      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001afe:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b8c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d801      	bhi.n	8001b10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001b0e:	e02c      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001b10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b14:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001b94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d801      	bhi.n	8001b26 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001b24:	e021      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001b26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b9c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	d801      	bhi.n	8001b3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001b3a:	e016      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b40:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001ba4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d801      	bhi.n	8001b52 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001b50:	e00b      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001b52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b56:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001bac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d801      	bhi.n	8001b68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001b66:	e000      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	3fcccccd 	.word	0x3fcccccd
 8001b80:	3fcccccd 	.word	0x3fcccccd
 8001b84:	41480000 	.word	0x41480000
 8001b88:	41c80000 	.word	0x41c80000
 8001b8c:	42480000 	.word	0x42480000
 8001b90:	42480000 	.word	0x42480000
 8001b94:	42c80000 	.word	0x42c80000
 8001b98:	42c80000 	.word	0x42c80000
 8001b9c:	43480000 	.word	0x43480000
 8001ba0:	43480000 	.word	0x43480000
 8001ba4:	43c80000 	.word	0x43c80000
 8001ba8:	43c80000 	.word	0x43c80000
 8001bac:	44480000 	.word	0x44480000
 8001bb0:	44480000 	.word	0x44480000
 8001bb4:	44c80000 	.word	0x44c80000

08001bb8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	72fb      	strb	r3, [r7, #11]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	695c      	ldr	r4, [r3, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	893b      	ldrh	r3, [r7, #8]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	47a0      	blx	r4
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}

08001bee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	72fb      	strb	r3, [r7, #11]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	691c      	ldr	r4, [r3, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	7b1b      	ldrb	r3, [r3, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	b299      	uxth	r1, r3
 8001c14:	893b      	ldrh	r3, [r7, #8]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	47a0      	blx	r4
 8001c1a:	4603      	mov	r3, r0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}

08001c24 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	72fb      	strb	r3, [r7, #11]
 8001c34:	4613      	mov	r3, r2
 8001c36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685c      	ldr	r4, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68d8      	ldr	r0, [r3, #12]
 8001c40:	893b      	ldrh	r3, [r7, #8]
 8001c42:	7af9      	ldrb	r1, [r7, #11]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	47a0      	blx	r4
 8001c48:	6178      	str	r0, [r7, #20]

  return ret;
 8001c4a:	697b      	ldr	r3, [r7, #20]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	4613      	mov	r3, r2
 8001c66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68d8      	ldr	r0, [r3, #12]
 8001c70:	893b      	ldrh	r3, [r7, #8]
 8001c72:	7af9      	ldrb	r1, [r7, #11]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	47a0      	blx	r4
 8001c78:	6178      	str	r0, [r7, #20]

  return ret;
 8001c7a:	697b      	ldr	r3, [r7, #20]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001c90:	f107 0210 	add.w	r2, r7, #16
 8001c94:	2301      	movs	r3, #1
 8001c96:	2120      	movs	r1, #32
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffc3 	bl	8001c24 <lis2dw12_read_reg>
 8001c9e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	7c3b      	ldrb	r3, [r7, #16]
 8001cb2:	f362 0383 	bfi	r3, r2, #2, #2
 8001cb6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	7c3b      	ldrb	r3, [r7, #16]
 8001cc2:	f362 0301 	bfi	r3, r2, #0, #2
 8001cc6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001cc8:	f107 0210 	add.w	r2, r7, #16
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ffbf 	bl	8001c54 <lis2dw12_write_reg>
 8001cd6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001cde:	f107 020c 	add.w	r2, r7, #12
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	2125      	movs	r1, #37	@ 0x25
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff9c 	bl	8001c24 <lis2dw12_read_reg>
 8001cec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d110      	bne.n	8001d16 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	f362 0382 	bfi	r3, r2, #2, #1
 8001d04:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2125      	movs	r1, #37	@ 0x25
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa0 	bl	8001c54 <lis2dw12_write_reg>
 8001d14:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001d16:	697b      	ldr	r3, [r7, #20]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001d2a:	f107 0210 	add.w	r2, r7, #16
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2120      	movs	r1, #32
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff76 	bl	8001c24 <lis2dw12_read_reg>
 8001d38:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 80a3 	bne.w	8001e88 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001d42:	f107 020c 	add.w	r2, r7, #12
 8001d46:	2301      	movs	r3, #1
 8001d48:	2125      	movs	r1, #37	@ 0x25
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff6a 	bl	8001c24 <lis2dw12_read_reg>
 8001d50:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001d52:	7b3b      	ldrb	r3, [r7, #12]
 8001d54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	011a      	lsls	r2, r3, #4
 8001d5c:	7c3b      	ldrb	r3, [r7, #16]
 8001d5e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8001d68:	7c3a      	ldrb	r2, [r7, #16]
 8001d6a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001d6e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001d70:	4413      	add	r3, r2
 8001d72:	2b1b      	cmp	r3, #27
 8001d74:	f200 8084 	bhi.w	8001e80 <lis2dw12_power_mode_get+0x160>
 8001d78:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <lis2dw12_power_mode_get+0x60>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001e11 	.word	0x08001e11
 8001d84:	08001e09 	.word	0x08001e09
 8001d88:	08001e01 	.word	0x08001e01
 8001d8c:	08001df9 	.word	0x08001df9
 8001d90:	08001df1 	.word	0x08001df1
 8001d94:	08001e81 	.word	0x08001e81
 8001d98:	08001e81 	.word	0x08001e81
 8001d9c:	08001e81 	.word	0x08001e81
 8001da0:	08001e31 	.word	0x08001e31
 8001da4:	08001e29 	.word	0x08001e29
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e19 	.word	0x08001e19
 8001db0:	08001e81 	.word	0x08001e81
 8001db4:	08001e81 	.word	0x08001e81
 8001db8:	08001e81 	.word	0x08001e81
 8001dbc:	08001e81 	.word	0x08001e81
 8001dc0:	08001e59 	.word	0x08001e59
 8001dc4:	08001e51 	.word	0x08001e51
 8001dc8:	08001e49 	.word	0x08001e49
 8001dcc:	08001e41 	.word	0x08001e41
 8001dd0:	08001e39 	.word	0x08001e39
 8001dd4:	08001e81 	.word	0x08001e81
 8001dd8:	08001e81 	.word	0x08001e81
 8001ddc:	08001e81 	.word	0x08001e81
 8001de0:	08001e79 	.word	0x08001e79
 8001de4:	08001e71 	.word	0x08001e71
 8001de8:	08001e69 	.word	0x08001e69
 8001dec:	08001e61 	.word	0x08001e61
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	701a      	strb	r2, [r3, #0]
        break;
 8001df6:	e047      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	701a      	strb	r2, [r3, #0]
        break;
 8001dfe:	e043      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
        break;
 8001e06:	e03f      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
        break;
 8001e0e:	e03b      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
        break;
 8001e16:	e037      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	220b      	movs	r2, #11
 8001e1c:	701a      	strb	r2, [r3, #0]
        break;
 8001e1e:	e033      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	220a      	movs	r2, #10
 8001e24:	701a      	strb	r2, [r3, #0]
        break;
 8001e26:	e02f      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2209      	movs	r2, #9
 8001e2c:	701a      	strb	r2, [r3, #0]
        break;
 8001e2e:	e02b      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2208      	movs	r2, #8
 8001e34:	701a      	strb	r2, [r3, #0]
        break;
 8001e36:	e027      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2214      	movs	r2, #20
 8001e3c:	701a      	strb	r2, [r3, #0]
        break;
 8001e3e:	e023      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2213      	movs	r2, #19
 8001e44:	701a      	strb	r2, [r3, #0]
        break;
 8001e46:	e01f      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2212      	movs	r2, #18
 8001e4c:	701a      	strb	r2, [r3, #0]
        break;
 8001e4e:	e01b      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2211      	movs	r2, #17
 8001e54:	701a      	strb	r2, [r3, #0]
        break;
 8001e56:	e017      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	701a      	strb	r2, [r3, #0]
        break;
 8001e5e:	e013      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	221b      	movs	r2, #27
 8001e64:	701a      	strb	r2, [r3, #0]
        break;
 8001e66:	e00f      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	221a      	movs	r2, #26
 8001e6c:	701a      	strb	r2, [r3, #0]
        break;
 8001e6e:	e00b      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2219      	movs	r2, #25
 8001e74:	701a      	strb	r2, [r3, #0]
        break;
 8001e76:	e007      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2218      	movs	r2, #24
 8001e7c:	701a      	strb	r2, [r3, #0]
        break;
 8001e7e:	e003      	b.n	8001e88 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	701a      	strb	r2, [r3, #0]
        break;
 8001e86:	bf00      	nop
    }
  }

  return ret;
 8001e88:	697b      	ldr	r3, [r7, #20]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop

08001e94 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ea0:	f107 0210 	add.w	r2, r7, #16
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff febb 	bl	8001c24 <lis2dw12_read_reg>
 8001eae:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	7c3b      	ldrb	r3, [r7, #16]
 8001ec0:	f362 1307 	bfi	r3, r2, #4, #4
 8001ec4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ec6:	f107 0210 	add.w	r2, r7, #16
 8001eca:	2301      	movs	r3, #1
 8001ecc:	2120      	movs	r1, #32
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fec0 	bl	8001c54 <lis2dw12_write_reg>
 8001ed4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001edc:	f107 020c 	add.w	r2, r7, #12
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	2122      	movs	r1, #34	@ 0x22
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fe9d 	bl	8001c24 <lis2dw12_read_reg>
 8001eea:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d110      	bne.n	8001f14 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	7b3b      	ldrb	r3, [r7, #12]
 8001efe:	f362 0301 	bfi	r3, r2, #0, #2
 8001f02:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2122      	movs	r1, #34	@ 0x22
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fea1 	bl	8001c54 <lis2dw12_write_reg>
 8001f12:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001f14:	697b      	ldr	r3, [r7, #20]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f2a:	f107 0210 	add.w	r2, r7, #16
 8001f2e:	2301      	movs	r3, #1
 8001f30:	2120      	movs	r1, #32
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fe76 	bl	8001c24 <lis2dw12_read_reg>
 8001f38:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 80b3 	bne.w	80020a8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001f42:	f107 020c 	add.w	r2, r7, #12
 8001f46:	2301      	movs	r3, #1
 8001f48:	2122      	movs	r1, #34	@ 0x22
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fe6a 	bl	8001c24 <lis2dw12_read_reg>
 8001f50:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8001f52:	7b3b      	ldrb	r3, [r7, #12]
 8001f54:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	7c3a      	ldrb	r2, [r7, #16]
 8001f5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4413      	add	r3, r2
 8001f66:	2b32      	cmp	r3, #50	@ 0x32
 8001f68:	f200 809a 	bhi.w	80020a0 <lis2dw12_data_rate_get+0x180>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <lis2dw12_data_rate_get+0x54>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08002041 	.word	0x08002041
 8001f78:	08002049 	.word	0x08002049
 8001f7c:	08002051 	.word	0x08002051
 8001f80:	08002059 	.word	0x08002059
 8001f84:	08002061 	.word	0x08002061
 8001f88:	08002069 	.word	0x08002069
 8001f8c:	08002071 	.word	0x08002071
 8001f90:	08002079 	.word	0x08002079
 8001f94:	08002081 	.word	0x08002081
 8001f98:	08002089 	.word	0x08002089
 8001f9c:	080020a1 	.word	0x080020a1
 8001fa0:	080020a1 	.word	0x080020a1
 8001fa4:	080020a1 	.word	0x080020a1
 8001fa8:	080020a1 	.word	0x080020a1
 8001fac:	080020a1 	.word	0x080020a1
 8001fb0:	080020a1 	.word	0x080020a1
 8001fb4:	080020a1 	.word	0x080020a1
 8001fb8:	080020a1 	.word	0x080020a1
 8001fbc:	08002099 	.word	0x08002099
 8001fc0:	080020a1 	.word	0x080020a1
 8001fc4:	080020a1 	.word	0x080020a1
 8001fc8:	080020a1 	.word	0x080020a1
 8001fcc:	080020a1 	.word	0x080020a1
 8001fd0:	080020a1 	.word	0x080020a1
 8001fd4:	080020a1 	.word	0x080020a1
 8001fd8:	080020a1 	.word	0x080020a1
 8001fdc:	080020a1 	.word	0x080020a1
 8001fe0:	080020a1 	.word	0x080020a1
 8001fe4:	080020a1 	.word	0x080020a1
 8001fe8:	080020a1 	.word	0x080020a1
 8001fec:	080020a1 	.word	0x080020a1
 8001ff0:	080020a1 	.word	0x080020a1
 8001ff4:	080020a1 	.word	0x080020a1
 8001ff8:	080020a1 	.word	0x080020a1
 8001ffc:	080020a1 	.word	0x080020a1
 8002000:	080020a1 	.word	0x080020a1
 8002004:	080020a1 	.word	0x080020a1
 8002008:	080020a1 	.word	0x080020a1
 800200c:	080020a1 	.word	0x080020a1
 8002010:	080020a1 	.word	0x080020a1
 8002014:	080020a1 	.word	0x080020a1
 8002018:	080020a1 	.word	0x080020a1
 800201c:	080020a1 	.word	0x080020a1
 8002020:	080020a1 	.word	0x080020a1
 8002024:	080020a1 	.word	0x080020a1
 8002028:	080020a1 	.word	0x080020a1
 800202c:	080020a1 	.word	0x080020a1
 8002030:	080020a1 	.word	0x080020a1
 8002034:	080020a1 	.word	0x080020a1
 8002038:	080020a1 	.word	0x080020a1
 800203c:	08002091 	.word	0x08002091
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
        break;
 8002046:	e02f      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
        break;
 800204e:	e02b      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
        break;
 8002056:	e027      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2203      	movs	r2, #3
 800205c:	701a      	strb	r2, [r3, #0]
        break;
 800205e:	e023      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	701a      	strb	r2, [r3, #0]
        break;
 8002066:	e01f      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2205      	movs	r2, #5
 800206c:	701a      	strb	r2, [r3, #0]
        break;
 800206e:	e01b      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2206      	movs	r2, #6
 8002074:	701a      	strb	r2, [r3, #0]
        break;
 8002076:	e017      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2207      	movs	r2, #7
 800207c:	701a      	strb	r2, [r3, #0]
        break;
 800207e:	e013      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2208      	movs	r2, #8
 8002084:	701a      	strb	r2, [r3, #0]
        break;
 8002086:	e00f      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2209      	movs	r2, #9
 800208c:	701a      	strb	r2, [r3, #0]
        break;
 800208e:	e00b      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2232      	movs	r2, #50	@ 0x32
 8002094:	701a      	strb	r2, [r3, #0]
        break;
 8002096:	e007      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2212      	movs	r2, #18
 800209c:	701a      	strb	r2, [r3, #0]
        break;
 800209e:	e003      	b.n	80020a8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	bf00      	nop
    }
  }

  return ret;
 80020a8:	697b      	ldr	r3, [r7, #20]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop

080020b4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80020c0:	f107 0208 	add.w	r2, r7, #8
 80020c4:	2301      	movs	r3, #1
 80020c6:	2121      	movs	r1, #33	@ 0x21
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fdab 	bl	8001c24 <lis2dw12_read_reg>
 80020ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	7a3b      	ldrb	r3, [r7, #8]
 80020e0:	f362 03c3 	bfi	r3, r2, #3, #1
 80020e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80020e6:	f107 0208 	add.w	r2, r7, #8
 80020ea:	2301      	movs	r3, #1
 80020ec:	2121      	movs	r1, #33	@ 0x21
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fdb0 	bl	8001c54 <lis2dw12_write_reg>
 80020f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	2301      	movs	r3, #1
 8002112:	2125      	movs	r1, #37	@ 0x25
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fd85 	bl	8001c24 <lis2dw12_read_reg>
 800211a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10f      	bne.n	8002142 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	b2da      	uxtb	r2, r3
 800212a:	7a3b      	ldrb	r3, [r7, #8]
 800212c:	f362 1305 	bfi	r3, r2, #4, #2
 8002130:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002132:	f107 0208 	add.w	r2, r7, #8
 8002136:	2301      	movs	r3, #1
 8002138:	2125      	movs	r1, #37	@ 0x25
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fd8a 	bl	8001c54 <lis2dw12_write_reg>
 8002140:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002156:	f107 0208 	add.w	r2, r7, #8
 800215a:	2301      	movs	r3, #1
 800215c:	2125      	movs	r1, #37	@ 0x25
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fd60 	bl	8001c24 <lis2dw12_read_reg>
 8002164:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002166:	7a3b      	ldrb	r3, [r7, #8]
 8002168:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d81a      	bhi.n	80021a8 <lis2dw12_full_scale_get+0x5c>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <lis2dw12_full_scale_get+0x2c>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	08002191 	.word	0x08002191
 8002180:	08002199 	.word	0x08002199
 8002184:	080021a1 	.word	0x080021a1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
      break;
 800218e:	e00f      	b.n	80021b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	e00b      	b.n	80021b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
      break;
 800219e:	e007      	b.n	80021b0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2203      	movs	r2, #3
 80021a4:	701a      	strb	r2, [r3, #0]
      break;
 80021a6:	e003      	b.n	80021b0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
      break;
 80021ae:	bf00      	nop
  }

  return ret;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop

080021bc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	2306      	movs	r3, #6
 80021cc:	2128      	movs	r1, #40	@ 0x28
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fd28 	bl	8001c24 <lis2dw12_read_reg>
 80021d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80021d6:	7b7b      	ldrb	r3, [r7, #13]
 80021d8:	b21a      	sxth	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	7b3a      	ldrb	r2, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	3302      	adds	r3, #2
 80021fc:	b212      	sxth	r2, r2
 80021fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3302      	adds	r3, #2
 8002204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002208:	b29b      	uxth	r3, r3
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	7bba      	ldrb	r2, [r7, #14]
 8002210:	4413      	add	r3, r2
 8002212:	b29a      	uxth	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3302      	adds	r3, #2
 8002218:	b212      	sxth	r2, r2
 800221a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800221c:	7c7a      	ldrb	r2, [r7, #17]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3304      	adds	r3, #4
 8002222:	b212      	sxth	r2, r2
 8002224:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3304      	adds	r3, #4
 800222a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222e:	b29b      	uxth	r3, r3
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b29b      	uxth	r3, r3
 8002234:	7c3a      	ldrb	r2, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	b29a      	uxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3304      	adds	r3, #4
 800223e:	b212      	sxth	r2, r2
 8002240:	801a      	strh	r2, [r3, #0]

  return ret;
 8002242:	697b      	ldr	r3, [r7, #20]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002256:	2301      	movs	r3, #1
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	210f      	movs	r1, #15
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fce1 	bl	8001c24 <lis2dw12_read_reg>
 8002262:	60f8      	str	r0, [r7, #12]

  return ret;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800227a:	f107 0208 	add.w	r2, r7, #8
 800227e:	2301      	movs	r3, #1
 8002280:	2121      	movs	r1, #33	@ 0x21
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fcce 	bl	8001c24 <lis2dw12_read_reg>
 8002288:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	7a3b      	ldrb	r3, [r7, #8]
 800229a:	f362 0382 	bfi	r3, r2, #2, #1
 800229e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80022a0:	f107 0208 	add.w	r2, r7, #8
 80022a4:	2301      	movs	r3, #1
 80022a6:	2121      	movs	r1, #33	@ 0x21
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fcd3 	bl	8001c54 <lis2dw12_write_reg>
 80022ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80022c6:	f107 0208 	add.w	r2, r7, #8
 80022ca:	2301      	movs	r3, #1
 80022cc:	212e      	movs	r1, #46	@ 0x2e
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fca8 	bl	8001c24 <lis2dw12_read_reg>
 80022d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10f      	bne.n	80022fc <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	7a3b      	ldrb	r3, [r7, #8]
 80022e6:	f362 1347 	bfi	r3, r2, #5, #3
 80022ea:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80022ec:	f107 0208 	add.w	r2, r7, #8
 80022f0:	2301      	movs	r3, #1
 80022f2:	212e      	movs	r1, #46	@ 0x2e
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fcad 	bl	8001c54 <lis2dw12_write_reg>
 80022fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d103      	bne.n	8002324 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e067      	b.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	7b1a      	ldrb	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a28      	ldr	r2, [pc, #160]	@ (8002400 <LIS2MDL_RegisterBusIO+0xf8>)
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <LIS2MDL_RegisterBusIO+0xfc>)
 8002366:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e036      	b.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4798      	blx	r3
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e02c      	b.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d123      	bne.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10d      	bne.n	80023d0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80023b4:	2334      	movs	r3, #52	@ 0x34
 80023b6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	461a      	mov	r2, r3
 80023bc:	2162      	movs	r1, #98	@ 0x62
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fb18 	bl	80029f4 <LIS2MDL_Write_Reg>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d014      	beq.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e012      	b.n	80023f6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d101      	bne.n	80023dc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	e00c      	b.n	80023f6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3320      	adds	r3, #32
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 ff69 	bl	80032ba <lis2mdl_i2c_interface_set>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e000      	b.n	80023f6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002a4b 	.word	0x08002a4b
 8002404:	08002acd 	.word	0x08002acd

08002408 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d144      	bne.n	80024a2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	2301      	movs	r3, #1
 800241e:	2162      	movs	r1, #98	@ 0x62
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fb94 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	e06c      	b.n	800250c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002432:	f107 020c 	add.w	r2, r7, #12
 8002436:	2301      	movs	r3, #1
 8002438:	2160      	movs	r1, #96	@ 0x60
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fb87 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e05f      	b.n	800250c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800244c:	7a3b      	ldrb	r3, [r7, #8]
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8002454:	7a3b      	ldrb	r3, [r7, #8]
 8002456:	f36f 0341 	bfc	r3, #1, #1
 800245a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800245c:	7b3b      	ldrb	r3, [r7, #12]
 800245e:	2202      	movs	r2, #2
 8002460:	f362 0301 	bfi	r3, r2, #0, #2
 8002464:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8002466:	7b3b      	ldrb	r3, [r7, #12]
 8002468:	f043 030c 	orr.w	r3, r3, #12
 800246c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800246e:	f107 0208 	add.w	r2, r7, #8
 8002472:	2301      	movs	r3, #1
 8002474:	2162      	movs	r1, #98	@ 0x62
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fca8 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e041      	b.n	800250c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002488:	f107 020c 	add.w	r2, r7, #12
 800248c:	2301      	movs	r3, #1
 800248e:	2160      	movs	r1, #96	@ 0x60
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fc9b 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d032      	beq.n	8002502 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	e034      	b.n	800250c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3320      	adds	r3, #32
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fe61 	bl	8003170 <lis2mdl_block_data_update_set>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	e028      	b.n	800250c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3320      	adds	r3, #32
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fdd1 	bl	8003068 <lis2mdl_operating_mode_set>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	e01c      	b.n	800250c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3320      	adds	r3, #32
 80024d6:	2103      	movs	r1, #3
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fdeb 	bl	80030b4 <lis2mdl_data_rate_set>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	e010      	b.n	800250c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3320      	adds	r3, #32
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 febc 	bl	800326e <lis2mdl_self_test_set>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	e004      	b.n	800250c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8a5 	bl	800266c <LIS2MDL_MAG_Disable>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	e004      	b.n	8002538 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d10b      	bne.n	800256a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002552:	2301      	movs	r3, #1
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	214f      	movs	r1, #79	@ 0x4f
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 faf8 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
 8002568:	e00c      	b.n	8002584 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3320      	adds	r3, #32
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fe6b 	bl	800324c <lis2mdl_device_id_get>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	e000      	b.n	8002584 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2232      	movs	r2, #50	@ 0x32
 80025be:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <LIS2MDL_GetCapabilities+0x58>)
 80025d4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	42c80000 	.word	0x42c80000

080025e8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e032      	b.n	8002664 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d11d      	bne.n	8002642 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002606:	f107 020c 	add.w	r2, r7, #12
 800260a:	2301      	movs	r3, #1
 800260c:	2160      	movs	r1, #96	@ 0x60
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa9d 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e021      	b.n	8002664 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002620:	7b3b      	ldrb	r3, [r7, #12]
 8002622:	f36f 0301 	bfc	r3, #0, #2
 8002626:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002628:	f107 020c 	add.w	r2, r7, #12
 800262c:	2301      	movs	r3, #1
 800262e:	2160      	movs	r1, #96	@ 0x60
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fbcb 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	e010      	b.n	8002664 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3320      	adds	r3, #32
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fd0d 	bl	8003068 <lis2mdl_operating_mode_set>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	e004      	b.n	8002664 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e033      	b.n	80026ea <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d11e      	bne.n	80026c8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800268a:	f107 020c 	add.w	r2, r7, #12
 800268e:	2301      	movs	r3, #1
 8002690:	2160      	movs	r1, #96	@ 0x60
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa5b 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e022      	b.n	80026ea <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80026a4:	7b3b      	ldrb	r3, [r7, #12]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f362 0301 	bfi	r3, r2, #0, #2
 80026ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026ae:	f107 020c 	add.w	r2, r7, #12
 80026b2:	2301      	movs	r3, #1
 80026b4:	2160      	movs	r1, #96	@ 0x60
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fb88 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e010      	b.n	80026ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3320      	adds	r3, #32
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fcca 	bl	8003068 <lis2mdl_operating_mode_set>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e004      	b.n	80026ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002702:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3320      	adds	r3, #32
 8002726:	f107 020b 	add.w	r2, r7, #11
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fce7 	bl	8003100 <lis2mdl_data_rate_get>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	e023      	b.n	8002786 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d81b      	bhi.n	800277c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002744:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	08002765 	.word	0x08002765
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002775 	.word	0x08002775
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002760:	601a      	str	r2, [r3, #0]
      break;
 8002762:	e00f      	b.n	8002784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002768:	601a      	str	r2, [r3, #0]
      break;
 800276a:	e00b      	b.n	8002784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002770:	601a      	str	r2, [r3, #0]
      break;
 8002772:	e007      	b.n	8002784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002778:	601a      	str	r2, [r3, #0]
      break;
 800277a:	e003      	b.n	8002784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	60fb      	str	r3, [r7, #12]
      break;
 8002782:	bf00      	nop
  }

  return ret;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	41200000 	.word	0x41200000
 8002794:	41a00000 	.word	0x41a00000
 8002798:	42480000 	.word	0x42480000
 800279c:	42c80000 	.word	0x42c80000

080027a0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80027ac:	edd7 7a00 	vldr	s15, [r7]
 80027b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80027b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	d801      	bhi.n	80027c2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80027be:	2300      	movs	r3, #0
 80027c0:	e016      	b.n	80027f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80027c2:	edd7 7a00 	vldr	s15, [r7]
 80027c6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80027ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	d801      	bhi.n	80027d8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e00b      	b.n	80027f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80027d8:	edd7 7a00 	vldr	s15, [r7]
 80027dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002864 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80027e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	d801      	bhi.n	80027ee <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e000      	b.n	80027f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80027ee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80027f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d121      	bne.n	800283e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027fa:	f107 020c 	add.w	r2, r7, #12
 80027fe:	2301      	movs	r3, #1
 8002800:	2160      	movs	r1, #96	@ 0x60
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f9a3 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e022      	b.n	800285a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	f362 0383 	bfi	r3, r2, #2, #2
 8002822:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002824:	f107 020c 	add.w	r2, r7, #12
 8002828:	2301      	movs	r3, #1
 800282a:	2160      	movs	r1, #96	@ 0x60
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 facd 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00f      	beq.n	8002858 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	e00d      	b.n	800285a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3320      	adds	r3, #32
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fc34 	bl	80030b4 <lis2mdl_data_rate_set>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e000      	b.n	800285a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	42480000 	.word	0x42480000

08002868 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2232      	movs	r2, #50	@ 0x32
 8002876:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3320      	adds	r3, #32
 80028ac:	f107 0208 	add.w	r2, r7, #8
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fc82 	bl	80031bc <lis2mdl_magnetic_raw_get>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e00c      	b.n	80028de <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80028c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80028cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80028d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d134      	bne.n	8002962 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80028f8:	f107 0218 	add.w	r2, r7, #24
 80028fc:	2306      	movs	r3, #6
 80028fe:	2168      	movs	r1, #104	@ 0x68
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f924 	bl	8002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	e06c      	b.n	80029ec <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002912:	7e7b      	ldrb	r3, [r7, #25]
 8002914:	b21b      	sxth	r3, r3
 8002916:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002918:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800291c:	b29b      	uxth	r3, r3
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	7e3a      	ldrb	r2, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	b21b      	sxth	r3, r3
 800292a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800292c:	7efb      	ldrb	r3, [r7, #27]
 800292e:	b21b      	sxth	r3, r3
 8002930:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002932:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002936:	b29b      	uxth	r3, r3
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b29b      	uxth	r3, r3
 800293c:	7eba      	ldrb	r2, [r7, #26]
 800293e:	4413      	add	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	b21b      	sxth	r3, r3
 8002944:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002946:	7f7b      	ldrb	r3, [r7, #29]
 8002948:	b21b      	sxth	r3, r3
 800294a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800294c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002950:	b29b      	uxth	r3, r3
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b29b      	uxth	r3, r3
 8002956:	7f3a      	ldrb	r2, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	b21b      	sxth	r3, r3
 800295e:	82bb      	strh	r3, [r7, #20]
 8002960:	e00d      	b.n	800297e <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3320      	adds	r3, #32
 8002966:	f107 0210 	add.w	r2, r7, #16
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fc25 	bl	80031bc <lis2mdl_magnetic_raw_get>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	e036      	b.n	80029ec <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff feb4 	bl	80026f2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800298a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002996:	edd7 7a03 	vldr	s15, [r7, #12]
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a2:	ee17 2a90 	vmov	r2, s15
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80029aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c2:	ee17 2a90 	vmov	r2, s15
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80029ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e2:	ee17 2a90 	vmov	r2, s15
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
 8002a00:	4613      	mov	r3, r2
 8002a02:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d10b      	bne.n	8002a24 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002a0c:	1cba      	adds	r2, r7, #2
 8002a0e:	78f9      	ldrb	r1, [r7, #3]
 8002a10:	2301      	movs	r3, #1
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9da 	bl	8002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e00e      	b.n	8002a42 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f103 0020 	add.w	r0, r3, #32
 8002a2a:	1cba      	adds	r2, r7, #2
 8002a2c:	78f9      	ldrb	r1, [r7, #3]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f000 fb02 	bl	8003038 <lis2mdl_write_reg>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e000      	b.n	8002a42 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002a4a:	b590      	push	{r4, r7, lr}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	460b      	mov	r3, r1
 8002a58:	72fb      	strb	r3, [r7, #11]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	695c      	ldr	r4, [r3, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	7b1b      	ldrb	r3, [r3, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	47a0      	blx	r4
 8002a84:	4603      	mov	r3, r0
 8002a86:	e01d      	b.n	8002ac4 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d10b      	bne.n	8002aa8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	695c      	ldr	r4, [r3, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	7b1b      	ldrb	r3, [r3, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	47a0      	blx	r4
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	e00d      	b.n	8002ac4 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	695c      	ldr	r4, [r3, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4619      	mov	r1, r3
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	47a0      	blx	r4
 8002ac2:	4603      	mov	r3, r0
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}

08002acc <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	72fb      	strb	r3, [r7, #11]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10e      	bne.n	8002b0a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	691c      	ldr	r4, [r3, #16]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	7b1b      	ldrb	r3, [r3, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	47a0      	blx	r4
 8002b06:	4603      	mov	r3, r0
 8002b08:	e01d      	b.n	8002b46 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d10b      	bne.n	8002b2a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	691c      	ldr	r4, [r3, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	7b1b      	ldrb	r3, [r3, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	b299      	uxth	r1, r3
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	47a0      	blx	r4
 8002b26:	4603      	mov	r3, r0
 8002b28:	e00d      	b.n	8002b46 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	691c      	ldr	r4, [r3, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	7b1b      	ldrb	r3, [r3, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	7afb      	ldrb	r3, [r7, #11]
 8002b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	47a0      	blx	r4
 8002b44:	4603      	mov	r3, r0
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}

08002b4e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08c      	sub	sp, #48	@ 0x30
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	72fb      	strb	r3, [r7, #11]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002b68:	2340      	movs	r3, #64	@ 0x40
 8002b6a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002b74:	233d      	movs	r3, #61	@ 0x3d
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002b78:	2315      	movs	r3, #21
 8002b7a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002b7e:	2316      	movs	r3, #22
 8002b80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8002b84:	2317      	movs	r3, #23
 8002b86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8002b8a:	2314      	movs	r3, #20
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002b90:	2344      	movs	r3, #68	@ 0x44
 8002b92:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002b9a:	2339      	movs	r3, #57	@ 0x39
 8002b9c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002ba6:	2329      	movs	r3, #41	@ 0x29
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002bac:	231e      	movs	r3, #30
 8002bae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f103 0020 	add.w	r0, r3, #32
 8002bd6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002bda:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002bde:	2301      	movs	r3, #1
 8002be0:	f000 fa2a 	bl	8003038 <lis2mdl_write_reg>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e0e9      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f103 0020 	add.w	r0, r3, #32
 8002bf6:	f107 021f 	add.w	r2, r7, #31
 8002bfa:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 fa1a 	bl	8003038 <lis2mdl_write_reg>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e0d9      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f103 0020 	add.w	r0, r3, #32
 8002c16:	f107 020b 	add.w	r2, r7, #11
 8002c1a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f000 fa0a 	bl	8003038 <lis2mdl_write_reg>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e0c9      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f103 0020 	add.w	r0, r3, #32
 8002c36:	f107 021d 	add.w	r2, r7, #29
 8002c3a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f000 f9fa 	bl	8003038 <lis2mdl_write_reg>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e0b9      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f103 0020 	add.w	r0, r3, #32
 8002c56:	f107 021e 	add.w	r2, r7, #30
 8002c5a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f000 f9ea 	bl	8003038 <lis2mdl_write_reg>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	e0a9      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f103 0020 	add.w	r0, r3, #32
 8002c76:	f107 0220 	add.w	r2, r7, #32
 8002c7a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f000 f9da 	bl	8003038 <lis2mdl_write_reg>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e099      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f103 0020 	add.w	r0, r3, #32
 8002c96:	f107 021c 	add.w	r2, r7, #28
 8002c9a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 f9b2 	bl	8003008 <lis2mdl_read_reg>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e089      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002cb0:	7f3b      	ldrb	r3, [r7, #28]
 8002cb2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d102      	bne.n	8002cc0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002cba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002cbe:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f103 0020 	add.w	r0, r3, #32
 8002cc6:	f107 021c 	add.w	r2, r7, #28
 8002cca:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f000 f9b2 	bl	8003038 <lis2mdl_write_reg>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e071      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f103 0020 	add.w	r0, r3, #32
 8002ce6:	f107 0214 	add.w	r2, r7, #20
 8002cea:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002cee:	2306      	movs	r3, #6
 8002cf0:	f000 f98a 	bl	8003008 <lis2mdl_read_reg>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e061      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f103 0020 	add.w	r0, r3, #32
 8002d06:	f107 021b 	add.w	r2, r7, #27
 8002d0a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f000 f97a 	bl	8003008 <lis2mdl_read_reg>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e051      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8002d20:	7efa      	ldrb	r2, [r7, #27]
 8002d22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002d26:	4013      	ands	r3, r2
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1e6      	bne.n	8002d00 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f103 0020 	add.w	r0, r3, #32
 8002d38:	f107 021b 	add.w	r2, r7, #27
 8002d3c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8002d40:	2301      	movs	r3, #1
 8002d42:	f000 f961 	bl	8003008 <lis2mdl_read_reg>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d50:	e038      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002d52:	7efa      	ldrb	r2, [r7, #27]
 8002d54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1e6      	bne.n	8002d32 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f103 0020 	add.w	r0, r3, #32
 8002d6a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002d6e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002d72:	2301      	movs	r3, #1
 8002d74:	f000 f960 	bl	8003038 <lis2mdl_write_reg>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e01f      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f103 0020 	add.w	r0, r3, #32
 8002d8a:	893b      	ldrh	r3, [r7, #8]
 8002d8c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	f000 f939 	bl	8003008 <lis2mdl_read_reg>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	e010      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f103 0020 	add.w	r0, r3, #32
 8002da8:	f107 0220 	add.w	r2, r7, #32
 8002dac:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002db0:	2301      	movs	r3, #1
 8002db2:	f000 f941 	bl	8003038 <lis2mdl_write_reg>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc0:	e000      	b.n	8002dc4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3730      	adds	r7, #48	@ 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	@ 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002de6:	2340      	movs	r3, #64	@ 0x40
 8002de8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8002df2:	233c      	movs	r3, #60	@ 0x3c
 8002df4:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002df6:	2315      	movs	r3, #21
 8002df8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002dfc:	2316      	movs	r3, #22
 8002dfe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8002e02:	2317      	movs	r3, #23
 8002e04:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8002e0c:	2314      	movs	r3, #20
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002e12:	2344      	movs	r3, #68	@ 0x44
 8002e14:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8002e16:	2339      	movs	r3, #57	@ 0x39
 8002e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002e22:	2329      	movs	r3, #41	@ 0x29
 8002e24:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002e28:	231e      	movs	r3, #30
 8002e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002e34:	2310      	movs	r3, #16
 8002e36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002e40:	2340      	movs	r3, #64	@ 0x40
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8002e46:	230e      	movs	r3, #14
 8002e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f103 0020 	add.w	r0, r3, #32
 8002e52:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8002e56:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f000 f8ec 	bl	8003038 <lis2mdl_write_reg>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e0c9      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f103 0020 	add.w	r0, r3, #32
 8002e72:	f107 021f 	add.w	r2, r7, #31
 8002e76:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f000 f8dc 	bl	8003038 <lis2mdl_write_reg>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e0b9      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f103 0020 	add.w	r0, r3, #32
 8002e92:	f107 020b 	add.w	r2, r7, #11
 8002e96:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f000 f8cc 	bl	8003038 <lis2mdl_write_reg>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	e0a9      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f103 0020 	add.w	r0, r3, #32
 8002eb2:	f107 021e 	add.w	r2, r7, #30
 8002eb6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f000 f8bc 	bl	8003038 <lis2mdl_write_reg>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	e099      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f103 0020 	add.w	r0, r3, #32
 8002ed2:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	f000 f8ad 	bl	8003038 <lis2mdl_write_reg>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	e08a      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f103 0020 	add.w	r0, r3, #32
 8002ef0:	f107 021d 	add.w	r2, r7, #29
 8002ef4:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f000 f89d 	bl	8003038 <lis2mdl_write_reg>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	e07a      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f103 0020 	add.w	r0, r3, #32
 8002f10:	f107 0220 	add.w	r2, r7, #32
 8002f14:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f000 f88d 	bl	8003038 <lis2mdl_write_reg>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	e06a      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f103 0020 	add.w	r0, r3, #32
 8002f30:	f107 021c 	add.w	r2, r7, #28
 8002f34:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f000 f865 	bl	8003008 <lis2mdl_read_reg>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e05a      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002f4a:	7f3b      	ldrb	r3, [r7, #28]
 8002f4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d102      	bne.n	8002f5a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002f54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f58:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f103 0020 	add.w	r0, r3, #32
 8002f60:	f107 021c 	add.w	r2, r7, #28
 8002f64:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f000 f865 	bl	8003038 <lis2mdl_write_reg>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e042      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f103 0020 	add.w	r0, r3, #32
 8002f80:	f107 0214 	add.w	r2, r7, #20
 8002f84:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8002f88:	2306      	movs	r3, #6
 8002f8a:	f000 f83d 	bl	8003008 <lis2mdl_read_reg>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e032      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f103 0020 	add.w	r0, r3, #32
 8002fa0:	f107 021b 	add.w	r2, r7, #27
 8002fa4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f000 f82d 	bl	8003008 <lis2mdl_read_reg>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	e022      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8002fba:	7efa      	ldrb	r2, [r7, #27]
 8002fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1e6      	bne.n	8002f9a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f103 0020 	add.w	r0, r3, #32
 8002fd2:	f107 021b 	add.w	r2, r7, #27
 8002fd6:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f000 f814 	bl	8003008 <lis2mdl_read_reg>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e009      	b.n	8003000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8002fec:	7efa      	ldrb	r2, [r7, #27]
 8002fee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d1e6      	bne.n	8002fcc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3730      	adds	r7, #48	@ 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	460b      	mov	r3, r1
 8003016:	72fb      	strb	r3, [r7, #11]
 8003018:	4613      	mov	r3, r2
 800301a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685c      	ldr	r4, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68d8      	ldr	r0, [r3, #12]
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	7af9      	ldrb	r1, [r7, #11]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	47a0      	blx	r4
 800302c:	6178      	str	r0, [r7, #20]

  return ret;
 800302e:	697b      	ldr	r3, [r7, #20]
}
 8003030:	4618      	mov	r0, r3
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}

08003038 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	461a      	mov	r2, r3
 8003044:	460b      	mov	r3, r1
 8003046:	72fb      	strb	r3, [r7, #11]
 8003048:	4613      	mov	r3, r2
 800304a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681c      	ldr	r4, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68d8      	ldr	r0, [r3, #12]
 8003054:	893b      	ldrh	r3, [r7, #8]
 8003056:	7af9      	ldrb	r1, [r7, #11]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	47a0      	blx	r4
 800305c:	6178      	str	r0, [r7, #20]

  return ret;
 800305e:	697b      	ldr	r3, [r7, #20]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003074:	f107 0208 	add.w	r2, r7, #8
 8003078:	2301      	movs	r3, #1
 800307a:	2160      	movs	r1, #96	@ 0x60
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ffc3 	bl	8003008 <lis2mdl_read_reg>
 8003082:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	7a3b      	ldrb	r3, [r7, #8]
 8003094:	f362 0301 	bfi	r3, r2, #0, #2
 8003098:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800309a:	f107 0208 	add.w	r2, r7, #8
 800309e:	2301      	movs	r3, #1
 80030a0:	2160      	movs	r1, #96	@ 0x60
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffc8 	bl	8003038 <lis2mdl_write_reg>
 80030a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80030c0:	f107 0208 	add.w	r2, r7, #8
 80030c4:	2301      	movs	r3, #1
 80030c6:	2160      	movs	r1, #96	@ 0x60
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff9d 	bl	8003008 <lis2mdl_read_reg>
 80030ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	7a3b      	ldrb	r3, [r7, #8]
 80030e0:	f362 0383 	bfi	r3, r2, #2, #2
 80030e4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80030e6:	f107 0208 	add.w	r2, r7, #8
 80030ea:	2301      	movs	r3, #1
 80030ec:	2160      	movs	r1, #96	@ 0x60
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <lis2mdl_write_reg>
 80030f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800310a:	f107 0208 	add.w	r2, r7, #8
 800310e:	2301      	movs	r3, #1
 8003110:	2160      	movs	r1, #96	@ 0x60
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ff78 	bl	8003008 <lis2mdl_read_reg>
 8003118:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800311a:	7a3b      	ldrb	r3, [r7, #8]
 800311c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b03      	cmp	r3, #3
 8003124:	d81a      	bhi.n	800315c <lis2mdl_data_rate_get+0x5c>
 8003126:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <lis2mdl_data_rate_get+0x2c>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003145 	.word	0x08003145
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003155 	.word	0x08003155
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	e00f      	b.n	8003164 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00b      	b.n	8003164 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]
      break;
 8003152:	e007      	b.n	8003164 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2203      	movs	r2, #3
 8003158:	701a      	strb	r2, [r3, #0]
      break;
 800315a:	e003      	b.n	8003164 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
      break;
 8003162:	bf00      	nop
  }

  return ret;
 8003164:	68fb      	ldr	r3, [r7, #12]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop

08003170 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800317c:	f107 0208 	add.w	r2, r7, #8
 8003180:	2301      	movs	r3, #1
 8003182:	2162      	movs	r1, #98	@ 0x62
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff3f 	bl	8003008 <lis2mdl_read_reg>
 800318a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	7a3b      	ldrb	r3, [r7, #8]
 800319c:	f362 1304 	bfi	r3, r2, #4, #1
 80031a0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80031a2:	f107 0208 	add.w	r2, r7, #8
 80031a6:	2301      	movs	r3, #1
 80031a8:	2162      	movs	r1, #98	@ 0x62
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff44 	bl	8003038 <lis2mdl_write_reg>
 80031b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80031c6:	f107 020c 	add.w	r2, r7, #12
 80031ca:	2306      	movs	r3, #6
 80031cc:	2168      	movs	r1, #104	@ 0x68
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ff1a 	bl	8003008 <lis2mdl_read_reg>
 80031d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80031d6:	7b7b      	ldrb	r3, [r7, #13]
 80031d8:	b21a      	sxth	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	7b3a      	ldrb	r2, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	3302      	adds	r3, #2
 80031fc:	b212      	sxth	r2, r2
 80031fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3302      	adds	r3, #2
 8003204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003208:	b29b      	uxth	r3, r3
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	7bba      	ldrb	r2, [r7, #14]
 8003210:	4413      	add	r3, r2
 8003212:	b29a      	uxth	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	3302      	adds	r3, #2
 8003218:	b212      	sxth	r2, r2
 800321a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800321c:	7c7a      	ldrb	r2, [r7, #17]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3304      	adds	r3, #4
 8003222:	b212      	sxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	3304      	adds	r3, #4
 800322a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322e:	b29b      	uxth	r3, r3
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	b29b      	uxth	r3, r3
 8003234:	7c3a      	ldrb	r2, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	b29a      	uxth	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3304      	adds	r3, #4
 800323e:	b212      	sxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]

  return ret;
 8003242:	697b      	ldr	r3, [r7, #20]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8003256:	2301      	movs	r3, #1
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	214f      	movs	r1, #79	@ 0x4f
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fed3 	bl	8003008 <lis2mdl_read_reg>
 8003262:	60f8      	str	r0, [r7, #12]

  return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800327a:	f107 0208 	add.w	r2, r7, #8
 800327e:	2301      	movs	r3, #1
 8003280:	2162      	movs	r1, #98	@ 0x62
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fec0 	bl	8003008 <lis2mdl_read_reg>
 8003288:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	7a3b      	ldrb	r3, [r7, #8]
 800329a:	f362 0341 	bfi	r3, r2, #1, #1
 800329e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80032a0:	f107 0208 	add.w	r2, r7, #8
 80032a4:	2301      	movs	r3, #1
 80032a6:	2162      	movs	r1, #98	@ 0x62
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fec5 	bl	8003038 <lis2mdl_write_reg>
 80032ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80032c6:	f107 0208 	add.w	r2, r7, #8
 80032ca:	2301      	movs	r3, #1
 80032cc:	2162      	movs	r1, #98	@ 0x62
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fe9a 	bl	8003008 <lis2mdl_read_reg>
 80032d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10f      	bne.n	80032fc <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	7a3b      	ldrb	r3, [r7, #8]
 80032e6:	f362 1345 	bfi	r3, r2, #5, #1
 80032ea:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80032ec:	f107 0208 	add.w	r2, r7, #8
 80032f0:	2301      	movs	r3, #1
 80032f2:	2162      	movs	r1, #98	@ 0x62
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fe9f 	bl	8003038 <lis2mdl_write_reg>
 80032fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e051      	b.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7b1a      	ldrb	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <LSM6DSO_RegisterBusIO+0xcc>)
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1c      	ldr	r2, [pc, #112]	@ (80033d8 <LSM6DSO_RegisterBusIO+0xd0>)
 8003366:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e020      	b.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4798      	blx	r3
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e016      	b.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d112      	bne.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80033ac:	230c      	movs	r3, #12
 80033ae:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80033b0:	7afb      	ldrb	r3, [r7, #11]
 80033b2:	461a      	mov	r2, r3
 80033b4:	2112      	movs	r1, #18
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 ff5d 	bl	8004276 <LSM6DSO_Write_Reg>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08004719 	.word	0x08004719
 80033d8:	0800474f 	.word	0x0800474f

080033dc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d00b      	beq.n	8003404 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3320      	adds	r3, #32
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fe84 	bl	8005100 <lsm6dso_i3c_disable_set>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e060      	b.n	80034c6 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3320      	adds	r3, #32
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fe52 	bl	80050b4 <lsm6dso_auto_increment_set>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	e054      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3320      	adds	r3, #32
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fd62 	bl	8004eec <lsm6dso_block_data_update_set>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e048      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3320      	adds	r3, #32
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fea8 	bl	8005190 <lsm6dso_fifo_mode_set>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	e03c      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2204      	movs	r2, #4
 8003450:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3320      	adds	r3, #32
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fa20 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e02c      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3320      	adds	r3, #32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f001 f9b6 	bl	80047e4 <lsm6dso_xl_full_scale_set>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e020      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3320      	adds	r3, #32
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fbce 	bl	8004c34 <lsm6dso_gy_data_rate_set>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	e010      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3320      	adds	r3, #32
 80034a8:	2106      	movs	r1, #6
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fb5a 	bl	8004b64 <lsm6dso_gy_full_scale_set>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	e004      	b.n	80034c6 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f888 	bl	80035ec <LSM6DSO_ACC_Disable>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	e015      	b.n	8003514 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fc2e 	bl	8003d4a <LSM6DSO_GYRO_Disable>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	e00c      	b.n	8003514 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fdb0 	bl	8005092 <lsm6dso_device_id_get>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	e000      	b.n	8003540 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003570:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	4a07      	ldr	r2, [pc, #28]	@ (80035a0 <LSM6DSO_GetCapabilities+0x58>)
 8003582:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4a06      	ldr	r2, [pc, #24]	@ (80035a0 <LSM6DSO_GetCapabilities+0x58>)
 8003588:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	45d02000 	.word	0x45d02000

080035a4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e014      	b.n	80035e4 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f103 0220 	add.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f001 f969 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	e004      	b.n	80035e4 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e01f      	b.n	8003642 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f103 0220 	add.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3333      	adds	r3, #51	@ 0x33
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f001 fa40 	bl	8004a94 <lsm6dso_xl_data_rate_get>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e010      	b.n	8003642 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3320      	adds	r3, #32
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f93a 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003632:	f04f 33ff 	mov.w	r3, #4294967295
 8003636:	e004      	b.n	8003642 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	f107 020b 	add.w	r2, r7, #11
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f8e3 	bl	8004830 <lsm6dso_xl_full_scale_get>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	e023      	b.n	80036be <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d81b      	bhi.n	80036b4 <LSM6DSO_ACC_GetSensitivity+0x68>
 800367c:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036ad 	.word	0x080036ad
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a5 	.word	0x080036a5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003698:	601a      	str	r2, [r3, #0]
      break;
 800369a:	e00f      	b.n	80036bc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4a0b      	ldr	r2, [pc, #44]	@ (80036cc <LSM6DSO_ACC_GetSensitivity+0x80>)
 80036a0:	601a      	str	r2, [r3, #0]
      break;
 80036a2:	e00b      	b.n	80036bc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80036a8:	601a      	str	r2, [r3, #0]
      break;
 80036aa:	e007      	b.n	80036bc <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80036b0:	601a      	str	r2, [r3, #0]
      break;
 80036b2:	e003      	b.n	80036bc <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	60fb      	str	r3, [r7, #12]
      break;
 80036ba:	bf00      	nop
  }

  return ret;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	3d79db23 	.word	0x3d79db23
 80036cc:	3df9db23 	.word	0x3df9db23
 80036d0:	3e79db23 	.word	0x3e79db23
 80036d4:	3ef9db23 	.word	0x3ef9db23

080036d8 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3320      	adds	r3, #32
 80036ea:	f107 020b 	add.w	r2, r7, #11
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 f9cf 	bl	8004a94 <lsm6dso_xl_data_rate_get>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80036fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003700:	e054      	b.n	80037ac <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	2b0b      	cmp	r3, #11
 8003706:	d84c      	bhi.n	80037a2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003708:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003741 	.word	0x08003741
 8003714:	08003753 	.word	0x08003753
 8003718:	0800375b 	.word	0x0800375b
 800371c:	08003763 	.word	0x08003763
 8003720:	0800376b 	.word	0x0800376b
 8003724:	08003773 	.word	0x08003773
 8003728:	0800377b 	.word	0x0800377b
 800372c:	08003783 	.word	0x08003783
 8003730:	0800378b 	.word	0x0800378b
 8003734:	08003793 	.word	0x08003793
 8003738:	0800379b 	.word	0x0800379b
 800373c:	0800374b 	.word	0x0800374b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
      break;
 8003748:	e02f      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800374e:	601a      	str	r2, [r3, #0]
      break;
 8003750:	e02b      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	4a18      	ldr	r2, [pc, #96]	@ (80037b8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003756:	601a      	str	r2, [r3, #0]
      break;
 8003758:	e027      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800375e:	601a      	str	r2, [r3, #0]
      break;
 8003760:	e023      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	@ (80037c0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003766:	601a      	str	r2, [r3, #0]
      break;
 8003768:	e01f      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	4a15      	ldr	r2, [pc, #84]	@ (80037c4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800376e:	601a      	str	r2, [r3, #0]
      break;
 8003770:	e01b      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003776:	601a      	str	r2, [r3, #0]
      break;
 8003778:	e017      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4a13      	ldr	r2, [pc, #76]	@ (80037cc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 800377e:	601a      	str	r2, [r3, #0]
      break;
 8003780:	e013      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	4a12      	ldr	r2, [pc, #72]	@ (80037d0 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003786:	601a      	str	r2, [r3, #0]
      break;
 8003788:	e00f      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4a11      	ldr	r2, [pc, #68]	@ (80037d4 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 800378e:	601a      	str	r2, [r3, #0]
      break;
 8003790:	e00b      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003796:	601a      	str	r2, [r3, #0]
      break;
 8003798:	e007      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4a0f      	ldr	r2, [pc, #60]	@ (80037dc <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 800379e:	601a      	str	r2, [r3, #0]
      break;
 80037a0:	e003      	b.n	80037aa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	60fb      	str	r3, [r7, #12]
      break;
 80037a8:	bf00      	nop
  }

  return ret;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	3fcccccd 	.word	0x3fcccccd
 80037b8:	41480000 	.word	0x41480000
 80037bc:	41d00000 	.word	0x41d00000
 80037c0:	42500000 	.word	0x42500000
 80037c4:	42d00000 	.word	0x42d00000
 80037c8:	43500000 	.word	0x43500000
 80037cc:	43d08000 	.word	0x43d08000
 80037d0:	44504000 	.word	0x44504000
 80037d4:	44d06000 	.word	0x44d06000
 80037d8:	45505000 	.word	0x45505000
 80037dc:	45d05800 	.word	0x45d05800

080037e0 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80037ec:	2100      	movs	r1, #0
 80037ee:	ed97 0a00 	vldr	s0, [r7]
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f806 	bl	8003804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	@ 0x30
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003810:	460b      	mov	r3, r1
 8003812:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b02      	cmp	r3, #2
 8003820:	f000 80ea 	beq.w	80039f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003824:	2b02      	cmp	r3, #2
 8003826:	f300 8163 	bgt.w	8003af0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800382e:	2b01      	cmp	r3, #1
 8003830:	d074      	beq.n	800391c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003832:	e15d      	b.n	8003af0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f103 0020 	add.w	r0, r3, #32
 800383a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800383e:	2301      	movs	r3, #1
 8003840:	2114      	movs	r1, #20
 8003842:	f000 ff9f 	bl	8004784 <lsm6dso_read_reg>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
 8003850:	e16c      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003852:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003856:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d025      	beq.n	80038ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10b      	bne.n	8003882 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3320      	adds	r3, #32
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f815 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
 8003880:	e154      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003882:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003886:	f36f 13c7 	bfc	r3, #7, #1
 800388a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f103 0020 	add.w	r0, r3, #32
 8003894:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003898:	2301      	movs	r3, #1
 800389a:	2114      	movs	r1, #20
 800389c:	f000 ff8a 	bl	80047b4 <lsm6dso_write_reg>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e13f      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f103 0020 	add.w	r0, r3, #32
 80038b2:	f107 0220 	add.w	r2, r7, #32
 80038b6:	2301      	movs	r3, #1
 80038b8:	2115      	movs	r1, #21
 80038ba:	f000 ff63 	bl	8004784 <lsm6dso_read_reg>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e130      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80038ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d014      	beq.n	8003902 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80038d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038dc:	f36f 1304 	bfc	r3, #4, #1
 80038e0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f103 0020 	add.w	r0, r3, #32
 80038ea:	f107 0220 	add.w	r2, r7, #32
 80038ee:	2301      	movs	r3, #1
 80038f0:	2115      	movs	r1, #21
 80038f2:	f000 ff5f 	bl	80047b4 <lsm6dso_write_reg>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	e114      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003902:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003906:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800390a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	d400      	bmi.n	8003916 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003914:	e0f0      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003916:	4b87      	ldr	r3, [pc, #540]	@ (8003b34 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391a:	e0ed      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f103 0020 	add.w	r0, r3, #32
 8003922:	f107 021c 	add.w	r2, r7, #28
 8003926:	2301      	movs	r3, #1
 8003928:	2114      	movs	r1, #20
 800392a:	f000 ff2b 	bl	8004784 <lsm6dso_read_reg>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	e0f8      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800393a:	7f3b      	ldrb	r3, [r7, #28]
 800393c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d023      	beq.n	800398e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10b      	bne.n	8003968 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3320      	adds	r3, #32
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f000 ffa2 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	e0e1      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003968:	7f3b      	ldrb	r3, [r7, #28]
 800396a:	f36f 13c7 	bfc	r3, #7, #1
 800396e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f103 0020 	add.w	r0, r3, #32
 8003976:	f107 021c 	add.w	r2, r7, #28
 800397a:	2301      	movs	r3, #1
 800397c:	2114      	movs	r1, #20
 800397e:	f000 ff19 	bl	80047b4 <lsm6dso_write_reg>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e0ce      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f103 0020 	add.w	r0, r3, #32
 8003994:	f107 0218 	add.w	r2, r7, #24
 8003998:	2301      	movs	r3, #1
 800399a:	2115      	movs	r1, #21
 800399c:	f000 fef2 	bl	8004784 <lsm6dso_read_reg>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	e0bf      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80039ac:	7e3b      	ldrb	r3, [r7, #24]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d112      	bne.n	80039de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80039b8:	7e3b      	ldrb	r3, [r7, #24]
 80039ba:	f043 0310 	orr.w	r3, r3, #16
 80039be:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f103 0020 	add.w	r0, r3, #32
 80039c6:	f107 0218 	add.w	r2, r7, #24
 80039ca:	2301      	movs	r3, #1
 80039cc:	2115      	movs	r1, #21
 80039ce:	f000 fef1 	bl	80047b4 <lsm6dso_write_reg>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e0a6      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80039de:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039e2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 80039e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	dc00      	bgt.n	80039f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80039f0:	e082      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80039f2:	4b52      	ldr	r3, [pc, #328]	@ (8003b3c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f6:	e07f      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f103 0020 	add.w	r0, r3, #32
 80039fe:	f107 0210 	add.w	r2, r7, #16
 8003a02:	2301      	movs	r3, #1
 8003a04:	2115      	movs	r1, #21
 8003a06:	f000 febd 	bl	8004784 <lsm6dso_read_reg>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	e08a      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003a16:	7c3b      	ldrb	r3, [r7, #16]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003a22:	7c3b      	ldrb	r3, [r7, #16]
 8003a24:	f36f 1304 	bfc	r3, #4, #1
 8003a28:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f103 0020 	add.w	r0, r3, #32
 8003a30:	f107 0210 	add.w	r2, r7, #16
 8003a34:	2301      	movs	r3, #1
 8003a36:	2115      	movs	r1, #21
 8003a38:	f000 febc 	bl	80047b4 <lsm6dso_write_reg>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	e071      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f979 	bl	8003d4a <LSM6DSO_GYRO_Disable>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e063      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f103 0020 	add.w	r0, r3, #32
 8003a6a:	f107 0214 	add.w	r2, r7, #20
 8003a6e:	2301      	movs	r3, #1
 8003a70:	2114      	movs	r1, #20
 8003a72:	f000 fe87 	bl	8004784 <lsm6dso_read_reg>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e054      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003a82:	7d3b      	ldrb	r3, [r7, #20]
 8003a84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d123      	bne.n	8003ad6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10b      	bne.n	8003ab0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fefe 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	e03d      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003ab0:	7d3b      	ldrb	r3, [r7, #20]
 8003ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f103 0020 	add.w	r0, r3, #32
 8003abe:	f107 0214 	add.w	r2, r7, #20
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	2114      	movs	r1, #20
 8003ac6:	f000 fe75 	bl	80047b4 <lsm6dso_write_reg>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e02a      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003ad6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003ada:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003b38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dc00      	bgt.n	8003aea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003ae8:	e006      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003aea:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aee:	e003      	b.n	8003af8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8003af6:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	e012      	b.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003b10:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fbc9 	bl	80042ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003b1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003b1c:	e005      	b.n	8003b2a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003b1e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fc5a 	bl	80043dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003b28:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3730      	adds	r7, #48	@ 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	41480000 	.word	0x41480000
 8003b38:	43500000 	.word	0x43500000
 8003b3c:	43500000 	.word	0x43500000

08003b40 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3320      	adds	r3, #32
 8003b52:	f107 020b 	add.w	r2, r7, #11
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fe69 	bl	8004830 <lsm6dso_xl_full_scale_get>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	e023      	b.n	8003bb2 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d81b      	bhi.n	8003ba8 <LSM6DSO_ACC_GetFullScale+0x68>
 8003b70:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003b99 	.word	0x08003b99
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
      break;
 8003b8e:	e00f      	b.n	8003bb0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	601a      	str	r2, [r3, #0]
      break;
 8003b96:	e00b      	b.n	8003bb0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	601a      	str	r2, [r3, #0]
      break;
 8003b9e:	e007      	b.n	8003bb0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	601a      	str	r2, [r3, #0]
      break;
 8003ba6:	e003      	b.n	8003bb0 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	60fb      	str	r3, [r7, #12]
      break;
 8003bae:	bf00      	nop
  }

  return ret;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop

08003bbc <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	dd0b      	ble.n	8003be4 <LSM6DSO_ACC_SetFullScale+0x28>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	dd06      	ble.n	8003be0 <LSM6DSO_ACC_SetFullScale+0x24>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	dc01      	bgt.n	8003bdc <LSM6DSO_ACC_SetFullScale+0x20>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e004      	b.n	8003be6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e002      	b.n	8003be6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e000      	b.n	8003be6 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003be4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003be6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3320      	adds	r3, #32
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fdf7 	bl	80047e4 <lsm6dso_xl_full_scale_set>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	e000      	b.n	8003c04 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	f107 0208 	add.w	r2, r7, #8
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f9d1 	bl	8004fc8 <lsm6dso_acceleration_raw_get>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	e00c      	b.n	8003c4c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003c32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003c3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003c42:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3320      	adds	r3, #32
 8003c68:	f107 0210 	add.w	r2, r7, #16
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f9aa 	bl	8004fc8 <lsm6dso_acceleration_raw_get>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	e03c      	b.n	8003cfa <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fce0 	bl	800364c <LSM6DSO_ACC_GetSensitivity>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e030      	b.n	8003cfa <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003c98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cb0:	ee17 2a90 	vmov	r2, s15
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003cb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd0:	ee17 2a90 	vmov	r2, s15
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003cd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ce4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf0:	ee17 2a90 	vmov	r2, s15
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e014      	b.n	8003d42 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0220 	add.w	r2, r3, #32
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 ff84 	bl	8004c34 <lsm6dso_gy_data_rate_set>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	e004      	b.n	8003d42 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e01f      	b.n	8003da0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f103 0220 	add.w	r2, r3, #32
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3334      	adds	r3, #52	@ 0x34
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f001 f85b 	bl	8004e28 <lsm6dso_gy_data_rate_get>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	e010      	b.n	8003da0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3320      	adds	r3, #32
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ff55 	bl	8004c34 <lsm6dso_gy_data_rate_set>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
 8003d94:	e004      	b.n	8003da0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3320      	adds	r3, #32
 8003dba:	f107 020b 	add.w	r2, r7, #11
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fef5 	bl	8004bb0 <lsm6dso_gy_full_scale_get>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	e02d      	b.n	8003e2e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d825      	bhi.n	8003e24 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003dfd 	.word	0x08003dfd
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e25 	.word	0x08003e25
 8003df8:	08003e1d 	.word	0x08003e1d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8003e38 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8003e00:	601a      	str	r2, [r3, #0]
      break;
 8003e02:	e013      	b.n	8003e2c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8003e08:	601a      	str	r2, [r3, #0]
      break;
 8003e0a:	e00f      	b.n	8003e2c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8003e10:	601a      	str	r2, [r3, #0]
      break;
 8003e12:	e00b      	b.n	8003e2c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4a0b      	ldr	r2, [pc, #44]	@ (8003e44 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8003e18:	601a      	str	r2, [r3, #0]
      break;
 8003e1a:	e007      	b.n	8003e2c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8003e20:	601a      	str	r2, [r3, #0]
      break;
 8003e22:	e003      	b.n	8003e2c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	60fb      	str	r3, [r7, #12]
      break;
 8003e2a:	bf00      	nop
  }

  return ret;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	408c0000 	.word	0x408c0000
 8003e3c:	410c0000 	.word	0x410c0000
 8003e40:	418c0000 	.word	0x418c0000
 8003e44:	420c0000 	.word	0x420c0000
 8003e48:	428c0000 	.word	0x428c0000

08003e4c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	f107 020b 	add.w	r2, r7, #11
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ffdf 	bl	8004e28 <lsm6dso_gy_data_rate_get>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	e04e      	b.n	8003f14 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003e76:	7afb      	ldrb	r3, [r7, #11]
 8003e78:	2b0a      	cmp	r3, #10
 8003e7a:	d846      	bhi.n	8003f0a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8003e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ecb 	.word	0x08003ecb
 8003e94:	08003ed3 	.word	0x08003ed3
 8003e98:	08003edb 	.word	0x08003edb
 8003e9c:	08003ee3 	.word	0x08003ee3
 8003ea0:	08003eeb 	.word	0x08003eeb
 8003ea4:	08003ef3 	.word	0x08003ef3
 8003ea8:	08003efb 	.word	0x08003efb
 8003eac:	08003f03 	.word	0x08003f03
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
      break;
 8003eb8:	e02b      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8003ebe:	601a      	str	r2, [r3, #0]
      break;
 8003ec0:	e027      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8003ec6:	601a      	str	r2, [r3, #0]
      break;
 8003ec8:	e023      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8003ece:	601a      	str	r2, [r3, #0]
      break;
 8003ed0:	e01f      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8003ed6:	601a      	str	r2, [r3, #0]
      break;
 8003ed8:	e01b      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8003ede:	601a      	str	r2, [r3, #0]
      break;
 8003ee0:	e017      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	4a12      	ldr	r2, [pc, #72]	@ (8003f30 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8003ee6:	601a      	str	r2, [r3, #0]
      break;
 8003ee8:	e013      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	4a11      	ldr	r2, [pc, #68]	@ (8003f34 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8003eee:	601a      	str	r2, [r3, #0]
      break;
 8003ef0:	e00f      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	4a10      	ldr	r2, [pc, #64]	@ (8003f38 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8003ef6:	601a      	str	r2, [r3, #0]
      break;
 8003ef8:	e00b      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f3c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8003efe:	601a      	str	r2, [r3, #0]
      break;
 8003f00:	e007      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8003f06:	601a      	str	r2, [r3, #0]
      break;
 8003f08:	e003      	b.n	8003f12 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	60fb      	str	r3, [r7, #12]
      break;
 8003f10:	bf00      	nop
  }

  return ret;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	41480000 	.word	0x41480000
 8003f20:	41d00000 	.word	0x41d00000
 8003f24:	42500000 	.word	0x42500000
 8003f28:	42d00000 	.word	0x42d00000
 8003f2c:	43500000 	.word	0x43500000
 8003f30:	43d08000 	.word	0x43d08000
 8003f34:	44504000 	.word	0x44504000
 8003f38:	44d06000 	.word	0x44d06000
 8003f3c:	45505000 	.word	0x45505000
 8003f40:	45d05800 	.word	0x45d05800

08003f44 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8003f50:	2100      	movs	r1, #0
 8003f52:	ed97 0a00 	vldr	s0, [r7]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f806 	bl	8003f68 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f74:	460b      	mov	r3, r1
 8003f76:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d028      	beq.n	8003fdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8003f8a:	e05c      	b.n	8004046 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f103 0020 	add.w	r0, r3, #32
 8003f92:	f107 0214 	add.w	r2, r7, #20
 8003f96:	2301      	movs	r3, #1
 8003f98:	2116      	movs	r1, #22
 8003f9a:	f000 fbf3 	bl	8004784 <lsm6dso_read_reg>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	e06c      	b.n	8004084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8003faa:	7d3b      	ldrb	r3, [r7, #20]
 8003fac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04b      	beq.n	800404e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8003fb6:	7d3b      	ldrb	r3, [r7, #20]
 8003fb8:	f36f 13c7 	bfc	r3, #7, #1
 8003fbc:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f103 0020 	add.w	r0, r3, #32
 8003fc4:	f107 0214 	add.w	r2, r7, #20
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2116      	movs	r1, #22
 8003fcc:	f000 fbf2 	bl	80047b4 <lsm6dso_write_reg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03b      	beq.n	800404e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e053      	b.n	8004084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f103 0020 	add.w	r0, r3, #32
 8003fe2:	f107 0210 	add.w	r2, r7, #16
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	2116      	movs	r1, #22
 8003fea:	f000 fbcb 	bl	8004784 <lsm6dso_read_reg>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e044      	b.n	8004084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8003ffa:	7c3b      	ldrb	r3, [r7, #16]
 8003ffc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d112      	bne.n	800402c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004006:	7c3b      	ldrb	r3, [r7, #16]
 8004008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800400c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f103 0020 	add.w	r0, r3, #32
 8004014:	f107 0210 	add.w	r2, r7, #16
 8004018:	2301      	movs	r3, #1
 800401a:	2116      	movs	r1, #22
 800401c:	f000 fbca 	bl	80047b4 <lsm6dso_write_reg>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e02b      	b.n	8004084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800402c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004030:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800408c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	dc00      	bgt.n	8004040 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800403e:	e007      	b.n	8004050 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e004      	b.n	8004050 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	61fb      	str	r3, [r7, #28]
      break;
 800404c:	e000      	b.n	8004050 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800404e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d102      	bne.n	800405e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004058:	f04f 33ff 	mov.w	r3, #4294967295
 800405c:	e012      	b.n	8004084 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004068:	ed97 0a06 	vldr	s0, [r7, #24]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fa45 	bl	80044fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004072:	61f8      	str	r0, [r7, #28]
 8004074:	e005      	b.n	8004082 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004076:	ed97 0a06 	vldr	s0, [r7, #24]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 faca 	bl	8004614 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004080:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004082:	69fb      	ldr	r3, [r7, #28]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	43500000 	.word	0x43500000
 8004090:	43500000 	.word	0x43500000

08004094 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3320      	adds	r3, #32
 80040a6:	f107 020b 	add.w	r2, r7, #11
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fd7f 	bl	8004bb0 <lsm6dso_gy_full_scale_get>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295
 80040bc:	e030      	b.n	8004120 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d828      	bhi.n	8004116 <LSM6DSO_GYRO_GetFullScale+0x82>
 80040c4:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <LSM6DSO_GYRO_GetFullScale+0x38>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040e9 	.word	0x080040e9
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004103 	.word	0x08004103
 80040e0:	08004117 	.word	0x08004117
 80040e4:	0800410d 	.word	0x0800410d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	227d      	movs	r2, #125	@ 0x7d
 80040ec:	601a      	str	r2, [r3, #0]
      break;
 80040ee:	e016      	b.n	800411e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	22fa      	movs	r2, #250	@ 0xfa
 80040f4:	601a      	str	r2, [r3, #0]
      break;
 80040f6:	e012      	b.n	800411e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80040fe:	601a      	str	r2, [r3, #0]
      break;
 8004100:	e00d      	b.n	800411e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004108:	601a      	str	r2, [r3, #0]
      break;
 800410a:	e008      	b.n	800411e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004112:	601a      	str	r2, [r3, #0]
      break;
 8004114:	e003      	b.n	800411e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	60fb      	str	r3, [r7, #12]
      break;
 800411c:	bf00      	nop
  }

  return ret;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b7d      	cmp	r3, #125	@ 0x7d
 8004136:	dd12      	ble.n	800415e <LSM6DSO_GYRO_SetFullScale+0x36>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2bfa      	cmp	r3, #250	@ 0xfa
 800413c:	dd0d      	ble.n	800415a <LSM6DSO_GYRO_SetFullScale+0x32>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004144:	dd07      	ble.n	8004156 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800414c:	dc01      	bgt.n	8004152 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800414e:	2304      	movs	r3, #4
 8004150:	e006      	b.n	8004160 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004152:	2306      	movs	r3, #6
 8004154:	e004      	b.n	8004160 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004156:	2302      	movs	r3, #2
 8004158:	e002      	b.n	8004160 <LSM6DSO_GYRO_SetFullScale+0x38>
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <LSM6DSO_GYRO_SetFullScale+0x38>
 800415e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004160:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3320      	adds	r3, #32
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fcfa 	bl	8004b64 <lsm6dso_gy_full_scale_set>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	e000      	b.n	800417e <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3320      	adds	r3, #32
 8004194:	f107 0208 	add.w	r2, r7, #8
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fecc 	bl	8004f38 <lsm6dso_angular_rate_raw_get>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295
 80041aa:	e00c      	b.n	80041c6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3320      	adds	r3, #32
 80041dc:	f107 0210 	add.w	r2, r7, #16
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fea8 	bl	8004f38 <lsm6dso_angular_rate_raw_get>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	e03c      	b.n	800426e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fdd4 	bl	8003da8 <LSM6DSO_GYRO_GetSensitivity>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	e030      	b.n	800426e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800420c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004218:	edd7 7a03 	vldr	s15, [r7, #12]
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800422c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004238:	edd7 7a03 	vldr	s15, [r7, #12]
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 2a90 	vmov	r2, s15
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800424c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004258:	edd7 7a03 	vldr	s15, [r7, #12]
 800425c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004264:	ee17 2a90 	vmov	r2, s15
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
 8004282:	4613      	mov	r3, r2
 8004284:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f103 0020 	add.w	r0, r3, #32
 800428c:	1cba      	adds	r2, r7, #2
 800428e:	78f9      	ldrb	r1, [r7, #3]
 8004290:	2301      	movs	r3, #1
 8004292:	f000 fa8f 	bl	80047b4 <lsm6dso_write_reg>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	e000      	b.n	80042a4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80042b8:	edd7 7a00 	vldr	s15, [r7]
 80042bc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80043bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80042c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c8:	d801      	bhi.n	80042ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80042ca:	230b      	movs	r3, #11
 80042cc:	e063      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80042ce:	edd7 7a00 	vldr	s15, [r7]
 80042d2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80042d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d801      	bhi.n	80042e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e058      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80042e4:	edd7 7a00 	vldr	s15, [r7]
 80042e8:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80042ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f4:	d801      	bhi.n	80042fa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e04d      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80042fa:	edd7 7a00 	vldr	s15, [r7]
 80042fe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80043c0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430a:	d801      	bhi.n	8004310 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800430c:	2303      	movs	r3, #3
 800430e:	e042      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004310:	edd7 7a00 	vldr	s15, [r7]
 8004314:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80043c4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	d801      	bhi.n	8004326 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004322:	2304      	movs	r3, #4
 8004324:	e037      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004326:	edd7 7a00 	vldr	s15, [r7]
 800432a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80043c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800432e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	d801      	bhi.n	800433c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004338:	2305      	movs	r3, #5
 800433a:	e02c      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800433c:	edd7 7a00 	vldr	s15, [r7]
 8004340:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80043cc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	d801      	bhi.n	8004352 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800434e:	2306      	movs	r3, #6
 8004350:	e021      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004352:	edd7 7a00 	vldr	s15, [r7]
 8004356:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80043d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800435a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004362:	d801      	bhi.n	8004368 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004364:	2307      	movs	r3, #7
 8004366:	e016      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004368:	edd7 7a00 	vldr	s15, [r7]
 800436c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80043d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	d801      	bhi.n	800437e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800437a:	2308      	movs	r3, #8
 800437c:	e00b      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800437e:	edd7 7a00 	vldr	s15, [r7]
 8004382:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80043d8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	d801      	bhi.n	8004394 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004390:	2309      	movs	r3, #9
 8004392:	e000      	b.n	8004396 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004394:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004396:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3320      	adds	r3, #32
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fa7d 	bl	80048a0 <lsm6dso_xl_data_rate_set>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	e000      	b.n	80043b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	3fcccccd 	.word	0x3fcccccd
 80043c0:	42500000 	.word	0x42500000
 80043c4:	42d00000 	.word	0x42d00000
 80043c8:	43500000 	.word	0x43500000
 80043cc:	43d08000 	.word	0x43d08000
 80043d0:	44504000 	.word	0x44504000
 80043d4:	44d06000 	.word	0x44d06000
 80043d8:	45505000 	.word	0x45505000

080043dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80043e8:	edd7 7a00 	vldr	s15, [r7]
 80043ec:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80044dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80043f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f8:	d801      	bhi.n	80043fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80043fa:	230b      	movs	r3, #11
 80043fc:	e063      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80043fe:	edd7 7a00 	vldr	s15, [r7]
 8004402:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	d801      	bhi.n	8004414 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004410:	2301      	movs	r3, #1
 8004412:	e058      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004414:	edd7 7a00 	vldr	s15, [r7]
 8004418:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800441c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d801      	bhi.n	800442a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004426:	2302      	movs	r3, #2
 8004428:	e04d      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800442a:	edd7 7a00 	vldr	s15, [r7]
 800442e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80044e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d801      	bhi.n	8004440 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 800443c:	2303      	movs	r3, #3
 800443e:	e042      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004440:	edd7 7a00 	vldr	s15, [r7]
 8004444:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80044e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d801      	bhi.n	8004456 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004452:	2304      	movs	r3, #4
 8004454:	e037      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004456:	edd7 7a00 	vldr	s15, [r7]
 800445a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80044e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 800445e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d801      	bhi.n	800446c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004468:	2305      	movs	r3, #5
 800446a:	e02c      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800446c:	edd7 7a00 	vldr	s15, [r7]
 8004470:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80044ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447c:	d801      	bhi.n	8004482 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800447e:	2306      	movs	r3, #6
 8004480:	e021      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004482:	edd7 7a00 	vldr	s15, [r7]
 8004486:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80044f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800448a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	d801      	bhi.n	8004498 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004494:	2307      	movs	r3, #7
 8004496:	e016      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004498:	edd7 7a00 	vldr	s15, [r7]
 800449c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80044f4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80044a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	d801      	bhi.n	80044ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80044aa:	2308      	movs	r3, #8
 80044ac:	e00b      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044ae:	edd7 7a00 	vldr	s15, [r7]
 80044b2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80044f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80044b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	d801      	bhi.n	80044c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80044c0:	2309      	movs	r3, #9
 80044c2:	e000      	b.n	80044c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80044c4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	3fcccccd 	.word	0x3fcccccd
 80044e0:	42500000 	.word	0x42500000
 80044e4:	42d00000 	.word	0x42d00000
 80044e8:	43500000 	.word	0x43500000
 80044ec:	43d08000 	.word	0x43d08000
 80044f0:	44504000 	.word	0x44504000
 80044f4:	44d06000 	.word	0x44d06000
 80044f8:	45505000 	.word	0x45505000

080044fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004508:	edd7 7a00 	vldr	s15, [r7]
 800450c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	d801      	bhi.n	800451e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800451a:	2301      	movs	r3, #1
 800451c:	e058      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800451e:	edd7 7a00 	vldr	s15, [r7]
 8004522:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8004526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	d801      	bhi.n	8004534 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004530:	2302      	movs	r3, #2
 8004532:	e04d      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004534:	edd7 7a00 	vldr	s15, [r7]
 8004538:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80045f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800453c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	d801      	bhi.n	800454a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004546:	2303      	movs	r3, #3
 8004548:	e042      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800454a:	edd7 7a00 	vldr	s15, [r7]
 800454e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80045fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d801      	bhi.n	8004560 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800455c:	2304      	movs	r3, #4
 800455e:	e037      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004560:	edd7 7a00 	vldr	s15, [r7]
 8004564:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004600 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d801      	bhi.n	8004576 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004572:	2305      	movs	r3, #5
 8004574:	e02c      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004576:	edd7 7a00 	vldr	s15, [r7]
 800457a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004604 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800457e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	d801      	bhi.n	800458c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004588:	2306      	movs	r3, #6
 800458a:	e021      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800458c:	edd7 7a00 	vldr	s15, [r7]
 8004590:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004608 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	d801      	bhi.n	80045a2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800459e:	2307      	movs	r3, #7
 80045a0:	e016      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045a2:	edd7 7a00 	vldr	s15, [r7]
 80045a6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800460c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80045aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b2:	d801      	bhi.n	80045b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80045b4:	2308      	movs	r3, #8
 80045b6:	e00b      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045b8:	edd7 7a00 	vldr	s15, [r7]
 80045bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004610 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80045c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	d801      	bhi.n	80045ce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80045ca:	2309      	movs	r3, #9
 80045cc:	e000      	b.n	80045d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045ce:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80045d0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3320      	adds	r3, #32
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fb2a 	bl	8004c34 <lsm6dso_gy_data_rate_set>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	e000      	b.n	80045ee <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	42500000 	.word	0x42500000
 80045fc:	42d00000 	.word	0x42d00000
 8004600:	43500000 	.word	0x43500000
 8004604:	43d08000 	.word	0x43d08000
 8004608:	44504000 	.word	0x44504000
 800460c:	44d06000 	.word	0x44d06000
 8004610:	45505000 	.word	0x45505000

08004614 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004620:	edd7 7a00 	vldr	s15, [r7]
 8004624:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	d801      	bhi.n	8004636 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004632:	2301      	movs	r3, #1
 8004634:	e058      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004636:	edd7 7a00 	vldr	s15, [r7]
 800463a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800463e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	d801      	bhi.n	800464c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004648:	2302      	movs	r3, #2
 800464a:	e04d      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800464c:	edd7 7a00 	vldr	s15, [r7]
 8004650:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80046fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d801      	bhi.n	8004662 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800465e:	2303      	movs	r3, #3
 8004660:	e042      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004662:	edd7 7a00 	vldr	s15, [r7]
 8004666:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004700 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800466a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d801      	bhi.n	8004678 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004674:	2304      	movs	r3, #4
 8004676:	e037      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004678:	edd7 7a00 	vldr	s15, [r7]
 800467c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004704 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d801      	bhi.n	800468e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800468a:	2305      	movs	r3, #5
 800468c:	e02c      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800468e:	edd7 7a00 	vldr	s15, [r7]
 8004692:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004708 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d801      	bhi.n	80046a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80046a0:	2306      	movs	r3, #6
 80046a2:	e021      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046a4:	edd7 7a00 	vldr	s15, [r7]
 80046a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800470c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80046ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b4:	d801      	bhi.n	80046ba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80046b6:	2307      	movs	r3, #7
 80046b8:	e016      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046ba:	edd7 7a00 	vldr	s15, [r7]
 80046be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004710 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80046c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ca:	d801      	bhi.n	80046d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80046cc:	2308      	movs	r3, #8
 80046ce:	e00b      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046d0:	edd7 7a00 	vldr	s15, [r7]
 80046d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004714 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80046d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d801      	bhi.n	80046e6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80046e2:	2309      	movs	r3, #9
 80046e4:	e000      	b.n	80046e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046e6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	42500000 	.word	0x42500000
 8004700:	42d00000 	.word	0x42d00000
 8004704:	43500000 	.word	0x43500000
 8004708:	43d08000 	.word	0x43d08000
 800470c:	44504000 	.word	0x44504000
 8004710:	44d06000 	.word	0x44d06000
 8004714:	45505000 	.word	0x45505000

08004718 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	461a      	mov	r2, r3
 8004724:	460b      	mov	r3, r1
 8004726:	72fb      	strb	r3, [r7, #11]
 8004728:	4613      	mov	r3, r2
 800472a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	695c      	ldr	r4, [r3, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	7b1b      	ldrb	r3, [r3, #12]
 8004738:	4618      	mov	r0, r3
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	b299      	uxth	r1, r3
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	47a0      	blx	r4
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}

0800474e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800474e:	b590      	push	{r4, r7, lr}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	461a      	mov	r2, r3
 800475a:	460b      	mov	r3, r1
 800475c:	72fb      	strb	r3, [r7, #11]
 800475e:	4613      	mov	r3, r2
 8004760:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	691c      	ldr	r4, [r3, #16]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	7b1b      	ldrb	r3, [r3, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	7afb      	ldrb	r3, [r7, #11]
 8004772:	b299      	uxth	r1, r3
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	47a0      	blx	r4
 800477a:	4603      	mov	r3, r0
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	461a      	mov	r2, r3
 8004790:	460b      	mov	r3, r1
 8004792:	72fb      	strb	r3, [r7, #11]
 8004794:	4613      	mov	r3, r2
 8004796:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685c      	ldr	r4, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68d8      	ldr	r0, [r3, #12]
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	7af9      	ldrb	r1, [r7, #11]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	47a0      	blx	r4
 80047a8:	6178      	str	r0, [r7, #20]

  return ret;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	72fb      	strb	r3, [r7, #11]
 80047c4:	4613      	mov	r3, r2
 80047c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681c      	ldr	r4, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68d8      	ldr	r0, [r3, #12]
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	7af9      	ldrb	r1, [r7, #11]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	47a0      	blx	r4
 80047d8:	6178      	str	r0, [r7, #20]

  return ret;
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}

080047e4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80047f0:	f107 0208 	add.w	r2, r7, #8
 80047f4:	2301      	movs	r3, #1
 80047f6:	2110      	movs	r1, #16
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ffc3 	bl	8004784 <lsm6dso_read_reg>
 80047fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	b2da      	uxtb	r2, r3
 800480e:	7a3b      	ldrb	r3, [r7, #8]
 8004810:	f362 0383 	bfi	r3, r2, #2, #2
 8004814:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004816:	f107 0208 	add.w	r2, r7, #8
 800481a:	2301      	movs	r3, #1
 800481c:	2110      	movs	r1, #16
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ffc8 	bl	80047b4 <lsm6dso_write_reg>
 8004824:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800483a:	f107 0208 	add.w	r2, r7, #8
 800483e:	2301      	movs	r3, #1
 8004840:	2110      	movs	r1, #16
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ff9e 	bl	8004784 <lsm6dso_read_reg>
 8004848:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800484a:	7a3b      	ldrb	r3, [r7, #8]
 800484c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d81a      	bhi.n	800488c <lsm6dso_xl_full_scale_get+0x5c>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <lsm6dso_xl_full_scale_get+0x2c>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	08004875 	.word	0x08004875
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004885 	.word	0x08004885
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
      break;
 8004872:	e00f      	b.n	8004894 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
      break;
 800487a:	e00b      	b.n	8004894 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2202      	movs	r2, #2
 8004880:	701a      	strb	r2, [r3, #0]
      break;
 8004882:	e007      	b.n	8004894 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2203      	movs	r2, #3
 8004888:	701a      	strb	r2, [r3, #0]
      break;
 800488a:	e003      	b.n	8004894 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
      break;
 8004892:	bf00      	nop
  }

  return ret;
 8004894:	68fb      	ldr	r3, [r7, #12]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80048b0:	f107 030c 	add.w	r3, r7, #12
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fc90 	bl	80051dc <lsm6dso_fsm_enable_get>
 80048bc:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <lsm6dso_xl_data_rate_set+0x28>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	e0e0      	b.n	8004a8a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048c8:	7b3b      	ldrb	r3, [r7, #12]
 80048ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80048d0:	7b3b      	ldrb	r3, [r7, #12]
 80048d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048d6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048d8:	4313      	orrs	r3, r2
 80048da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80048dc:	7b3b      	ldrb	r3, [r7, #12]
 80048de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80048e4:	4313      	orrs	r3, r2
 80048e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80048e8:	7b3b      	ldrb	r3, [r7, #12]
 80048ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80048f4:	7b3b      	ldrb	r3, [r7, #12]
 80048f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004900:	7b3b      	ldrb	r3, [r7, #12]
 8004902:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004906:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004908:	4313      	orrs	r3, r2
 800490a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800490c:	7b3b      	ldrb	r3, [r7, #12]
 800490e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004912:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004914:	4313      	orrs	r3, r2
 8004916:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004918:	7b3b      	ldrb	r3, [r7, #12]
 800491a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800491e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004920:	4313      	orrs	r3, r2
 8004922:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004924:	7b7b      	ldrb	r3, [r7, #13]
 8004926:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800492a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800492c:	4313      	orrs	r3, r2
 800492e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004930:	7b7b      	ldrb	r3, [r7, #13]
 8004932:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004936:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004938:	4313      	orrs	r3, r2
 800493a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800493c:	7b7b      	ldrb	r3, [r7, #13]
 800493e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004942:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004944:	4313      	orrs	r3, r2
 8004946:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004948:	7b7b      	ldrb	r3, [r7, #13]
 800494a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800494e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004950:	4313      	orrs	r3, r2
 8004952:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004954:	7b7b      	ldrb	r3, [r7, #13]
 8004956:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800495a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800495c:	4313      	orrs	r3, r2
 800495e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004960:	7b7b      	ldrb	r3, [r7, #13]
 8004962:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004966:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004968:	4313      	orrs	r3, r2
 800496a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800496c:	7b7b      	ldrb	r3, [r7, #13]
 800496e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004972:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004974:	4313      	orrs	r3, r2
 8004976:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004978:	7b7b      	ldrb	r3, [r7, #13]
 800497a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800497e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004980:	4313      	orrs	r3, r2
 8004982:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004984:	2b01      	cmp	r3, #1
 8004986:	d164      	bne.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004988:	f107 030b 	add.w	r3, r7, #11
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fc46 	bl	8005220 <lsm6dso_fsm_data_rate_get>
 8004994:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <lsm6dso_xl_data_rate_set+0x100>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	e074      	b.n	8004a8a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80049a0:	7afb      	ldrb	r3, [r7, #11]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d852      	bhi.n	8004a4c <lsm6dso_xl_data_rate_set+0x1ac>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <lsm6dso_xl_data_rate_set+0x10c>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049cf 	.word	0x080049cf
 80049b4:	080049ed 	.word	0x080049ed
 80049b8:	08004a17 	.word	0x08004a17
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80049c6:	e044      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	75fb      	strb	r3, [r7, #23]
        break;
 80049cc:	e041      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80049d4:	2302      	movs	r3, #2
 80049d6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80049d8:	e03b      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d102      	bne.n	80049e6 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80049e0:	2302      	movs	r3, #2
 80049e2:	75fb      	strb	r3, [r7, #23]
        break;
 80049e4:	e035      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	75fb      	strb	r3, [r7, #23]
        break;
 80049ea:	e032      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80049f2:	2303      	movs	r3, #3
 80049f4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80049f6:	e02c      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80049fe:	2303      	movs	r3, #3
 8004a00:	75fb      	strb	r3, [r7, #23]
        break;
 8004a02:	e026      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d102      	bne.n	8004a10 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	75fb      	strb	r3, [r7, #23]
        break;
 8004a0e:	e020      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	75fb      	strb	r3, [r7, #23]
        break;
 8004a14:	e01d      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004a20:	e017      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004a28:	2304      	movs	r3, #4
 8004a2a:	75fb      	strb	r3, [r7, #23]
        break;
 8004a2c:	e011      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d102      	bne.n	8004a3a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004a34:	2304      	movs	r3, #4
 8004a36:	75fb      	strb	r3, [r7, #23]
        break;
 8004a38:	e00b      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d102      	bne.n	8004a46 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004a40:	2304      	movs	r3, #4
 8004a42:	75fb      	strb	r3, [r7, #23]
        break;
 8004a44:	e005      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	75fb      	strb	r3, [r7, #23]
        break;
 8004a4a:	e002      	b.n	8004a52 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	75fb      	strb	r3, [r7, #23]
        break;
 8004a50:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a52:	f107 0208 	add.w	r2, r7, #8
 8004a56:	2301      	movs	r3, #1
 8004a58:	2110      	movs	r1, #16
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fe92 	bl	8004784 <lsm6dso_read_reg>
 8004a60:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	7a3b      	ldrb	r3, [r7, #8]
 8004a6c:	f362 1307 	bfi	r3, r2, #4, #4
 8004a70:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a72:	f107 0208 	add.w	r2, r7, #8
 8004a76:	2301      	movs	r3, #1
 8004a78:	2110      	movs	r1, #16
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fe9a 	bl	80047b4 <lsm6dso_write_reg>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  return ret;
 8004a88:	693b      	ldr	r3, [r7, #16]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop

08004a94 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a9e:	f107 0208 	add.w	r2, r7, #8
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fe6c 	bl	8004784 <lsm6dso_read_reg>
 8004aac:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004aae:	7a3b      	ldrb	r3, [r7, #8]
 8004ab0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b0b      	cmp	r3, #11
 8004ab8:	d84a      	bhi.n	8004b50 <lsm6dso_xl_data_rate_get+0xbc>
 8004aba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <lsm6dso_xl_data_rate_get+0x2c>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004af1 	.word	0x08004af1
 8004ac4:	08004af9 	.word	0x08004af9
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004b09 	.word	0x08004b09
 8004ad0:	08004b11 	.word	0x08004b11
 8004ad4:	08004b19 	.word	0x08004b19
 8004ad8:	08004b21 	.word	0x08004b21
 8004adc:	08004b29 	.word	0x08004b29
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004b41 	.word	0x08004b41
 8004aec:	08004b49 	.word	0x08004b49
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
      break;
 8004af6:	e02f      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
      break;
 8004afe:	e02b      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2202      	movs	r2, #2
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	e027      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	701a      	strb	r2, [r3, #0]
      break;
 8004b0e:	e023      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2204      	movs	r2, #4
 8004b14:	701a      	strb	r2, [r3, #0]
      break;
 8004b16:	e01f      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	701a      	strb	r2, [r3, #0]
      break;
 8004b1e:	e01b      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2206      	movs	r2, #6
 8004b24:	701a      	strb	r2, [r3, #0]
      break;
 8004b26:	e017      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	701a      	strb	r2, [r3, #0]
      break;
 8004b2e:	e013      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2208      	movs	r2, #8
 8004b34:	701a      	strb	r2, [r3, #0]
      break;
 8004b36:	e00f      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2209      	movs	r2, #9
 8004b3c:	701a      	strb	r2, [r3, #0]
      break;
 8004b3e:	e00b      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	220a      	movs	r2, #10
 8004b44:	701a      	strb	r2, [r3, #0]
      break;
 8004b46:	e007      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	220b      	movs	r2, #11
 8004b4c:	701a      	strb	r2, [r3, #0]
      break;
 8004b4e:	e003      	b.n	8004b58 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
      break;
 8004b56:	bf00      	nop
  }

  return ret;
 8004b58:	68fb      	ldr	r3, [r7, #12]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop

08004b64 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004b70:	f107 0208 	add.w	r2, r7, #8
 8004b74:	2301      	movs	r3, #1
 8004b76:	2111      	movs	r1, #17
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fe03 	bl	8004784 <lsm6dso_read_reg>
 8004b7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7a3b      	ldrb	r3, [r7, #8]
 8004b90:	f362 0343 	bfi	r3, r2, #1, #3
 8004b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004b96:	f107 0208 	add.w	r2, r7, #8
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	2111      	movs	r1, #17
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fe08 	bl	80047b4 <lsm6dso_write_reg>
 8004ba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	2111      	movs	r1, #17
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fdde 	bl	8004784 <lsm6dso_read_reg>
 8004bc8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004bca:	7a3b      	ldrb	r3, [r7, #8]
 8004bcc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d824      	bhi.n	8004c20 <lsm6dso_gy_full_scale_get+0x70>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <lsm6dso_gy_full_scale_get+0x2c>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	08004c01 	.word	0x08004c01
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c19 	.word	0x08004c19
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
      break;
 8004bfe:	e013      	b.n	8004c28 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
      break;
 8004c06:	e00f      	b.n	8004c28 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	701a      	strb	r2, [r3, #0]
      break;
 8004c0e:	e00b      	b.n	8004c28 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2204      	movs	r2, #4
 8004c14:	701a      	strb	r2, [r3, #0]
      break;
 8004c16:	e007      	b.n	8004c28 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2206      	movs	r2, #6
 8004c1c:	701a      	strb	r2, [r3, #0]
      break;
 8004c1e:	e003      	b.n	8004c28 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
      break;
 8004c26:	bf00      	nop
  }

  return ret;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop

08004c34 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c44:	f107 030c 	add.w	r3, r7, #12
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fac6 	bl	80051dc <lsm6dso_fsm_enable_get>
 8004c50:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <lsm6dso_gy_data_rate_set+0x28>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	e0e0      	b.n	8004e1e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c5c:	7b3b      	ldrb	r3, [r7, #12]
 8004c5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c64:	7b3b      	ldrb	r3, [r7, #12]
 8004c66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c6a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c7c:	7b3b      	ldrb	r3, [r7, #12]
 8004c7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c88:	7b3b      	ldrb	r3, [r7, #12]
 8004c8a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004ca0:	7b3b      	ldrb	r3, [r7, #12]
 8004ca2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ca6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004cb8:	7b7b      	ldrb	r3, [r7, #13]
 8004cba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cc4:	7b7b      	ldrb	r3, [r7, #13]
 8004cc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004cd0:	7b7b      	ldrb	r3, [r7, #13]
 8004cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cdc:	7b7b      	ldrb	r3, [r7, #13]
 8004cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004ce8:	7b7b      	ldrb	r3, [r7, #13]
 8004cea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004d0c:	7b7b      	ldrb	r3, [r7, #13]
 8004d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d164      	bne.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004d1c:	f107 030b 	add.w	r3, r7, #11
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa7c 	bl	8005220 <lsm6dso_fsm_data_rate_get>
 8004d28:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <lsm6dso_gy_data_rate_set+0x100>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	e074      	b.n	8004e1e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d852      	bhi.n	8004de0 <lsm6dso_gy_data_rate_set+0x1ac>
 8004d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <lsm6dso_gy_data_rate_set+0x10c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d63 	.word	0x08004d63
 8004d48:	08004d81 	.word	0x08004d81
 8004d4c:	08004dab 	.word	0x08004dab
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004d5a:	e044      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d60:	e041      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004d6c:	e03b      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
        break;
 8004d78:	e035      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d7e:	e032      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004d8a:	e02c      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004d92:	2303      	movs	r3, #3
 8004d94:	75fb      	strb	r3, [r7, #23]
        break;
 8004d96:	e026      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d102      	bne.n	8004da4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	75fb      	strb	r3, [r7, #23]
        break;
 8004da2:	e020      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	75fb      	strb	r3, [r7, #23]
        break;
 8004da8:	e01d      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004db0:	2304      	movs	r3, #4
 8004db2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004db4:	e017      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8004dc0:	e011      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d102      	bne.n	8004dce <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004dc8:	2304      	movs	r3, #4
 8004dca:	75fb      	strb	r3, [r7, #23]
        break;
 8004dcc:	e00b      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d102      	bne.n	8004dda <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd8:	e005      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8004dde:	e002      	b.n	8004de6 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	75fb      	strb	r3, [r7, #23]
        break;
 8004de4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004de6:	f107 0208 	add.w	r2, r7, #8
 8004dea:	2301      	movs	r3, #1
 8004dec:	2111      	movs	r1, #17
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fcc8 	bl	8004784 <lsm6dso_read_reg>
 8004df4:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	7a3b      	ldrb	r3, [r7, #8]
 8004e00:	f362 1307 	bfi	r3, r2, #4, #4
 8004e04:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e06:	f107 0208 	add.w	r2, r7, #8
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	2111      	movs	r1, #17
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fcd0 	bl	80047b4 <lsm6dso_write_reg>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  return ret;
 8004e1c:	693b      	ldr	r3, [r7, #16]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop

08004e28 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e32:	f107 0208 	add.w	r2, r7, #8
 8004e36:	2301      	movs	r3, #1
 8004e38:	2111      	movs	r1, #17
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fca2 	bl	8004784 <lsm6dso_read_reg>
 8004e40:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8004e42:	7a3b      	ldrb	r3, [r7, #8]
 8004e44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b0a      	cmp	r3, #10
 8004e4c:	d844      	bhi.n	8004ed8 <lsm6dso_gy_data_rate_get+0xb0>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <lsm6dso_gy_data_rate_get+0x2c>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e89 	.word	0x08004e89
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004e99 	.word	0x08004e99
 8004e64:	08004ea1 	.word	0x08004ea1
 8004e68:	08004ea9 	.word	0x08004ea9
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004eb9 	.word	0x08004eb9
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004ec9 	.word	0x08004ec9
 8004e7c:	08004ed1 	.word	0x08004ed1
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e02b      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
      break;
 8004e8e:	e027      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2202      	movs	r2, #2
 8004e94:	701a      	strb	r2, [r3, #0]
      break;
 8004e96:	e023      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	701a      	strb	r2, [r3, #0]
      break;
 8004e9e:	e01f      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	701a      	strb	r2, [r3, #0]
      break;
 8004ea6:	e01b      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2205      	movs	r2, #5
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e017      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2206      	movs	r2, #6
 8004eb4:	701a      	strb	r2, [r3, #0]
      break;
 8004eb6:	e013      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2207      	movs	r2, #7
 8004ebc:	701a      	strb	r2, [r3, #0]
      break;
 8004ebe:	e00f      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	701a      	strb	r2, [r3, #0]
      break;
 8004ec6:	e00b      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2209      	movs	r2, #9
 8004ecc:	701a      	strb	r2, [r3, #0]
      break;
 8004ece:	e007      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e003      	b.n	8004ee0 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
      break;
 8004ede:	bf00      	nop
  }

  return ret;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ef8:	f107 0208 	add.w	r2, r7, #8
 8004efc:	2301      	movs	r3, #1
 8004efe:	2112      	movs	r1, #18
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fc3f 	bl	8004784 <lsm6dso_read_reg>
 8004f06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	7a3b      	ldrb	r3, [r7, #8]
 8004f18:	f362 1386 	bfi	r3, r2, #6, #1
 8004f1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004f1e:	f107 0208 	add.w	r2, r7, #8
 8004f22:	2301      	movs	r3, #1
 8004f24:	2112      	movs	r1, #18
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fc44 	bl	80047b4 <lsm6dso_write_reg>
 8004f2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8004f42:	f107 020c 	add.w	r2, r7, #12
 8004f46:	2306      	movs	r3, #6
 8004f48:	2122      	movs	r1, #34	@ 0x22
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fc1a 	bl	8004784 <lsm6dso_read_reg>
 8004f50:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f52:	7b7b      	ldrb	r3, [r7, #13]
 8004f54:	b21a      	sxth	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	7b3a      	ldrb	r2, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	b21a      	sxth	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004f72:	7bfa      	ldrb	r2, [r7, #15]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	3302      	adds	r3, #2
 8004f78:	b212      	sxth	r2, r2
 8004f7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	7bba      	ldrb	r2, [r7, #14]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	3302      	adds	r3, #2
 8004f94:	b212      	sxth	r2, r2
 8004f96:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004f98:	7c7a      	ldrb	r2, [r7, #17]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	b212      	sxth	r2, r2
 8004fa0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	7c3a      	ldrb	r2, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	b212      	sxth	r2, r2
 8004fbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8004fd2:	f107 020c 	add.w	r2, r7, #12
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	2128      	movs	r1, #40	@ 0x28
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fbd2 	bl	8004784 <lsm6dso_read_reg>
 8004fe0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004fe2:	7b7b      	ldrb	r3, [r7, #13]
 8004fe4:	b21a      	sxth	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	7b3a      	ldrb	r2, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	b21a      	sxth	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	3302      	adds	r3, #2
 8005008:	b212      	sxth	r2, r2
 800500a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3302      	adds	r3, #2
 8005010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005014:	b29b      	uxth	r3, r3
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	b29b      	uxth	r3, r3
 800501a:	7bba      	ldrb	r2, [r7, #14]
 800501c:	4413      	add	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	3302      	adds	r3, #2
 8005024:	b212      	sxth	r2, r2
 8005026:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005028:	7c7a      	ldrb	r2, [r7, #17]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3304      	adds	r3, #4
 800502e:	b212      	sxth	r2, r2
 8005030:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800503a:	b29b      	uxth	r3, r3
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	b29b      	uxth	r3, r3
 8005040:	7c3a      	ldrb	r2, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3304      	adds	r3, #4
 800504a:	b212      	sxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]

  return ret;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005064:	2300      	movs	r3, #0
 8005066:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	b2da      	uxtb	r2, r3
 8005070:	7a3b      	ldrb	r3, [r7, #8]
 8005072:	f362 1387 	bfi	r3, r2, #6, #2
 8005076:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005078:	f107 0208 	add.w	r2, r7, #8
 800507c:	2301      	movs	r3, #1
 800507e:	2101      	movs	r1, #1
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fb97 	bl	80047b4 <lsm6dso_write_reg>
 8005086:	60f8      	str	r0, [r7, #12]

  return ret;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800509c:	2301      	movs	r3, #1
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	210f      	movs	r1, #15
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fb6e 	bl	8004784 <lsm6dso_read_reg>
 80050a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80050aa:	68fb      	ldr	r3, [r7, #12]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80050c0:	f107 0208 	add.w	r2, r7, #8
 80050c4:	2301      	movs	r3, #1
 80050c6:	2112      	movs	r1, #18
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fb5b 	bl	8004784 <lsm6dso_read_reg>
 80050ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	7a3b      	ldrb	r3, [r7, #8]
 80050e0:	f362 0382 	bfi	r3, r2, #2, #1
 80050e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80050e6:	f107 0208 	add.w	r2, r7, #8
 80050ea:	2301      	movs	r3, #1
 80050ec:	2112      	movs	r1, #18
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fb60 	bl	80047b4 <lsm6dso_write_reg>
 80050f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800510c:	f107 020c 	add.w	r2, r7, #12
 8005110:	2301      	movs	r3, #1
 8005112:	2118      	movs	r1, #24
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fb35 	bl	8004784 <lsm6dso_read_reg>
 800511a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	09db      	lsrs	r3, r3, #7
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	7b3b      	ldrb	r3, [r7, #12]
 800512a:	f362 0341 	bfi	r3, r2, #1, #1
 800512e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005130:	f107 020c 	add.w	r2, r7, #12
 8005134:	2301      	movs	r3, #1
 8005136:	2118      	movs	r1, #24
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fb3b 	bl	80047b4 <lsm6dso_write_reg>
 800513e:	4602      	mov	r2, r0
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <lsm6dso_i3c_disable_set+0x50>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e01b      	b.n	8005188 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005150:	f107 0210 	add.w	r2, r7, #16
 8005154:	2301      	movs	r3, #1
 8005156:	2162      	movs	r1, #98	@ 0x62
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fb13 	bl	8004784 <lsm6dso_read_reg>
 800515e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	b2da      	uxtb	r2, r3
 8005168:	7c3b      	ldrb	r3, [r7, #16]
 800516a:	f362 03c4 	bfi	r3, r2, #3, #2
 800516e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005170:	f107 0210 	add.w	r2, r7, #16
 8005174:	2301      	movs	r3, #1
 8005176:	2162      	movs	r1, #98	@ 0x62
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fb1b 	bl	80047b4 <lsm6dso_write_reg>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  return ret;
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800519c:	f107 0208 	add.w	r2, r7, #8
 80051a0:	2301      	movs	r3, #1
 80051a2:	210a      	movs	r1, #10
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff faed 	bl	8004784 <lsm6dso_read_reg>
 80051aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10f      	bne.n	80051d2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	7a3b      	ldrb	r3, [r7, #8]
 80051bc:	f362 0302 	bfi	r3, r2, #0, #3
 80051c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80051c2:	f107 0208 	add.w	r2, r7, #8
 80051c6:	2301      	movs	r3, #1
 80051c8:	210a      	movs	r1, #10
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff faf2 	bl	80047b4 <lsm6dso_write_reg>
 80051d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80051e6:	2102      	movs	r1, #2
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff35 	bl	8005058 <lsm6dso_mem_bank_set>
 80051ee:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80051f0:	2302      	movs	r3, #2
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	2146      	movs	r1, #70	@ 0x46
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fac4 	bl	8004784 <lsm6dso_read_reg>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005204:	2100      	movs	r1, #0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ff26 	bl	8005058 <lsm6dso_mem_bank_set>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  return ret;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800522a:	2102      	movs	r1, #2
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff13 	bl	8005058 <lsm6dso_mem_bank_set>
 8005232:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <lsm6dso_fsm_data_rate_get+0x1e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	e03a      	b.n	80052b4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800523e:	f107 0208 	add.w	r2, r7, #8
 8005242:	2301      	movs	r3, #1
 8005244:	215f      	movs	r1, #95	@ 0x5f
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fa9c 	bl	8004784 <lsm6dso_read_reg>
 800524c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d125      	bne.n	80052a0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005254:	7a3b      	ldrb	r3, [r7, #8]
 8005256:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d81b      	bhi.n	8005298 <lsm6dso_fsm_data_rate_get+0x78>
 8005260:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <lsm6dso_fsm_data_rate_get+0x48>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005279 	.word	0x08005279
 800526c:	08005281 	.word	0x08005281
 8005270:	08005289 	.word	0x08005289
 8005274:	08005291 	.word	0x08005291
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
      break;
 800527e:	e010      	b.n	80052a2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
      break;
 8005286:	e00c      	b.n	80052a2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
      break;
 800528e:	e008      	b.n	80052a2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2203      	movs	r2, #3
 8005294:	701a      	strb	r2, [r3, #0]
      break;
 8005296:	e004      	b.n	80052a2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	e000      	b.n	80052a2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80052a0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80052a2:	2100      	movs	r1, #0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fed7 	bl	8005058 <lsm6dso_mem_bank_set>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  return ret;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08e      	sub	sp, #56	@ 0x38
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80052ca:	2301      	movs	r3, #1
 80052cc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d06e      	beq.n	80053b6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	f200 809d 	bhi.w	800541a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <IKS01A3_MOTION_SENSOR_Init+0x32>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d032      	beq.n	8005352 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80052ec:	e095      	b.n	800541a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80052ee:	6838      	ldr	r0, [r7, #0]
 80052f0:	f000 f924 	bl	800553c <LSM6DSO_0_Probe>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295
 80052fe:	e0cc      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005300:	4a68      	ldr	r2, [pc, #416]	@ (80054a4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	4967      	ldr	r1, [pc, #412]	@ (80054a8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005312:	f107 010c 	add.w	r1, r7, #12
 8005316:	4610      	mov	r0, r2
 8005318:	4798      	blx	r3
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005320:	f06f 0306 	mvn.w	r3, #6
 8005324:	e0b9      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005326:	7b3b      	ldrb	r3, [r7, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d103      	bne.n	8005334 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8005334:	7b7b      	ldrb	r3, [r7, #13]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d103      	bne.n	8005342 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d16c      	bne.n	8005422 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8005350:	e067      	b.n	8005422 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	f000 f9b2 	bl	80056bc <LIS2DW12_0_Probe>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	e09a      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005364:	4a4f      	ldr	r2, [pc, #316]	@ (80054a4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	494e      	ldr	r1, [pc, #312]	@ (80054a8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005376:	f107 010c 	add.w	r1, r7, #12
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005384:	f06f 0306 	mvn.w	r3, #6
 8005388:	e087      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800538a:	7b3b      	ldrb	r3, [r7, #12]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d103      	bne.n	8005398 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005392:	f043 0302 	orr.w	r3, r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8005398:	7b7b      	ldrb	r3, [r7, #13]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d103      	bne.n	80053a6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d13c      	bne.n	8005426 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80053b4:	e037      	b.n	8005426 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f000 fa28 	bl	800580c <LIS2MDL_0_Probe>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	e068      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053c8:	4a36      	ldr	r2, [pc, #216]	@ (80054a4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4935      	ldr	r1, [pc, #212]	@ (80054a8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053da:	f107 010c 	add.w	r1, r7, #12
 80053de:	4610      	mov	r0, r2
 80053e0:	4798      	blx	r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80053e8:	f06f 0306 	mvn.w	r3, #6
 80053ec:	e055      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80053ee:	7b3b      	ldrb	r3, [r7, #12]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d103      	bne.n	80053fc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80053fc:	7b7b      	ldrb	r3, [r7, #13]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d103      	bne.n	800540a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8005418:	e007      	b.n	800542a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800541a:	f06f 0301 	mvn.w	r3, #1
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8005420:	e004      	b.n	800542c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005422:	bf00      	nop
 8005424:	e002      	b.n	800542c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800542a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	e031      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800543a:	e02a      	b.n	8005492 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	4013      	ands	r3, r2
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	429a      	cmp	r2, r3
 8005446:	d11e      	bne.n	8005486 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8005448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	4013      	ands	r3, r2
 800544e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005450:	429a      	cmp	r2, r3
 8005452:	d118      	bne.n	8005486 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005454:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800545c:	4814      	ldr	r0, [pc, #80]	@ (80054b0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	440b      	add	r3, r1
 8005468:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	490e      	ldr	r1, [pc, #56]	@ (80054a8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005476:	4610      	mov	r0, r2
 8005478:	4798      	blx	r3
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005480:	f06f 0304 	mvn.w	r3, #4
 8005484:	e009      	b.n	800549a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	3301      	adds	r3, #1
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	2b02      	cmp	r3, #2
 8005496:	d9d1      	bls.n	800543c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800549a:	4618      	mov	r0, r3
 800549c:	3738      	adds	r7, #56	@ 0x38
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000278 	.word	0x20000278
 80054a8:	20000248 	.word	0x20000248
 80054ac:	200000c4 	.word	0x200000c4
 80054b0:	20000254 	.word	0x20000254

080054b4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d903      	bls.n	80054ce <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054c6:	f06f 0301 	mvn.w	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e029      	b.n	8005522 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80054ce:	4a17      	ldr	r2, [pc, #92]	@ (800552c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d11d      	bne.n	800551c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80054e0:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054e8:	4812      	ldr	r0, [pc, #72]	@ (8005534 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	440b      	add	r3, r1
 80054f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	490f      	ldr	r1, [pc, #60]	@ (8005538 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800550e:	f06f 0304 	mvn.w	r3, #4
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e005      	b.n	8005522 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e002      	b.n	8005522 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800551c:	f06f 0301 	mvn.w	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005522:	697b      	ldr	r3, [r7, #20]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000284 	.word	0x20000284
 8005530:	200000c4 	.word	0x200000c4
 8005534:	20000254 	.word	0x20000254
 8005538:	20000248 	.word	0x20000248

0800553c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b094      	sub	sp, #80	@ 0x50
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005544:	2300      	movs	r3, #0
 8005546:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800554c:	23d7      	movs	r3, #215	@ 0xd7
 800554e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005552:	4b4b      	ldr	r3, [pc, #300]	@ (8005680 <LSM6DSO_0_Probe+0x144>)
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005556:	4b4b      	ldr	r3, [pc, #300]	@ (8005684 <LSM6DSO_0_Probe+0x148>)
 8005558:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800555a:	4b4b      	ldr	r3, [pc, #300]	@ (8005688 <LSM6DSO_0_Probe+0x14c>)
 800555c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800555e:	4b4b      	ldr	r3, [pc, #300]	@ (800568c <LSM6DSO_0_Probe+0x150>)
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005562:	4b4b      	ldr	r3, [pc, #300]	@ (8005690 <LSM6DSO_0_Probe+0x154>)
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005566:	4b4b      	ldr	r3, [pc, #300]	@ (8005694 <LSM6DSO_0_Probe+0x158>)
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800556a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800556e:	4619      	mov	r1, r3
 8005570:	4849      	ldr	r0, [pc, #292]	@ (8005698 <LSM6DSO_0_Probe+0x15c>)
 8005572:	f7fd fec9 	bl	8003308 <LSM6DSO_RegisterBusIO>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800557c:	f06f 0306 	mvn.w	r3, #6
 8005580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005582:	e077      	b.n	8005674 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005584:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005588:	4619      	mov	r1, r3
 800558a:	4843      	ldr	r0, [pc, #268]	@ (8005698 <LSM6DSO_0_Probe+0x15c>)
 800558c:	f7fd ffc6 	bl	800351c <LSM6DSO_ReadID>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005596:	f06f 0306 	mvn.w	r3, #6
 800559a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559c:	e06a      	b.n	8005674 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800559e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	2b6c      	cmp	r3, #108	@ 0x6c
 80055a4:	d003      	beq.n	80055ae <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055a6:	f06f 0306 	mvn.w	r3, #6
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ac:	e062      	b.n	8005674 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80055ae:	f107 030c 	add.w	r3, r7, #12
 80055b2:	4619      	mov	r1, r3
 80055b4:	4838      	ldr	r0, [pc, #224]	@ (8005698 <LSM6DSO_0_Probe+0x15c>)
 80055b6:	f7fd ffc7 	bl	8003548 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80055ba:	7b7b      	ldrb	r3, [r7, #13]
 80055bc:	461a      	mov	r2, r3
 80055be:	7b3b      	ldrb	r3, [r7, #12]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	431a      	orrs	r2, r3
 80055c4:	7bbb      	ldrb	r3, [r7, #14]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4313      	orrs	r3, r2
 80055ca:	4a34      	ldr	r2, [pc, #208]	@ (800569c <LSM6DSO_0_Probe+0x160>)
 80055cc:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80055ce:	4b34      	ldr	r3, [pc, #208]	@ (80056a0 <LSM6DSO_0_Probe+0x164>)
 80055d0:	4a31      	ldr	r2, [pc, #196]	@ (8005698 <LSM6DSO_0_Probe+0x15c>)
 80055d2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80055d4:	4b33      	ldr	r3, [pc, #204]	@ (80056a4 <LSM6DSO_0_Probe+0x168>)
 80055d6:	4a34      	ldr	r2, [pc, #208]	@ (80056a8 <LSM6DSO_0_Probe+0x16c>)
 80055d8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80055da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d11d      	bne.n	800561c <LSM6DSO_0_Probe+0xe0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d018      	beq.n	800561c <LSM6DSO_0_Probe+0xe0>
 80055ea:	7b7b      	ldrb	r3, [r7, #13]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d115      	bne.n	800561c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80055f0:	4b2e      	ldr	r3, [pc, #184]	@ (80056ac <LSM6DSO_0_Probe+0x170>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a2e      	ldr	r2, [pc, #184]	@ (80056b0 <LSM6DSO_0_Probe+0x174>)
 80055f6:	492f      	ldr	r1, [pc, #188]	@ (80056b4 <LSM6DSO_0_Probe+0x178>)
 80055f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80055fc:	4b29      	ldr	r3, [pc, #164]	@ (80056a4 <LSM6DSO_0_Probe+0x168>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <LSM6DSO_0_Probe+0x164>)
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	4610      	mov	r0, r2
 8005608:	4798      	blx	r3
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005610:	f06f 0304 	mvn.w	r3, #4
 8005614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005616:	e001      	b.n	800561c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005618:	2300      	movs	r3, #0
 800561a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800561c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d11d      	bne.n	800565e <LSM6DSO_0_Probe+0x122>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d018      	beq.n	800565e <LSM6DSO_0_Probe+0x122>
 800562c:	7b3b      	ldrb	r3, [r7, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d115      	bne.n	800565e <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <LSM6DSO_0_Probe+0x170>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <LSM6DSO_0_Probe+0x174>)
 8005638:	491f      	ldr	r1, [pc, #124]	@ (80056b8 <LSM6DSO_0_Probe+0x17c>)
 800563a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800563e:	4b19      	ldr	r3, [pc, #100]	@ (80056a4 <LSM6DSO_0_Probe+0x168>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a16      	ldr	r2, [pc, #88]	@ (80056a0 <LSM6DSO_0_Probe+0x164>)
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005652:	f06f 0304 	mvn.w	r3, #4
 8005656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005658:	e001      	b.n	800565e <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800565a:	2300      	movs	r3, #0
 800565c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800565e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <LSM6DSO_0_Probe+0x138>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800566e:	f06f 0304 	mvn.w	r3, #4
 8005672:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8005674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8005676:	4618      	mov	r0, r3
 8005678:	3750      	adds	r7, #80	@ 0x50
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08000911 	.word	0x08000911
 8005684:	0800098d 	.word	0x0800098d
 8005688:	08000a41 	.word	0x08000a41
 800568c:	080009dd 	.word	0x080009dd
 8005690:	08000aa5 	.word	0x08000aa5
 8005694:	08005a55 	.word	0x08005a55
 8005698:	20000290 	.word	0x20000290
 800569c:	20000284 	.word	0x20000284
 80056a0:	20000248 	.word	0x20000248
 80056a4:	20000278 	.word	0x20000278
 80056a8:	2000006c 	.word	0x2000006c
 80056ac:	200000c4 	.word	0x200000c4
 80056b0:	20000254 	.word	0x20000254
 80056b4:	200000a0 	.word	0x200000a0
 80056b8:	2000007c 	.word	0x2000007c

080056bc <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b094      	sub	sp, #80	@ 0x50
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80056c8:	2300      	movs	r3, #0
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80056cc:	2333      	movs	r3, #51	@ 0x33
 80056ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80056d2:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <LIS2DW12_0_Probe+0x118>)
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80056d6:	4b40      	ldr	r3, [pc, #256]	@ (80057d8 <LIS2DW12_0_Probe+0x11c>)
 80056d8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80056da:	4b40      	ldr	r3, [pc, #256]	@ (80057dc <LIS2DW12_0_Probe+0x120>)
 80056dc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80056de:	4b40      	ldr	r3, [pc, #256]	@ (80057e0 <LIS2DW12_0_Probe+0x124>)
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80056e2:	4b40      	ldr	r3, [pc, #256]	@ (80057e4 <LIS2DW12_0_Probe+0x128>)
 80056e4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80056e6:	4b40      	ldr	r3, [pc, #256]	@ (80057e8 <LIS2DW12_0_Probe+0x12c>)
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80056ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056ee:	4619      	mov	r1, r3
 80056f0:	483e      	ldr	r0, [pc, #248]	@ (80057ec <LIS2DW12_0_Probe+0x130>)
 80056f2:	f7fb fb7d 	bl	8000df0 <LIS2DW12_RegisterBusIO>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056fc:	f06f 0306 	mvn.w	r3, #6
 8005700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005702:	e062      	b.n	80057ca <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005704:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005708:	4619      	mov	r1, r3
 800570a:	4838      	ldr	r0, [pc, #224]	@ (80057ec <LIS2DW12_0_Probe+0x130>)
 800570c:	f7fb fc5e 	bl	8000fcc <LIS2DW12_ReadID>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005716:	f06f 0306 	mvn.w	r3, #6
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800571c:	e055      	b.n	80057ca <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800571e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005722:	2b44      	cmp	r3, #68	@ 0x44
 8005724:	d003      	beq.n	800572e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005726:	f06f 0306 	mvn.w	r3, #6
 800572a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800572c:	e04d      	b.n	80057ca <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800572e:	f107 030c 	add.w	r3, r7, #12
 8005732:	4619      	mov	r1, r3
 8005734:	482d      	ldr	r0, [pc, #180]	@ (80057ec <LIS2DW12_0_Probe+0x130>)
 8005736:	f7fb fc5f 	bl	8000ff8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800573a:	7b7b      	ldrb	r3, [r7, #13]
 800573c:	461a      	mov	r2, r3
 800573e:	7b3b      	ldrb	r3, [r7, #12]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	431a      	orrs	r2, r3
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4313      	orrs	r3, r2
 800574a:	4a29      	ldr	r2, [pc, #164]	@ (80057f0 <LIS2DW12_0_Probe+0x134>)
 800574c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800574e:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <LIS2DW12_0_Probe+0x138>)
 8005750:	4a26      	ldr	r2, [pc, #152]	@ (80057ec <LIS2DW12_0_Probe+0x130>)
 8005752:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005754:	4b28      	ldr	r3, [pc, #160]	@ (80057f8 <LIS2DW12_0_Probe+0x13c>)
 8005756:	4a29      	ldr	r2, [pc, #164]	@ (80057fc <LIS2DW12_0_Probe+0x140>)
 8005758:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800575a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11e      	bne.n	800579e <LIS2DW12_0_Probe+0xe2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d019      	beq.n	800579e <LIS2DW12_0_Probe+0xe2>
 800576a:	7b3b      	ldrb	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d116      	bne.n	800579e <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005770:	4b23      	ldr	r3, [pc, #140]	@ (8005800 <LIS2DW12_0_Probe+0x144>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a23      	ldr	r2, [pc, #140]	@ (8005804 <LIS2DW12_0_Probe+0x148>)
 8005776:	3303      	adds	r3, #3
 8005778:	4923      	ldr	r1, [pc, #140]	@ (8005808 <LIS2DW12_0_Probe+0x14c>)
 800577a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <LIS2DW12_0_Probe+0x13c>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <LIS2DW12_0_Probe+0x138>)
 8005786:	6852      	ldr	r2, [r2, #4]
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005792:	f06f 0304 	mvn.w	r3, #4
 8005796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005798:	e001      	b.n	800579e <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800579a:	2300      	movs	r3, #0
 800579c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800579e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d107      	bne.n	80057b4 <LIS2DW12_0_Probe+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80057ae:	f06f 0304 	mvn.w	r3, #4
 80057b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80057b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d107      	bne.n	80057ca <LIS2DW12_0_Probe+0x10e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80057c4:	f06f 0304 	mvn.w	r3, #4
 80057c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80057ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3750      	adds	r7, #80	@ 0x50
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08000911 	.word	0x08000911
 80057d8:	0800098d 	.word	0x0800098d
 80057dc:	08000a41 	.word	0x08000a41
 80057e0:	080009dd 	.word	0x080009dd
 80057e4:	08000aa5 	.word	0x08000aa5
 80057e8:	08005a55 	.word	0x08005a55
 80057ec:	200002c8 	.word	0x200002c8
 80057f0:	20000284 	.word	0x20000284
 80057f4:	20000248 	.word	0x20000248
 80057f8:	20000278 	.word	0x20000278
 80057fc:	20000004 	.word	0x20000004
 8005800:	200000c4 	.word	0x200000c4
 8005804:	20000254 	.word	0x20000254
 8005808:	20000014 	.word	0x20000014

0800580c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b094      	sub	sp, #80	@ 0x50
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005814:	2300      	movs	r3, #0
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005818:	2300      	movs	r3, #0
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800581c:	233d      	movs	r3, #61	@ 0x3d
 800581e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005822:	4b40      	ldr	r3, [pc, #256]	@ (8005924 <LIS2MDL_0_Probe+0x118>)
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005826:	4b40      	ldr	r3, [pc, #256]	@ (8005928 <LIS2MDL_0_Probe+0x11c>)
 8005828:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800582a:	4b40      	ldr	r3, [pc, #256]	@ (800592c <LIS2MDL_0_Probe+0x120>)
 800582c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800582e:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <LIS2MDL_0_Probe+0x124>)
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005832:	4b40      	ldr	r3, [pc, #256]	@ (8005934 <LIS2MDL_0_Probe+0x128>)
 8005834:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005836:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <LIS2MDL_0_Probe+0x12c>)
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800583a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800583e:	4619      	mov	r1, r3
 8005840:	483e      	ldr	r0, [pc, #248]	@ (800593c <LIS2MDL_0_Probe+0x130>)
 8005842:	f7fc fd61 	bl	8002308 <LIS2MDL_RegisterBusIO>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800584c:	f06f 0306 	mvn.w	r3, #6
 8005850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005852:	e062      	b.n	800591a <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005854:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005858:	4619      	mov	r1, r3
 800585a:	4838      	ldr	r0, [pc, #224]	@ (800593c <LIS2MDL_0_Probe+0x130>)
 800585c:	f7fc fe70 	bl	8002540 <LIS2MDL_ReadID>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005866:	f06f 0306 	mvn.w	r3, #6
 800586a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800586c:	e055      	b.n	800591a <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 800586e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005872:	2b40      	cmp	r3, #64	@ 0x40
 8005874:	d003      	beq.n	800587e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005876:	f06f 0306 	mvn.w	r3, #6
 800587a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587c:	e04d      	b.n	800591a <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800587e:	f107 030c 	add.w	r3, r7, #12
 8005882:	4619      	mov	r1, r3
 8005884:	482d      	ldr	r0, [pc, #180]	@ (800593c <LIS2MDL_0_Probe+0x130>)
 8005886:	f7fc fe81 	bl	800258c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800588a:	7b7b      	ldrb	r3, [r7, #13]
 800588c:	461a      	mov	r2, r3
 800588e:	7b3b      	ldrb	r3, [r7, #12]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4313      	orrs	r3, r2
 800589a:	4a29      	ldr	r2, [pc, #164]	@ (8005940 <LIS2MDL_0_Probe+0x134>)
 800589c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800589e:	4b29      	ldr	r3, [pc, #164]	@ (8005944 <LIS2MDL_0_Probe+0x138>)
 80058a0:	4a26      	ldr	r2, [pc, #152]	@ (800593c <LIS2MDL_0_Probe+0x130>)
 80058a2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80058a4:	4b28      	ldr	r3, [pc, #160]	@ (8005948 <LIS2MDL_0_Probe+0x13c>)
 80058a6:	4a29      	ldr	r2, [pc, #164]	@ (800594c <LIS2MDL_0_Probe+0x140>)
 80058a8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80058aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11e      	bne.n	80058ee <LIS2MDL_0_Probe+0xe2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d019      	beq.n	80058ee <LIS2MDL_0_Probe+0xe2>
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d116      	bne.n	80058ee <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80058c0:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <LIS2MDL_0_Probe+0x144>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	4a23      	ldr	r2, [pc, #140]	@ (8005954 <LIS2MDL_0_Probe+0x148>)
 80058c6:	3306      	adds	r3, #6
 80058c8:	4923      	ldr	r1, [pc, #140]	@ (8005958 <LIS2MDL_0_Probe+0x14c>)
 80058ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 80058ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005948 <LIS2MDL_0_Probe+0x13c>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005944 <LIS2MDL_0_Probe+0x138>)
 80058d6:	6892      	ldr	r2, [r2, #8]
 80058d8:	4610      	mov	r0, r2
 80058da:	4798      	blx	r3
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e2:	f06f 0304 	mvn.w	r3, #4
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	e001      	b.n	80058ee <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80058ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <LIS2MDL_0_Probe+0xf8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058fe:	f06f 0304 	mvn.w	r3, #4
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d107      	bne.n	800591a <LIS2MDL_0_Probe+0x10e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005914:	f06f 0304 	mvn.w	r3, #4
 8005918:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800591c:	4618      	mov	r0, r3
 800591e:	3750      	adds	r7, #80	@ 0x50
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08000911 	.word	0x08000911
 8005928:	0800098d 	.word	0x0800098d
 800592c:	08000a41 	.word	0x08000a41
 8005930:	080009dd 	.word	0x080009dd
 8005934:	08000aa5 	.word	0x08000aa5
 8005938:	08005a55 	.word	0x08005a55
 800593c:	20000304 	.word	0x20000304
 8005940:	20000284 	.word	0x20000284
 8005944:	20000248 	.word	0x20000248
 8005948:	20000278 	.word	0x20000278
 800594c:	20000038 	.word	0x20000038
 8005950:	200000c4 	.word	0x200000c4
 8005954:	20000254 	.word	0x20000254
 8005958:	20000048 	.word	0x20000048

0800595c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005966:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <HAL_Init+0x3c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a0b      	ldr	r2, [pc, #44]	@ (8005998 <HAL_Init+0x3c>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005972:	2003      	movs	r0, #3
 8005974:	f000 f944 	bl	8005c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005978:	2000      	movs	r0, #0
 800597a:	f000 f80f 	bl	800599c <HAL_InitTick>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	71fb      	strb	r3, [r7, #7]
 8005988:	e001      	b.n	800598e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800598a:	f7fa ff11 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800598e:	79fb      	ldrb	r3, [r7, #7]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40022000 	.word	0x40022000

0800599c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80059a8:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <HAL_InitTick+0x6c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d023      	beq.n	80059f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80059b0:	4b16      	ldr	r3, [pc, #88]	@ (8005a0c <HAL_InitTick+0x70>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b14      	ldr	r3, [pc, #80]	@ (8005a08 <HAL_InitTick+0x6c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059be:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f941 	bl	8005c4e <HAL_SYSTICK_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b0f      	cmp	r3, #15
 80059d6:	d809      	bhi.n	80059ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059d8:	2200      	movs	r2, #0
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	f000 f919 	bl	8005c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <HAL_InitTick+0x74>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e007      	b.n	80059fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e004      	b.n	80059fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	e001      	b.n	80059fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200000dc 	.word	0x200000dc
 8005a0c:	20000000 	.word	0x20000000
 8005a10:	200000d8 	.word	0x200000d8

08005a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <HAL_IncTick+0x20>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_IncTick+0x24>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4413      	add	r3, r2
 8005a24:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_IncTick+0x24>)
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200000dc 	.word	0x200000dc
 8005a38:	20000338 	.word	0x20000338

08005a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <HAL_GetTick+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000338 	.word	0x20000338

08005a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a5c:	f7ff ffee 	bl	8005a3c <HAL_GetTick>
 8005a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d005      	beq.n	8005a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_Delay+0x44>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a7a:	bf00      	nop
 8005a7c:	f7ff ffde 	bl	8005a3c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d8f7      	bhi.n	8005a7c <HAL_Delay+0x28>
  {
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	200000dc 	.word	0x200000dc

08005a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ace:	4a04      	ldr	r2, [pc, #16]	@ (8005ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	60d3      	str	r3, [r2, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae8:	4b04      	ldr	r3, [pc, #16]	@ (8005afc <__NVIC_GetPriorityGrouping+0x18>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	f003 0307 	and.w	r3, r3, #7
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db0a      	blt.n	8005b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	490c      	ldr	r1, [pc, #48]	@ (8005b4c <__NVIC_SetPriority+0x4c>)
 8005b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	440b      	add	r3, r1
 8005b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b28:	e00a      	b.n	8005b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4908      	ldr	r1, [pc, #32]	@ (8005b50 <__NVIC_SetPriority+0x50>)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3b04      	subs	r3, #4
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	761a      	strb	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	e000e100 	.word	0xe000e100
 8005b50:	e000ed00 	.word	0xe000ed00

08005b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	@ 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf28      	it	cs
 8005b72:	2304      	movcs	r3, #4
 8005b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d902      	bls.n	8005b84 <NVIC_EncodePriority+0x30>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3b03      	subs	r3, #3
 8005b82:	e000      	b.n	8005b86 <NVIC_EncodePriority+0x32>
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	401a      	ands	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	43d9      	mvns	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	4313      	orrs	r3, r2
         );
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3724      	adds	r7, #36	@ 0x24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bcc:	d301      	bcc.n	8005bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e00f      	b.n	8005bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bfc <SysTick_Config+0x40>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bda:	210f      	movs	r1, #15
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	f7ff ff8e 	bl	8005b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005be4:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <SysTick_Config+0x40>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bea:	4b04      	ldr	r3, [pc, #16]	@ (8005bfc <SysTick_Config+0x40>)
 8005bec:	2207      	movs	r2, #7
 8005bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	e000e010 	.word	0xe000e010

08005c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff ff47 	bl	8005a9c <__NVIC_SetPriorityGrouping>
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
 8005c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c28:	f7ff ff5c 	bl	8005ae4 <__NVIC_GetPriorityGrouping>
 8005c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7ff ff8e 	bl	8005b54 <NVIC_EncodePriority>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff5d 	bl	8005b00 <__NVIC_SetPriority>
}
 8005c46:	bf00      	nop
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ffb0 	bl	8005bbc <SysTick_Config>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c76:	e154      	b.n	8005f22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8146 	beq.w	8005f1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d005      	beq.n	8005ca8 <HAL_GPIO_Init+0x40>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d130      	bne.n	8005d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cde:	2201      	movs	r2, #1
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4013      	ands	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	f003 0201 	and.w	r2, r3, #1
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d017      	beq.n	8005d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2203      	movs	r2, #3
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d123      	bne.n	8005d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	08da      	lsrs	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3208      	adds	r2, #8
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	220f      	movs	r2, #15
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3208      	adds	r2, #8
 8005d94:	6939      	ldr	r1, [r7, #16]
 8005d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4013      	ands	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0203 	and.w	r2, r3, #3
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80a0 	beq.w	8005f1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ddc:	4b58      	ldr	r3, [pc, #352]	@ (8005f40 <HAL_GPIO_Init+0x2d8>)
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	4a57      	ldr	r2, [pc, #348]	@ (8005f40 <HAL_GPIO_Init+0x2d8>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005de8:	4b55      	ldr	r3, [pc, #340]	@ (8005f40 <HAL_GPIO_Init+0x2d8>)
 8005dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005df4:	4a53      	ldr	r2, [pc, #332]	@ (8005f44 <HAL_GPIO_Init+0x2dc>)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e1e:	d019      	beq.n	8005e54 <HAL_GPIO_Init+0x1ec>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a49      	ldr	r2, [pc, #292]	@ (8005f48 <HAL_GPIO_Init+0x2e0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <HAL_GPIO_Init+0x1e8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a48      	ldr	r2, [pc, #288]	@ (8005f4c <HAL_GPIO_Init+0x2e4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00d      	beq.n	8005e4c <HAL_GPIO_Init+0x1e4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a47      	ldr	r2, [pc, #284]	@ (8005f50 <HAL_GPIO_Init+0x2e8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <HAL_GPIO_Init+0x1e0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a46      	ldr	r2, [pc, #280]	@ (8005f54 <HAL_GPIO_Init+0x2ec>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d101      	bne.n	8005e44 <HAL_GPIO_Init+0x1dc>
 8005e40:	2304      	movs	r3, #4
 8005e42:	e008      	b.n	8005e56 <HAL_GPIO_Init+0x1ee>
 8005e44:	2307      	movs	r3, #7
 8005e46:	e006      	b.n	8005e56 <HAL_GPIO_Init+0x1ee>
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e004      	b.n	8005e56 <HAL_GPIO_Init+0x1ee>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e002      	b.n	8005e56 <HAL_GPIO_Init+0x1ee>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_GPIO_Init+0x1ee>
 8005e54:	2300      	movs	r3, #0
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	f002 0203 	and.w	r2, r2, #3
 8005e5c:	0092      	lsls	r2, r2, #2
 8005e5e:	4093      	lsls	r3, r2
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e66:	4937      	ldr	r1, [pc, #220]	@ (8005f44 <HAL_GPIO_Init+0x2dc>)
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e74:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e98:	4a2f      	ldr	r2, [pc, #188]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ec2:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ec8:	4b23      	ldr	r3, [pc, #140]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005eec:	4a1a      	ldr	r2, [pc, #104]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ef2:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4013      	ands	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f16:	4a10      	ldr	r2, [pc, #64]	@ (8005f58 <HAL_GPIO_Init+0x2f0>)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f aea3 	bne.w	8005c78 <HAL_GPIO_Init+0x10>
  }
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40010000 	.word	0x40010000
 8005f48:	48000400 	.word	0x48000400
 8005f4c:	48000800 	.word	0x48000800
 8005f50:	48000c00 	.word	0x48000c00
 8005f54:	48001000 	.word	0x48001000
 8005f58:	40010400 	.word	0x40010400

08005f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005f6a:	e0b7      	b.n	80060dc <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80aa 	beq.w	80060d6 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005f82:	4a5d      	ldr	r2, [pc, #372]	@ (80060f8 <HAL_GPIO_DeInit+0x19c>)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	089b      	lsrs	r3, r3, #2
 8005f88:	3302      	adds	r3, #2
 8005f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	220f      	movs	r2, #15
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005faa:	d019      	beq.n	8005fe0 <HAL_GPIO_DeInit+0x84>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a53      	ldr	r2, [pc, #332]	@ (80060fc <HAL_GPIO_DeInit+0x1a0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_GPIO_DeInit+0x80>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a52      	ldr	r2, [pc, #328]	@ (8006100 <HAL_GPIO_DeInit+0x1a4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00d      	beq.n	8005fd8 <HAL_GPIO_DeInit+0x7c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a51      	ldr	r2, [pc, #324]	@ (8006104 <HAL_GPIO_DeInit+0x1a8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <HAL_GPIO_DeInit+0x78>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a50      	ldr	r2, [pc, #320]	@ (8006108 <HAL_GPIO_DeInit+0x1ac>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d101      	bne.n	8005fd0 <HAL_GPIO_DeInit+0x74>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	e008      	b.n	8005fe2 <HAL_GPIO_DeInit+0x86>
 8005fd0:	2307      	movs	r3, #7
 8005fd2:	e006      	b.n	8005fe2 <HAL_GPIO_DeInit+0x86>
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e004      	b.n	8005fe2 <HAL_GPIO_DeInit+0x86>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e002      	b.n	8005fe2 <HAL_GPIO_DeInit+0x86>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_GPIO_DeInit+0x86>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	f002 0203 	and.w	r2, r2, #3
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	4093      	lsls	r3, r2
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d132      	bne.n	8006058 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005ff2:	4b46      	ldr	r3, [pc, #280]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	4944      	ldr	r1, [pc, #272]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006000:	4b42      	ldr	r3, [pc, #264]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	43db      	mvns	r3, r3
 8006008:	4940      	ldr	r1, [pc, #256]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 800600a:	4013      	ands	r3, r2
 800600c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	43db      	mvns	r3, r3
 8006016:	493d      	ldr	r1, [pc, #244]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8006018:	4013      	ands	r3, r2
 800601a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800601c:	4b3b      	ldr	r3, [pc, #236]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	43db      	mvns	r3, r3
 8006024:	4939      	ldr	r1, [pc, #228]	@ (800610c <HAL_GPIO_DeInit+0x1b0>)
 8006026:	4013      	ands	r3, r2
 8006028:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	220f      	movs	r2, #15
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800603a:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <HAL_GPIO_DeInit+0x19c>)
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	3302      	adds	r3, #2
 8006042:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	43da      	mvns	r2, r3
 800604a:	482b      	ldr	r0, [pc, #172]	@ (80060f8 <HAL_GPIO_DeInit+0x19c>)
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	089b      	lsrs	r3, r3, #2
 8006050:	400a      	ands	r2, r1
 8006052:	3302      	adds	r3, #2
 8006054:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	2103      	movs	r1, #3
 8006062:	fa01 f303 	lsl.w	r3, r1, r3
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	08da      	lsrs	r2, r3, #3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3208      	adds	r2, #8
 8006074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	220f      	movs	r2, #15
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	08d2      	lsrs	r2, r2, #3
 800608c:	4019      	ands	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3208      	adds	r2, #8
 8006092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2103      	movs	r1, #3
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	401a      	ands	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	2101      	movs	r1, #1
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	401a      	ands	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	2103      	movs	r1, #3
 80060ca:	fa01 f303 	lsl.w	r3, r1, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	401a      	ands	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f af41 	bne.w	8005f6c <HAL_GPIO_DeInit+0x10>
  }
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40010000 	.word	0x40010000
 80060fc:	48000400 	.word	0x48000400
 8006100:	48000800 	.word	0x48000800
 8006104:	48000c00 	.word	0x48000c00
 8006108:	48001000 	.word	0x48001000
 800610c:	40010400 	.word	0x40010400

08006110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
 800611c:	4613      	mov	r3, r2
 800611e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006120:	787b      	ldrb	r3, [r7, #1]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800612c:	e002      	b.n	8006134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e08d      	b.n	800626e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8b4 	bl	80062d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	@ 0x24
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006190:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	e006      	b.n	80061c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80061c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d108      	bne.n	80061e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	e007      	b.n	80061f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e021      	b.n	80062cc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	@ 0x24
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f821 	bl	80062e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	4603      	mov	r3, r0
 800630c:	817b      	strh	r3, [r7, #10]
 800630e:	460b      	mov	r3, r1
 8006310:	813b      	strh	r3, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	f040 80f9 	bne.w	8006516 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_I2C_Mem_Write+0x34>
 800632a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006336:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0ed      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_I2C_Mem_Write+0x4e>
 8006346:	2302      	movs	r3, #2
 8006348:	e0e6      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006352:	f7ff fb73 	bl	8005a3c <HAL_GetTick>
 8006356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2319      	movs	r3, #25
 800635e:	2201      	movs	r2, #1
 8006360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fadd 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0d1      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2221      	movs	r2, #33	@ 0x21
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2240      	movs	r2, #64	@ 0x40
 8006380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800639c:	88f8      	ldrh	r0, [r7, #6]
 800639e:	893a      	ldrh	r2, [r7, #8]
 80063a0:	8979      	ldrh	r1, [r7, #10]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4603      	mov	r3, r0
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f9ed 	bl	800678c <I2C_RequestMemoryWrite>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0a9      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2bff      	cmp	r3, #255	@ 0xff
 80063cc:	d90e      	bls.n	80063ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	22ff      	movs	r2, #255	@ 0xff
 80063d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	8979      	ldrh	r1, [r7, #10]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fc61 	bl	8006cac <I2C_TransferConfig>
 80063ea:	e00f      	b.n	800640c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	8979      	ldrh	r1, [r7, #10]
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fc50 	bl	8006cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fae0 	bl	80069d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e07b      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d034      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x1c8>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d130      	bne.n	80064c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	2200      	movs	r2, #0
 800646a:	2180      	movs	r1, #128	@ 0x80
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa59 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e04d      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2bff      	cmp	r3, #255	@ 0xff
 8006484:	d90e      	bls.n	80064a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	22ff      	movs	r2, #255	@ 0xff
 800648a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006490:	b2da      	uxtb	r2, r3
 8006492:	8979      	ldrh	r1, [r7, #10]
 8006494:	2300      	movs	r3, #0
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fc05 	bl	8006cac <I2C_TransferConfig>
 80064a2:	e00f      	b.n	80064c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	8979      	ldrh	r1, [r7, #10]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fbf4 	bl	8006cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d19e      	bne.n	800640c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fac6 	bl	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e01a      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2220      	movs	r2, #32
 80064e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <HAL_I2C_Mem_Write+0x224>)
 80064f6:	400b      	ands	r3, r1
 80064f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006516:	2302      	movs	r3, #2
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	fe00e800 	.word	0xfe00e800

08006524 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	817b      	strh	r3, [r7, #10]
 8006536:	460b      	mov	r3, r1
 8006538:	813b      	strh	r3, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b20      	cmp	r3, #32
 8006548:	f040 80fd 	bne.w	8006746 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_I2C_Mem_Read+0x34>
 8006552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800655e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0f1      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_I2C_Mem_Read+0x4e>
 800656e:	2302      	movs	r3, #2
 8006570:	e0ea      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800657a:	f7ff fa5f 	bl	8005a3c <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2319      	movs	r3, #25
 8006586:	2201      	movs	r2, #1
 8006588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f9c9 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e0d5      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2222      	movs	r2, #34	@ 0x22
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80065bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065c4:	88f8      	ldrh	r0, [r7, #6]
 80065c6:	893a      	ldrh	r2, [r7, #8]
 80065c8:	8979      	ldrh	r1, [r7, #10]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4603      	mov	r3, r0
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f92d 	bl	8006834 <I2C_RequestMemoryRead>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0ad      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2bff      	cmp	r3, #255	@ 0xff
 80065f4:	d90e      	bls.n	8006614 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8979      	ldrh	r1, [r7, #10]
 8006604:	4b52      	ldr	r3, [pc, #328]	@ (8006750 <HAL_I2C_Mem_Read+0x22c>)
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fb4d 	bl	8006cac <I2C_TransferConfig>
 8006612:	e00f      	b.n	8006634 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	8979      	ldrh	r1, [r7, #10]
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_I2C_Mem_Read+0x22c>)
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fb3c 	bl	8006cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	2200      	movs	r2, #0
 800663c:	2104      	movs	r1, #4
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f970 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e07c      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d034      	beq.n	80066f4 <HAL_I2C_Mem_Read+0x1d0>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d130      	bne.n	80066f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	2200      	movs	r2, #0
 800669a:	2180      	movs	r1, #128	@ 0x80
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f941 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e04d      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2bff      	cmp	r3, #255	@ 0xff
 80066b4:	d90e      	bls.n	80066d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	8979      	ldrh	r1, [r7, #10]
 80066c4:	2300      	movs	r3, #0
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 faed 	bl	8006cac <I2C_TransferConfig>
 80066d2:	e00f      	b.n	80066f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	8979      	ldrh	r1, [r7, #10]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fadc 	bl	8006cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d19a      	bne.n	8006634 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f9ae 	bl	8006a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e01a      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2220      	movs	r2, #32
 8006718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <HAL_I2C_Mem_Read+0x230>)
 8006726:	400b      	ands	r3, r1
 8006728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	80002400 	.word	0x80002400
 8006754:	fe00e800 	.word	0xfe00e800

08006758 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006766:	b2db      	uxtb	r3, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	4608      	mov	r0, r1
 8006796:	4611      	mov	r1, r2
 8006798:	461a      	mov	r2, r3
 800679a:	4603      	mov	r3, r0
 800679c:	817b      	strh	r3, [r7, #10]
 800679e:	460b      	mov	r3, r1
 80067a0:	813b      	strh	r3, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	8979      	ldrh	r1, [r7, #10]
 80067ac:	4b20      	ldr	r3, [pc, #128]	@ (8006830 <I2C_RequestMemoryWrite+0xa4>)
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fa79 	bl	8006cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f909 	bl	80069d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e02c      	b.n	8006828 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d105      	bne.n	80067e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067d4:	893b      	ldrh	r3, [r7, #8]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80067de:	e015      	b.n	800680c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067e0:	893b      	ldrh	r3, [r7, #8]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	69b9      	ldr	r1, [r7, #24]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f8ef 	bl	80069d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e012      	b.n	8006828 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006802:	893b      	ldrh	r3, [r7, #8]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2200      	movs	r2, #0
 8006814:	2180      	movs	r1, #128	@ 0x80
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f884 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	80002000 	.word	0x80002000

08006834 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	4608      	mov	r0, r1
 800683e:	4611      	mov	r1, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4603      	mov	r3, r0
 8006844:	817b      	strh	r3, [r7, #10]
 8006846:	460b      	mov	r3, r1
 8006848:	813b      	strh	r3, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	8979      	ldrh	r1, [r7, #10]
 8006854:	4b20      	ldr	r3, [pc, #128]	@ (80068d8 <I2C_RequestMemoryRead+0xa4>)
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa26 	bl	8006cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	69b9      	ldr	r1, [r7, #24]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f8b6 	bl	80069d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e02c      	b.n	80068ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d105      	bne.n	8006886 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	629a      	str	r2, [r3, #40]	@ 0x28
 8006884:	e015      	b.n	80068b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006886:	893b      	ldrh	r3, [r7, #8]
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	b29b      	uxth	r3, r3
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	69b9      	ldr	r1, [r7, #24]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f89c 	bl	80069d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e012      	b.n	80068ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a8:	893b      	ldrh	r3, [r7, #8]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2140      	movs	r1, #64	@ 0x40
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f831 	bl	8006924 <I2C_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	80002000 	.word	0x80002000

080068dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d103      	bne.n	80068fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d007      	beq.n	8006918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	619a      	str	r2, [r3, #24]
  }
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	4613      	mov	r3, r2
 8006932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006934:	e03b      	b.n	80069ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f8d6 	bl	8006aec <I2C_IsErrorOccurred>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e041      	b.n	80069ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d02d      	beq.n	80069ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7ff f873 	bl	8005a3c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d122      	bne.n	80069ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4013      	ands	r3, r2
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	429a      	cmp	r2, r3
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	429a      	cmp	r2, r3
 8006984:	d113      	bne.n	80069ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e00f      	b.n	80069ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4013      	ands	r3, r2
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	bf0c      	ite	eq
 80069be:	2301      	moveq	r3, #1
 80069c0:	2300      	movne	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d0b4      	beq.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069e2:	e033      	b.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f87f 	bl	8006aec <I2C_IsErrorOccurred>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e031      	b.n	8006a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d025      	beq.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7ff f81c 	bl	8005a3c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d11a      	bne.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d013      	beq.n	8006a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e007      	b.n	8006a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d1c4      	bne.n	80069e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a70:	e02f      	b.n	8006ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f838 	bl	8006aec <I2C_IsErrorOccurred>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e02d      	b.n	8006ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fe ffd9 	bl	8005a3c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11a      	bne.n	8006ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d013      	beq.n	8006ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e007      	b.n	8006ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d1c8      	bne.n	8006a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	@ 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d068      	beq.n	8006bea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2210      	movs	r2, #16
 8006b1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b20:	e049      	b.n	8006bb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d045      	beq.n	8006bb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fe ff87 	bl	8005a3c <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <I2C_IsErrorOccurred+0x54>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d13a      	bne.n	8006bb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b62:	d121      	bne.n	8006ba8 <I2C_IsErrorOccurred+0xbc>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b6a:	d01d      	beq.n	8006ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d01a      	beq.n	8006ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b82:	f7fe ff5b 	bl	8005a3c <HAL_GetTick>
 8006b86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b88:	e00e      	b.n	8006ba8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b8a:	f7fe ff57 	bl	8005a3c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b19      	cmp	r3, #25
 8006b96:	d907      	bls.n	8006ba8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	f043 0320 	orr.w	r3, r3, #32
 8006b9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ba6:	e006      	b.n	8006bb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d1e9      	bne.n	8006b8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d003      	beq.n	8006bcc <I2C_IsErrorOccurred+0xe0>
 8006bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0aa      	beq.n	8006b22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	f043 0304 	orr.w	r3, r3, #4
 8006be2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f043 0308 	orr.w	r3, r3, #8
 8006c24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f043 0302 	orr.w	r3, r3, #2
 8006c46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01c      	beq.n	8006c9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fe3b 	bl	80068dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <I2C_IsErrorOccurred+0x1bc>)
 8006c72:	400b      	ands	r3, r1
 8006c74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	@ 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	fe00e800 	.word	0xfe00e800

08006cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	817b      	strh	r3, [r7, #10]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cbe:	897b      	ldrh	r3, [r7, #10]
 8006cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cc4:	7a7b      	ldrb	r3, [r7, #9]
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ccc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	0d5b      	lsrs	r3, r3, #21
 8006ce6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006cea:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <I2C_TransferConfig+0x60>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	43db      	mvns	r3, r3
 8006cf0:	ea02 0103 	and.w	r1, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	03ff63ff 	.word	0x03ff63ff

08006d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d138      	bne.n	8006d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e032      	b.n	8006d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2224      	movs	r2, #36	@ 0x24
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6819      	ldr	r1, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d139      	bne.n	8006e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e033      	b.n	8006e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2224      	movs	r2, #36	@ 0x24
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e000      	b.n	8006e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006e44:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40007000 	.word	0x40007000

08006e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e6a:	d130      	bne.n	8006ece <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6c:	4b23      	ldr	r3, [pc, #140]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e78:	d038      	beq.n	8006eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e7a:	4b20      	ldr	r3, [pc, #128]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e82:	4a1e      	ldr	r2, [pc, #120]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2232      	movs	r2, #50	@ 0x32
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	4a1b      	ldr	r2, [pc, #108]	@ (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	0c9b      	lsrs	r3, r3, #18
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ea0:	e002      	b.n	8006ea8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb4:	d102      	bne.n	8006ebc <HAL_PWREx_ControlVoltageScaling+0x60>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f2      	bne.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec8:	d110      	bne.n	8006eec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e00f      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ece:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eda:	d007      	beq.n	8006eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006edc:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ee4:	4a05      	ldr	r2, [pc, #20]	@ (8006efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006eea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40007000 	.word	0x40007000
 8006f00:	20000000 	.word	0x20000000
 8006f04:	431bde83 	.word	0x431bde83

08006f08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f000 bc02 	b.w	8007720 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f1c:	4b96      	ldr	r3, [pc, #600]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 030c 	and.w	r3, r3, #12
 8006f24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f26:	4b94      	ldr	r3, [pc, #592]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80e4 	beq.w	8007106 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HAL_RCC_OscConfig+0x4c>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	f040 808b 	bne.w	8007062 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	f040 8087 	bne.w	8007062 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f54:	4b88      	ldr	r3, [pc, #544]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_OscConfig+0x64>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e3d9      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1a      	ldr	r2, [r3, #32]
 8006f70:	4b81      	ldr	r3, [pc, #516]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_RCC_OscConfig+0x7e>
 8006f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f84:	e005      	b.n	8006f92 <HAL_RCC_OscConfig+0x8a>
 8006f86:	4b7c      	ldr	r3, [pc, #496]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d223      	bcs.n	8006fde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fd8c 	bl	8007ab8 <RCC_SetFlashLatencyFromMSIRange>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e3ba      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006faa:	4b73      	ldr	r3, [pc, #460]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a72      	ldr	r2, [pc, #456]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fb0:	f043 0308 	orr.w	r3, r3, #8
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b70      	ldr	r3, [pc, #448]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	496d      	ldr	r1, [pc, #436]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	4968      	ldr	r1, [pc, #416]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	604b      	str	r3, [r1, #4]
 8006fdc:	e025      	b.n	800702a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fde:	4b66      	ldr	r3, [pc, #408]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a65      	ldr	r2, [pc, #404]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	f043 0308 	orr.w	r3, r3, #8
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b63      	ldr	r3, [pc, #396]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	4960      	ldr	r1, [pc, #384]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	495b      	ldr	r1, [pc, #364]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd4c 	bl	8007ab8 <RCC_SetFlashLatencyFromMSIRange>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e37a      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800702a:	f000 fc81 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800702e:	4602      	mov	r2, r0
 8007030:	4b51      	ldr	r3, [pc, #324]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	4950      	ldr	r1, [pc, #320]	@ (800717c <HAL_RCC_OscConfig+0x274>)
 800703c:	5ccb      	ldrb	r3, [r1, r3]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	4a4e      	ldr	r2, [pc, #312]	@ (8007180 <HAL_RCC_OscConfig+0x278>)
 8007048:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800704a:	4b4e      	ldr	r3, [pc, #312]	@ (8007184 <HAL_RCC_OscConfig+0x27c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fca4 	bl	800599c <HAL_InitTick>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d052      	beq.n	8007104 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	e35e      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d032      	beq.n	80070d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800706a:	4b43      	ldr	r3, [pc, #268]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a42      	ldr	r2, [pc, #264]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007076:	f7fe fce1 	bl	8005a3c <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800707e:	f7fe fcdd 	bl	8005a3c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e347      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007090:	4b39      	ldr	r3, [pc, #228]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800709c:	4b36      	ldr	r3, [pc, #216]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a35      	ldr	r2, [pc, #212]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070a2:	f043 0308 	orr.w	r3, r3, #8
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b33      	ldr	r3, [pc, #204]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	4930      	ldr	r1, [pc, #192]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	492b      	ldr	r1, [pc, #172]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
 80070ce:	e01a      	b.n	8007106 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070d0:	4b29      	ldr	r3, [pc, #164]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a28      	ldr	r2, [pc, #160]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070d6:	f023 0301 	bic.w	r3, r3, #1
 80070da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070dc:	f7fe fcae 	bl	8005a3c <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070e4:	f7fe fcaa 	bl	8005a3c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e314      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070f6:	4b20      	ldr	r3, [pc, #128]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x1dc>
 8007102:	e000      	b.n	8007106 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d073      	beq.n	80071fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b08      	cmp	r3, #8
 8007116:	d005      	beq.n	8007124 <HAL_RCC_OscConfig+0x21c>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b0c      	cmp	r3, #12
 800711c:	d10e      	bne.n	800713c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d10b      	bne.n	800713c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007124:	4b14      	ldr	r3, [pc, #80]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d063      	beq.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d15f      	bne.n	80071f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e2f1      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007144:	d106      	bne.n	8007154 <HAL_RCC_OscConfig+0x24c>
 8007146:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a0b      	ldr	r2, [pc, #44]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 800714c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	e025      	b.n	80071a0 <HAL_RCC_OscConfig+0x298>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800715c:	d114      	bne.n	8007188 <HAL_RCC_OscConfig+0x280>
 800715e:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a05      	ldr	r2, [pc, #20]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a02      	ldr	r2, [pc, #8]	@ (8007178 <HAL_RCC_OscConfig+0x270>)
 8007170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e013      	b.n	80071a0 <HAL_RCC_OscConfig+0x298>
 8007178:	40021000 	.word	0x40021000
 800717c:	08009ba8 	.word	0x08009ba8
 8007180:	20000000 	.word	0x20000000
 8007184:	200000d8 	.word	0x200000d8
 8007188:	4ba0      	ldr	r3, [pc, #640]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a9f      	ldr	r2, [pc, #636]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800718e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	4b9d      	ldr	r3, [pc, #628]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a9c      	ldr	r2, [pc, #624]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800719a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800719e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d013      	beq.n	80071d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a8:	f7fe fc48 	bl	8005a3c <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b0:	f7fe fc44 	bl	8005a3c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b64      	cmp	r3, #100	@ 0x64
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e2ae      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071c2:	4b92      	ldr	r3, [pc, #584]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0x2a8>
 80071ce:	e014      	b.n	80071fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fe fc34 	bl	8005a3c <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071d8:	f7fe fc30 	bl	8005a3c <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	@ 0x64
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e29a      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ea:	4b88      	ldr	r3, [pc, #544]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x2d0>
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d060      	beq.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d005      	beq.n	8007218 <HAL_RCC_OscConfig+0x310>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b0c      	cmp	r3, #12
 8007210:	d119      	bne.n	8007246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d116      	bne.n	8007246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007218:	4b7c      	ldr	r3, [pc, #496]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <HAL_RCC_OscConfig+0x328>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e277      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007230:	4b76      	ldr	r3, [pc, #472]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	4973      	ldr	r1, [pc, #460]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007240:	4313      	orrs	r3, r2
 8007242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007244:	e040      	b.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d023      	beq.n	8007296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800724e:	4b6f      	ldr	r3, [pc, #444]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a6e      	ldr	r2, [pc, #440]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725a:	f7fe fbef 	bl	8005a3c <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007262:	f7fe fbeb 	bl	8005a3c <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e255      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007274:	4b65      	ldr	r3, [pc, #404]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007280:	4b62      	ldr	r3, [pc, #392]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	061b      	lsls	r3, r3, #24
 800728e:	495f      	ldr	r1, [pc, #380]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007290:	4313      	orrs	r3, r2
 8007292:	604b      	str	r3, [r1, #4]
 8007294:	e018      	b.n	80072c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007296:	4b5d      	ldr	r3, [pc, #372]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a5c      	ldr	r2, [pc, #368]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800729c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fe fbcb 	bl	8005a3c <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072aa:	f7fe fbc7 	bl	8005a3c <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e231      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072bc:	4b53      	ldr	r3, [pc, #332]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1f0      	bne.n	80072aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d03c      	beq.n	800734e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01c      	beq.n	8007316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072dc:	4b4b      	ldr	r3, [pc, #300]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80072de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072e2:	4a4a      	ldr	r2, [pc, #296]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7fe fba6 	bl	8005a3c <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f4:	f7fe fba2 	bl	8005a3c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e20c      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007306:	4b41      	ldr	r3, [pc, #260]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0ef      	beq.n	80072f4 <HAL_RCC_OscConfig+0x3ec>
 8007314:	e01b      	b.n	800734e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007316:	4b3d      	ldr	r3, [pc, #244]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731c:	4a3b      	ldr	r2, [pc, #236]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fe fb89 	bl	8005a3c <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800732e:	f7fe fb85 	bl	8005a3c <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e1ef      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007340:	4b32      	ldr	r3, [pc, #200]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1ef      	bne.n	800732e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a6 	beq.w	80074a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800735c:	2300      	movs	r3, #0
 800735e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007360:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800736c:	4b27      	ldr	r3, [pc, #156]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007370:	4a26      	ldr	r2, [pc, #152]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007376:	6593      	str	r3, [r2, #88]	@ 0x58
 8007378:	4b24      	ldr	r3, [pc, #144]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 800737a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800737c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007384:	2301      	movs	r3, #1
 8007386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007388:	4b21      	ldr	r3, [pc, #132]	@ (8007410 <HAL_RCC_OscConfig+0x508>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d118      	bne.n	80073c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007394:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <HAL_RCC_OscConfig+0x508>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1d      	ldr	r2, [pc, #116]	@ (8007410 <HAL_RCC_OscConfig+0x508>)
 800739a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a0:	f7fe fb4c 	bl	8005a3c <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a8:	f7fe fb48 	bl	8005a3c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e1b2      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ba:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <HAL_RCC_OscConfig+0x508>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d108      	bne.n	80073e0 <HAL_RCC_OscConfig+0x4d8>
 80073ce:	4b0f      	ldr	r3, [pc, #60]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d4:	4a0d      	ldr	r2, [pc, #52]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073de:	e029      	b.n	8007434 <HAL_RCC_OscConfig+0x52c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d115      	bne.n	8007414 <HAL_RCC_OscConfig+0x50c>
 80073e8:	4b08      	ldr	r3, [pc, #32]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	4a07      	ldr	r2, [pc, #28]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80073f0:	f043 0304 	orr.w	r3, r3, #4
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80073f8:	4b04      	ldr	r3, [pc, #16]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fe:	4a03      	ldr	r2, [pc, #12]	@ (800740c <HAL_RCC_OscConfig+0x504>)
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007408:	e014      	b.n	8007434 <HAL_RCC_OscConfig+0x52c>
 800740a:	bf00      	nop
 800740c:	40021000 	.word	0x40021000
 8007410:	40007000 	.word	0x40007000
 8007414:	4b9a      	ldr	r3, [pc, #616]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741a:	4a99      	ldr	r2, [pc, #612]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007424:	4b96      	ldr	r3, [pc, #600]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742a:	4a95      	ldr	r2, [pc, #596]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800742c:	f023 0304 	bic.w	r3, r3, #4
 8007430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d016      	beq.n	800746a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743c:	f7fe fafe 	bl	8005a3c <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007442:	e00a      	b.n	800745a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007444:	f7fe fafa 	bl	8005a3c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007452:	4293      	cmp	r3, r2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e162      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800745a:	4b89      	ldr	r3, [pc, #548]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0ed      	beq.n	8007444 <HAL_RCC_OscConfig+0x53c>
 8007468:	e015      	b.n	8007496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746a:	f7fe fae7 	bl	8005a3c <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fe fae3 	bl	8005a3c <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e14b      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007488:	4b7d      	ldr	r3, [pc, #500]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1ed      	bne.n	8007472 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d105      	bne.n	80074a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800749c:	4b78      	ldr	r3, [pc, #480]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800749e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a0:	4a77      	ldr	r2, [pc, #476]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d03c      	beq.n	800752e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01c      	beq.n	80074f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074bc:	4b70      	ldr	r3, [pc, #448]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fe fab6 	bl	8005a3c <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074d4:	f7fe fab2 	bl	8005a3c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e11c      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074e6:	4b66      	ldr	r3, [pc, #408]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0ef      	beq.n	80074d4 <HAL_RCC_OscConfig+0x5cc>
 80074f4:	e01b      	b.n	800752e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074f6:	4b62      	ldr	r3, [pc, #392]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074fc:	4a60      	ldr	r2, [pc, #384]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007506:	f7fe fa99 	bl	8005a3c <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800750e:	f7fe fa95 	bl	8005a3c <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e0ff      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007520:	4b57      	ldr	r3, [pc, #348]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1ef      	bne.n	800750e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80f3 	beq.w	800771e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	2b02      	cmp	r3, #2
 800753e:	f040 80c9 	bne.w	80076d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007542:	4b4f      	ldr	r3, [pc, #316]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f003 0203 	and.w	r2, r3, #3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	429a      	cmp	r2, r3
 8007554:	d12c      	bne.n	80075b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007560:	3b01      	subs	r3, #1
 8007562:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d123      	bne.n	80075b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007572:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d11b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d113      	bne.n	80075b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	3b01      	subs	r3, #1
 8007596:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007598:	429a      	cmp	r2, r3
 800759a:	d109      	bne.n	80075b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	3b01      	subs	r3, #1
 80075aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d06b      	beq.n	8007688 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b0c      	cmp	r3, #12
 80075b4:	d062      	beq.n	800767c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075b6:	4b32      	ldr	r3, [pc, #200]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e0ac      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80075c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80075cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075d2:	f7fe fa33 	bl	8005a3c <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075da:	f7fe fa2f 	bl	8005a3c <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e099      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ec:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f0      	bne.n	80075da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075f8:	4b21      	ldr	r3, [pc, #132]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	4b21      	ldr	r3, [pc, #132]	@ (8007684 <HAL_RCC_OscConfig+0x77c>)
 80075fe:	4013      	ands	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007608:	3a01      	subs	r2, #1
 800760a:	0112      	lsls	r2, r2, #4
 800760c:	4311      	orrs	r1, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007612:	0212      	lsls	r2, r2, #8
 8007614:	4311      	orrs	r1, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800761a:	0852      	lsrs	r2, r2, #1
 800761c:	3a01      	subs	r2, #1
 800761e:	0552      	lsls	r2, r2, #21
 8007620:	4311      	orrs	r1, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007626:	0852      	lsrs	r2, r2, #1
 8007628:	3a01      	subs	r2, #1
 800762a:	0652      	lsls	r2, r2, #25
 800762c:	4311      	orrs	r1, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007632:	06d2      	lsls	r2, r2, #27
 8007634:	430a      	orrs	r2, r1
 8007636:	4912      	ldr	r1, [pc, #72]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007638:	4313      	orrs	r3, r2
 800763a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800763c:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0f      	ldr	r2, [pc, #60]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4a0c      	ldr	r2, [pc, #48]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 800764e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007654:	f7fe f9f2 	bl	8005a3c <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800765c:	f7fe f9ee 	bl	8005a3c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e058      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800766e:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <HAL_RCC_OscConfig+0x778>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800767a:	e050      	b.n	800771e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e04f      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
 8007680:	40021000 	.word	0x40021000
 8007684:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007688:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d144      	bne.n	800771e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007694:	4b24      	ldr	r3, [pc, #144]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a23      	ldr	r2, [pc, #140]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 800769a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800769e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076a0:	4b21      	ldr	r3, [pc, #132]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4a20      	ldr	r2, [pc, #128]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 80076a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ac:	f7fe f9c6 	bl	8005a3c <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b4:	f7fe f9c2 	bl	8005a3c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e02c      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0x7ac>
 80076d2:	e024      	b.n	800771e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b0c      	cmp	r3, #12
 80076d8:	d01f      	beq.n	800771a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076da:	4b13      	ldr	r3, [pc, #76]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a12      	ldr	r2, [pc, #72]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 80076e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e6:	f7fe f9a9 	bl	8005a3c <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ee:	f7fe f9a5 	bl	8005a3c <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e00f      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007700:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f0      	bne.n	80076ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800770c:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	4905      	ldr	r1, [pc, #20]	@ (8007728 <HAL_RCC_OscConfig+0x820>)
 8007712:	4b06      	ldr	r3, [pc, #24]	@ (800772c <HAL_RCC_OscConfig+0x824>)
 8007714:	4013      	ands	r3, r2
 8007716:	60cb      	str	r3, [r1, #12]
 8007718:	e001      	b.n	800771e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40021000 	.word	0x40021000
 800772c:	feeefffc 	.word	0xfeeefffc

08007730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0e7      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007744:	4b75      	ldr	r3, [pc, #468]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d910      	bls.n	8007774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007752:	4b72      	ldr	r3, [pc, #456]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 0207 	bic.w	r2, r3, #7
 800775a:	4970      	ldr	r1, [pc, #448]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007762:	4b6e      	ldr	r3, [pc, #440]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d001      	beq.n	8007774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0cf      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	4b66      	ldr	r3, [pc, #408]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800778c:	429a      	cmp	r2, r3
 800778e:	d908      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007790:	4b63      	ldr	r3, [pc, #396]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	4960      	ldr	r1, [pc, #384]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d04c      	beq.n	8007848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d107      	bne.n	80077c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077b6:	4b5a      	ldr	r3, [pc, #360]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d121      	bne.n	8007806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0a6      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d107      	bne.n	80077de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ce:	4b54      	ldr	r3, [pc, #336]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d115      	bne.n	8007806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e09a      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d107      	bne.n	80077f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e08e      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e086      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007806:	4b46      	ldr	r3, [pc, #280]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 0203 	bic.w	r2, r3, #3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	4943      	ldr	r1, [pc, #268]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007814:	4313      	orrs	r3, r2
 8007816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007818:	f7fe f910 	bl	8005a3c <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781e:	e00a      	b.n	8007836 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007820:	f7fe f90c 	bl	8005a3c <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782e:	4293      	cmp	r3, r2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e06e      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007836:	4b3a      	ldr	r3, [pc, #232]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 020c 	and.w	r2, r3, #12
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	429a      	cmp	r2, r3
 8007846:	d1eb      	bne.n	8007820 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	4b31      	ldr	r3, [pc, #196]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007860:	429a      	cmp	r2, r3
 8007862:	d208      	bcs.n	8007876 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007864:	4b2e      	ldr	r3, [pc, #184]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	492b      	ldr	r1, [pc, #172]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 8007872:	4313      	orrs	r3, r2
 8007874:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007876:	4b29      	ldr	r3, [pc, #164]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d210      	bcs.n	80078a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007884:	4b25      	ldr	r3, [pc, #148]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f023 0207 	bic.w	r2, r3, #7
 800788c:	4923      	ldr	r1, [pc, #140]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007894:	4b21      	ldr	r3, [pc, #132]	@ (800791c <HAL_RCC_ClockConfig+0x1ec>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d001      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e036      	b.n	8007914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	4918      	ldr	r1, [pc, #96]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078d0:	4b13      	ldr	r3, [pc, #76]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4910      	ldr	r1, [pc, #64]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078e4:	f000 f824 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <HAL_RCC_ClockConfig+0x1f0>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	490b      	ldr	r1, [pc, #44]	@ (8007924 <HAL_RCC_ClockConfig+0x1f4>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	4a09      	ldr	r2, [pc, #36]	@ (8007928 <HAL_RCC_ClockConfig+0x1f8>)
 8007902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007904:	4b09      	ldr	r3, [pc, #36]	@ (800792c <HAL_RCC_ClockConfig+0x1fc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe f847 	bl	800599c <HAL_InitTick>
 800790e:	4603      	mov	r3, r0
 8007910:	72fb      	strb	r3, [r7, #11]

  return status;
 8007912:	7afb      	ldrb	r3, [r7, #11]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40022000 	.word	0x40022000
 8007920:	40021000 	.word	0x40021000
 8007924:	08009ba8 	.word	0x08009ba8
 8007928:	20000000 	.word	0x20000000
 800792c:	200000d8 	.word	0x200000d8

08007930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	@ 0x24
 8007934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	2300      	movs	r3, #0
 800793c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800793e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007948:	4b3b      	ldr	r3, [pc, #236]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <HAL_RCC_GetSysClockFreq+0x34>
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b0c      	cmp	r3, #12
 800795c:	d121      	bne.n	80079a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d11e      	bne.n	80079a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007964:	4b34      	ldr	r3, [pc, #208]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d107      	bne.n	8007980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007970:	4b31      	ldr	r3, [pc, #196]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8007972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	e005      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007980:	4b2d      	ldr	r3, [pc, #180]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800798c:	4a2b      	ldr	r2, [pc, #172]	@ (8007a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10d      	bne.n	80079b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d102      	bne.n	80079ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079a8:	4b25      	ldr	r3, [pc, #148]	@ (8007a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	e004      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d101      	bne.n	80079b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079b4:	4b23      	ldr	r3, [pc, #140]	@ (8007a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80079b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b0c      	cmp	r3, #12
 80079bc:	d134      	bne.n	8007a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079be:	4b1e      	ldr	r3, [pc, #120]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d003      	beq.n	80079d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d003      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0xac>
 80079d4:	e005      	b.n	80079e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80079d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80079d8:	617b      	str	r3, [r7, #20]
      break;
 80079da:	e005      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80079dc:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80079de:	617b      	str	r3, [r7, #20]
      break;
 80079e0:	e002      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	617b      	str	r3, [r7, #20]
      break;
 80079e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079e8:	4b13      	ldr	r3, [pc, #76]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	3301      	adds	r3, #1
 80079f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80079f6:	4b10      	ldr	r3, [pc, #64]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	fb03 f202 	mul.w	r2, r3, r2
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	0e5b      	lsrs	r3, r3, #25
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	3301      	adds	r3, #1
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a28:	69bb      	ldr	r3, [r7, #24]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3724      	adds	r7, #36	@ 0x24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	08009bc0 	.word	0x08009bc0
 8007a40:	00f42400 	.word	0x00f42400
 8007a44:	007a1200 	.word	0x007a1200

08007a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	@ (8007a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000000 	.word	0x20000000

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a64:	f7ff fff0 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	4904      	ldr	r1, [pc, #16]	@ (8007a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a76:	5ccb      	ldrb	r3, [r1, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40021000 	.word	0x40021000
 8007a88:	08009bb8 	.word	0x08009bb8

08007a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a90:	f7ff ffda 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0adb      	lsrs	r3, r3, #11
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	4904      	ldr	r1, [pc, #16]	@ (8007ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aa2:	5ccb      	ldrb	r3, [r1, r3]
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	08009bb8 	.word	0x08009bb8

08007ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ad0:	f7ff f9b6 	bl	8006e40 <HAL_PWREx_GetVoltageRange>
 8007ad4:	6178      	str	r0, [r7, #20]
 8007ad6:	e014      	b.n	8007b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b25      	ldr	r3, [pc, #148]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007adc:	4a24      	ldr	r2, [pc, #144]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ae4:	4b22      	ldr	r3, [pc, #136]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007af0:	f7ff f9a6 	bl	8006e40 <HAL_PWREx_GetVoltageRange>
 8007af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007af6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afa:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b08:	d10b      	bne.n	8007b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b80      	cmp	r3, #128	@ 0x80
 8007b0e:	d919      	bls.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b14:	d902      	bls.n	8007b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b16:	2302      	movs	r3, #2
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	e013      	b.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	e010      	b.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b80      	cmp	r3, #128	@ 0x80
 8007b26:	d902      	bls.n	8007b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007b28:	2303      	movs	r3, #3
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	e00a      	b.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b80      	cmp	r3, #128	@ 0x80
 8007b32:	d102      	bne.n	8007b3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b34:	2302      	movs	r3, #2
 8007b36:	613b      	str	r3, [r7, #16]
 8007b38:	e004      	b.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b70      	cmp	r3, #112	@ 0x70
 8007b3e:	d101      	bne.n	8007b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b40:	2301      	movs	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b44:	4b0b      	ldr	r3, [pc, #44]	@ (8007b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f023 0207 	bic.w	r2, r3, #7
 8007b4c:	4909      	ldr	r1, [pc, #36]	@ (8007b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007b54:	4b07      	ldr	r3, [pc, #28]	@ (8007b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d001      	beq.n	8007b66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40021000 	.word	0x40021000
 8007b74:	40022000 	.word	0x40022000

08007b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b80:	2300      	movs	r3, #0
 8007b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b84:	2300      	movs	r3, #0
 8007b86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d031      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b9c:	d01a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ba2:	d814      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bac:	d10f      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007bae:	4b5d      	ldr	r3, [pc, #372]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007bba:	e00c      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fa44 	bl	8008050 <RCCEx_PLLSAI1_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007bcc:	e003      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd6:	7cfb      	ldrb	r3, [r7, #19]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bdc:	4b51      	ldr	r3, [pc, #324]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bea:	494e      	ldr	r1, [pc, #312]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007bf2:	e001      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf4:	7cfb      	ldrb	r3, [r7, #19]
 8007bf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 809e 	beq.w	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c06:	2300      	movs	r3, #0
 8007c08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c0a:	4b46      	ldr	r3, [pc, #280]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00d      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c20:	4b40      	ldr	r3, [pc, #256]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c24:	4a3f      	ldr	r2, [pc, #252]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a39      	ldr	r2, [pc, #228]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c48:	f7fd fef8 	bl	8005a3c <HAL_GetTick>
 8007c4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c4e:	e009      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c50:	f7fd fef4 	bl	8005a3c <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d902      	bls.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	74fb      	strb	r3, [r7, #19]
        break;
 8007c62:	e005      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c64:	4b30      	ldr	r3, [pc, #192]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0ef      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d15a      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c76:	4b2b      	ldr	r3, [pc, #172]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01e      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d019      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c92:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c9e:	4b21      	ldr	r3, [pc, #132]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cae:	4b1d      	ldr	r3, [pc, #116]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cbe:	4a19      	ldr	r2, [pc, #100]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d016      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd0:	f7fd feb4 	bl	8005a3c <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd6:	e00b      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd8:	f7fd feb0 	bl	8005a3c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d902      	bls.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	74fb      	strb	r3, [r7, #19]
            break;
 8007cee:	e006      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0ec      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007cfe:	7cfb      	ldrb	r3, [r7, #19]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d04:	4b07      	ldr	r3, [pc, #28]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d12:	4904      	ldr	r1, [pc, #16]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007d1a:	e009      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d1c:	7cfb      	ldrb	r3, [r7, #19]
 8007d1e:	74bb      	strb	r3, [r7, #18]
 8007d20:	e006      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007d22:	bf00      	nop
 8007d24:	40021000 	.word	0x40021000
 8007d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	7cfb      	ldrb	r3, [r7, #19]
 8007d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d30:	7c7b      	ldrb	r3, [r7, #17]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d105      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d36:	4b9e      	ldr	r3, [pc, #632]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	4a9d      	ldr	r2, [pc, #628]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d4e:	4b98      	ldr	r3, [pc, #608]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d54:	f023 0203 	bic.w	r2, r3, #3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	4994      	ldr	r1, [pc, #592]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d70:	4b8f      	ldr	r3, [pc, #572]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f023 020c 	bic.w	r2, r3, #12
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	498c      	ldr	r1, [pc, #560]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d92:	4b87      	ldr	r3, [pc, #540]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	4983      	ldr	r1, [pc, #524]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007db4:	4b7e      	ldr	r3, [pc, #504]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc2:	497b      	ldr	r1, [pc, #492]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd6:	4b76      	ldr	r3, [pc, #472]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ddc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de4:	4972      	ldr	r1, [pc, #456]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df8:	4b6d      	ldr	r3, [pc, #436]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e06:	496a      	ldr	r1, [pc, #424]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e1a:	4b65      	ldr	r3, [pc, #404]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e28:	4961      	ldr	r1, [pc, #388]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4a:	4959      	ldr	r1, [pc, #356]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e5e:	4b54      	ldr	r3, [pc, #336]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	4950      	ldr	r1, [pc, #320]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e80:	4b4b      	ldr	r3, [pc, #300]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8e:	4948      	ldr	r1, [pc, #288]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ea2:	4b43      	ldr	r3, [pc, #268]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ea8:	f023 0203 	bic.w	r2, r3, #3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	493f      	ldr	r1, [pc, #252]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d028      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed2:	4937      	ldr	r1, [pc, #220]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ee4:	4b32      	ldr	r3, [pc, #200]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4a31      	ldr	r2, [pc, #196]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eee:	60d3      	str	r3, [r2, #12]
 8007ef0:	e011      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007efa:	d10c      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	2101      	movs	r1, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f8a4 	bl	8008050 <RCCEx_PLLSAI1_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007f0c:	7cfb      	ldrb	r3, [r7, #19]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8007f12:	7cfb      	ldrb	r3, [r7, #19]
 8007f14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d028      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f22:	4b23      	ldr	r3, [pc, #140]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f30:	491f      	ldr	r1, [pc, #124]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f40:	d106      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f42:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f4c:	60d3      	str	r3, [r2, #12]
 8007f4e:	e011      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f58:	d10c      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f875 	bl	8008050 <RCCEx_PLLSAI1_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f6a:	7cfb      	ldrb	r3, [r7, #19]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8007f70:	7cfb      	ldrb	r3, [r7, #19]
 8007f72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02b      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f80:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8e:	4908      	ldr	r1, [pc, #32]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f9e:	d109      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fa0:	4b03      	ldr	r3, [pc, #12]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	4a02      	ldr	r2, [pc, #8]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007faa:	60d3      	str	r3, [r2, #12]
 8007fac:	e014      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8007fae:	bf00      	nop
 8007fb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f843 	bl	8008050 <RCCEx_PLLSAI1_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fce:	7cfb      	ldrb	r3, [r7, #19]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8007fd4:	7cfb      	ldrb	r3, [r7, #19]
 8007fd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01c      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fe4:	4b19      	ldr	r3, [pc, #100]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ff2:	4916      	ldr	r1, [pc, #88]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008002:	d10c      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f820 	bl	8008050 <RCCEx_PLLSAI1_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008014:	7cfb      	ldrb	r3, [r7, #19]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800802a:	4b08      	ldr	r3, [pc, #32]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008030:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008038:	4904      	ldr	r1, [pc, #16]	@ (800804c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008040:	7cbb      	ldrb	r3, [r7, #18]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40021000 	.word	0x40021000

08008050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800805e:	4b74      	ldr	r3, [pc, #464]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d018      	beq.n	800809c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800806a:	4b71      	ldr	r3, [pc, #452]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f003 0203 	and.w	r2, r3, #3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d10d      	bne.n	8008096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
       ||
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008082:	4b6b      	ldr	r3, [pc, #428]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	091b      	lsrs	r3, r3, #4
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
       ||
 8008092:	429a      	cmp	r2, r3
 8008094:	d047      	beq.n	8008126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	e044      	b.n	8008126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d018      	beq.n	80080d6 <RCCEx_PLLSAI1_Config+0x86>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d825      	bhi.n	80080f4 <RCCEx_PLLSAI1_Config+0xa4>
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d002      	beq.n	80080b2 <RCCEx_PLLSAI1_Config+0x62>
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d009      	beq.n	80080c4 <RCCEx_PLLSAI1_Config+0x74>
 80080b0:	e020      	b.n	80080f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080b2:	4b5f      	ldr	r3, [pc, #380]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11d      	bne.n	80080fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080c2:	e01a      	b.n	80080fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080c4:	4b5a      	ldr	r3, [pc, #360]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d116      	bne.n	80080fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080d4:	e013      	b.n	80080fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080d6:	4b56      	ldr	r3, [pc, #344]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080e2:	4b53      	ldr	r3, [pc, #332]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080f2:	e006      	b.n	8008102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e004      	b.n	8008104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080fa:	bf00      	nop
 80080fc:	e002      	b.n	8008104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008102:	bf00      	nop
    }

    if(status == HAL_OK)
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10d      	bne.n	8008126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800810a:	4b49      	ldr	r3, [pc, #292]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6819      	ldr	r1, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	430b      	orrs	r3, r1
 8008120:	4943      	ldr	r1, [pc, #268]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008122:	4313      	orrs	r3, r2
 8008124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d17c      	bne.n	8008226 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800812c:	4b40      	ldr	r3, [pc, #256]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a3f      	ldr	r2, [pc, #252]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008138:	f7fd fc80 	bl	8005a3c <HAL_GetTick>
 800813c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800813e:	e009      	b.n	8008154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008140:	f7fd fc7c 	bl	8005a3c <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d902      	bls.n	8008154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	73fb      	strb	r3, [r7, #15]
        break;
 8008152:	e005      	b.n	8008160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008154:	4b36      	ldr	r3, [pc, #216]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1ef      	bne.n	8008140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d15f      	bne.n	8008226 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d110      	bne.n	800818e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800816c:	4b30      	ldr	r3, [pc, #192]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008174:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6892      	ldr	r2, [r2, #8]
 800817c:	0211      	lsls	r1, r2, #8
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68d2      	ldr	r2, [r2, #12]
 8008182:	06d2      	lsls	r2, r2, #27
 8008184:	430a      	orrs	r2, r1
 8008186:	492a      	ldr	r1, [pc, #168]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008188:	4313      	orrs	r3, r2
 800818a:	610b      	str	r3, [r1, #16]
 800818c:	e027      	b.n	80081de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d112      	bne.n	80081ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008194:	4b26      	ldr	r3, [pc, #152]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800819c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6892      	ldr	r2, [r2, #8]
 80081a4:	0211      	lsls	r1, r2, #8
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6912      	ldr	r2, [r2, #16]
 80081aa:	0852      	lsrs	r2, r2, #1
 80081ac:	3a01      	subs	r2, #1
 80081ae:	0552      	lsls	r2, r2, #21
 80081b0:	430a      	orrs	r2, r1
 80081b2:	491f      	ldr	r1, [pc, #124]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	610b      	str	r3, [r1, #16]
 80081b8:	e011      	b.n	80081de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80081c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6892      	ldr	r2, [r2, #8]
 80081ca:	0211      	lsls	r1, r2, #8
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6952      	ldr	r2, [r2, #20]
 80081d0:	0852      	lsrs	r2, r2, #1
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0652      	lsls	r2, r2, #25
 80081d6:	430a      	orrs	r2, r1
 80081d8:	4915      	ldr	r1, [pc, #84]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081de:	4b14      	ldr	r3, [pc, #80]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a13      	ldr	r2, [pc, #76]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ea:	f7fd fc27 	bl	8005a3c <HAL_GetTick>
 80081ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081f0:	e009      	b.n	8008206 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081f2:	f7fd fc23 	bl	8005a3c <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d902      	bls.n	8008206 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	73fb      	strb	r3, [r7, #15]
          break;
 8008204:	e005      	b.n	8008212 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008206:	4b0a      	ldr	r3, [pc, #40]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0ef      	beq.n	80081f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	4903      	ldr	r1, [pc, #12]	@ (8008230 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008222:	4313      	orrs	r3, r2
 8008224:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	40021000 	.word	0x40021000

08008234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e040      	b.n	80082c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7f8 face 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2224      	movs	r2, #36	@ 0x24
 8008260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0201 	bic.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb38 	bl	80088f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8af 	bl	80083e4 <UART_SetConfig>
 8008286:	4603      	mov	r3, r0
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e01b      	b.n	80082c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800829e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbb7 	bl	8008a34 <UART_CheckIdleState>
 80082c6:	4603      	mov	r3, r0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	@ 0x28
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d177      	bne.n	80083d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_UART_Transmit+0x24>
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e070      	b.n	80083da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2221      	movs	r2, #33	@ 0x21
 8008304:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008306:	f7fd fb99 	bl	8005a3c <HAL_GetTick>
 800830a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	88fa      	ldrh	r2, [r7, #6]
 8008310:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008324:	d108      	bne.n	8008338 <HAL_UART_Transmit+0x68>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	e003      	b.n	8008340 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800833c:	2300      	movs	r3, #0
 800833e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008340:	e02f      	b.n	80083a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	2180      	movs	r1, #128	@ 0x80
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fc19 	bl	8008b84 <UART_WaitOnFlagUntilTimeout>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e03b      	b.n	80083da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	881a      	ldrh	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008374:	b292      	uxth	r2, r2
 8008376:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	3302      	adds	r3, #2
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e007      	b.n	8008390 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3301      	adds	r3, #1
 800838e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1c9      	bne.n	8008342 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2140      	movs	r1, #64	@ 0x40
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fbe3 	bl	8008b84 <UART_WaitOnFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e005      	b.n	80083da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083e8:	b08a      	sub	sp, #40	@ 0x28
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	431a      	orrs	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	4313      	orrs	r3, r2
 800840a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4ba5      	ldr	r3, [pc, #660]	@ (80086a8 <UART_SetConfig+0x2c4>)
 8008414:	4013      	ands	r3, r2
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800841c:	430b      	orrs	r3, r1
 800841e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a9a      	ldr	r2, [pc, #616]	@ (80086ac <UART_SetConfig+0x2c8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d004      	beq.n	8008450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844c:	4313      	orrs	r3, r2
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008460:	430a      	orrs	r2, r1
 8008462:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a91      	ldr	r2, [pc, #580]	@ (80086b0 <UART_SetConfig+0x2cc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d126      	bne.n	80084bc <UART_SetConfig+0xd8>
 800846e:	4b91      	ldr	r3, [pc, #580]	@ (80086b4 <UART_SetConfig+0x2d0>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	2b03      	cmp	r3, #3
 800847a:	d81b      	bhi.n	80084b4 <UART_SetConfig+0xd0>
 800847c:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <UART_SetConfig+0xa0>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	08008495 	.word	0x08008495
 8008488:	080084a5 	.word	0x080084a5
 800848c:	0800849d 	.word	0x0800849d
 8008490:	080084ad 	.word	0x080084ad
 8008494:	2301      	movs	r3, #1
 8008496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800849a:	e0d6      	b.n	800864a <UART_SetConfig+0x266>
 800849c:	2302      	movs	r3, #2
 800849e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084a2:	e0d2      	b.n	800864a <UART_SetConfig+0x266>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084aa:	e0ce      	b.n	800864a <UART_SetConfig+0x266>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084b2:	e0ca      	b.n	800864a <UART_SetConfig+0x266>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ba:	e0c6      	b.n	800864a <UART_SetConfig+0x266>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a7d      	ldr	r2, [pc, #500]	@ (80086b8 <UART_SetConfig+0x2d4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d138      	bne.n	8008538 <UART_SetConfig+0x154>
 80084c6:	4b7b      	ldr	r3, [pc, #492]	@ (80086b4 <UART_SetConfig+0x2d0>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084cc:	f003 030c 	and.w	r3, r3, #12
 80084d0:	2b0c      	cmp	r3, #12
 80084d2:	d82d      	bhi.n	8008530 <UART_SetConfig+0x14c>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <UART_SetConfig+0xf8>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	08008511 	.word	0x08008511
 80084e0:	08008531 	.word	0x08008531
 80084e4:	08008531 	.word	0x08008531
 80084e8:	08008531 	.word	0x08008531
 80084ec:	08008521 	.word	0x08008521
 80084f0:	08008531 	.word	0x08008531
 80084f4:	08008531 	.word	0x08008531
 80084f8:	08008531 	.word	0x08008531
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008531 	.word	0x08008531
 8008504:	08008531 	.word	0x08008531
 8008508:	08008531 	.word	0x08008531
 800850c:	08008529 	.word	0x08008529
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008516:	e098      	b.n	800864a <UART_SetConfig+0x266>
 8008518:	2302      	movs	r3, #2
 800851a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800851e:	e094      	b.n	800864a <UART_SetConfig+0x266>
 8008520:	2304      	movs	r3, #4
 8008522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008526:	e090      	b.n	800864a <UART_SetConfig+0x266>
 8008528:	2308      	movs	r3, #8
 800852a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800852e:	e08c      	b.n	800864a <UART_SetConfig+0x266>
 8008530:	2310      	movs	r3, #16
 8008532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008536:	e088      	b.n	800864a <UART_SetConfig+0x266>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a5f      	ldr	r2, [pc, #380]	@ (80086bc <UART_SetConfig+0x2d8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d125      	bne.n	800858e <UART_SetConfig+0x1aa>
 8008542:	4b5c      	ldr	r3, [pc, #368]	@ (80086b4 <UART_SetConfig+0x2d0>)
 8008544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008548:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800854c:	2b30      	cmp	r3, #48	@ 0x30
 800854e:	d016      	beq.n	800857e <UART_SetConfig+0x19a>
 8008550:	2b30      	cmp	r3, #48	@ 0x30
 8008552:	d818      	bhi.n	8008586 <UART_SetConfig+0x1a2>
 8008554:	2b20      	cmp	r3, #32
 8008556:	d00a      	beq.n	800856e <UART_SetConfig+0x18a>
 8008558:	2b20      	cmp	r3, #32
 800855a:	d814      	bhi.n	8008586 <UART_SetConfig+0x1a2>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <UART_SetConfig+0x182>
 8008560:	2b10      	cmp	r3, #16
 8008562:	d008      	beq.n	8008576 <UART_SetConfig+0x192>
 8008564:	e00f      	b.n	8008586 <UART_SetConfig+0x1a2>
 8008566:	2300      	movs	r3, #0
 8008568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800856c:	e06d      	b.n	800864a <UART_SetConfig+0x266>
 800856e:	2302      	movs	r3, #2
 8008570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008574:	e069      	b.n	800864a <UART_SetConfig+0x266>
 8008576:	2304      	movs	r3, #4
 8008578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800857c:	e065      	b.n	800864a <UART_SetConfig+0x266>
 800857e:	2308      	movs	r3, #8
 8008580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008584:	e061      	b.n	800864a <UART_SetConfig+0x266>
 8008586:	2310      	movs	r3, #16
 8008588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800858c:	e05d      	b.n	800864a <UART_SetConfig+0x266>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a4b      	ldr	r2, [pc, #300]	@ (80086c0 <UART_SetConfig+0x2dc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d125      	bne.n	80085e4 <UART_SetConfig+0x200>
 8008598:	4b46      	ldr	r3, [pc, #280]	@ (80086b4 <UART_SetConfig+0x2d0>)
 800859a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80085a4:	d016      	beq.n	80085d4 <UART_SetConfig+0x1f0>
 80085a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80085a8:	d818      	bhi.n	80085dc <UART_SetConfig+0x1f8>
 80085aa:	2b80      	cmp	r3, #128	@ 0x80
 80085ac:	d00a      	beq.n	80085c4 <UART_SetConfig+0x1e0>
 80085ae:	2b80      	cmp	r3, #128	@ 0x80
 80085b0:	d814      	bhi.n	80085dc <UART_SetConfig+0x1f8>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <UART_SetConfig+0x1d8>
 80085b6:	2b40      	cmp	r3, #64	@ 0x40
 80085b8:	d008      	beq.n	80085cc <UART_SetConfig+0x1e8>
 80085ba:	e00f      	b.n	80085dc <UART_SetConfig+0x1f8>
 80085bc:	2300      	movs	r3, #0
 80085be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c2:	e042      	b.n	800864a <UART_SetConfig+0x266>
 80085c4:	2302      	movs	r3, #2
 80085c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ca:	e03e      	b.n	800864a <UART_SetConfig+0x266>
 80085cc:	2304      	movs	r3, #4
 80085ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085d2:	e03a      	b.n	800864a <UART_SetConfig+0x266>
 80085d4:	2308      	movs	r3, #8
 80085d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085da:	e036      	b.n	800864a <UART_SetConfig+0x266>
 80085dc:	2310      	movs	r3, #16
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e2:	e032      	b.n	800864a <UART_SetConfig+0x266>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a30      	ldr	r2, [pc, #192]	@ (80086ac <UART_SetConfig+0x2c8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d12a      	bne.n	8008644 <UART_SetConfig+0x260>
 80085ee:	4b31      	ldr	r3, [pc, #196]	@ (80086b4 <UART_SetConfig+0x2d0>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80085f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085fc:	d01a      	beq.n	8008634 <UART_SetConfig+0x250>
 80085fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008602:	d81b      	bhi.n	800863c <UART_SetConfig+0x258>
 8008604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008608:	d00c      	beq.n	8008624 <UART_SetConfig+0x240>
 800860a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800860e:	d815      	bhi.n	800863c <UART_SetConfig+0x258>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <UART_SetConfig+0x238>
 8008614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008618:	d008      	beq.n	800862c <UART_SetConfig+0x248>
 800861a:	e00f      	b.n	800863c <UART_SetConfig+0x258>
 800861c:	2300      	movs	r3, #0
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e012      	b.n	800864a <UART_SetConfig+0x266>
 8008624:	2302      	movs	r3, #2
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e00e      	b.n	800864a <UART_SetConfig+0x266>
 800862c:	2304      	movs	r3, #4
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008632:	e00a      	b.n	800864a <UART_SetConfig+0x266>
 8008634:	2308      	movs	r3, #8
 8008636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800863a:	e006      	b.n	800864a <UART_SetConfig+0x266>
 800863c:	2310      	movs	r3, #16
 800863e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008642:	e002      	b.n	800864a <UART_SetConfig+0x266>
 8008644:	2310      	movs	r3, #16
 8008646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a17      	ldr	r2, [pc, #92]	@ (80086ac <UART_SetConfig+0x2c8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	f040 808b 	bne.w	800876c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008656:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800865a:	2b08      	cmp	r3, #8
 800865c:	d834      	bhi.n	80086c8 <UART_SetConfig+0x2e4>
 800865e:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <UART_SetConfig+0x280>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008689 	.word	0x08008689
 8008668:	080086c9 	.word	0x080086c9
 800866c:	08008691 	.word	0x08008691
 8008670:	080086c9 	.word	0x080086c9
 8008674:	08008697 	.word	0x08008697
 8008678:	080086c9 	.word	0x080086c9
 800867c:	080086c9 	.word	0x080086c9
 8008680:	080086c9 	.word	0x080086c9
 8008684:	0800869f 	.word	0x0800869f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008688:	f7ff f9ea 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 800868c:	61f8      	str	r0, [r7, #28]
        break;
 800868e:	e021      	b.n	80086d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008690:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <UART_SetConfig+0x2e0>)
 8008692:	61fb      	str	r3, [r7, #28]
        break;
 8008694:	e01e      	b.n	80086d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008696:	f7ff f94b 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800869a:	61f8      	str	r0, [r7, #28]
        break;
 800869c:	e01a      	b.n	80086d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086a2:	61fb      	str	r3, [r7, #28]
        break;
 80086a4:	e016      	b.n	80086d4 <UART_SetConfig+0x2f0>
 80086a6:	bf00      	nop
 80086a8:	efff69f3 	.word	0xefff69f3
 80086ac:	40008000 	.word	0x40008000
 80086b0:	40013800 	.word	0x40013800
 80086b4:	40021000 	.word	0x40021000
 80086b8:	40004400 	.word	0x40004400
 80086bc:	40004800 	.word	0x40004800
 80086c0:	40004c00 	.word	0x40004c00
 80086c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80086d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80fa 	beq.w	80088d0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	4413      	add	r3, r2
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d305      	bcc.n	80086f8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d903      	bls.n	8008700 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80086fe:	e0e7      	b.n	80088d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2200      	movs	r2, #0
 8008704:	461c      	mov	r4, r3
 8008706:	4615      	mov	r5, r2
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	022b      	lsls	r3, r5, #8
 8008712:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008716:	0222      	lsls	r2, r4, #8
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	6849      	ldr	r1, [r1, #4]
 800871c:	0849      	lsrs	r1, r1, #1
 800871e:	2000      	movs	r0, #0
 8008720:	4688      	mov	r8, r1
 8008722:	4681      	mov	r9, r0
 8008724:	eb12 0a08 	adds.w	sl, r2, r8
 8008728:	eb43 0b09 	adc.w	fp, r3, r9
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f7 fd9f 	bl	8000280 <__aeabi_uldivmod>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4613      	mov	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008750:	d308      	bcc.n	8008764 <UART_SetConfig+0x380>
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008758:	d204      	bcs.n	8008764 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e0b5      	b.n	80088d0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800876a:	e0b1      	b.n	80088d0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008774:	d15d      	bne.n	8008832 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8008776:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800877a:	2b08      	cmp	r3, #8
 800877c:	d827      	bhi.n	80087ce <UART_SetConfig+0x3ea>
 800877e:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <UART_SetConfig+0x3a0>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087a9 	.word	0x080087a9
 8008788:	080087b1 	.word	0x080087b1
 800878c:	080087b9 	.word	0x080087b9
 8008790:	080087cf 	.word	0x080087cf
 8008794:	080087bf 	.word	0x080087bf
 8008798:	080087cf 	.word	0x080087cf
 800879c:	080087cf 	.word	0x080087cf
 80087a0:	080087cf 	.word	0x080087cf
 80087a4:	080087c7 	.word	0x080087c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087a8:	f7ff f95a 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 80087ac:	61f8      	str	r0, [r7, #28]
        break;
 80087ae:	e014      	b.n	80087da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b0:	f7ff f96c 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 80087b4:	61f8      	str	r0, [r7, #28]
        break;
 80087b6:	e010      	b.n	80087da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b8:	4b4c      	ldr	r3, [pc, #304]	@ (80088ec <UART_SetConfig+0x508>)
 80087ba:	61fb      	str	r3, [r7, #28]
        break;
 80087bc:	e00d      	b.n	80087da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087be:	f7ff f8b7 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 80087c2:	61f8      	str	r0, [r7, #28]
        break;
 80087c4:	e009      	b.n	80087da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ca:	61fb      	str	r3, [r7, #28]
        break;
 80087cc:	e005      	b.n	80087da <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80087d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d077      	beq.n	80088d0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	005a      	lsls	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	441a      	add	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d916      	bls.n	800882a <UART_SetConfig+0x446>
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008802:	d212      	bcs.n	800882a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f023 030f 	bic.w	r3, r3, #15
 800880c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	b29b      	uxth	r3, r3
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	b29a      	uxth	r2, r3
 800881a:	8afb      	ldrh	r3, [r7, #22]
 800881c:	4313      	orrs	r3, r2
 800881e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	8afa      	ldrh	r2, [r7, #22]
 8008826:	60da      	str	r2, [r3, #12]
 8008828:	e052      	b.n	80088d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008830:	e04e      	b.n	80088d0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008832:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008836:	2b08      	cmp	r3, #8
 8008838:	d827      	bhi.n	800888a <UART_SetConfig+0x4a6>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <UART_SetConfig+0x45c>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008865 	.word	0x08008865
 8008844:	0800886d 	.word	0x0800886d
 8008848:	08008875 	.word	0x08008875
 800884c:	0800888b 	.word	0x0800888b
 8008850:	0800887b 	.word	0x0800887b
 8008854:	0800888b 	.word	0x0800888b
 8008858:	0800888b 	.word	0x0800888b
 800885c:	0800888b 	.word	0x0800888b
 8008860:	08008883 	.word	0x08008883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008864:	f7ff f8fc 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8008868:	61f8      	str	r0, [r7, #28]
        break;
 800886a:	e014      	b.n	8008896 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886c:	f7ff f90e 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
 8008870:	61f8      	str	r0, [r7, #28]
        break;
 8008872:	e010      	b.n	8008896 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008874:	4b1d      	ldr	r3, [pc, #116]	@ (80088ec <UART_SetConfig+0x508>)
 8008876:	61fb      	str	r3, [r7, #28]
        break;
 8008878:	e00d      	b.n	8008896 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800887a:	f7ff f859 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800887e:	61f8      	str	r0, [r7, #28]
        break;
 8008880:	e009      	b.n	8008896 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008886:	61fb      	str	r3, [r7, #28]
        break;
 8008888:	e005      	b.n	8008896 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008894:	bf00      	nop
    }

    if (pclk != 0U)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d019      	beq.n	80088d0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	085a      	lsrs	r2, r3, #1
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d909      	bls.n	80088ca <UART_SetConfig+0x4e6>
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088bc:	d205      	bcs.n	80088ca <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e002      	b.n	80088d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80088dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3728      	adds	r7, #40	@ 0x28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ea:	bf00      	nop
 80088ec:	00f42400 	.word	0x00f42400

080088f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01a      	beq.n	8008a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089ee:	d10a      	bne.n	8008a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	605a      	str	r2, [r3, #4]
  }
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b098      	sub	sp, #96	@ 0x60
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a44:	f7fc fffa 	bl	8005a3c <HAL_GetTick>
 8008a48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d12e      	bne.n	8008ab6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a60:	2200      	movs	r2, #0
 8008a62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f88c 	bl	8008b84 <UART_WaitOnFlagUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d021      	beq.n	8008ab6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e6      	bne.n	8008a72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e062      	b.n	8008b7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d149      	bne.n	8008b58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008acc:	2200      	movs	r2, #0
 8008ace:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f856 	bl	8008b84 <UART_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d03c      	beq.n	8008b58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	623b      	str	r3, [r7, #32]
   return(result);
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0301 	bic.w	r3, r3, #1
 8008b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b30:	61fa      	str	r2, [r7, #28]
 8008b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	69b9      	ldr	r1, [r7, #24]
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e5      	bne.n	8008b10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e011      	b.n	8008b7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3758      	adds	r7, #88	@ 0x58
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	4613      	mov	r3, r2
 8008b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b94:	e04f      	b.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d04b      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b9e:	f7fc ff4d 	bl	8005a3c <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d302      	bcc.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e04e      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d037      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b80      	cmp	r3, #128	@ 0x80
 8008bca:	d034      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b40      	cmp	r3, #64	@ 0x40
 8008bd0:	d031      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d110      	bne.n	8008c02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2208      	movs	r2, #8
 8008be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f838 	bl	8008c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e029      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c10:	d111      	bne.n	8008c36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f81e 	bl	8008c5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e00f      	b.n	8008c56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	bf0c      	ite	eq
 8008c46:	2301      	moveq	r3, #1
 8008c48:	2300      	movne	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d0a0      	beq.n	8008b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b095      	sub	sp, #84	@ 0x54
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e6      	bne.n	8008c66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d118      	bne.n	8008d06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f023 0310 	bic.w	r3, r3, #16
 8008ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cf2:	61bb      	str	r3, [r7, #24]
 8008cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf6:	6979      	ldr	r1, [r7, #20]
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e6      	bne.n	8008cd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008d1a:	bf00      	nop
 8008d1c:	3754      	adds	r7, #84	@ 0x54
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <std>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d36:	6083      	str	r3, [r0, #8]
 8008d38:	8181      	strh	r1, [r0, #12]
 8008d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d3c:	81c2      	strh	r2, [r0, #14]
 8008d3e:	6183      	str	r3, [r0, #24]
 8008d40:	4619      	mov	r1, r3
 8008d42:	2208      	movs	r2, #8
 8008d44:	305c      	adds	r0, #92	@ 0x5c
 8008d46:	f000 f906 	bl	8008f56 <memset>
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <std+0x58>)
 8008d4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <std+0x5c>)
 8008d50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d52:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <std+0x60>)
 8008d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <std+0x64>)
 8008d58:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d90 <std+0x68>)
 8008d5c:	6224      	str	r4, [r4, #32]
 8008d5e:	429c      	cmp	r4, r3
 8008d60:	d006      	beq.n	8008d70 <std+0x48>
 8008d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d66:	4294      	cmp	r4, r2
 8008d68:	d002      	beq.n	8008d70 <std+0x48>
 8008d6a:	33d0      	adds	r3, #208	@ 0xd0
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	d105      	bne.n	8008d7c <std+0x54>
 8008d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f000 b966 	b.w	8009048 <__retarget_lock_init_recursive>
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	bf00      	nop
 8008d80:	08008ed1 	.word	0x08008ed1
 8008d84:	08008ef3 	.word	0x08008ef3
 8008d88:	08008f2b 	.word	0x08008f2b
 8008d8c:	08008f4f 	.word	0x08008f4f
 8008d90:	2000033c 	.word	0x2000033c

08008d94 <stdio_exit_handler>:
 8008d94:	4a02      	ldr	r2, [pc, #8]	@ (8008da0 <stdio_exit_handler+0xc>)
 8008d96:	4903      	ldr	r1, [pc, #12]	@ (8008da4 <stdio_exit_handler+0x10>)
 8008d98:	4803      	ldr	r0, [pc, #12]	@ (8008da8 <stdio_exit_handler+0x14>)
 8008d9a:	f000 b869 	b.w	8008e70 <_fwalk_sglue>
 8008d9e:	bf00      	nop
 8008da0:	200000e0 	.word	0x200000e0
 8008da4:	080098e9 	.word	0x080098e9
 8008da8:	200000f0 	.word	0x200000f0

08008dac <cleanup_stdio>:
 8008dac:	6841      	ldr	r1, [r0, #4]
 8008dae:	4b0c      	ldr	r3, [pc, #48]	@ (8008de0 <cleanup_stdio+0x34>)
 8008db0:	4299      	cmp	r1, r3
 8008db2:	b510      	push	{r4, lr}
 8008db4:	4604      	mov	r4, r0
 8008db6:	d001      	beq.n	8008dbc <cleanup_stdio+0x10>
 8008db8:	f000 fd96 	bl	80098e8 <_fflush_r>
 8008dbc:	68a1      	ldr	r1, [r4, #8]
 8008dbe:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <cleanup_stdio+0x38>)
 8008dc0:	4299      	cmp	r1, r3
 8008dc2:	d002      	beq.n	8008dca <cleanup_stdio+0x1e>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fd8f 	bl	80098e8 <_fflush_r>
 8008dca:	68e1      	ldr	r1, [r4, #12]
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <cleanup_stdio+0x3c>)
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	d004      	beq.n	8008ddc <cleanup_stdio+0x30>
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	f000 bd86 	b.w	80098e8 <_fflush_r>
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	bf00      	nop
 8008de0:	2000033c 	.word	0x2000033c
 8008de4:	200003a4 	.word	0x200003a4
 8008de8:	2000040c 	.word	0x2000040c

08008dec <global_stdio_init.part.0>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4b0b      	ldr	r3, [pc, #44]	@ (8008e1c <global_stdio_init.part.0+0x30>)
 8008df0:	4c0b      	ldr	r4, [pc, #44]	@ (8008e20 <global_stdio_init.part.0+0x34>)
 8008df2:	4a0c      	ldr	r2, [pc, #48]	@ (8008e24 <global_stdio_init.part.0+0x38>)
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	4620      	mov	r0, r4
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	f7ff ff94 	bl	8008d28 <std>
 8008e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e04:	2201      	movs	r2, #1
 8008e06:	2109      	movs	r1, #9
 8008e08:	f7ff ff8e 	bl	8008d28 <std>
 8008e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e10:	2202      	movs	r2, #2
 8008e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e16:	2112      	movs	r1, #18
 8008e18:	f7ff bf86 	b.w	8008d28 <std>
 8008e1c:	20000474 	.word	0x20000474
 8008e20:	2000033c 	.word	0x2000033c
 8008e24:	08008d95 	.word	0x08008d95

08008e28 <__sfp_lock_acquire>:
 8008e28:	4801      	ldr	r0, [pc, #4]	@ (8008e30 <__sfp_lock_acquire+0x8>)
 8008e2a:	f000 b90e 	b.w	800904a <__retarget_lock_acquire_recursive>
 8008e2e:	bf00      	nop
 8008e30:	2000047d 	.word	0x2000047d

08008e34 <__sfp_lock_release>:
 8008e34:	4801      	ldr	r0, [pc, #4]	@ (8008e3c <__sfp_lock_release+0x8>)
 8008e36:	f000 b909 	b.w	800904c <__retarget_lock_release_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	2000047d 	.word	0x2000047d

08008e40 <__sinit>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	4604      	mov	r4, r0
 8008e44:	f7ff fff0 	bl	8008e28 <__sfp_lock_acquire>
 8008e48:	6a23      	ldr	r3, [r4, #32]
 8008e4a:	b11b      	cbz	r3, 8008e54 <__sinit+0x14>
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f7ff bff0 	b.w	8008e34 <__sfp_lock_release>
 8008e54:	4b04      	ldr	r3, [pc, #16]	@ (8008e68 <__sinit+0x28>)
 8008e56:	6223      	str	r3, [r4, #32]
 8008e58:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <__sinit+0x2c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1f5      	bne.n	8008e4c <__sinit+0xc>
 8008e60:	f7ff ffc4 	bl	8008dec <global_stdio_init.part.0>
 8008e64:	e7f2      	b.n	8008e4c <__sinit+0xc>
 8008e66:	bf00      	nop
 8008e68:	08008dad 	.word	0x08008dad
 8008e6c:	20000474 	.word	0x20000474

08008e70 <_fwalk_sglue>:
 8008e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e74:	4607      	mov	r7, r0
 8008e76:	4688      	mov	r8, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e80:	f1b9 0901 	subs.w	r9, r9, #1
 8008e84:	d505      	bpl.n	8008e92 <_fwalk_sglue+0x22>
 8008e86:	6824      	ldr	r4, [r4, #0]
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	d1f7      	bne.n	8008e7c <_fwalk_sglue+0xc>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d907      	bls.n	8008ea8 <_fwalk_sglue+0x38>
 8008e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	d003      	beq.n	8008ea8 <_fwalk_sglue+0x38>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	47c0      	blx	r8
 8008ea6:	4306      	orrs	r6, r0
 8008ea8:	3568      	adds	r5, #104	@ 0x68
 8008eaa:	e7e9      	b.n	8008e80 <_fwalk_sglue+0x10>

08008eac <iprintf>:
 8008eac:	b40f      	push	{r0, r1, r2, r3}
 8008eae:	b507      	push	{r0, r1, r2, lr}
 8008eb0:	4906      	ldr	r1, [pc, #24]	@ (8008ecc <iprintf+0x20>)
 8008eb2:	ab04      	add	r3, sp, #16
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eba:	6881      	ldr	r1, [r0, #8]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	f000 f9e9 	bl	8009294 <_vfiprintf_r>
 8008ec2:	b003      	add	sp, #12
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	b004      	add	sp, #16
 8008eca:	4770      	bx	lr
 8008ecc:	200000ec 	.word	0x200000ec

08008ed0 <__sread>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed8:	f000 f868 	bl	8008fac <_read_r>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	bfab      	itete	ge
 8008ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ee4:	181b      	addge	r3, r3, r0
 8008ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008eea:	bfac      	ite	ge
 8008eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008eee:	81a3      	strhlt	r3, [r4, #12]
 8008ef0:	bd10      	pop	{r4, pc}

08008ef2 <__swrite>:
 8008ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef6:	461f      	mov	r7, r3
 8008ef8:	898b      	ldrh	r3, [r1, #12]
 8008efa:	05db      	lsls	r3, r3, #23
 8008efc:	4605      	mov	r5, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4616      	mov	r6, r2
 8008f02:	d505      	bpl.n	8008f10 <__swrite+0x1e>
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	2302      	movs	r3, #2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f000 f83c 	bl	8008f88 <_lseek_r>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	463b      	mov	r3, r7
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	f000 b853 	b.w	8008fd0 <_write_r>

08008f2a <__sseek>:
 8008f2a:	b510      	push	{r4, lr}
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f32:	f000 f829 	bl	8008f88 <_lseek_r>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	bf15      	itete	ne
 8008f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f46:	81a3      	strheq	r3, [r4, #12]
 8008f48:	bf18      	it	ne
 8008f4a:	81a3      	strhne	r3, [r4, #12]
 8008f4c:	bd10      	pop	{r4, pc}

08008f4e <__sclose>:
 8008f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f52:	f000 b809 	b.w	8008f68 <_close_r>

08008f56 <memset>:
 8008f56:	4402      	add	r2, r0
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d100      	bne.n	8008f60 <memset+0xa>
 8008f5e:	4770      	bx	lr
 8008f60:	f803 1b01 	strb.w	r1, [r3], #1
 8008f64:	e7f9      	b.n	8008f5a <memset+0x4>
	...

08008f68 <_close_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d06      	ldr	r5, [pc, #24]	@ (8008f84 <_close_r+0x1c>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f7f7 fe95 	bl	8000ca2 <_close>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_close_r+0x1a>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_close_r+0x1a>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20000478 	.word	0x20000478

08008f88 <_lseek_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	@ (8008fa8 <_lseek_r+0x20>)
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	4608      	mov	r0, r1
 8008f90:	4611      	mov	r1, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	602a      	str	r2, [r5, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f7f7 feaa 	bl	8000cf0 <_lseek>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_lseek_r+0x1e>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_lseek_r+0x1e>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20000478 	.word	0x20000478

08008fac <_read_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	@ (8008fcc <_read_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f7 fe38 	bl	8000c30 <_read>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_read_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_read_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20000478 	.word	0x20000478

08008fd0 <_write_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	@ (8008ff0 <_write_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f7 fe43 	bl	8000c6a <_write>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_write_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_write_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20000478 	.word	0x20000478

08008ff4 <__errno>:
 8008ff4:	4b01      	ldr	r3, [pc, #4]	@ (8008ffc <__errno+0x8>)
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	200000ec 	.word	0x200000ec

08009000 <__libc_init_array>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	4d0d      	ldr	r5, [pc, #52]	@ (8009038 <__libc_init_array+0x38>)
 8009004:	4c0d      	ldr	r4, [pc, #52]	@ (800903c <__libc_init_array+0x3c>)
 8009006:	1b64      	subs	r4, r4, r5
 8009008:	10a4      	asrs	r4, r4, #2
 800900a:	2600      	movs	r6, #0
 800900c:	42a6      	cmp	r6, r4
 800900e:	d109      	bne.n	8009024 <__libc_init_array+0x24>
 8009010:	4d0b      	ldr	r5, [pc, #44]	@ (8009040 <__libc_init_array+0x40>)
 8009012:	4c0c      	ldr	r4, [pc, #48]	@ (8009044 <__libc_init_array+0x44>)
 8009014:	f000 fdb8 	bl	8009b88 <_init>
 8009018:	1b64      	subs	r4, r4, r5
 800901a:	10a4      	asrs	r4, r4, #2
 800901c:	2600      	movs	r6, #0
 800901e:	42a6      	cmp	r6, r4
 8009020:	d105      	bne.n	800902e <__libc_init_array+0x2e>
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	f855 3b04 	ldr.w	r3, [r5], #4
 8009028:	4798      	blx	r3
 800902a:	3601      	adds	r6, #1
 800902c:	e7ee      	b.n	800900c <__libc_init_array+0xc>
 800902e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009032:	4798      	blx	r3
 8009034:	3601      	adds	r6, #1
 8009036:	e7f2      	b.n	800901e <__libc_init_array+0x1e>
 8009038:	08009c2c 	.word	0x08009c2c
 800903c:	08009c2c 	.word	0x08009c2c
 8009040:	08009c2c 	.word	0x08009c2c
 8009044:	08009c30 	.word	0x08009c30

08009048 <__retarget_lock_init_recursive>:
 8009048:	4770      	bx	lr

0800904a <__retarget_lock_acquire_recursive>:
 800904a:	4770      	bx	lr

0800904c <__retarget_lock_release_recursive>:
 800904c:	4770      	bx	lr
	...

08009050 <_free_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4605      	mov	r5, r0
 8009054:	2900      	cmp	r1, #0
 8009056:	d041      	beq.n	80090dc <_free_r+0x8c>
 8009058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905c:	1f0c      	subs	r4, r1, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfb8      	it	lt
 8009062:	18e4      	addlt	r4, r4, r3
 8009064:	f000 f8e0 	bl	8009228 <__malloc_lock>
 8009068:	4a1d      	ldr	r2, [pc, #116]	@ (80090e0 <_free_r+0x90>)
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	b933      	cbnz	r3, 800907c <_free_r+0x2c>
 800906e:	6063      	str	r3, [r4, #4]
 8009070:	6014      	str	r4, [r2, #0]
 8009072:	4628      	mov	r0, r5
 8009074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009078:	f000 b8dc 	b.w	8009234 <__malloc_unlock>
 800907c:	42a3      	cmp	r3, r4
 800907e:	d908      	bls.n	8009092 <_free_r+0x42>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	1821      	adds	r1, r4, r0
 8009084:	428b      	cmp	r3, r1
 8009086:	bf01      	itttt	eq
 8009088:	6819      	ldreq	r1, [r3, #0]
 800908a:	685b      	ldreq	r3, [r3, #4]
 800908c:	1809      	addeq	r1, r1, r0
 800908e:	6021      	streq	r1, [r4, #0]
 8009090:	e7ed      	b.n	800906e <_free_r+0x1e>
 8009092:	461a      	mov	r2, r3
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b10b      	cbz	r3, 800909c <_free_r+0x4c>
 8009098:	42a3      	cmp	r3, r4
 800909a:	d9fa      	bls.n	8009092 <_free_r+0x42>
 800909c:	6811      	ldr	r1, [r2, #0]
 800909e:	1850      	adds	r0, r2, r1
 80090a0:	42a0      	cmp	r0, r4
 80090a2:	d10b      	bne.n	80090bc <_free_r+0x6c>
 80090a4:	6820      	ldr	r0, [r4, #0]
 80090a6:	4401      	add	r1, r0
 80090a8:	1850      	adds	r0, r2, r1
 80090aa:	4283      	cmp	r3, r0
 80090ac:	6011      	str	r1, [r2, #0]
 80090ae:	d1e0      	bne.n	8009072 <_free_r+0x22>
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	6053      	str	r3, [r2, #4]
 80090b6:	4408      	add	r0, r1
 80090b8:	6010      	str	r0, [r2, #0]
 80090ba:	e7da      	b.n	8009072 <_free_r+0x22>
 80090bc:	d902      	bls.n	80090c4 <_free_r+0x74>
 80090be:	230c      	movs	r3, #12
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	e7d6      	b.n	8009072 <_free_r+0x22>
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	1821      	adds	r1, r4, r0
 80090c8:	428b      	cmp	r3, r1
 80090ca:	bf04      	itt	eq
 80090cc:	6819      	ldreq	r1, [r3, #0]
 80090ce:	685b      	ldreq	r3, [r3, #4]
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	bf04      	itt	eq
 80090d4:	1809      	addeq	r1, r1, r0
 80090d6:	6021      	streq	r1, [r4, #0]
 80090d8:	6054      	str	r4, [r2, #4]
 80090da:	e7ca      	b.n	8009072 <_free_r+0x22>
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	20000484 	.word	0x20000484

080090e4 <sbrk_aligned>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009124 <sbrk_aligned+0x40>)
 80090e8:	460c      	mov	r4, r1
 80090ea:	6831      	ldr	r1, [r6, #0]
 80090ec:	4605      	mov	r5, r0
 80090ee:	b911      	cbnz	r1, 80090f6 <sbrk_aligned+0x12>
 80090f0:	f000 fcb6 	bl	8009a60 <_sbrk_r>
 80090f4:	6030      	str	r0, [r6, #0]
 80090f6:	4621      	mov	r1, r4
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fcb1 	bl	8009a60 <_sbrk_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d103      	bne.n	800910a <sbrk_aligned+0x26>
 8009102:	f04f 34ff 	mov.w	r4, #4294967295
 8009106:	4620      	mov	r0, r4
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d0f8      	beq.n	8009106 <sbrk_aligned+0x22>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fca2 	bl	8009a60 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d1f2      	bne.n	8009106 <sbrk_aligned+0x22>
 8009120:	e7ef      	b.n	8009102 <sbrk_aligned+0x1e>
 8009122:	bf00      	nop
 8009124:	20000480 	.word	0x20000480

08009128 <_malloc_r>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	1ccd      	adds	r5, r1, #3
 800912e:	f025 0503 	bic.w	r5, r5, #3
 8009132:	3508      	adds	r5, #8
 8009134:	2d0c      	cmp	r5, #12
 8009136:	bf38      	it	cc
 8009138:	250c      	movcc	r5, #12
 800913a:	2d00      	cmp	r5, #0
 800913c:	4606      	mov	r6, r0
 800913e:	db01      	blt.n	8009144 <_malloc_r+0x1c>
 8009140:	42a9      	cmp	r1, r5
 8009142:	d904      	bls.n	800914e <_malloc_r+0x26>
 8009144:	230c      	movs	r3, #12
 8009146:	6033      	str	r3, [r6, #0]
 8009148:	2000      	movs	r0, #0
 800914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009224 <_malloc_r+0xfc>
 8009152:	f000 f869 	bl	8009228 <__malloc_lock>
 8009156:	f8d8 3000 	ldr.w	r3, [r8]
 800915a:	461c      	mov	r4, r3
 800915c:	bb44      	cbnz	r4, 80091b0 <_malloc_r+0x88>
 800915e:	4629      	mov	r1, r5
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff ffbf 	bl	80090e4 <sbrk_aligned>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	4604      	mov	r4, r0
 800916a:	d158      	bne.n	800921e <_malloc_r+0xf6>
 800916c:	f8d8 4000 	ldr.w	r4, [r8]
 8009170:	4627      	mov	r7, r4
 8009172:	2f00      	cmp	r7, #0
 8009174:	d143      	bne.n	80091fe <_malloc_r+0xd6>
 8009176:	2c00      	cmp	r4, #0
 8009178:	d04b      	beq.n	8009212 <_malloc_r+0xea>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	eb04 0903 	add.w	r9, r4, r3
 8009184:	f000 fc6c 	bl	8009a60 <_sbrk_r>
 8009188:	4581      	cmp	r9, r0
 800918a:	d142      	bne.n	8009212 <_malloc_r+0xea>
 800918c:	6821      	ldr	r1, [r4, #0]
 800918e:	1a6d      	subs	r5, r5, r1
 8009190:	4629      	mov	r1, r5
 8009192:	4630      	mov	r0, r6
 8009194:	f7ff ffa6 	bl	80090e4 <sbrk_aligned>
 8009198:	3001      	adds	r0, #1
 800919a:	d03a      	beq.n	8009212 <_malloc_r+0xea>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	442b      	add	r3, r5
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	f8d8 3000 	ldr.w	r3, [r8]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	bb62      	cbnz	r2, 8009204 <_malloc_r+0xdc>
 80091aa:	f8c8 7000 	str.w	r7, [r8]
 80091ae:	e00f      	b.n	80091d0 <_malloc_r+0xa8>
 80091b0:	6822      	ldr	r2, [r4, #0]
 80091b2:	1b52      	subs	r2, r2, r5
 80091b4:	d420      	bmi.n	80091f8 <_malloc_r+0xd0>
 80091b6:	2a0b      	cmp	r2, #11
 80091b8:	d917      	bls.n	80091ea <_malloc_r+0xc2>
 80091ba:	1961      	adds	r1, r4, r5
 80091bc:	42a3      	cmp	r3, r4
 80091be:	6025      	str	r5, [r4, #0]
 80091c0:	bf18      	it	ne
 80091c2:	6059      	strne	r1, [r3, #4]
 80091c4:	6863      	ldr	r3, [r4, #4]
 80091c6:	bf08      	it	eq
 80091c8:	f8c8 1000 	streq.w	r1, [r8]
 80091cc:	5162      	str	r2, [r4, r5]
 80091ce:	604b      	str	r3, [r1, #4]
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 f82f 	bl	8009234 <__malloc_unlock>
 80091d6:	f104 000b 	add.w	r0, r4, #11
 80091da:	1d23      	adds	r3, r4, #4
 80091dc:	f020 0007 	bic.w	r0, r0, #7
 80091e0:	1ac2      	subs	r2, r0, r3
 80091e2:	bf1c      	itt	ne
 80091e4:	1a1b      	subne	r3, r3, r0
 80091e6:	50a3      	strne	r3, [r4, r2]
 80091e8:	e7af      	b.n	800914a <_malloc_r+0x22>
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	bf0c      	ite	eq
 80091f0:	f8c8 2000 	streq.w	r2, [r8]
 80091f4:	605a      	strne	r2, [r3, #4]
 80091f6:	e7eb      	b.n	80091d0 <_malloc_r+0xa8>
 80091f8:	4623      	mov	r3, r4
 80091fa:	6864      	ldr	r4, [r4, #4]
 80091fc:	e7ae      	b.n	800915c <_malloc_r+0x34>
 80091fe:	463c      	mov	r4, r7
 8009200:	687f      	ldr	r7, [r7, #4]
 8009202:	e7b6      	b.n	8009172 <_malloc_r+0x4a>
 8009204:	461a      	mov	r2, r3
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	42a3      	cmp	r3, r4
 800920a:	d1fb      	bne.n	8009204 <_malloc_r+0xdc>
 800920c:	2300      	movs	r3, #0
 800920e:	6053      	str	r3, [r2, #4]
 8009210:	e7de      	b.n	80091d0 <_malloc_r+0xa8>
 8009212:	230c      	movs	r3, #12
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f80c 	bl	8009234 <__malloc_unlock>
 800921c:	e794      	b.n	8009148 <_malloc_r+0x20>
 800921e:	6005      	str	r5, [r0, #0]
 8009220:	e7d6      	b.n	80091d0 <_malloc_r+0xa8>
 8009222:	bf00      	nop
 8009224:	20000484 	.word	0x20000484

08009228 <__malloc_lock>:
 8009228:	4801      	ldr	r0, [pc, #4]	@ (8009230 <__malloc_lock+0x8>)
 800922a:	f7ff bf0e 	b.w	800904a <__retarget_lock_acquire_recursive>
 800922e:	bf00      	nop
 8009230:	2000047c 	.word	0x2000047c

08009234 <__malloc_unlock>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__malloc_unlock+0x8>)
 8009236:	f7ff bf09 	b.w	800904c <__retarget_lock_release_recursive>
 800923a:	bf00      	nop
 800923c:	2000047c 	.word	0x2000047c

08009240 <__sfputc_r>:
 8009240:	6893      	ldr	r3, [r2, #8]
 8009242:	3b01      	subs	r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	b410      	push	{r4}
 8009248:	6093      	str	r3, [r2, #8]
 800924a:	da08      	bge.n	800925e <__sfputc_r+0x1e>
 800924c:	6994      	ldr	r4, [r2, #24]
 800924e:	42a3      	cmp	r3, r4
 8009250:	db01      	blt.n	8009256 <__sfputc_r+0x16>
 8009252:	290a      	cmp	r1, #10
 8009254:	d103      	bne.n	800925e <__sfputc_r+0x1e>
 8009256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800925a:	f000 bb6d 	b.w	8009938 <__swbuf_r>
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	1c58      	adds	r0, r3, #1
 8009262:	6010      	str	r0, [r2, #0]
 8009264:	7019      	strb	r1, [r3, #0]
 8009266:	4608      	mov	r0, r1
 8009268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926c:	4770      	bx	lr

0800926e <__sfputs_r>:
 800926e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	4614      	mov	r4, r2
 8009276:	18d5      	adds	r5, r2, r3
 8009278:	42ac      	cmp	r4, r5
 800927a:	d101      	bne.n	8009280 <__sfputs_r+0x12>
 800927c:	2000      	movs	r0, #0
 800927e:	e007      	b.n	8009290 <__sfputs_r+0x22>
 8009280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009284:	463a      	mov	r2, r7
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ffda 	bl	8009240 <__sfputc_r>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d1f3      	bne.n	8009278 <__sfputs_r+0xa>
 8009290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009294 <_vfiprintf_r>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	460d      	mov	r5, r1
 800929a:	b09d      	sub	sp, #116	@ 0x74
 800929c:	4614      	mov	r4, r2
 800929e:	4698      	mov	r8, r3
 80092a0:	4606      	mov	r6, r0
 80092a2:	b118      	cbz	r0, 80092ac <_vfiprintf_r+0x18>
 80092a4:	6a03      	ldr	r3, [r0, #32]
 80092a6:	b90b      	cbnz	r3, 80092ac <_vfiprintf_r+0x18>
 80092a8:	f7ff fdca 	bl	8008e40 <__sinit>
 80092ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092ae:	07d9      	lsls	r1, r3, #31
 80092b0:	d405      	bmi.n	80092be <_vfiprintf_r+0x2a>
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	059a      	lsls	r2, r3, #22
 80092b6:	d402      	bmi.n	80092be <_vfiprintf_r+0x2a>
 80092b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ba:	f7ff fec6 	bl	800904a <__retarget_lock_acquire_recursive>
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	071b      	lsls	r3, r3, #28
 80092c2:	d501      	bpl.n	80092c8 <_vfiprintf_r+0x34>
 80092c4:	692b      	ldr	r3, [r5, #16]
 80092c6:	b99b      	cbnz	r3, 80092f0 <_vfiprintf_r+0x5c>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f000 fb72 	bl	80099b4 <__swsetup_r>
 80092d0:	b170      	cbz	r0, 80092f0 <_vfiprintf_r+0x5c>
 80092d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092d4:	07dc      	lsls	r4, r3, #31
 80092d6:	d504      	bpl.n	80092e2 <_vfiprintf_r+0x4e>
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	b01d      	add	sp, #116	@ 0x74
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	0598      	lsls	r0, r3, #22
 80092e6:	d4f7      	bmi.n	80092d8 <_vfiprintf_r+0x44>
 80092e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ea:	f7ff feaf 	bl	800904c <__retarget_lock_release_recursive>
 80092ee:	e7f3      	b.n	80092d8 <_vfiprintf_r+0x44>
 80092f0:	2300      	movs	r3, #0
 80092f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f4:	2320      	movs	r3, #32
 80092f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80092fe:	2330      	movs	r3, #48	@ 0x30
 8009300:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094b0 <_vfiprintf_r+0x21c>
 8009304:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009308:	f04f 0901 	mov.w	r9, #1
 800930c:	4623      	mov	r3, r4
 800930e:	469a      	mov	sl, r3
 8009310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009314:	b10a      	cbz	r2, 800931a <_vfiprintf_r+0x86>
 8009316:	2a25      	cmp	r2, #37	@ 0x25
 8009318:	d1f9      	bne.n	800930e <_vfiprintf_r+0x7a>
 800931a:	ebba 0b04 	subs.w	fp, sl, r4
 800931e:	d00b      	beq.n	8009338 <_vfiprintf_r+0xa4>
 8009320:	465b      	mov	r3, fp
 8009322:	4622      	mov	r2, r4
 8009324:	4629      	mov	r1, r5
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff ffa1 	bl	800926e <__sfputs_r>
 800932c:	3001      	adds	r0, #1
 800932e:	f000 80a7 	beq.w	8009480 <_vfiprintf_r+0x1ec>
 8009332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009334:	445a      	add	r2, fp
 8009336:	9209      	str	r2, [sp, #36]	@ 0x24
 8009338:	f89a 3000 	ldrb.w	r3, [sl]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 809f 	beq.w	8009480 <_vfiprintf_r+0x1ec>
 8009342:	2300      	movs	r3, #0
 8009344:	f04f 32ff 	mov.w	r2, #4294967295
 8009348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800934c:	f10a 0a01 	add.w	sl, sl, #1
 8009350:	9304      	str	r3, [sp, #16]
 8009352:	9307      	str	r3, [sp, #28]
 8009354:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009358:	931a      	str	r3, [sp, #104]	@ 0x68
 800935a:	4654      	mov	r4, sl
 800935c:	2205      	movs	r2, #5
 800935e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009362:	4853      	ldr	r0, [pc, #332]	@ (80094b0 <_vfiprintf_r+0x21c>)
 8009364:	f7f6 ff3c 	bl	80001e0 <memchr>
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	b9d8      	cbnz	r0, 80093a4 <_vfiprintf_r+0x110>
 800936c:	06d1      	lsls	r1, r2, #27
 800936e:	bf44      	itt	mi
 8009370:	2320      	movmi	r3, #32
 8009372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009376:	0713      	lsls	r3, r2, #28
 8009378:	bf44      	itt	mi
 800937a:	232b      	movmi	r3, #43	@ 0x2b
 800937c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009380:	f89a 3000 	ldrb.w	r3, [sl]
 8009384:	2b2a      	cmp	r3, #42	@ 0x2a
 8009386:	d015      	beq.n	80093b4 <_vfiprintf_r+0x120>
 8009388:	9a07      	ldr	r2, [sp, #28]
 800938a:	4654      	mov	r4, sl
 800938c:	2000      	movs	r0, #0
 800938e:	f04f 0c0a 	mov.w	ip, #10
 8009392:	4621      	mov	r1, r4
 8009394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009398:	3b30      	subs	r3, #48	@ 0x30
 800939a:	2b09      	cmp	r3, #9
 800939c:	d94b      	bls.n	8009436 <_vfiprintf_r+0x1a2>
 800939e:	b1b0      	cbz	r0, 80093ce <_vfiprintf_r+0x13a>
 80093a0:	9207      	str	r2, [sp, #28]
 80093a2:	e014      	b.n	80093ce <_vfiprintf_r+0x13a>
 80093a4:	eba0 0308 	sub.w	r3, r0, r8
 80093a8:	fa09 f303 	lsl.w	r3, r9, r3
 80093ac:	4313      	orrs	r3, r2
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	46a2      	mov	sl, r4
 80093b2:	e7d2      	b.n	800935a <_vfiprintf_r+0xc6>
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	1d19      	adds	r1, r3, #4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	9103      	str	r1, [sp, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfbb      	ittet	lt
 80093c0:	425b      	neglt	r3, r3
 80093c2:	f042 0202 	orrlt.w	r2, r2, #2
 80093c6:	9307      	strge	r3, [sp, #28]
 80093c8:	9307      	strlt	r3, [sp, #28]
 80093ca:	bfb8      	it	lt
 80093cc:	9204      	strlt	r2, [sp, #16]
 80093ce:	7823      	ldrb	r3, [r4, #0]
 80093d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80093d2:	d10a      	bne.n	80093ea <_vfiprintf_r+0x156>
 80093d4:	7863      	ldrb	r3, [r4, #1]
 80093d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d8:	d132      	bne.n	8009440 <_vfiprintf_r+0x1ac>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	9203      	str	r2, [sp, #12]
 80093e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093e6:	3402      	adds	r4, #2
 80093e8:	9305      	str	r3, [sp, #20]
 80093ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094c0 <_vfiprintf_r+0x22c>
 80093ee:	7821      	ldrb	r1, [r4, #0]
 80093f0:	2203      	movs	r2, #3
 80093f2:	4650      	mov	r0, sl
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	b138      	cbz	r0, 800940a <_vfiprintf_r+0x176>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	eba0 000a 	sub.w	r0, r0, sl
 8009400:	2240      	movs	r2, #64	@ 0x40
 8009402:	4082      	lsls	r2, r0
 8009404:	4313      	orrs	r3, r2
 8009406:	3401      	adds	r4, #1
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800940e:	4829      	ldr	r0, [pc, #164]	@ (80094b4 <_vfiprintf_r+0x220>)
 8009410:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009414:	2206      	movs	r2, #6
 8009416:	f7f6 fee3 	bl	80001e0 <memchr>
 800941a:	2800      	cmp	r0, #0
 800941c:	d03f      	beq.n	800949e <_vfiprintf_r+0x20a>
 800941e:	4b26      	ldr	r3, [pc, #152]	@ (80094b8 <_vfiprintf_r+0x224>)
 8009420:	bb1b      	cbnz	r3, 800946a <_vfiprintf_r+0x1d6>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	3307      	adds	r3, #7
 8009426:	f023 0307 	bic.w	r3, r3, #7
 800942a:	3308      	adds	r3, #8
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	443b      	add	r3, r7
 8009432:	9309      	str	r3, [sp, #36]	@ 0x24
 8009434:	e76a      	b.n	800930c <_vfiprintf_r+0x78>
 8009436:	fb0c 3202 	mla	r2, ip, r2, r3
 800943a:	460c      	mov	r4, r1
 800943c:	2001      	movs	r0, #1
 800943e:	e7a8      	b.n	8009392 <_vfiprintf_r+0xfe>
 8009440:	2300      	movs	r3, #0
 8009442:	3401      	adds	r4, #1
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	4619      	mov	r1, r3
 8009448:	f04f 0c0a 	mov.w	ip, #10
 800944c:	4620      	mov	r0, r4
 800944e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009452:	3a30      	subs	r2, #48	@ 0x30
 8009454:	2a09      	cmp	r2, #9
 8009456:	d903      	bls.n	8009460 <_vfiprintf_r+0x1cc>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0c6      	beq.n	80093ea <_vfiprintf_r+0x156>
 800945c:	9105      	str	r1, [sp, #20]
 800945e:	e7c4      	b.n	80093ea <_vfiprintf_r+0x156>
 8009460:	fb0c 2101 	mla	r1, ip, r1, r2
 8009464:	4604      	mov	r4, r0
 8009466:	2301      	movs	r3, #1
 8009468:	e7f0      	b.n	800944c <_vfiprintf_r+0x1b8>
 800946a:	ab03      	add	r3, sp, #12
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	462a      	mov	r2, r5
 8009470:	4b12      	ldr	r3, [pc, #72]	@ (80094bc <_vfiprintf_r+0x228>)
 8009472:	a904      	add	r1, sp, #16
 8009474:	4630      	mov	r0, r6
 8009476:	f3af 8000 	nop.w
 800947a:	4607      	mov	r7, r0
 800947c:	1c78      	adds	r0, r7, #1
 800947e:	d1d6      	bne.n	800942e <_vfiprintf_r+0x19a>
 8009480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d405      	bmi.n	8009492 <_vfiprintf_r+0x1fe>
 8009486:	89ab      	ldrh	r3, [r5, #12]
 8009488:	059a      	lsls	r2, r3, #22
 800948a:	d402      	bmi.n	8009492 <_vfiprintf_r+0x1fe>
 800948c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800948e:	f7ff fddd 	bl	800904c <__retarget_lock_release_recursive>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	065b      	lsls	r3, r3, #25
 8009496:	f53f af1f 	bmi.w	80092d8 <_vfiprintf_r+0x44>
 800949a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800949c:	e71e      	b.n	80092dc <_vfiprintf_r+0x48>
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	462a      	mov	r2, r5
 80094a4:	4b05      	ldr	r3, [pc, #20]	@ (80094bc <_vfiprintf_r+0x228>)
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	4630      	mov	r0, r6
 80094aa:	f000 f879 	bl	80095a0 <_printf_i>
 80094ae:	e7e4      	b.n	800947a <_vfiprintf_r+0x1e6>
 80094b0:	08009bf0 	.word	0x08009bf0
 80094b4:	08009bfa 	.word	0x08009bfa
 80094b8:	00000000 	.word	0x00000000
 80094bc:	0800926f 	.word	0x0800926f
 80094c0:	08009bf6 	.word	0x08009bf6

080094c4 <_printf_common>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	4616      	mov	r6, r2
 80094ca:	4698      	mov	r8, r3
 80094cc:	688a      	ldr	r2, [r1, #8]
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	bfb8      	it	lt
 80094d8:	4613      	movlt	r3, r2
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094e0:	4607      	mov	r7, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b10a      	cbz	r2, 80094ea <_printf_common+0x26>
 80094e6:	3301      	adds	r3, #1
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	0699      	lsls	r1, r3, #26
 80094ee:	bf42      	ittt	mi
 80094f0:	6833      	ldrmi	r3, [r6, #0]
 80094f2:	3302      	addmi	r3, #2
 80094f4:	6033      	strmi	r3, [r6, #0]
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	f015 0506 	ands.w	r5, r5, #6
 80094fc:	d106      	bne.n	800950c <_printf_common+0x48>
 80094fe:	f104 0a19 	add.w	sl, r4, #25
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	6832      	ldr	r2, [r6, #0]
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	42ab      	cmp	r3, r5
 800950a:	dc26      	bgt.n	800955a <_printf_common+0x96>
 800950c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	3b00      	subs	r3, #0
 8009514:	bf18      	it	ne
 8009516:	2301      	movne	r3, #1
 8009518:	0692      	lsls	r2, r2, #26
 800951a:	d42b      	bmi.n	8009574 <_printf_common+0xb0>
 800951c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009520:	4641      	mov	r1, r8
 8009522:	4638      	mov	r0, r7
 8009524:	47c8      	blx	r9
 8009526:	3001      	adds	r0, #1
 8009528:	d01e      	beq.n	8009568 <_printf_common+0xa4>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	f003 0306 	and.w	r3, r3, #6
 8009532:	2b04      	cmp	r3, #4
 8009534:	bf02      	ittt	eq
 8009536:	68e5      	ldreq	r5, [r4, #12]
 8009538:	6833      	ldreq	r3, [r6, #0]
 800953a:	1aed      	subeq	r5, r5, r3
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	bf0c      	ite	eq
 8009540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009544:	2500      	movne	r5, #0
 8009546:	4293      	cmp	r3, r2
 8009548:	bfc4      	itt	gt
 800954a:	1a9b      	subgt	r3, r3, r2
 800954c:	18ed      	addgt	r5, r5, r3
 800954e:	2600      	movs	r6, #0
 8009550:	341a      	adds	r4, #26
 8009552:	42b5      	cmp	r5, r6
 8009554:	d11a      	bne.n	800958c <_printf_common+0xc8>
 8009556:	2000      	movs	r0, #0
 8009558:	e008      	b.n	800956c <_printf_common+0xa8>
 800955a:	2301      	movs	r3, #1
 800955c:	4652      	mov	r2, sl
 800955e:	4641      	mov	r1, r8
 8009560:	4638      	mov	r0, r7
 8009562:	47c8      	blx	r9
 8009564:	3001      	adds	r0, #1
 8009566:	d103      	bne.n	8009570 <_printf_common+0xac>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	3501      	adds	r5, #1
 8009572:	e7c6      	b.n	8009502 <_printf_common+0x3e>
 8009574:	18e1      	adds	r1, r4, r3
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	2030      	movs	r0, #48	@ 0x30
 800957a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800957e:	4422      	add	r2, r4
 8009580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009584:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009588:	3302      	adds	r3, #2
 800958a:	e7c7      	b.n	800951c <_printf_common+0x58>
 800958c:	2301      	movs	r3, #1
 800958e:	4622      	mov	r2, r4
 8009590:	4641      	mov	r1, r8
 8009592:	4638      	mov	r0, r7
 8009594:	47c8      	blx	r9
 8009596:	3001      	adds	r0, #1
 8009598:	d0e6      	beq.n	8009568 <_printf_common+0xa4>
 800959a:	3601      	adds	r6, #1
 800959c:	e7d9      	b.n	8009552 <_printf_common+0x8e>
	...

080095a0 <_printf_i>:
 80095a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	7e0f      	ldrb	r7, [r1, #24]
 80095a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095a8:	2f78      	cmp	r7, #120	@ 0x78
 80095aa:	4691      	mov	r9, r2
 80095ac:	4680      	mov	r8, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	469a      	mov	sl, r3
 80095b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095b6:	d807      	bhi.n	80095c8 <_printf_i+0x28>
 80095b8:	2f62      	cmp	r7, #98	@ 0x62
 80095ba:	d80a      	bhi.n	80095d2 <_printf_i+0x32>
 80095bc:	2f00      	cmp	r7, #0
 80095be:	f000 80d2 	beq.w	8009766 <_printf_i+0x1c6>
 80095c2:	2f58      	cmp	r7, #88	@ 0x58
 80095c4:	f000 80b9 	beq.w	800973a <_printf_i+0x19a>
 80095c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095d0:	e03a      	b.n	8009648 <_printf_i+0xa8>
 80095d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095d6:	2b15      	cmp	r3, #21
 80095d8:	d8f6      	bhi.n	80095c8 <_printf_i+0x28>
 80095da:	a101      	add	r1, pc, #4	@ (adr r1, 80095e0 <_printf_i+0x40>)
 80095dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095e0:	08009639 	.word	0x08009639
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	080095c9 	.word	0x080095c9
 80095ec:	080095c9 	.word	0x080095c9
 80095f0:	080095c9 	.word	0x080095c9
 80095f4:	080095c9 	.word	0x080095c9
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	080095c9 	.word	0x080095c9
 8009600:	080095c9 	.word	0x080095c9
 8009604:	080095c9 	.word	0x080095c9
 8009608:	080095c9 	.word	0x080095c9
 800960c:	0800974d 	.word	0x0800974d
 8009610:	08009677 	.word	0x08009677
 8009614:	08009707 	.word	0x08009707
 8009618:	080095c9 	.word	0x080095c9
 800961c:	080095c9 	.word	0x080095c9
 8009620:	0800976f 	.word	0x0800976f
 8009624:	080095c9 	.word	0x080095c9
 8009628:	08009677 	.word	0x08009677
 800962c:	080095c9 	.word	0x080095c9
 8009630:	080095c9 	.word	0x080095c9
 8009634:	0800970f 	.word	0x0800970f
 8009638:	6833      	ldr	r3, [r6, #0]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6032      	str	r2, [r6, #0]
 8009640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009644:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009648:	2301      	movs	r3, #1
 800964a:	e09d      	b.n	8009788 <_printf_i+0x1e8>
 800964c:	6833      	ldr	r3, [r6, #0]
 800964e:	6820      	ldr	r0, [r4, #0]
 8009650:	1d19      	adds	r1, r3, #4
 8009652:	6031      	str	r1, [r6, #0]
 8009654:	0606      	lsls	r6, r0, #24
 8009656:	d501      	bpl.n	800965c <_printf_i+0xbc>
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	e003      	b.n	8009664 <_printf_i+0xc4>
 800965c:	0645      	lsls	r5, r0, #25
 800965e:	d5fb      	bpl.n	8009658 <_printf_i+0xb8>
 8009660:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009664:	2d00      	cmp	r5, #0
 8009666:	da03      	bge.n	8009670 <_printf_i+0xd0>
 8009668:	232d      	movs	r3, #45	@ 0x2d
 800966a:	426d      	negs	r5, r5
 800966c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009670:	4859      	ldr	r0, [pc, #356]	@ (80097d8 <_printf_i+0x238>)
 8009672:	230a      	movs	r3, #10
 8009674:	e011      	b.n	800969a <_printf_i+0xfa>
 8009676:	6821      	ldr	r1, [r4, #0]
 8009678:	6833      	ldr	r3, [r6, #0]
 800967a:	0608      	lsls	r0, r1, #24
 800967c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009680:	d402      	bmi.n	8009688 <_printf_i+0xe8>
 8009682:	0649      	lsls	r1, r1, #25
 8009684:	bf48      	it	mi
 8009686:	b2ad      	uxthmi	r5, r5
 8009688:	2f6f      	cmp	r7, #111	@ 0x6f
 800968a:	4853      	ldr	r0, [pc, #332]	@ (80097d8 <_printf_i+0x238>)
 800968c:	6033      	str	r3, [r6, #0]
 800968e:	bf14      	ite	ne
 8009690:	230a      	movne	r3, #10
 8009692:	2308      	moveq	r3, #8
 8009694:	2100      	movs	r1, #0
 8009696:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800969a:	6866      	ldr	r6, [r4, #4]
 800969c:	60a6      	str	r6, [r4, #8]
 800969e:	2e00      	cmp	r6, #0
 80096a0:	bfa2      	ittt	ge
 80096a2:	6821      	ldrge	r1, [r4, #0]
 80096a4:	f021 0104 	bicge.w	r1, r1, #4
 80096a8:	6021      	strge	r1, [r4, #0]
 80096aa:	b90d      	cbnz	r5, 80096b0 <_printf_i+0x110>
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	d04b      	beq.n	8009748 <_printf_i+0x1a8>
 80096b0:	4616      	mov	r6, r2
 80096b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80096b6:	fb03 5711 	mls	r7, r3, r1, r5
 80096ba:	5dc7      	ldrb	r7, [r0, r7]
 80096bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096c0:	462f      	mov	r7, r5
 80096c2:	42bb      	cmp	r3, r7
 80096c4:	460d      	mov	r5, r1
 80096c6:	d9f4      	bls.n	80096b2 <_printf_i+0x112>
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d10b      	bne.n	80096e4 <_printf_i+0x144>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	07df      	lsls	r7, r3, #31
 80096d0:	d508      	bpl.n	80096e4 <_printf_i+0x144>
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	6861      	ldr	r1, [r4, #4]
 80096d6:	4299      	cmp	r1, r3
 80096d8:	bfde      	ittt	le
 80096da:	2330      	movle	r3, #48	@ 0x30
 80096dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096e4:	1b92      	subs	r2, r2, r6
 80096e6:	6122      	str	r2, [r4, #16]
 80096e8:	f8cd a000 	str.w	sl, [sp]
 80096ec:	464b      	mov	r3, r9
 80096ee:	aa03      	add	r2, sp, #12
 80096f0:	4621      	mov	r1, r4
 80096f2:	4640      	mov	r0, r8
 80096f4:	f7ff fee6 	bl	80094c4 <_printf_common>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d14a      	bne.n	8009792 <_printf_i+0x1f2>
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	b004      	add	sp, #16
 8009702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	f043 0320 	orr.w	r3, r3, #32
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	4833      	ldr	r0, [pc, #204]	@ (80097dc <_printf_i+0x23c>)
 8009710:	2778      	movs	r7, #120	@ 0x78
 8009712:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	6831      	ldr	r1, [r6, #0]
 800971a:	061f      	lsls	r7, r3, #24
 800971c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009720:	d402      	bmi.n	8009728 <_printf_i+0x188>
 8009722:	065f      	lsls	r7, r3, #25
 8009724:	bf48      	it	mi
 8009726:	b2ad      	uxthmi	r5, r5
 8009728:	6031      	str	r1, [r6, #0]
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	bf44      	itt	mi
 800972e:	f043 0320 	orrmi.w	r3, r3, #32
 8009732:	6023      	strmi	r3, [r4, #0]
 8009734:	b11d      	cbz	r5, 800973e <_printf_i+0x19e>
 8009736:	2310      	movs	r3, #16
 8009738:	e7ac      	b.n	8009694 <_printf_i+0xf4>
 800973a:	4827      	ldr	r0, [pc, #156]	@ (80097d8 <_printf_i+0x238>)
 800973c:	e7e9      	b.n	8009712 <_printf_i+0x172>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	f023 0320 	bic.w	r3, r3, #32
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	e7f6      	b.n	8009736 <_printf_i+0x196>
 8009748:	4616      	mov	r6, r2
 800974a:	e7bd      	b.n	80096c8 <_printf_i+0x128>
 800974c:	6833      	ldr	r3, [r6, #0]
 800974e:	6825      	ldr	r5, [r4, #0]
 8009750:	6961      	ldr	r1, [r4, #20]
 8009752:	1d18      	adds	r0, r3, #4
 8009754:	6030      	str	r0, [r6, #0]
 8009756:	062e      	lsls	r6, r5, #24
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	d501      	bpl.n	8009760 <_printf_i+0x1c0>
 800975c:	6019      	str	r1, [r3, #0]
 800975e:	e002      	b.n	8009766 <_printf_i+0x1c6>
 8009760:	0668      	lsls	r0, r5, #25
 8009762:	d5fb      	bpl.n	800975c <_printf_i+0x1bc>
 8009764:	8019      	strh	r1, [r3, #0]
 8009766:	2300      	movs	r3, #0
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	4616      	mov	r6, r2
 800976c:	e7bc      	b.n	80096e8 <_printf_i+0x148>
 800976e:	6833      	ldr	r3, [r6, #0]
 8009770:	1d1a      	adds	r2, r3, #4
 8009772:	6032      	str	r2, [r6, #0]
 8009774:	681e      	ldr	r6, [r3, #0]
 8009776:	6862      	ldr	r2, [r4, #4]
 8009778:	2100      	movs	r1, #0
 800977a:	4630      	mov	r0, r6
 800977c:	f7f6 fd30 	bl	80001e0 <memchr>
 8009780:	b108      	cbz	r0, 8009786 <_printf_i+0x1e6>
 8009782:	1b80      	subs	r0, r0, r6
 8009784:	6060      	str	r0, [r4, #4]
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	6123      	str	r3, [r4, #16]
 800978a:	2300      	movs	r3, #0
 800978c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009790:	e7aa      	b.n	80096e8 <_printf_i+0x148>
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	4632      	mov	r2, r6
 8009796:	4649      	mov	r1, r9
 8009798:	4640      	mov	r0, r8
 800979a:	47d0      	blx	sl
 800979c:	3001      	adds	r0, #1
 800979e:	d0ad      	beq.n	80096fc <_printf_i+0x15c>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	079b      	lsls	r3, r3, #30
 80097a4:	d413      	bmi.n	80097ce <_printf_i+0x22e>
 80097a6:	68e0      	ldr	r0, [r4, #12]
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	4298      	cmp	r0, r3
 80097ac:	bfb8      	it	lt
 80097ae:	4618      	movlt	r0, r3
 80097b0:	e7a6      	b.n	8009700 <_printf_i+0x160>
 80097b2:	2301      	movs	r3, #1
 80097b4:	4632      	mov	r2, r6
 80097b6:	4649      	mov	r1, r9
 80097b8:	4640      	mov	r0, r8
 80097ba:	47d0      	blx	sl
 80097bc:	3001      	adds	r0, #1
 80097be:	d09d      	beq.n	80096fc <_printf_i+0x15c>
 80097c0:	3501      	adds	r5, #1
 80097c2:	68e3      	ldr	r3, [r4, #12]
 80097c4:	9903      	ldr	r1, [sp, #12]
 80097c6:	1a5b      	subs	r3, r3, r1
 80097c8:	42ab      	cmp	r3, r5
 80097ca:	dcf2      	bgt.n	80097b2 <_printf_i+0x212>
 80097cc:	e7eb      	b.n	80097a6 <_printf_i+0x206>
 80097ce:	2500      	movs	r5, #0
 80097d0:	f104 0619 	add.w	r6, r4, #25
 80097d4:	e7f5      	b.n	80097c2 <_printf_i+0x222>
 80097d6:	bf00      	nop
 80097d8:	08009c01 	.word	0x08009c01
 80097dc:	08009c12 	.word	0x08009c12

080097e0 <__sflush_r>:
 80097e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	0716      	lsls	r6, r2, #28
 80097ea:	4605      	mov	r5, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	d454      	bmi.n	800989a <__sflush_r+0xba>
 80097f0:	684b      	ldr	r3, [r1, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dc02      	bgt.n	80097fc <__sflush_r+0x1c>
 80097f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dd48      	ble.n	800988e <__sflush_r+0xae>
 80097fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097fe:	2e00      	cmp	r6, #0
 8009800:	d045      	beq.n	800988e <__sflush_r+0xae>
 8009802:	2300      	movs	r3, #0
 8009804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009808:	682f      	ldr	r7, [r5, #0]
 800980a:	6a21      	ldr	r1, [r4, #32]
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	d030      	beq.n	8009872 <__sflush_r+0x92>
 8009810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	0759      	lsls	r1, r3, #29
 8009816:	d505      	bpl.n	8009824 <__sflush_r+0x44>
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800981e:	b10b      	cbz	r3, 8009824 <__sflush_r+0x44>
 8009820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	2300      	movs	r3, #0
 8009826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009828:	6a21      	ldr	r1, [r4, #32]
 800982a:	4628      	mov	r0, r5
 800982c:	47b0      	blx	r6
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	d106      	bne.n	8009842 <__sflush_r+0x62>
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	291d      	cmp	r1, #29
 8009838:	d82b      	bhi.n	8009892 <__sflush_r+0xb2>
 800983a:	4a2a      	ldr	r2, [pc, #168]	@ (80098e4 <__sflush_r+0x104>)
 800983c:	410a      	asrs	r2, r1
 800983e:	07d6      	lsls	r6, r2, #31
 8009840:	d427      	bmi.n	8009892 <__sflush_r+0xb2>
 8009842:	2200      	movs	r2, #0
 8009844:	6062      	str	r2, [r4, #4]
 8009846:	04d9      	lsls	r1, r3, #19
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	d504      	bpl.n	8009858 <__sflush_r+0x78>
 800984e:	1c42      	adds	r2, r0, #1
 8009850:	d101      	bne.n	8009856 <__sflush_r+0x76>
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	b903      	cbnz	r3, 8009858 <__sflush_r+0x78>
 8009856:	6560      	str	r0, [r4, #84]	@ 0x54
 8009858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800985a:	602f      	str	r7, [r5, #0]
 800985c:	b1b9      	cbz	r1, 800988e <__sflush_r+0xae>
 800985e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009862:	4299      	cmp	r1, r3
 8009864:	d002      	beq.n	800986c <__sflush_r+0x8c>
 8009866:	4628      	mov	r0, r5
 8009868:	f7ff fbf2 	bl	8009050 <_free_r>
 800986c:	2300      	movs	r3, #0
 800986e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009870:	e00d      	b.n	800988e <__sflush_r+0xae>
 8009872:	2301      	movs	r3, #1
 8009874:	4628      	mov	r0, r5
 8009876:	47b0      	blx	r6
 8009878:	4602      	mov	r2, r0
 800987a:	1c50      	adds	r0, r2, #1
 800987c:	d1c9      	bne.n	8009812 <__sflush_r+0x32>
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0c6      	beq.n	8009812 <__sflush_r+0x32>
 8009884:	2b1d      	cmp	r3, #29
 8009886:	d001      	beq.n	800988c <__sflush_r+0xac>
 8009888:	2b16      	cmp	r3, #22
 800988a:	d11e      	bne.n	80098ca <__sflush_r+0xea>
 800988c:	602f      	str	r7, [r5, #0]
 800988e:	2000      	movs	r0, #0
 8009890:	e022      	b.n	80098d8 <__sflush_r+0xf8>
 8009892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009896:	b21b      	sxth	r3, r3
 8009898:	e01b      	b.n	80098d2 <__sflush_r+0xf2>
 800989a:	690f      	ldr	r7, [r1, #16]
 800989c:	2f00      	cmp	r7, #0
 800989e:	d0f6      	beq.n	800988e <__sflush_r+0xae>
 80098a0:	0793      	lsls	r3, r2, #30
 80098a2:	680e      	ldr	r6, [r1, #0]
 80098a4:	bf08      	it	eq
 80098a6:	694b      	ldreq	r3, [r1, #20]
 80098a8:	600f      	str	r7, [r1, #0]
 80098aa:	bf18      	it	ne
 80098ac:	2300      	movne	r3, #0
 80098ae:	eba6 0807 	sub.w	r8, r6, r7
 80098b2:	608b      	str	r3, [r1, #8]
 80098b4:	f1b8 0f00 	cmp.w	r8, #0
 80098b8:	dde9      	ble.n	800988e <__sflush_r+0xae>
 80098ba:	6a21      	ldr	r1, [r4, #32]
 80098bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098be:	4643      	mov	r3, r8
 80098c0:	463a      	mov	r2, r7
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b0      	blx	r6
 80098c6:	2800      	cmp	r0, #0
 80098c8:	dc08      	bgt.n	80098dc <__sflush_r+0xfc>
 80098ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098dc:	4407      	add	r7, r0
 80098de:	eba8 0800 	sub.w	r8, r8, r0
 80098e2:	e7e7      	b.n	80098b4 <__sflush_r+0xd4>
 80098e4:	dfbffffe 	.word	0xdfbffffe

080098e8 <_fflush_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	b913      	cbnz	r3, 80098f8 <_fflush_r+0x10>
 80098f2:	2500      	movs	r5, #0
 80098f4:	4628      	mov	r0, r5
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	b118      	cbz	r0, 8009902 <_fflush_r+0x1a>
 80098fa:	6a03      	ldr	r3, [r0, #32]
 80098fc:	b90b      	cbnz	r3, 8009902 <_fflush_r+0x1a>
 80098fe:	f7ff fa9f 	bl	8008e40 <__sinit>
 8009902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f3      	beq.n	80098f2 <_fflush_r+0xa>
 800990a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800990c:	07d0      	lsls	r0, r2, #31
 800990e:	d404      	bmi.n	800991a <_fflush_r+0x32>
 8009910:	0599      	lsls	r1, r3, #22
 8009912:	d402      	bmi.n	800991a <_fflush_r+0x32>
 8009914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009916:	f7ff fb98 	bl	800904a <__retarget_lock_acquire_recursive>
 800991a:	4628      	mov	r0, r5
 800991c:	4621      	mov	r1, r4
 800991e:	f7ff ff5f 	bl	80097e0 <__sflush_r>
 8009922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009924:	07da      	lsls	r2, r3, #31
 8009926:	4605      	mov	r5, r0
 8009928:	d4e4      	bmi.n	80098f4 <_fflush_r+0xc>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	059b      	lsls	r3, r3, #22
 800992e:	d4e1      	bmi.n	80098f4 <_fflush_r+0xc>
 8009930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009932:	f7ff fb8b 	bl	800904c <__retarget_lock_release_recursive>
 8009936:	e7dd      	b.n	80098f4 <_fflush_r+0xc>

08009938 <__swbuf_r>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	460e      	mov	r6, r1
 800993c:	4614      	mov	r4, r2
 800993e:	4605      	mov	r5, r0
 8009940:	b118      	cbz	r0, 800994a <__swbuf_r+0x12>
 8009942:	6a03      	ldr	r3, [r0, #32]
 8009944:	b90b      	cbnz	r3, 800994a <__swbuf_r+0x12>
 8009946:	f7ff fa7b 	bl	8008e40 <__sinit>
 800994a:	69a3      	ldr	r3, [r4, #24]
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	071a      	lsls	r2, r3, #28
 8009952:	d501      	bpl.n	8009958 <__swbuf_r+0x20>
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	b943      	cbnz	r3, 800996a <__swbuf_r+0x32>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f82a 	bl	80099b4 <__swsetup_r>
 8009960:	b118      	cbz	r0, 800996a <__swbuf_r+0x32>
 8009962:	f04f 37ff 	mov.w	r7, #4294967295
 8009966:	4638      	mov	r0, r7
 8009968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	1a98      	subs	r0, r3, r2
 8009970:	6963      	ldr	r3, [r4, #20]
 8009972:	b2f6      	uxtb	r6, r6
 8009974:	4283      	cmp	r3, r0
 8009976:	4637      	mov	r7, r6
 8009978:	dc05      	bgt.n	8009986 <__swbuf_r+0x4e>
 800997a:	4621      	mov	r1, r4
 800997c:	4628      	mov	r0, r5
 800997e:	f7ff ffb3 	bl	80098e8 <_fflush_r>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1ed      	bne.n	8009962 <__swbuf_r+0x2a>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	3b01      	subs	r3, #1
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	701e      	strb	r6, [r3, #0]
 8009994:	6962      	ldr	r2, [r4, #20]
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	429a      	cmp	r2, r3
 800999a:	d004      	beq.n	80099a6 <__swbuf_r+0x6e>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	07db      	lsls	r3, r3, #31
 80099a0:	d5e1      	bpl.n	8009966 <__swbuf_r+0x2e>
 80099a2:	2e0a      	cmp	r6, #10
 80099a4:	d1df      	bne.n	8009966 <__swbuf_r+0x2e>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f7ff ff9d 	bl	80098e8 <_fflush_r>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d0d9      	beq.n	8009966 <__swbuf_r+0x2e>
 80099b2:	e7d6      	b.n	8009962 <__swbuf_r+0x2a>

080099b4 <__swsetup_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4b29      	ldr	r3, [pc, #164]	@ (8009a5c <__swsetup_r+0xa8>)
 80099b8:	4605      	mov	r5, r0
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	460c      	mov	r4, r1
 80099be:	b118      	cbz	r0, 80099c8 <__swsetup_r+0x14>
 80099c0:	6a03      	ldr	r3, [r0, #32]
 80099c2:	b90b      	cbnz	r3, 80099c8 <__swsetup_r+0x14>
 80099c4:	f7ff fa3c 	bl	8008e40 <__sinit>
 80099c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099cc:	0719      	lsls	r1, r3, #28
 80099ce:	d422      	bmi.n	8009a16 <__swsetup_r+0x62>
 80099d0:	06da      	lsls	r2, r3, #27
 80099d2:	d407      	bmi.n	80099e4 <__swsetup_r+0x30>
 80099d4:	2209      	movs	r2, #9
 80099d6:	602a      	str	r2, [r5, #0]
 80099d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	f04f 30ff 	mov.w	r0, #4294967295
 80099e2:	e033      	b.n	8009a4c <__swsetup_r+0x98>
 80099e4:	0758      	lsls	r0, r3, #29
 80099e6:	d512      	bpl.n	8009a0e <__swsetup_r+0x5a>
 80099e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ea:	b141      	cbz	r1, 80099fe <__swsetup_r+0x4a>
 80099ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d002      	beq.n	80099fa <__swsetup_r+0x46>
 80099f4:	4628      	mov	r0, r5
 80099f6:	f7ff fb2b 	bl	8009050 <_free_r>
 80099fa:	2300      	movs	r3, #0
 80099fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	2300      	movs	r3, #0
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0308 	orr.w	r3, r3, #8
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	b94b      	cbnz	r3, 8009a2e <__swsetup_r+0x7a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a24:	d003      	beq.n	8009a2e <__swsetup_r+0x7a>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 f84f 	bl	8009acc <__smakebuf_r>
 8009a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a32:	f013 0201 	ands.w	r2, r3, #1
 8009a36:	d00a      	beq.n	8009a4e <__swsetup_r+0x9a>
 8009a38:	2200      	movs	r2, #0
 8009a3a:	60a2      	str	r2, [r4, #8]
 8009a3c:	6962      	ldr	r2, [r4, #20]
 8009a3e:	4252      	negs	r2, r2
 8009a40:	61a2      	str	r2, [r4, #24]
 8009a42:	6922      	ldr	r2, [r4, #16]
 8009a44:	b942      	cbnz	r2, 8009a58 <__swsetup_r+0xa4>
 8009a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a4a:	d1c5      	bne.n	80099d8 <__swsetup_r+0x24>
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	0799      	lsls	r1, r3, #30
 8009a50:	bf58      	it	pl
 8009a52:	6962      	ldrpl	r2, [r4, #20]
 8009a54:	60a2      	str	r2, [r4, #8]
 8009a56:	e7f4      	b.n	8009a42 <__swsetup_r+0x8e>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7f7      	b.n	8009a4c <__swsetup_r+0x98>
 8009a5c:	200000ec 	.word	0x200000ec

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	@ (8009a7c <_sbrk_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f7 f94e 	bl	8000d0c <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000478 	.word	0x20000478

08009a80 <__swhatbuf_r>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	460c      	mov	r4, r1
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	b096      	sub	sp, #88	@ 0x58
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	461e      	mov	r6, r3
 8009a90:	da0d      	bge.n	8009aae <__swhatbuf_r+0x2e>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	bf14      	ite	ne
 8009a9e:	2340      	movne	r3, #64	@ 0x40
 8009aa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	6031      	str	r1, [r6, #0]
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	b016      	add	sp, #88	@ 0x58
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	466a      	mov	r2, sp
 8009ab0:	f000 f848 	bl	8009b44 <_fstat_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	dbec      	blt.n	8009a92 <__swhatbuf_r+0x12>
 8009ab8:	9901      	ldr	r1, [sp, #4]
 8009aba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009abe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ac2:	4259      	negs	r1, r3
 8009ac4:	4159      	adcs	r1, r3
 8009ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aca:	e7eb      	b.n	8009aa4 <__swhatbuf_r+0x24>

08009acc <__smakebuf_r>:
 8009acc:	898b      	ldrh	r3, [r1, #12]
 8009ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad0:	079d      	lsls	r5, r3, #30
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	d507      	bpl.n	8009ae8 <__smakebuf_r+0x1c>
 8009ad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	6163      	str	r3, [r4, #20]
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae8:	ab01      	add	r3, sp, #4
 8009aea:	466a      	mov	r2, sp
 8009aec:	f7ff ffc8 	bl	8009a80 <__swhatbuf_r>
 8009af0:	9f00      	ldr	r7, [sp, #0]
 8009af2:	4605      	mov	r5, r0
 8009af4:	4639      	mov	r1, r7
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff fb16 	bl	8009128 <_malloc_r>
 8009afc:	b948      	cbnz	r0, 8009b12 <__smakebuf_r+0x46>
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	059a      	lsls	r2, r3, #22
 8009b04:	d4ee      	bmi.n	8009ae4 <__smakebuf_r+0x18>
 8009b06:	f023 0303 	bic.w	r3, r3, #3
 8009b0a:	f043 0302 	orr.w	r3, r3, #2
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	e7e2      	b.n	8009ad8 <__smakebuf_r+0xc>
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	6020      	str	r0, [r4, #0]
 8009b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1a:	81a3      	strh	r3, [r4, #12]
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b22:	b15b      	cbz	r3, 8009b3c <__smakebuf_r+0x70>
 8009b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f000 f81d 	bl	8009b68 <_isatty_r>
 8009b2e:	b128      	cbz	r0, 8009b3c <__smakebuf_r+0x70>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	81a3      	strh	r3, [r4, #12]
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	431d      	orrs	r5, r3
 8009b40:	81a5      	strh	r5, [r4, #12]
 8009b42:	e7cf      	b.n	8009ae4 <__smakebuf_r+0x18>

08009b44 <_fstat_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	@ (8009b64 <_fstat_r+0x20>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	f7f7 f8b2 	bl	8000cba <_fstat>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d102      	bne.n	8009b60 <_fstat_r+0x1c>
 8009b5a:	682b      	ldr	r3, [r5, #0]
 8009b5c:	b103      	cbz	r3, 8009b60 <_fstat_r+0x1c>
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	bd38      	pop	{r3, r4, r5, pc}
 8009b62:	bf00      	nop
 8009b64:	20000478 	.word	0x20000478

08009b68 <_isatty_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d06      	ldr	r5, [pc, #24]	@ (8009b84 <_isatty_r+0x1c>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	f7f7 f8b1 	bl	8000cda <_isatty>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_isatty_r+0x1a>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_isatty_r+0x1a>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20000478 	.word	0x20000478

08009b88 <_init>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr

08009b94 <_fini>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr
