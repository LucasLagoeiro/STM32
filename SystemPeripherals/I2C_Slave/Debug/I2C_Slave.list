
I2C_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b0  080047b0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b8  080047b8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047bc  080047bc  000057bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080047c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080047cc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080047cc  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e118  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9f  00000000  00000000  00014154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00015ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097d  00000000  00000000  00016c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021663  00000000  00000000  000175a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f862  00000000  00000000  00038c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc85b  00000000  00000000  0004846a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114cc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  00114d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00117f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004750 	.word	0x08004750

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004750 	.word	0x08004750

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fad0 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81e 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8de 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ac 	bl	8000630 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004d8:	f000 f86a 	bl	80005b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_I2C_Slave_Receive_IT(&hi2c1 ,(uint8_t *)RX_Buffer, 1) != HAL_OK)
 80004dc:	2201      	movs	r2, #1
 80004de:	4909      	ldr	r1, [pc, #36]	@ (8000504 <main+0x40>)
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <main+0x44>)
 80004e2:	f000 fecd 	bl	8001280 <HAL_I2C_Slave_Receive_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <main+0x2c>
  {
      /* Transfer error in reception process */
      Error_Handler();
 80004ec:	f000 f94a 	bl	8000784 <Error_Handler>
  }

  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80004f0:	bf00      	nop
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <main+0x44>)
 80004f4:	f000 ffdd 	bl	80014b2 <HAL_I2C_GetState>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b20      	cmp	r3, #32
 80004fc:	d1f9      	bne.n	80004f2 <main+0x2e>
//  HAL_Delay(100);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <main+0x3a>
 8000502:	bf00      	nop
 8000504:	20000104 	.word	0x20000104
 8000508:	20000028 	.word	0x20000028

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b096      	sub	sp, #88	@ 0x58
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2244      	movs	r2, #68	@ 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 f8eb 	bl	80046f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000532:	f002 fa0b 	bl	800294c <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800053c:	f000 f922 	bl	8000784 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000548:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800054a:	2340      	movs	r3, #64	@ 0x40
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800055a:	2308      	movs	r3, #8
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055e:	2307      	movs	r3, #7
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fa42 	bl	80029f8 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800057a:	f000 f903 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2303      	movs	r3, #3
 8000584:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	2103      	movs	r1, #3
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fe42 	bl	8003220 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a2:	f000 f8ef 	bl	8000784 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3758      	adds	r7, #88	@ 0x58
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <MX_I2C1_Init+0x78>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <MX_I2C1_Init+0x7c>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005c2:	f240 320f 	movw	r2, #783	@ 0x30f
 80005c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ec:	480d      	ldr	r0, [pc, #52]	@ (8000624 <MX_I2C1_Init+0x74>)
 80005ee:	f000 fdab 	bl	8001148 <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f8c4 	bl	8000784 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <MX_I2C1_Init+0x74>)
 8000600:	f002 f8fe 	bl	8002800 <HAL_I2CEx_ConfigAnalogFilter>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800060a:	f000 f8bb 	bl	8000784 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	4804      	ldr	r0, [pc, #16]	@ (8000624 <MX_I2C1_Init+0x74>)
 8000612:	f002 f940 	bl	8002896 <HAL_I2CEx_ConfigDigitalFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 f8b2 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	40005400 	.word	0x40005400
 800062c:	10707dbc 	.word	0x10707dbc

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <MX_USART2_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000674:	f003 fb56 	bl	8003d24 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f881 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000007c 	.word	0x2000007c
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f000 fd03 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <MX_GPIO_Init+0xc8>)
 800072a:	f000 fb7b 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800072e:	2320      	movs	r3, #32
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 fb6c 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800

0800075c <HAL_I2C_ErrorCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <Error_Handler+0x8>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0a4      	sub	sp, #144	@ 0x90
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2268      	movs	r2, #104	@ 0x68
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 ff7c 	bl	80046f6 <memset>
  if(hi2c->Instance==I2C1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <HAL_I2C_MspInit+0xd0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d14a      	bne.n	800089e <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4618      	mov	r0, r3
 8000816:	f002 ff27 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000820:	f7ff ffb0 	bl	8000784 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800083c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000840:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800085e:	4619      	mov	r1, r3
 8000860:	4813      	ldr	r0, [pc, #76]	@ (80008b0 <HAL_I2C_MspInit+0xd8>)
 8000862:	f000 fadf 	bl	8000e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000870:	6593      	str	r3, [r2, #88]	@ 0x58
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_I2C_MspInit+0xd4>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	201f      	movs	r0, #31
 8000884:	f000 fa49 	bl	8000d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000888:	201f      	movs	r0, #31
 800088a:	f000 fa62 	bl	8000d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2020      	movs	r0, #32
 8000894:	f000 fa41 	bl	8000d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000898:	2020      	movs	r0, #32
 800089a:	f000 fa5a 	bl	8000d52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800089e:	bf00      	nop
 80008a0:	3790      	adds	r7, #144	@ 0x90
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000400 	.word	0x48000400

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a4      	sub	sp, #144	@ 0x90
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2268      	movs	r2, #104	@ 0x68
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 ff0e 	bl	80046f6 <memset>
  if(huart->Instance==USART2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a21      	ldr	r2, [pc, #132]	@ (8000964 <HAL_UART_MspInit+0xb0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d13a      	bne.n	800095a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 feb9 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008fc:	f7ff ff42 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000904:	4a18      	ldr	r2, [pc, #96]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090a:	6593      	str	r3, [r2, #88]	@ 0x58
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091c:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_UART_MspInit+0xb4>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000930:	230c      	movs	r3, #12
 8000932:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f000 fa65 	bl	8000e24 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800095a:	bf00      	nop
 800095c:	3790      	adds	r7, #144	@ 0x90
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8af 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <I2C1_EV_IRQHandler+0x10>)
 80009d2:	f000 fca5 	bl	8001320 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000028 	.word	0x20000028

080009e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <I2C1_ER_IRQHandler+0x10>)
 80009e6:	f000 fcb5 	bl	8001354 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000028 	.word	0x20000028

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff ffea 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fe5f 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fd3b 	bl	80004c4 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a50:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	080047c0 	.word	0x080047c0
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	2000010c 	.word	0x2000010c

08000a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_Init+0x3c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <HAL_Init+0x3c>)
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f93e 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 f80f 	bl	8000aac <HAL_InitTick>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	e001      	b.n	8000a9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9a:	f7ff fe79 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d023      	beq.n	8000b08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_InitTick+0x70>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <HAL_InitTick+0x6c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f949 	bl	8000d6e <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10f      	bne.n	8000b02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d809      	bhi.n	8000afc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f913 	bl	8000d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_InitTick+0x74>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e007      	b.n	8000b0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e004      	b.n	8000b0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e001      	b.n	8000b0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000108 	.word	0x20000108

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000108 	.word	0x20000108

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff29 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff3e 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff31 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa2 	bl	8000cc0 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d005      	beq.n	8000daa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2204      	movs	r2, #4
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e029      	b.n	8000dfe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 020e 	bic.w	r2, r2, #14
 8000db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f003 021c 	and.w	r2, r3, #28
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	4798      	blx	r3
    }
  }
  return status;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e154      	b.n	80010de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8146 	beq.w	80010d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80a0 	beq.w	80010d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <HAL_GPIO_Init+0x2d8>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <HAL_GPIO_Init+0x2d8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa4:	4b55      	ldr	r3, [pc, #340]	@ (80010fc <HAL_GPIO_Init+0x2d8>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb0:	4a53      	ldr	r2, [pc, #332]	@ (8001100 <HAL_GPIO_Init+0x2dc>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fda:	d019      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a49      	ldr	r2, [pc, #292]	@ (8001104 <HAL_GPIO_Init+0x2e0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a48      	ldr	r2, [pc, #288]	@ (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1e4>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <HAL_GPIO_Init+0x2e8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1e0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a46      	ldr	r2, [pc, #280]	@ (8001110 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1dc>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001000:	2307      	movs	r3, #7
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	@ (8001100 <HAL_GPIO_Init+0x2dc>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105a:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <HAL_GPIO_Init+0x2f0>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f aea3 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e08d      	b.n	8001276 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fb32 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2224      	movs	r2, #36	@ 0x24
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d108      	bne.n	80011ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	e007      	b.n	80011fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69d9      	ldr	r1, [r3, #28]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b20      	cmp	r3, #32
 8001298:	d139      	bne.n	800130e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_I2C_Slave_Receive_IT+0x28>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e033      	b.n	8001310 <HAL_I2C_Slave_Receive_IT+0x90>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2222      	movs	r2, #34	@ 0x22
 80012b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2220      	movs	r2, #32
 80012bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_I2C_Slave_Receive_IT+0x98>)
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_I2C_Slave_Receive_IT+0x9c>)
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001300:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f001 f999 	bl	800263c <I2C_Enable_IRQ>

    return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800130e:	2302      	movs	r3, #2
  }
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	ffff0000 	.word	0xffff0000
 800131c:	080014cf 	.word	0x080014cf

08001320 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
  }
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00f      	beq.n	8001396 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00a      	beq.n	8001396 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001394:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00f      	beq.n	80013c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f043 0208 	orr.w	r2, r3, #8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00f      	beq.n	80013ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	f043 0202 	orr.w	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 030b 	and.w	r3, r3, #11
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 ff91 	bl	8002324 <I2C_ITError>
  }
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	4613      	mov	r3, r2
 8001454:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <I2C_Slave_ISR_IT+0x24>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e0e1      	b.n	80016b6 <I2C_Slave_ISR_IT+0x1e8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800150e:	6939      	ldr	r1, [r7, #16]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 fda1 	bl	8002058 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d04b      	beq.n	80015b8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001526:	2b00      	cmp	r3, #0
 8001528:	d046      	beq.n	80015b8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d128      	bne.n	8001586 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b28      	cmp	r3, #40	@ 0x28
 800153e:	d108      	bne.n	8001552 <I2C_Slave_ISR_IT+0x84>
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001546:	d104      	bne.n	8001552 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fe96 	bl	800227c <I2C_ITListenCplt>
 8001550:	e031      	b.n	80015b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b29      	cmp	r3, #41	@ 0x29
 800155c:	d10e      	bne.n	800157c <I2C_Slave_ISR_IT+0xae>
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001564:	d00a      	beq.n	800157c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 ffef 	bl	8002552 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 fc4a 	bl	8001e0e <I2C_ITSlaveSeqCplt>
 800157a:	e01c      	b.n	80015b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2210      	movs	r2, #16
 8001582:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001584:	e08f      	b.n	80016a6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2210      	movs	r2, #16
 800158c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f043 0204 	orr.w	r2, r3, #4
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <I2C_Slave_ISR_IT+0xda>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a6:	d17e      	bne.n	80016a6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	4619      	mov	r1, r3
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 feb8 	bl	8002324 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80015b4:	e077      	b.n	80016a6 <I2C_Slave_ISR_IT+0x1d8>
 80015b6:	e076      	b.n	80016a6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d02f      	beq.n	8001622 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d02a      	beq.n	8001622 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d14b      	bne.n	80016aa <I2C_Slave_ISR_IT+0x1dc>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001618:	d047      	beq.n	80016aa <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fbf7 	bl	8001e0e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001620:	e043      	b.n	80016aa <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 fb27 	bl	8001c8c <I2C_ITAddrCplt>
 800163e:	e035      	b.n	80016ac <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d030      	beq.n	80016ac <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02b      	beq.n	80016ac <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d018      	beq.n	8001690 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800168e:	e00d      	b.n	80016ac <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001696:	d002      	beq.n	800169e <I2C_Slave_ISR_IT+0x1d0>
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fbb5 	bl	8001e0e <I2C_ITSlaveSeqCplt>
 80016a4:	e002      	b.n	80016ac <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80016a6:	bf00      	nop
 80016a8:	e000      	b.n	80016ac <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80016aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b088      	sub	sp, #32
 80016c2:	af02      	add	r7, sp, #8
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <I2C_Master_ISR_DMA+0x1a>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e0d9      	b.n	800188c <I2C_Master_ISR_DMA+0x1ce>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d011      	beq.n	8001718 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2210      	movs	r2, #16
 80016fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001708:	2120      	movs	r1, #32
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 ff96 	bl	800263c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 ff1e 	bl	8002552 <I2C_Flush_TXDR>
 8001716:	e0b4      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171e:	2b00      	cmp	r3, #0
 8001720:	d071      	beq.n	8001806 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06c      	beq.n	8001806 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800173a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04e      	beq.n	80017e4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001752:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	2bff      	cmp	r3, #255	@ 0xff
 800175c:	d906      	bls.n	800176c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	22ff      	movs	r2, #255	@ 0xff
 8001762:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e010      	b.n	800178e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800177e:	d003      	beq.n	8001788 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e002      	b.n	800178e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8a79      	ldrh	r1, [r7, #18]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 ff1b 	bl	80025d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b22      	cmp	r3, #34	@ 0x22
 80017be:	d108      	bne.n	80017d2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017d0:	e057      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017e2:	e04e      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017f2:	d003      	beq.n	80017fc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 facd 	bl	8001d94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80017fa:	e042      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017fc:	2140      	movs	r1, #64	@ 0x40
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fd90 	bl	8002324 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001804:	e03d      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d028      	beq.n	8001862 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001816:	2b00      	cmp	r3, #0
 8001818:	d023      	beq.n	8001862 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d119      	bne.n	8001858 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001832:	d025      	beq.n	8001880 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800183c:	d108      	bne.n	8001850 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800184c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800184e:	e017      	b.n	8001880 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fa9f 	bl	8001d94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001856:	e013      	b.n	8001880 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001858:	2140      	movs	r1, #64	@ 0x40
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fd62 	bl	8002324 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001860:	e00e      	b.n	8001880 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 fb25 	bl	8001ec8 <I2C_ITMasterCplt>
 800187e:	e000      	b.n	8001882 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001880:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80018a0:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad8 <I2C_Mem_ISR_DMA+0x244>)
 80018a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <I2C_Mem_ISR_DMA+0x1e>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e10e      	b.n	8001ad0 <I2C_Mem_ISR_DMA+0x23c>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d016      	beq.n	80018f2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d011      	beq.n	80018f2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2210      	movs	r2, #16
 80018d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f043 0204 	orr.w	r2, r3, #4
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80018e2:	2120      	movs	r1, #32
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fea9 	bl	800263c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fe31 	bl	8002552 <I2C_Flush_TXDR>
 80018f0:	e0e9      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f04f 32ff 	mov.w	r2, #4294967295
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
 8001918:	e0d5      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05f      	beq.n	80019e4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800192a:	2b00      	cmp	r3, #0
 800192c:	d05a      	beq.n	80019e4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800192e:	2101      	movs	r1, #1
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 ff07 	bl	8002744 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001936:	2110      	movs	r1, #16
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fe7f 	bl	800263c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d048      	beq.n	80019da <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2bff      	cmp	r3, #255	@ 0xff
 8001950:	d910      	bls.n	8001974 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	22ff      	movs	r2, #255	@ 0xff
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	b299      	uxth	r1, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001962:	b2da      	uxtb	r2, r3
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fe33 	bl	80025d8 <I2C_TransferConfig>
 8001972:	e011      	b.n	8001998 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	b299      	uxth	r1, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001988:	b2da      	uxtb	r2, r3
 800198a:	2300      	movs	r3, #0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fe20 	bl	80025d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b22      	cmp	r3, #34	@ 0x22
 80019b4:	d108      	bne.n	80019c8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019c6:	e07e      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019d8:	e075      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019da:	2140      	movs	r1, #64	@ 0x40
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fca1 	bl	8002324 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80019e2:	e070      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d05d      	beq.n	8001aaa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d058      	beq.n	8001aaa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019f8:	2101      	movs	r1, #1
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fea2 	bl	8002744 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a00:	2110      	movs	r1, #16
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fe1a 	bl	800263c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b22      	cmp	r3, #34	@ 0x22
 8001a12:	d101      	bne.n	8001a18 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <I2C_Mem_ISR_DMA+0x248>)
 8001a16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	@ 0xff
 8001a20:	d910      	bls.n	8001a44 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	22ff      	movs	r2, #255	@ 0xff
 8001a26:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	b299      	uxth	r1, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fdcb 	bl	80025d8 <I2C_TransferConfig>
 8001a42:	e011      	b.n	8001a68 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	b299      	uxth	r1, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fdb8 	bl	80025d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b22      	cmp	r3, #34	@ 0x22
 8001a84:	d108      	bne.n	8001a98 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a94:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a96:	e016      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aa6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001aa8:	e00d      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fa01 	bl	8001ec8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	80002000 	.word	0x80002000
 8001adc:	80002400 	.word	0x80002400

08001ae0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <I2C_Slave_ISR_DMA+0x24>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0bf      	b.n	8001c84 <I2C_Slave_ISR_DMA+0x1a4>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa98 	bl	8002058 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8095 	beq.w	8001c5e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 808f 	beq.w	8001c5e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d104      	bne.n	8001b54 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d07d      	beq.n	8001c50 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d128      	bne.n	8001bf0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b28      	cmp	r3, #40	@ 0x28
 8001ba8:	d108      	bne.n	8001bbc <I2C_Slave_ISR_DMA+0xdc>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bb0:	d104      	bne.n	8001bbc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb61 	bl	800227c <I2C_ITListenCplt>
 8001bba:	e048      	b.n	8001c4e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b29      	cmp	r3, #41	@ 0x29
 8001bc6:	d10e      	bne.n	8001be6 <I2C_Slave_ISR_DMA+0x106>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bce:	d00a      	beq.n	8001be6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fcba 	bl	8002552 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f915 	bl	8001e0e <I2C_ITSlaveSeqCplt>
 8001be4:	e033      	b.n	8001c4e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2210      	movs	r2, #16
 8001bec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001bee:	e034      	b.n	8001c5a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c0a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <I2C_Slave_ISR_DMA+0x13a>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c18:	d11f      	bne.n	8001c5a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b21      	cmp	r3, #33	@ 0x21
 8001c1e:	d002      	beq.n	8001c26 <I2C_Slave_ISR_DMA+0x146>
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b29      	cmp	r3, #41	@ 0x29
 8001c24:	d103      	bne.n	8001c2e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2221      	movs	r2, #33	@ 0x21
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c2c:	e008      	b.n	8001c40 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b22      	cmp	r3, #34	@ 0x22
 8001c32:	d002      	beq.n	8001c3a <I2C_Slave_ISR_DMA+0x15a>
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c38:	d102      	bne.n	8001c40 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2222      	movs	r2, #34	@ 0x22
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	4619      	mov	r1, r3
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fb6c 	bl	8002324 <I2C_ITError>
      if (treatdmanack == 1U)
 8001c4c:	e005      	b.n	8001c5a <I2C_Slave_ISR_DMA+0x17a>
 8001c4e:	e004      	b.n	8001c5a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2210      	movs	r2, #16
 8001c56:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c58:	e00f      	b.n	8001c7a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8001c5a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c5c:	e00d      	b.n	8001c7a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f809 	bl	8001c8c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001ca2:	2b28      	cmp	r3, #40	@ 0x28
 8001ca4:	d16a      	bne.n	8001d7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cc4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001ce0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d138      	bne.n	8001d5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	09db      	lsrs	r3, r3, #7
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	89bb      	ldrh	r3, [r7, #12]
 8001cf2:	4053      	eors	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	f003 0306 	and.w	r3, r3, #6
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11c      	bne.n	8001d38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d13b      	bne.n	8001d8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2208      	movs	r2, #8
 8001d20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d2a:	89ba      	ldrh	r2, [r7, #12]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fb88 	bl	8001446 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d36:	e029      	b.n	8001d8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d38:	893b      	ldrh	r3, [r7, #8]
 8001d3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fcff 	bl	8002744 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d4e:	89ba      	ldrh	r2, [r7, #12]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fb76 	bl	8001446 <HAL_I2C_AddrCallback>
}
 8001d5a:	e017      	b.n	8001d8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fcef 	bl	8002744 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d6e:	89ba      	ldrh	r2, [r7, #12]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fb66 	bl	8001446 <HAL_I2C_AddrCallback>
}
 8001d7a:	e007      	b.n	8001d8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2208      	movs	r2, #8
 8001d82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b21      	cmp	r3, #33	@ 0x21
 8001dae:	d115      	bne.n	8001ddc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2211      	movs	r2, #17
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fcbc 	bl	8002744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fb18 	bl	800140a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001dda:	e014      	b.n	8001e06 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2212      	movs	r2, #18
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001df0:	2102      	movs	r1, #2
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fca6 	bl	8002744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff fb0c 	bl	800141e <HAL_I2C_MasterRxCpltCallback>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e00c      	b.n	8001e5c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e5a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b29      	cmp	r3, #41	@ 0x29
 8001e66:	d112      	bne.n	8001e8e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2228      	movs	r2, #40	@ 0x28
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2221      	movs	r2, #33	@ 0x21
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e76:	2101      	movs	r1, #1
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fc63 	bl	8002744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fad3 	bl	8001432 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e8c:	e017      	b.n	8001ebe <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e98:	d111      	bne.n	8001ebe <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2228      	movs	r2, #40	@ 0x28
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2222      	movs	r2, #34	@ 0x22
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fc4a 	bl	8002744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe fc59 	bl	8000770 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2220      	movs	r2, #32
 8001edc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b21      	cmp	r3, #33	@ 0x21
 8001ee8:	d107      	bne.n	8001efa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001eea:	2101      	movs	r1, #1
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fc29 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2211      	movs	r2, #17
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef8:	e00c      	b.n	8001f14 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b22      	cmp	r3, #34	@ 0x22
 8001f04:	d106      	bne.n	8001f14 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f06:	2102      	movs	r1, #2
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fc1b 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2212      	movs	r2, #18
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002050 <I2C_ITMasterCplt+0x188>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	@ (8002054 <I2C_ITMasterCplt+0x18c>)
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2210      	movs	r2, #16
 8001f40:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f043 0204 	orr.w	r2, r3, #4
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b60      	cmp	r3, #96	@ 0x60
 8001f58:	d10a      	bne.n	8001f70 <I2C_ITMasterCplt+0xa8>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 faee 	bl	8002552 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b60      	cmp	r3, #96	@ 0x60
 8001f86:	d002      	beq.n	8001f8e <I2C_ITMasterCplt+0xc6>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f9c5 	bl	8002324 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f9a:	e054      	b.n	8002046 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b21      	cmp	r3, #33	@ 0x21
 8001fa6:	d124      	bne.n	8001ff2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b40      	cmp	r3, #64	@ 0x40
 8001fc0:	d10b      	bne.n	8001fda <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fa4f 	bl	8001476 <HAL_I2C_MemTxCpltCallback>
}
 8001fd8:	e035      	b.n	8002046 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fa0d 	bl	800140a <HAL_I2C_MasterTxCpltCallback>
}
 8001ff0:	e029      	b.n	8002046 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b22      	cmp	r3, #34	@ 0x22
 8001ffc:	d123      	bne.n	8002046 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b40      	cmp	r3, #64	@ 0x40
 8002016:	d10b      	bne.n	8002030 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fa2e 	bl	800148a <HAL_I2C_MemRxCpltCallback>
}
 800202e:	e00a      	b.n	8002046 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff f9ec 	bl	800141e <HAL_I2C_MasterRxCpltCallback>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	fe00e800 	.word	0xfe00e800
 8002054:	ffff0000 	.word	0xffff0000

08002058 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002074:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2220      	movs	r2, #32
 800207c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b21      	cmp	r3, #33	@ 0x21
 8002082:	d002      	beq.n	800208a <I2C_ITSlaveCplt+0x32>
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b29      	cmp	r3, #41	@ 0x29
 8002088:	d108      	bne.n	800209c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800208a:	f248 0101 	movw	r1, #32769	@ 0x8001
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb58 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2221      	movs	r2, #33	@ 0x21
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
 800209a:	e019      	b.n	80020d0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b22      	cmp	r3, #34	@ 0x22
 80020a0:	d002      	beq.n	80020a8 <I2C_ITSlaveCplt+0x50>
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80020a6:	d108      	bne.n	80020ba <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80020a8:	f248 0102 	movw	r1, #32770	@ 0x8002
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fb49 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2222      	movs	r2, #34	@ 0x22
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b8:	e00a      	b.n	80020d0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b28      	cmp	r3, #40	@ 0x28
 80020be:	d107      	bne.n	80020d0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80020c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fb3d 	bl	8002744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b62      	ldr	r3, [pc, #392]	@ (8002274 <I2C_ITSlaveCplt+0x21c>)
 80020ec:	400b      	ands	r3, r1
 80020ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa2e 	bl	8002552 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800210e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01f      	beq.n	8002158 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002126:	e017      	b.n	8002158 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002140:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8a4 	bl	8002324 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b28      	cmp	r3, #40	@ 0x28
 80021e6:	d141      	bne.n	800226c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f846 	bl	800227c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021f0:	e03c      	b.n	800226c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021fa:	d014      	beq.n	8002226 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fe06 	bl	8001e0e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <I2C_ITSlaveCplt+0x220>)
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff f91f 	bl	8001462 <HAL_I2C_ListenCpltCallback>
}
 8002224:	e022      	b.n	800226c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b22      	cmp	r3, #34	@ 0x22
 8002230:	d10e      	bne.n	8002250 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe fa91 	bl	8000770 <HAL_I2C_SlaveRxCpltCallback>
}
 800224e:	e00d      	b.n	800226c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff f8e3 	bl	8001432 <HAL_I2C_SlaveTxCpltCallback>
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fe00e800 	.word	0xfe00e800
 8002278:	ffff0000 	.word	0xffff0000

0800227c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a25      	ldr	r2, [pc, #148]	@ (8002320 <I2C_ITListenCplt+0xa4>)
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d022      	beq.n	80022f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	f043 0204 	orr.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fa21 	bl	8002744 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2210      	movs	r2, #16
 8002308:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff f8a5 	bl	8001462 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	ffff0000 	.word	0xffff0000

08002324 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002334:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a6d      	ldr	r2, [pc, #436]	@ (80024f8 <I2C_ITError+0x1d4>)
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b28      	cmp	r3, #40	@ 0x28
 800235a:	d005      	beq.n	8002368 <I2C_ITError+0x44>
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b29      	cmp	r3, #41	@ 0x29
 8002360:	d002      	beq.n	8002368 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b2a      	cmp	r3, #42	@ 0x2a
 8002366:	d10b      	bne.n	8002380 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002368:	2103      	movs	r1, #3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f9ea 	bl	8002744 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2228      	movs	r2, #40	@ 0x28
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a60      	ldr	r2, [pc, #384]	@ (80024fc <I2C_ITError+0x1d8>)
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34
 800237e:	e030      	b.n	80023e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002380:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f9dd 	bl	8002744 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8e1 	bl	8002552 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b60      	cmp	r3, #96	@ 0x60
 800239a:	d01f      	beq.n	80023dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d114      	bne.n	80023dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d109      	bne.n	80023d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2210      	movs	r2, #16
 80023c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d039      	beq.n	8002464 <I2C_ITError+0x140>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d002      	beq.n	80023fc <I2C_ITError+0xd8>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b21      	cmp	r3, #33	@ 0x21
 80023fa:	d133      	bne.n	8002464 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800240a:	d107      	bne.n	800241c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800241a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fcf1 	bl	8000e08 <HAL_DMA_GetState>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d017      	beq.n	800245c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	4a33      	ldr	r2, [pc, #204]	@ (8002500 <I2C_ITError+0x1dc>)
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fca0 	bl	8000d86 <HAL_DMA_Abort_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d04d      	beq.n	80024e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002456:	4610      	mov	r0, r2
 8002458:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800245a:	e045      	b.n	80024e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f851 	bl	8002504 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002462:	e041      	b.n	80024e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d039      	beq.n	80024e0 <I2C_ITError+0x1bc>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b12      	cmp	r3, #18
 8002470:	d002      	beq.n	8002478 <I2C_ITError+0x154>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b22      	cmp	r3, #34	@ 0x22
 8002476:	d133      	bne.n	80024e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002486:	d107      	bne.n	8002498 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002496:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fcb3 	bl	8000e08 <HAL_DMA_GetState>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d017      	beq.n	80024d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <I2C_ITError+0x1dc>)
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fc62 	bl	8000d86 <HAL_DMA_Abort_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d011      	beq.n	80024ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024d2:	4610      	mov	r0, r2
 80024d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024d6:	e009      	b.n	80024ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f813 	bl	8002504 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024de:	e005      	b.n	80024ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f80f 	bl	8002504 <I2C_TreatErrorCallback>
  }
}
 80024e6:	e002      	b.n	80024ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024ec:	bf00      	nop
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	ffff0000 	.word	0xffff0000
 80024fc:	080014cf 	.word	0x080014cf
 8002500:	0800259b 	.word	0x0800259b

08002504 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b60      	cmp	r3, #96	@ 0x60
 8002516:	d10e      	bne.n	8002536 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe ffb5 	bl	800149e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002534:	e009      	b.n	800254a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fe f909 	bl	800075c <HAL_I2C_ErrorCallback>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d103      	bne.n	8002570 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d007      	beq.n	800258e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	619a      	str	r2, [r3, #24]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	2200      	movs	r2, #0
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff9b 	bl	8002504 <I2C_TreatErrorCallback>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	4613      	mov	r3, r2
 80025e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	4313      	orrs	r3, r2
 8002602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	0d5b      	lsrs	r3, r3, #21
 8002612:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <I2C_TransferConfig+0x60>)
 8002618:	430b      	orrs	r3, r1
 800261a:	43db      	mvns	r3, r3
 800261c:	ea02 0103 	and.w	r1, r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	03ff63ff 	.word	0x03ff63ff

0800263c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002650:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <I2C_Enable_IRQ+0xfc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d032      	beq.n	80026bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800265a:	4a38      	ldr	r2, [pc, #224]	@ (800273c <I2C_Enable_IRQ+0x100>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d02d      	beq.n	80026bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002664:	4a36      	ldr	r2, [pc, #216]	@ (8002740 <I2C_Enable_IRQ+0x104>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d028      	beq.n	80026bc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800266a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da03      	bge.n	800267a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002678:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800268a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800269c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d103      	bne.n	80026ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80026aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d133      	bne.n	800271a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80026ba:	e02e      	b.n	800271a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da03      	bge.n	80026cc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80026ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80026dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80026ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d103      	bne.n	80026fe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80026fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	2b20      	cmp	r3, #32
 8002702:	d103      	bne.n	800270c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800270a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	2b40      	cmp	r3, #64	@ 0x40
 8002710:	d103      	bne.n	800271a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002718:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	080016bf 	.word	0x080016bf
 800273c:	08001ae1 	.word	0x08001ae1
 8002740:	08001895 	.word	0x08001895

08002744 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00f      	beq.n	800277e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002764:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002772:	2b28      	cmp	r3, #40	@ 0x28
 8002774:	d003      	beq.n	800277e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800277c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800278e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800279c:	2b28      	cmp	r3, #40	@ 0x28
 800279e:	d003      	beq.n	80027a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80027a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da03      	bge.n	80027b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80027b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d103      	bne.n	80027c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d103      	bne.n	80027d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d103      	bne.n	80027e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d138      	bne.n	8002888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e032      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	@ 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d139      	bne.n	8002920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e033      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2224      	movs	r2, #36	@ 0x24
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_PWREx_GetVoltageRange+0x18>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40007000 	.word	0x40007000

0800294c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800295a:	d130      	bne.n	80029be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800295c:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002968:	d038      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002972:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297a:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2232      	movs	r2, #50	@ 0x32
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	e002      	b.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a4:	d102      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f2      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b8:	d110      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ca:	d007      	beq.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029cc:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d4:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f000 bc02 	b.w	8003210 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0c:	4b96      	ldr	r3, [pc, #600]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a16:	4b94      	ldr	r3, [pc, #592]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80e4 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4c>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	f040 808b 	bne.w	8002b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 8087 	bne.w	8002b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a44:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x64>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e3d9      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	4b81      	ldr	r3, [pc, #516]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCC_OscConfig+0x7e>
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_OscConfig+0x8a>
 8002a76:	4b7c      	ldr	r3, [pc, #496]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d223      	bcs.n	8002ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fd8c 	bl	80035a8 <RCC_SetFlashLatencyFromMSIRange>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e3ba      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9a:	4b73      	ldr	r3, [pc, #460]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a72      	ldr	r2, [pc, #456]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	496d      	ldr	r1, [pc, #436]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	4968      	ldr	r1, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
 8002acc:	e025      	b.n	8002b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ace:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b63      	ldr	r3, [pc, #396]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4960      	ldr	r1, [pc, #384]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aec:	4b5e      	ldr	r3, [pc, #376]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	495b      	ldr	r1, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fd4c 	bl	80035a8 <RCC_SetFlashLatencyFromMSIRange>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e37a      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1a:	f000 fc81 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4950      	ldr	r1, [pc, #320]	@ (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a4e      	ldr	r2, [pc, #312]	@ (8002c70 <HAL_RCC_OscConfig+0x278>)
 8002b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c74 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd ffb4 	bl	8000aac <HAL_InitTick>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d052      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	e35e      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d032      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5a:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b66:	f7fd fff1 	bl	8000b4c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6e:	f7fd ffed 	bl	8000b4c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e347      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b80:	4b39      	ldr	r3, [pc, #228]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8c:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b92:	f043 0308 	orr.w	r3, r3, #8
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4930      	ldr	r1, [pc, #192]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002baa:	4b2f      	ldr	r3, [pc, #188]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	492b      	ldr	r1, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc0:	4b29      	ldr	r3, [pc, #164]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bcc:	f7fd ffbe 	bl	8000b4c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd4:	f7fd ffba 	bl	8000b4c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e314      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1dc>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d073      	beq.n	8002cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x21c>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d10e      	bne.n	8002c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d063      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d15f      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e2f1      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x24c>
 8002c36:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e025      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d114      	bne.n	8002c78 <HAL_RCC_OscConfig+0x280>
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a02      	ldr	r2, [pc, #8]	@ (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0x298>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08004768 	.word	0x08004768
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004
 8002c78:	4ba0      	ldr	r3, [pc, #640]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a9f      	ldr	r2, [pc, #636]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b9d      	ldr	r3, [pc, #628]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a9c      	ldr	r2, [pc, #624]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fd ff58 	bl	8000b4c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fd ff54 	bl	8000b4c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2ae      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b92      	ldr	r3, [pc, #584]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2a8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fd ff44 	bl	8000b4c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fd ff40 	bl	8000b4c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e29a      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d0>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d060      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x310>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d119      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d116      	bne.n	8002d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	4b7c      	ldr	r3, [pc, #496]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x328>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e277      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4973      	ldr	r1, [pc, #460]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	e040      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d023      	beq.n	8002d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6e      	ldr	r2, [pc, #440]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fd feff 	bl	8000b4c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fd fefb 	bl	8000b4c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e255      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d64:	4b65      	ldr	r3, [pc, #404]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b62      	ldr	r3, [pc, #392]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	495f      	ldr	r1, [pc, #380]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
 8002d84:	e018      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b5d      	ldr	r3, [pc, #372]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fd fedb 	bl	8000b4c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fd fed7 	bl	8000b4c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e231      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fd feb6 	bl	8000b4c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fd feb2 	bl	8000b4c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e20c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3ec>
 8002e04:	e01b      	b.n	8002e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b3d      	ldr	r3, [pc, #244]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fd fe99 	bl	8000b4c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fd fe95 	bl	8000b4c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1ef      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e30:	4b32      	ldr	r3, [pc, #200]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1ef      	bne.n	8002e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a6 	beq.w	8002f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e50:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d118      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e84:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e90:	f7fd fe5c 	bl	8000b4c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fd fe58 	bl	8000b4c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1b2      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <HAL_RCC_OscConfig+0x508>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4d8>
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ece:	e029      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d115      	bne.n	8002f04 <HAL_RCC_OscConfig+0x50c>
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eee:	4a03      	ldr	r2, [pc, #12]	@ (8002efc <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x52c>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	4b9a      	ldr	r3, [pc, #616]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	4a99      	ldr	r2, [pc, #612]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f14:	4b96      	ldr	r3, [pc, #600]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1a:	4a95      	ldr	r2, [pc, #596]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fd fe0e 	bl	8000b4c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fd fe0a 	bl	8000b4c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e162      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b89      	ldr	r3, [pc, #548]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ed      	beq.n	8002f34 <HAL_RCC_OscConfig+0x53c>
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fdf7 	bl	8000b4c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fdf3 	bl	8000b4c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e14b      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	4b7d      	ldr	r3, [pc, #500]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ed      	bne.n	8002f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7ffb      	ldrb	r3, [r7, #31]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b78      	ldr	r3, [pc, #480]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	4a77      	ldr	r2, [pc, #476]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d03c      	beq.n	800301e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fac:	4b70      	ldr	r3, [pc, #448]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb2:	4a6f      	ldr	r2, [pc, #444]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fd fdc6 	bl	8000b4c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc4:	f7fd fdc2 	bl	8000b4c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e11c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd6:	4b66      	ldr	r3, [pc, #408]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ef      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x5cc>
 8002fe4:	e01b      	b.n	800301e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fe6:	4b62      	ldr	r3, [pc, #392]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fec:	4a60      	ldr	r2, [pc, #384]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fda9 	bl	8000b4c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ffe:	f7fd fda5 	bl	8000b4c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0ff      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003010:	4b57      	ldr	r3, [pc, #348]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8003012:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80f3 	beq.w	800320e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	f040 80c9 	bne.w	80031c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003032:	4b4f      	ldr	r3, [pc, #316]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	429a      	cmp	r2, r3
 8003044:	d12c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	3b01      	subs	r3, #1
 8003052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d123      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d11b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d113      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d06b      	beq.n	8003178 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d062      	beq.n	800316c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030a6:	4b32      	ldr	r3, [pc, #200]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0ac      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 80030bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c2:	f7fd fd43 	bl	8000b4c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fd3f 	bl	8000b4c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e099      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	4b24      	ldr	r3, [pc, #144]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_RCC_OscConfig+0x77c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030f8:	3a01      	subs	r2, #1
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003102:	0212      	lsls	r2, r2, #8
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800310a:	0852      	lsrs	r2, r2, #1
 800310c:	3a01      	subs	r2, #1
 800310e:	0552      	lsls	r2, r2, #21
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003116:	0852      	lsrs	r2, r2, #1
 8003118:	3a01      	subs	r2, #1
 800311a:	0652      	lsls	r2, r2, #25
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003122:	06d2      	lsls	r2, r2, #27
 8003124:	430a      	orrs	r2, r1
 8003126:	4912      	ldr	r1, [pc, #72]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8003128:	4313      	orrs	r3, r2
 800312a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800312c:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003144:	f7fd fd02 	bl	8000b4c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fd fcfe 	bl	8000b4c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e058      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <HAL_RCC_OscConfig+0x778>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316a:	e050      	b.n	800320e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e04f      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
 8003170:	40021000 	.word	0x40021000
 8003174:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d144      	bne.n	800320e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003184:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b21      	ldr	r3, [pc, #132]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800319c:	f7fd fcd6 	bl	8000b4c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fd fcd2 	bl	8000b4c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e02c      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x7ac>
 80031c2:	e024      	b.n	800320e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d01f      	beq.n	800320a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 80031d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd fcb9 	bl	8000b4c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fd fcb5 	bl	8000b4c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4905      	ldr	r1, [pc, #20]	@ (8003218 <HAL_RCC_OscConfig+0x820>)
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_OscConfig+0x824>)
 8003204:	4013      	ands	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	e001      	b.n	800320e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	feeefffc 	.word	0xfeeefffc

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0e7      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b75      	ldr	r3, [pc, #468]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b72      	ldr	r3, [pc, #456]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4970      	ldr	r1, [pc, #448]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b6e      	ldr	r3, [pc, #440]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cf      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b66      	ldr	r3, [pc, #408]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800327c:	429a      	cmp	r2, r3
 800327e:	d908      	bls.n	8003292 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b63      	ldr	r3, [pc, #396]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4960      	ldr	r1, [pc, #384]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04c      	beq.n	8003338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0a6      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	4b54      	ldr	r3, [pc, #336]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e09a      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e08e      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e086      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b46      	ldr	r3, [pc, #280]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4943      	ldr	r1, [pc, #268]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fd fc20 	bl	8000b4c <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fd fc1c 	bl	8000b4c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e06e      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b31      	ldr	r3, [pc, #196]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003350:	429a      	cmp	r2, r3
 8003352:	d208      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	492b      	ldr	r1, [pc, #172]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b29      	ldr	r3, [pc, #164]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d210      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0207 	bic.w	r2, r3, #7
 800337c:	4923      	ldr	r1, [pc, #140]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003384:	4b21      	ldr	r3, [pc, #132]	@ (800340c <HAL_RCC_ClockConfig+0x1ec>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e036      	b.n	8003404 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4918      	ldr	r1, [pc, #96]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c0:	4b13      	ldr	r3, [pc, #76]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4910      	ldr	r1, [pc, #64]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033d4:	f000 f824 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	490b      	ldr	r1, [pc, #44]	@ (8003414 <HAL_RCC_ClockConfig+0x1f4>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	4a09      	ldr	r2, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1f8>)
 80033f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_ClockConfig+0x1fc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fb57 	bl	8000aac <HAL_InitTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	72fb      	strb	r3, [r7, #11]

  return status;
 8003402:	7afb      	ldrb	r3, [r7, #11]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40022000 	.word	0x40022000
 8003410:	40021000 	.word	0x40021000
 8003414:	08004768 	.word	0x08004768
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342e:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003438:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x34>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d121      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11e      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003460:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	e005      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003470:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800347c:	4a2b      	ldr	r2, [pc, #172]	@ (800352c <HAL_RCC_GetSysClockFreq+0x10c>)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d102      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x110>)
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e004      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x114>)
 80034a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d134      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d003      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0xac>
 80034c4:	e005      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x110>)
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ce:	617b      	str	r3, [r7, #20]
      break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	617b      	str	r3, [r7, #20]
      break;
 80034d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	3301      	adds	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	fb03 f202 	mul.w	r2, r3, r2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x108>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	0e5b      	lsrs	r3, r3, #25
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	3301      	adds	r3, #1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003518:	69bb      	ldr	r3, [r7, #24]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	08004780 	.word	0x08004780
 8003530:	00f42400 	.word	0x00f42400
 8003534:	007a1200 	.word	0x007a1200

08003538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	@ (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003554:	f7ff fff0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4904      	ldr	r1, [pc, #16]	@ (8003578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	08004778 	.word	0x08004778

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003580:	f7ff ffda 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0adb      	lsrs	r3, r3, #11
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08004778 	.word	0x08004778

080035a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c0:	f7ff f9b6 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 80035c4:	6178      	str	r0, [r7, #20]
 80035c6:	e014      	b.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	4a24      	ldr	r2, [pc, #144]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d4:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e0:	f7ff f9a6 	bl	8002930 <HAL_PWREx_GetVoltageRange>
 80035e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f8:	d10b      	bne.n	8003612 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d919      	bls.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2ba0      	cmp	r3, #160	@ 0xa0
 8003604:	d902      	bls.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003606:	2302      	movs	r3, #2
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e013      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800360c:	2301      	movs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e010      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d902      	bls.n	800361e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003618:	2303      	movs	r3, #3
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	e00a      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b80      	cmp	r3, #128	@ 0x80
 8003622:	d102      	bne.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003624:	2302      	movs	r3, #2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	e004      	b.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b70      	cmp	r3, #112	@ 0x70
 800362e:	d101      	bne.n	8003634 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003630:	2301      	movs	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 0207 	bic.w	r2, r3, #7
 800363c:	4909      	ldr	r1, [pc, #36]	@ (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003644:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	40022000 	.word	0x40022000

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003670:	2300      	movs	r3, #0
 8003672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003674:	2300      	movs	r3, #0
 8003676:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d031      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800368c:	d01a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800368e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003692:	d814      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003698:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800369c:	d10f      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800369e:	4b5d      	ldr	r3, [pc, #372]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036aa:	e00c      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa44 	bl	8003b40 <RCCEx_PLLSAI1_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036bc:	e003      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	74fb      	strb	r3, [r7, #19]
      break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036cc:	4b51      	ldr	r3, [pc, #324]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	494e      	ldr	r1, [pc, #312]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036e2:	e001      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 809e 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036fa:	4b46      	ldr	r3, [pc, #280]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b40      	ldr	r3, [pc, #256]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	4a3f      	ldr	r2, [pc, #252]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	@ 0x58
 800371c:	4b3d      	ldr	r3, [pc, #244]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003728:	2301      	movs	r3, #1
 800372a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800372c:	4b3a      	ldr	r3, [pc, #232]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a39      	ldr	r2, [pc, #228]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003738:	f7fd fa08 	bl	8000b4c <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7fd fa04 	bl	8000b4c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	74fb      	strb	r3, [r7, #19]
        break;
 8003752:	e005      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003754:	4b30      	ldr	r3, [pc, #192]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d15a      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003766:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	429a      	cmp	r2, r3
 8003780:	d019      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003782:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003794:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ae:	4a19      	ldr	r2, [pc, #100]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d016      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd f9c4 	bl	8000b4c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c6:	e00b      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fd f9c0 	bl	8000b4c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d902      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	74fb      	strb	r3, [r7, #19]
            break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ec      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f4:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003802:	4904      	ldr	r1, [pc, #16]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800380a:	e009      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
 8003810:	e006      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003820:	7c7b      	ldrb	r3, [r7, #17]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	4a9d      	ldr	r2, [pc, #628]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800383e:	4b98      	ldr	r3, [pc, #608]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003844:	f023 0203 	bic.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4994      	ldr	r1, [pc, #592]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003860:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f023 020c 	bic.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	498c      	ldr	r1, [pc, #560]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003882:	4b87      	ldr	r3, [pc, #540]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	4983      	ldr	r1, [pc, #524]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038a4:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	497b      	ldr	r1, [pc, #492]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038c6:	4b76      	ldr	r3, [pc, #472]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	4972      	ldr	r1, [pc, #456]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038e8:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	496a      	ldr	r1, [pc, #424]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390a:	4b65      	ldr	r3, [pc, #404]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	4961      	ldr	r1, [pc, #388]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800392c:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	4959      	ldr	r1, [pc, #356]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800394e:	4b54      	ldr	r3, [pc, #336]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	4950      	ldr	r1, [pc, #320]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003970:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	4948      	ldr	r1, [pc, #288]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003992:	4b43      	ldr	r3, [pc, #268]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003998:	f023 0203 	bic.w	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	493f      	ldr	r1, [pc, #252]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d028      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b4:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c2:	4937      	ldr	r1, [pc, #220]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b32      	ldr	r3, [pc, #200]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a31      	ldr	r2, [pc, #196]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e011      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ea:	d10c      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f8a4 	bl	8003b40 <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d028      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a12:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a20:	491f      	ldr	r1, [pc, #124]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a32:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a3c:	60d3      	str	r3, [r2, #12]
 8003a3e:	e011      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 f875 	bl	8003b40 <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d02b      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	4908      	ldr	r1, [pc, #32]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a02      	ldr	r2, [pc, #8]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	60d3      	str	r3, [r2, #12]
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f843 	bl	8003b40 <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01c      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae2:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f820 	bl	8003b40 <RCCEx_PLLSAI1_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	4904      	ldr	r1, [pc, #16]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000

08003b40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b4e:	4b74      	ldr	r3, [pc, #464]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d018      	beq.n	8003b8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b5a:	4b71      	ldr	r3, [pc, #452]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d10d      	bne.n	8003b86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b72:	4b6b      	ldr	r3, [pc, #428]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
       ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d047      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e044      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d018      	beq.n	8003bc6 <RCCEx_PLLSAI1_Config+0x86>
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d825      	bhi.n	8003be4 <RCCEx_PLLSAI1_Config+0xa4>
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d002      	beq.n	8003ba2 <RCCEx_PLLSAI1_Config+0x62>
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d009      	beq.n	8003bb4 <RCCEx_PLLSAI1_Config+0x74>
 8003ba0:	e020      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d11d      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb2:	e01a      	b.n	8003bea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d116      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e013      	b.n	8003bee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bc6:	4b56      	ldr	r3, [pc, #344]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bd2:	4b53      	ldr	r3, [pc, #332]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003be2:	e006      	b.n	8003bf2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      break;
 8003be8:	e004      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bfa:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	4943      	ldr	r1, [pc, #268]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d17c      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c1c:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c28:	f7fc ff90 	bl	8000b4c <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2e:	e009      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c30:	f7fc ff8c 	bl	8000b4c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d902      	bls.n	8003c44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	73fb      	strb	r3, [r7, #15]
        break;
 8003c42:	e005      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c44:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ef      	bne.n	8003c30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d15f      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d110      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c5c:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003c64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6892      	ldr	r2, [r2, #8]
 8003c6c:	0211      	lsls	r1, r2, #8
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	06d2      	lsls	r2, r2, #27
 8003c74:	430a      	orrs	r2, r1
 8003c76:	492a      	ldr	r1, [pc, #168]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	610b      	str	r3, [r1, #16]
 8003c7c:	e027      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d112      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c84:	4b26      	ldr	r3, [pc, #152]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6892      	ldr	r2, [r2, #8]
 8003c94:	0211      	lsls	r1, r2, #8
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6912      	ldr	r2, [r2, #16]
 8003c9a:	0852      	lsrs	r2, r2, #1
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0552      	lsls	r2, r2, #21
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	491f      	ldr	r1, [pc, #124]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	610b      	str	r3, [r1, #16]
 8003ca8:	e011      	b.n	8003cce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cb2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6892      	ldr	r2, [r2, #8]
 8003cba:	0211      	lsls	r1, r2, #8
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6952      	ldr	r2, [r2, #20]
 8003cc0:	0852      	lsrs	r2, r2, #1
 8003cc2:	3a01      	subs	r2, #1
 8003cc4:	0652      	lsls	r2, r2, #25
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	4915      	ldr	r1, [pc, #84]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cce:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fc ff37 	bl	8000b4c <HAL_GetTick>
 8003cde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce0:	e009      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ce2:	f7fc ff33 	bl	8000b4c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d902      	bls.n	8003cf6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cf4:	e005      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000

08003d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e040      	b.n	8003db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc fdb4 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 faae 	bl	80042cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f825 	bl	8003dc0 <UART_SetConfig>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e01b      	b.n	8003db8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb2d 	bl	8004410 <UART_CheckIdleState>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b08a      	sub	sp, #40	@ 0x28
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4ba5      	ldr	r3, [pc, #660]	@ (8004084 <UART_SetConfig+0x2c4>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a9a      	ldr	r2, [pc, #616]	@ (8004088 <UART_SetConfig+0x2c8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a91      	ldr	r2, [pc, #580]	@ (800408c <UART_SetConfig+0x2cc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d126      	bne.n	8003e98 <UART_SetConfig+0xd8>
 8003e4a:	4b91      	ldr	r3, [pc, #580]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0xd0>
 8003e58:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <UART_SetConfig+0xa0>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e81 	.word	0x08003e81
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e89 	.word	0x08003e89
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e0d6      	b.n	8004026 <UART_SetConfig+0x266>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e0d2      	b.n	8004026 <UART_SetConfig+0x266>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e0ce      	b.n	8004026 <UART_SetConfig+0x266>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e0ca      	b.n	8004026 <UART_SetConfig+0x266>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e0c6      	b.n	8004026 <UART_SetConfig+0x266>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7d      	ldr	r2, [pc, #500]	@ (8004094 <UART_SetConfig+0x2d4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d138      	bne.n	8003f14 <UART_SetConfig+0x154>
 8003ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d82d      	bhi.n	8003f0c <UART_SetConfig+0x14c>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <UART_SetConfig+0xf8>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003ef5 	.word	0x08003ef5
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f05 	.word	0x08003f05
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e098      	b.n	8004026 <UART_SetConfig+0x266>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e094      	b.n	8004026 <UART_SetConfig+0x266>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e090      	b.n	8004026 <UART_SetConfig+0x266>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e08c      	b.n	8004026 <UART_SetConfig+0x266>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e088      	b.n	8004026 <UART_SetConfig+0x266>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5f      	ldr	r2, [pc, #380]	@ (8004098 <UART_SetConfig+0x2d8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d125      	bne.n	8003f6a <UART_SetConfig+0x1aa>
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f28:	2b30      	cmp	r3, #48	@ 0x30
 8003f2a:	d016      	beq.n	8003f5a <UART_SetConfig+0x19a>
 8003f2c:	2b30      	cmp	r3, #48	@ 0x30
 8003f2e:	d818      	bhi.n	8003f62 <UART_SetConfig+0x1a2>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d00a      	beq.n	8003f4a <UART_SetConfig+0x18a>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d814      	bhi.n	8003f62 <UART_SetConfig+0x1a2>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <UART_SetConfig+0x182>
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d008      	beq.n	8003f52 <UART_SetConfig+0x192>
 8003f40:	e00f      	b.n	8003f62 <UART_SetConfig+0x1a2>
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f48:	e06d      	b.n	8004026 <UART_SetConfig+0x266>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f50:	e069      	b.n	8004026 <UART_SetConfig+0x266>
 8003f52:	2304      	movs	r3, #4
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f58:	e065      	b.n	8004026 <UART_SetConfig+0x266>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f60:	e061      	b.n	8004026 <UART_SetConfig+0x266>
 8003f62:	2310      	movs	r3, #16
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f68:	e05d      	b.n	8004026 <UART_SetConfig+0x266>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800409c <UART_SetConfig+0x2dc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d125      	bne.n	8003fc0 <UART_SetConfig+0x200>
 8003f74:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f80:	d016      	beq.n	8003fb0 <UART_SetConfig+0x1f0>
 8003f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f84:	d818      	bhi.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f86:	2b80      	cmp	r3, #128	@ 0x80
 8003f88:	d00a      	beq.n	8003fa0 <UART_SetConfig+0x1e0>
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d814      	bhi.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <UART_SetConfig+0x1d8>
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d008      	beq.n	8003fa8 <UART_SetConfig+0x1e8>
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x1f8>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e042      	b.n	8004026 <UART_SetConfig+0x266>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e03e      	b.n	8004026 <UART_SetConfig+0x266>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e03a      	b.n	8004026 <UART_SetConfig+0x266>
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e036      	b.n	8004026 <UART_SetConfig+0x266>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e032      	b.n	8004026 <UART_SetConfig+0x266>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a30      	ldr	r2, [pc, #192]	@ (8004088 <UART_SetConfig+0x2c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d12a      	bne.n	8004020 <UART_SetConfig+0x260>
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <UART_SetConfig+0x2d0>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fd8:	d01a      	beq.n	8004010 <UART_SetConfig+0x250>
 8003fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fde:	d81b      	bhi.n	8004018 <UART_SetConfig+0x258>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe4:	d00c      	beq.n	8004000 <UART_SetConfig+0x240>
 8003fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fea:	d815      	bhi.n	8004018 <UART_SetConfig+0x258>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <UART_SetConfig+0x238>
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff4:	d008      	beq.n	8004008 <UART_SetConfig+0x248>
 8003ff6:	e00f      	b.n	8004018 <UART_SetConfig+0x258>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e012      	b.n	8004026 <UART_SetConfig+0x266>
 8004000:	2302      	movs	r3, #2
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e00e      	b.n	8004026 <UART_SetConfig+0x266>
 8004008:	2304      	movs	r3, #4
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e00a      	b.n	8004026 <UART_SetConfig+0x266>
 8004010:	2308      	movs	r3, #8
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e006      	b.n	8004026 <UART_SetConfig+0x266>
 8004018:	2310      	movs	r3, #16
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e002      	b.n	8004026 <UART_SetConfig+0x266>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <UART_SetConfig+0x2c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	f040 808b 	bne.w	8004148 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004032:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004036:	2b08      	cmp	r3, #8
 8004038:	d834      	bhi.n	80040a4 <UART_SetConfig+0x2e4>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <UART_SetConfig+0x280>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004065 	.word	0x08004065
 8004044:	080040a5 	.word	0x080040a5
 8004048:	0800406d 	.word	0x0800406d
 800404c:	080040a5 	.word	0x080040a5
 8004050:	08004073 	.word	0x08004073
 8004054:	080040a5 	.word	0x080040a5
 8004058:	080040a5 	.word	0x080040a5
 800405c:	080040a5 	.word	0x080040a5
 8004060:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7ff fa74 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004068:	61f8      	str	r0, [r7, #28]
        break;
 800406a:	e021      	b.n	80040b0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <UART_SetConfig+0x2e0>)
 800406e:	61fb      	str	r3, [r7, #28]
        break;
 8004070:	e01e      	b.n	80040b0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7ff f9d5 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 8004076:	61f8      	str	r0, [r7, #28]
        break;
 8004078:	e01a      	b.n	80040b0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407e:	61fb      	str	r3, [r7, #28]
        break;
 8004080:	e016      	b.n	80040b0 <UART_SetConfig+0x2f0>
 8004082:	bf00      	nop
 8004084:	efff69f3 	.word	0xefff69f3
 8004088:	40008000 	.word	0x40008000
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	40004c00 	.word	0x40004c00
 80040a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80fa 	beq.w	80042ac <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d305      	bcc.n	80040d4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d903      	bls.n	80040dc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040da:	e0e7      	b.n	80042ac <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2200      	movs	r2, #0
 80040e0:	461c      	mov	r4, r3
 80040e2:	4615      	mov	r5, r2
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	022b      	lsls	r3, r5, #8
 80040ee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040f2:	0222      	lsls	r2, r4, #8
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	6849      	ldr	r1, [r1, #4]
 80040f8:	0849      	lsrs	r1, r1, #1
 80040fa:	2000      	movs	r0, #0
 80040fc:	4688      	mov	r8, r1
 80040fe:	4681      	mov	r9, r0
 8004100:	eb12 0a08 	adds.w	sl, r2, r8
 8004104:	eb43 0b09 	adc.w	fp, r3, r9
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004116:	4650      	mov	r0, sl
 8004118:	4659      	mov	r1, fp
 800411a:	f7fc f85b 	bl	80001d4 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4613      	mov	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800412c:	d308      	bcc.n	8004140 <UART_SetConfig+0x380>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004134:	d204      	bcs.n	8004140 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e0b5      	b.n	80042ac <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004146:	e0b1      	b.n	80042ac <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004150:	d15d      	bne.n	800420e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004156:	2b08      	cmp	r3, #8
 8004158:	d827      	bhi.n	80041aa <UART_SetConfig+0x3ea>
 800415a:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <UART_SetConfig+0x3a0>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041ab 	.word	0x080041ab
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041ab 	.word	0x080041ab
 8004178:	080041ab 	.word	0x080041ab
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7ff f9e4 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004188:	61f8      	str	r0, [r7, #28]
        break;
 800418a:	e014      	b.n	80041b6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7ff f9f6 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004190:	61f8      	str	r0, [r7, #28]
        break;
 8004192:	e010      	b.n	80041b6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b4c      	ldr	r3, [pc, #304]	@ (80042c8 <UART_SetConfig+0x508>)
 8004196:	61fb      	str	r3, [r7, #28]
        break;
 8004198:	e00d      	b.n	80041b6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7ff f941 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 800419e:	61f8      	str	r0, [r7, #28]
        break;
 80041a0:	e009      	b.n	80041b6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	61fb      	str	r3, [r7, #28]
        break;
 80041a8:	e005      	b.n	80041b6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d077      	beq.n	80042ac <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005a      	lsls	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	441a      	add	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d916      	bls.n	8004206 <UART_SetConfig+0x446>
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041de:	d212      	bcs.n	8004206 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f023 030f 	bic.w	r3, r3, #15
 80041e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	8afb      	ldrh	r3, [r7, #22]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	8afa      	ldrh	r2, [r7, #22]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	e052      	b.n	80042ac <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800420c:	e04e      	b.n	80042ac <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800420e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004212:	2b08      	cmp	r3, #8
 8004214:	d827      	bhi.n	8004266 <UART_SetConfig+0x4a6>
 8004216:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0x45c>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004241 	.word	0x08004241
 8004220:	08004249 	.word	0x08004249
 8004224:	08004251 	.word	0x08004251
 8004228:	08004267 	.word	0x08004267
 800422c:	08004257 	.word	0x08004257
 8004230:	08004267 	.word	0x08004267
 8004234:	08004267 	.word	0x08004267
 8004238:	08004267 	.word	0x08004267
 800423c:	0800425f 	.word	0x0800425f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7ff f986 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004244:	61f8      	str	r0, [r7, #28]
        break;
 8004246:	e014      	b.n	8004272 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7ff f998 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800424c:	61f8      	str	r0, [r7, #28]
        break;
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004250:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <UART_SetConfig+0x508>)
 8004252:	61fb      	str	r3, [r7, #28]
        break;
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004256:	f7ff f8e3 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 800425a:	61f8      	str	r0, [r7, #28]
        break;
 800425c:	e009      	b.n	8004272 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004262:	61fb      	str	r3, [r7, #28]
        break;
 8004264:	e005      	b.n	8004272 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004270:	bf00      	nop
    }

    if (pclk != 0U)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	085a      	lsrs	r2, r3, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	441a      	add	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b0f      	cmp	r3, #15
 8004290:	d909      	bls.n	80042a6 <UART_SetConfig+0x4e6>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d205      	bcs.n	80042a6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	e002      	b.n	80042ac <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	00f42400 	.word	0x00f42400

080042cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ca:	d10a      	bne.n	80043e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b098      	sub	sp, #96	@ 0x60
 8004414:	af02      	add	r7, sp, #8
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004420:	f7fc fb94 	bl	8000b4c <HAL_GetTick>
 8004424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d12e      	bne.n	8004492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f88c 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	653b      	str	r3, [r7, #80]	@ 0x50
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446c:	647b      	str	r3, [r7, #68]	@ 0x44
 800446e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e062      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d149      	bne.n	8004534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	2200      	movs	r2, #0
 80044aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f856 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d03c      	beq.n	8004534 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	617b      	str	r3, [r7, #20]
   return(result);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e011      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3758      	adds	r7, #88	@ 0x58
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e049      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d045      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fc fae7 	bl	8000b4c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e048      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d031      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d110      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f838 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2208      	movs	r2, #8
 80045c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e029      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e0:	d111      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f81e 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e00f      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0a6      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	@ 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d118      	bne.n	80046d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e6      	bne.n	80046a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ea:	bf00      	nop
 80046ec:	3754      	adds	r7, #84	@ 0x54
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <memset>:
 80046f6:	4402      	add	r2, r0
 80046f8:	4603      	mov	r3, r0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d100      	bne.n	8004700 <memset+0xa>
 80046fe:	4770      	bx	lr
 8004700:	f803 1b01 	strb.w	r1, [r3], #1
 8004704:	e7f9      	b.n	80046fa <memset+0x4>
	...

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4d0d      	ldr	r5, [pc, #52]	@ (8004740 <__libc_init_array+0x38>)
 800470c:	4c0d      	ldr	r4, [pc, #52]	@ (8004744 <__libc_init_array+0x3c>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	2600      	movs	r6, #0
 8004714:	42a6      	cmp	r6, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	4d0b      	ldr	r5, [pc, #44]	@ (8004748 <__libc_init_array+0x40>)
 800471a:	4c0c      	ldr	r4, [pc, #48]	@ (800474c <__libc_init_array+0x44>)
 800471c:	f000 f818 	bl	8004750 <_init>
 8004720:	1b64      	subs	r4, r4, r5
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	2600      	movs	r6, #0
 8004726:	42a6      	cmp	r6, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004730:	4798      	blx	r3
 8004732:	3601      	adds	r6, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f855 3b04 	ldr.w	r3, [r5], #4
 800473a:	4798      	blx	r3
 800473c:	3601      	adds	r6, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	080047b8 	.word	0x080047b8
 8004744:	080047b8 	.word	0x080047b8
 8004748:	080047b8 	.word	0x080047b8
 800474c:	080047bc 	.word	0x080047bc

08004750 <_init>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr

0800475c <_fini>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr
