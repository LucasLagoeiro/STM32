
SPI_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080035b4  080035b4  000045b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800363c  0800363c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800363c  0800363c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800363c  0800363c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800363c  0800363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003640  08003640  00004640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003644  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003650  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003650  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d06a  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f99  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00014038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f1  00000000  00000000  00014a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bed  00000000  00000000  00015261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d98e  00000000  00000000  00029e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082946  00000000  00000000  000377dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  000ba168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bc518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800359c 	.word	0x0800359c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800359c 	.word	0x0800359c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fa9a 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f816 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f8f6 	bl	80005e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f8a6 	bl	800054c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000400:	f000 f86a 	bl	80004d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, 1);
  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, 1);
 8000404:	4905      	ldr	r1, [pc, #20]	@ (800041c <main+0x30>)
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <main+0x34>)
 8000408:	2201      	movs	r2, #1
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fd0c 	bl	8001e28 <HAL_SPI_Receive_IT>
  HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	@ 0x64
 8000412:	f000 fb0f 	bl	8000a34 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	e7fd      	b.n	8000416 <main+0x2a>
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	20000120 	.word	0x20000120
 8000420:	20000028 	.word	0x20000028

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b093      	sub	sp, #76	@ 0x4c
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	2414      	movs	r4, #20
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2334      	movs	r3, #52	@ 0x34
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f003 f885 	bl	8003544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	2310      	movs	r3, #16
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f003 f87e 	bl	8003544 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fdf9 	bl	8001044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0052      	lsls	r2, r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000460:	0021      	movs	r1, r4
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2240      	movs	r2, #64	@ 0x40
 800046c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2202      	movs	r2, #2
 8000478:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 14;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	220e      	movs	r2, #14
 8000484:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	0292      	lsls	r2, r2, #10
 800048c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	22c0      	movs	r2, #192	@ 0xc0
 8000492:	05d2      	lsls	r2, r2, #23
 8000494:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	187b      	adds	r3, r7, r1
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fe1f 	bl	80010dc <HAL_RCC_OscConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a2:	f000 f903 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2202      	movs	r2, #2
 80004b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2102      	movs	r1, #2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 f91a 	bl	80016fc <HAL_RCC_ClockConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004cc:	f000 f8ee 	bl	80006ac <Error_Handler>
  }
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b013      	add	sp, #76	@ 0x4c
 80004d6:	bd90      	pop	{r4, r7, pc}

080004d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004dc:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004de:	4a1a      	ldr	r2, [pc, #104]	@ (8000548 <MX_SPI1_Init+0x70>)
 80004e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80004e2:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004e8:	4b16      	ldr	r3, [pc, #88]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004ee:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004f0:	22c0      	movs	r2, #192	@ 0xc0
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004f6:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_SPI1_Init+0x6c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000502:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <MX_SPI1_Init+0x6c>)
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	0092      	lsls	r2, r2, #2
 8000508:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_SPI1_Init+0x6c>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_SPI1_Init+0x6c>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_SPI1_Init+0x6c>)
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_SPI1_Init+0x6c>)
 800051e:	2207      	movs	r2, #7
 8000520:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_SPI1_Init+0x6c>)
 8000524:	2200      	movs	r2, #0
 8000526:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_SPI1_Init+0x6c>)
 800052a:	2200      	movs	r2, #0
 800052c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800052e:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <MX_SPI1_Init+0x6c>)
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fbc1 	bl	8001cb8 <HAL_SPI_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800053a:	f000 f8b7 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000028 	.word	0x20000028
 8000548:	40013000 	.word	0x40013000

0800054c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000552:	4a24      	ldr	r2, [pc, #144]	@ (80005e4 <MX_USART2_UART_Init+0x98>)
 8000554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000558:	22e1      	movs	r2, #225	@ 0xe1
 800055a:	0252      	lsls	r2, r2, #9
 800055c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800055e:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	0552      	lsls	r2, r2, #21
 8000564:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000572:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000574:	220c      	movs	r2, #12
 8000576:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800057e:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800058a:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 800058c:	2200      	movs	r2, #0
 800058e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000590:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000592:	2200      	movs	r2, #0
 8000594:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 8000598:	0018      	movs	r0, r3
 800059a:	f002 fa8b 	bl	8002ab4 <HAL_UART_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80005a2:	f000 f883 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 feea 	bl	8003384 <HAL_UARTEx_SetTxFifoThreshold>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80005b4:	f000 f87a 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 ff21 	bl	8003404 <HAL_UARTEx_SetRxFifoThreshold>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80005c6:	f000 f871 	bl	80006ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005ca:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <MX_USART2_UART_Init+0x94>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fe9f 	bl	8003310 <HAL_UARTEx_DisableFifoMode>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80005d6:	f000 f869 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	40004400 	.word	0x40004400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	@ 0x24
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	240c      	movs	r4, #12
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 ffa3 	bl	8003544 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000604:	2104      	movs	r1, #4
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	@ 0x34
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <MX_GPIO_Init+0x9c>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060e:	2204      	movs	r2, #4
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_GPIO_Init+0x9c>)
 800061c:	2120      	movs	r1, #32
 800061e:	430a      	orrs	r2, r1
 8000620:	635a      	str	r2, [r3, #52]	@ 0x34
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000626:	2220      	movs	r2, #32
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_GPIO_Init+0x9c>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_GPIO_Init+0x9c>)
 800063c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000646:	23a0      	movs	r3, #160	@ 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fcc0 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000654:	0021      	movs	r1, r4
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2220      	movs	r2, #32
 800065a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2202      	movs	r2, #2
 800066c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800066e:	187a      	adds	r2, r7, r1
 8000670:	23a0      	movs	r3, #160	@ 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fb48 	bl	8000d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b009      	add	sp, #36	@ 0x24
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi1, RX_Buffer, 1);
 8000690:	4904      	ldr	r1, [pc, #16]	@ (80006a4 <HAL_SPI_RxCpltCallback+0x1c>)
 8000692:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <HAL_SPI_RxCpltCallback+0x20>)
 8000694:	2201      	movs	r2, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fbc6 	bl	8001e28 <HAL_SPI_Receive_IT>
}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000120 	.word	0x20000120
 80006a8:	20000028 	.word	0x20000028

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006b4:	23a0      	movs	r3, #160	@ 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2120      	movs	r1, #32
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fca7 	bl	800100e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006c0:	23fa      	movs	r3, #250	@ 0xfa
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 f9b5 	bl	8000a34 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	e7f2      	b.n	80006b4 <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <HAL_MspInit+0x44>)
 80006d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HAL_MspInit+0x44>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_MspInit+0x44>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <HAL_MspInit+0x44>)
 80006f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <HAL_MspInit+0x44>)
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	0549      	lsls	r1, r1, #21
 80006f8:	430a      	orrs	r2, r1
 80006fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <HAL_MspInit+0x44>)
 80006fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	055b      	lsls	r3, r3, #21
 8000704:	4013      	ands	r3, r2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	@ 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2414      	movs	r4, #20
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 ff0a 	bl	8003544 <memset>
  if(hspi->Instance==SPI1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <HAL_SPI_MspInit+0x9c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d138      	bne.n	80007ac <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 800073c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	0149      	lsls	r1, r1, #5
 8000744:	430a      	orrs	r2, r1
 8000746:	641a      	str	r2, [r3, #64]	@ 0x40
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 800074a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	015b      	lsls	r3, r3, #5
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 8000758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_SPI_MspInit+0xa0>)
 8000764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	22c2      	movs	r2, #194	@ 0xc2
 8000774:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2202      	movs	r2, #2
 800077a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2202      	movs	r2, #2
 8000780:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2203      	movs	r2, #3
 8000786:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	187a      	adds	r2, r7, r1
 8000790:	23a0      	movs	r3, #160	@ 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fab8 	bl	8000d0c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2019      	movs	r0, #25
 80007a2:	f000 fa17 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007a6:	2019      	movs	r0, #25
 80007a8:	f000 fa29 	bl	8000bfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00b      	add	sp, #44	@ 0x2c
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40013000 	.word	0x40013000
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b091      	sub	sp, #68	@ 0x44
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	232c      	movs	r3, #44	@ 0x2c
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f002 feb8 	bl	8003544 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	2410      	movs	r4, #16
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	0018      	movs	r0, r3
 80007da:	231c      	movs	r3, #28
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f002 feb0 	bl	8003544 <memset>
  if(huart->Instance==USART2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <HAL_UART_MspInit+0xb8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d13e      	bne.n	800086c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2202      	movs	r2, #2
 80007f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f927 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000806:	f7ff ff51 	bl	80006ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 800080c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 800081a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 8000828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_UART_MspInit+0xbc>)
 8000834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083e:	212c      	movs	r1, #44	@ 0x2c
 8000840:	187b      	adds	r3, r7, r1
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fa50 	bl	8000d0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b011      	add	sp, #68	@ 0x44
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f8aa 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008b4:	4b03      	ldr	r3, [pc, #12]	@ (80008c4 <SPI1_IRQHandler+0x14>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fc40 	bl	800213c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000028 	.word	0x20000028

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	@ (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff fff6 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f002 fe27 	bl	8003554 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000906:	f7ff fd71 	bl	80003ec <main>

0800090a <LoopForever>:

LoopForever:
  b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000918:	08003644 	.word	0x08003644
  ldr r2, =_sbss
 800091c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000920:	20000128 	.word	0x20000128

08000924 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>
	...

08000928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_Init+0x3c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_Init+0x3c>)
 800093a:	2180      	movs	r1, #128	@ 0x80
 800093c:	0049      	lsls	r1, r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f810 	bl	8000968 <HAL_InitTick>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d003      	beq.n	8000954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff febc 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_InitTick+0x88>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02b      	beq.n	80009d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0x8c>)
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <HAL_InitTick+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	23fa      	movs	r3, #250	@ 0xfa
 800098c:	0098      	lsls	r0, r3, #2
 800098e:	f7ff fbb7 	bl	8000100 <__udivsi3>
 8000992:	0003      	movs	r3, r0
 8000994:	0019      	movs	r1, r3
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff fbb2 	bl	8000100 <__udivsi3>
 800099c:	0003      	movs	r3, r0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f93d 	bl	8000c1e <HAL_SYSTICK_Config>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d112      	bne.n	80009ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d80a      	bhi.n	80009c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	425b      	negs	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f90c 	bl	8000bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_InitTick+0x90>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e00d      	b.n	80009e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e008      	b.n	80009e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	230f      	movs	r3, #15
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b005      	add	sp, #20
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000124 	.word	0x20000124

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	20000124 	.word	0x20000124

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001a      	movs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a8e:	d809      	bhi.n	8000aa4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	231f      	movs	r3, #31
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_EnableIRQ+0x30>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4091      	lsls	r1, r2
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac4:	d828      	bhi.n	8000b18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <__NVIC_SetPriority+0xd4>)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	33c0      	adds	r3, #192	@ 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	589b      	ldr	r3, [r3, r2]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	@ 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	@ 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	481f      	ldr	r0, [pc, #124]	@ (8000b84 <__NVIC_SetPriority+0xd4>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	33c0      	adds	r3, #192	@ 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b16:	e031      	b.n	8000b7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0019      	movs	r1, r3
 8000b20:	230f      	movs	r3, #15
 8000b22:	400b      	ands	r3, r1
 8000b24:	3b08      	subs	r3, #8
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3306      	adds	r3, #6
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	3304      	adds	r3, #4
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	@ 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	@ 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001c      	movs	r4, r3
 8000b68:	230f      	movs	r3, #15
 8000b6a:	4023      	ands	r3, r4
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	3306      	adds	r3, #6
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	18c3      	adds	r3, r0, r3
 8000b78:	3304      	adds	r3, #4
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b003      	add	sp, #12
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	045b      	lsls	r3, r3, #17
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d301      	bcc.n	8000ba4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e010      	b.n	8000bc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <SysTick_Config+0x44>)
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff7c 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <SysTick_Config+0x44>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <SysTick_Config+0x44>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	210f      	movs	r1, #15
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	1c02      	adds	r2, r0, #0
 8000be4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	0002      	movs	r2, r0
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ff33 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ffaf 	bl	8000b8c <SysTick_Config>
 8000c2e:	0003      	movs	r3, r0
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	210f      	movs	r1, #15
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2225      	movs	r2, #37	@ 0x25
 8000c4c:	5c9b      	ldrb	r3, [r3, r2]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d006      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2204      	movs	r2, #4
 8000c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e049      	b.n	8000cf6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	210e      	movs	r1, #14
 8000c6e:	438a      	bics	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	438a      	bics	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8c:	491d      	ldr	r1, [pc, #116]	@ (8000d04 <HAL_DMA_Abort_IT+0xcc>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <HAL_DMA_Abort_IT+0xd0>)
 8000c94:	6859      	ldr	r1, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	221c      	movs	r2, #28
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_DMA_Abort_IT+0xd0>)
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000cb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00c      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cc4:	490f      	ldr	r1, [pc, #60]	@ (8000d04 <HAL_DMA_Abort_IT+0xcc>)
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000cd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2225      	movs	r2, #37	@ 0x25
 8000cd8:	2101      	movs	r1, #1
 8000cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2224      	movs	r2, #36	@ 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	4798      	blx	r3
    }
  }
  return status;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b004      	add	sp, #16
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	fffffeff 	.word	0xfffffeff
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e147      	b.n	8000fac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0x28>
 8000d32:	e138      	b.n	8000fa6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_Init+0x40>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d130      	bne.n	8000dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d017      	beq.n	8000dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	58d3      	ldr	r3, [r2, r3]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2207      	movs	r2, #7
 8000e08:	4013      	ands	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2107      	movs	r1, #7
 8000e22:	400b      	ands	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	6939      	ldr	r1, [r7, #16]
 8000e3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	23c0      	movs	r3, #192	@ 0xc0
 8000e78:	029b      	lsls	r3, r3, #10
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <HAL_GPIO_Init+0x174>
 8000e7e:	e092      	b.n	8000fa6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e80:	4a50      	ldr	r2, [pc, #320]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3318      	adds	r3, #24
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	589b      	ldr	r3, [r3, r2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2203      	movs	r2, #3
 8000e92:	4013      	ands	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	220f      	movs	r2, #15
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	23a0      	movs	r3, #160	@ 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1ca>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a45      	ldr	r2, [pc, #276]	@ (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1c6>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	@ (8000fcc <HAL_GPIO_Init+0x2c0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1c2>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a43      	ldr	r2, [pc, #268]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1be>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x1cc>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	2103      	movs	r1, #3
 8000edc:	400a      	ands	r2, r1
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ee8:	4936      	ldr	r1, [pc, #216]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3318      	adds	r3, #24
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	035b      	lsls	r3, r3, #13
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	039b      	lsls	r3, r3, #14
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f4c:	2384      	movs	r3, #132	@ 0x84
 8000f4e:	58d3      	ldr	r3, [r2, r3]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f70:	4914      	ldr	r1, [pc, #80]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f72:	2284      	movs	r2, #132	@ 0x84
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f78:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4909      	ldr	r1, [pc, #36]	@ (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000fa0:	2280      	movs	r2, #128	@ 0x80
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	1e13      	subs	r3, r2, #0
 8000fb6:	d000      	beq.n	8000fba <HAL_GPIO_Init+0x2ae>
 8000fb8:	e6b0      	b.n	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b006      	add	sp, #24
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	50000400 	.word	0x50000400
 8000fcc:	50000800 	.word	0x50000800
 8000fd0:	50000c00 	.word	0x50000c00

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	0008      	movs	r0, r1
 8000fde:	0011      	movs	r1, r2
 8000fe0:	1cbb      	adds	r3, r7, #2
 8000fe2:	1c02      	adds	r2, r0, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	1c7b      	adds	r3, r7, #1
 8000fe8:	1c0a      	adds	r2, r1, #0
 8000fea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fec:	1c7b      	adds	r3, r7, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	1cbb      	adds	r3, r7, #2
 8001000:	881a      	ldrh	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	000a      	movs	r2, r1
 8001018:	1cbb      	adds	r3, r7, #2
 800101a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001022:	1cbb      	adds	r3, r7, #2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	1cb9      	adds	r1, r7, #2
 8001032:	8809      	ldrh	r1, [r1, #0]
 8001034:	400b      	ands	r3, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b004      	add	sp, #16
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001052:	4013      	ands	r3, r2
 8001054:	0019      	movs	r1, r3
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	429a      	cmp	r2, r3
 8001066:	d11f      	bne.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	0013      	movs	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	189b      	adds	r3, r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4912      	ldr	r1, [pc, #72]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff f842 	bl	8000100 <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	3301      	adds	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001082:	e008      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3b01      	subs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e001      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e009      	b.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	401a      	ands	r2, r3
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d0ed      	beq.n	8001084 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	40007000 	.word	0x40007000
 80010b8:	fffff9ff 	.word	0xfffff9ff
 80010bc:	20000000 	.word	0x20000000
 80010c0:	000f4240 	.word	0x000f4240

080010c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	23e0      	movs	r3, #224	@ 0xe0
 80010ce:	01db      	lsls	r3, r3, #7
 80010d0:	4013      	ands	r3, r2
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e2f3      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	d100      	bne.n	80010fa <HAL_RCC_OscConfig+0x1e>
 80010f8:	e07c      	b.n	80011f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010fa:	4bc3      	ldr	r3, [pc, #780]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2238      	movs	r2, #56	@ 0x38
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001104:	4bc0      	ldr	r3, [pc, #768]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2203      	movs	r2, #3
 800110a:	4013      	ands	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d102      	bne.n	800111a <HAL_RCC_OscConfig+0x3e>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d002      	beq.n	8001120 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	4bb9      	ldr	r3, [pc, #740]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	4013      	ands	r3, r2
 800112a:	d062      	beq.n	80011f2 <HAL_RCC_OscConfig+0x116>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d15e      	bne.n	80011f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e2ce      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	429a      	cmp	r2, r3
 8001142:	d107      	bne.n	8001154 <HAL_RCC_OscConfig+0x78>
 8001144:	4bb0      	ldr	r3, [pc, #704]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4baf      	ldr	r3, [pc, #700]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	0249      	lsls	r1, r1, #9
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e020      	b.n	8001196 <HAL_RCC_OscConfig+0xba>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	23a0      	movs	r3, #160	@ 0xa0
 800115a:	02db      	lsls	r3, r3, #11
 800115c:	429a      	cmp	r2, r3
 800115e:	d10e      	bne.n	800117e <HAL_RCC_OscConfig+0xa2>
 8001160:	4ba9      	ldr	r3, [pc, #676]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4ba8      	ldr	r3, [pc, #672]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	02c9      	lsls	r1, r1, #11
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	4ba6      	ldr	r3, [pc, #664]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4ba5      	ldr	r3, [pc, #660]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001174:	2180      	movs	r1, #128	@ 0x80
 8001176:	0249      	lsls	r1, r1, #9
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0xba>
 800117e:	4ba2      	ldr	r3, [pc, #648]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4ba1      	ldr	r3, [pc, #644]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001184:	49a1      	ldr	r1, [pc, #644]	@ (800140c <HAL_RCC_OscConfig+0x330>)
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4b9f      	ldr	r3, [pc, #636]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b9e      	ldr	r3, [pc, #632]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001190:	499f      	ldr	r1, [pc, #636]	@ (8001410 <HAL_RCC_OscConfig+0x334>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d014      	beq.n	80011c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fc3f 	bl	8000a20 <HAL_GetTick>
 80011a2:	0003      	movs	r3, r0
 80011a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc3a 	bl	8000a20 <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e28d      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	4b93      	ldr	r3, [pc, #588]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	2380      	movs	r3, #128	@ 0x80
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xcc>
 80011c6:	e015      	b.n	80011f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc2a 	bl	8000a20 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d2:	f7ff fc25 	bl	8000a20 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	@ 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e278      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e4:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	029b      	lsls	r3, r3, #10
 80011ec:	4013      	ands	r3, r2
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0xf6>
 80011f0:	e000      	b.n	80011f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_RCC_OscConfig+0x124>
 80011fe:	e099      	b.n	8001334 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001200:	4b81      	ldr	r3, [pc, #516]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2238      	movs	r2, #56	@ 0x38
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120a:	4b7f      	ldr	r3, [pc, #508]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2203      	movs	r2, #3
 8001210:	4013      	ands	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x144>
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d002      	beq.n	8001226 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d135      	bne.n	8001292 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001226:	4b78      	ldr	r3, [pc, #480]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4013      	ands	r3, r2
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x162>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e24b      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b72      	ldr	r3, [pc, #456]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a74      	ldr	r2, [pc, #464]	@ (8001414 <HAL_RCC_OscConfig+0x338>)
 8001244:	4013      	ands	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	4b6e      	ldr	r3, [pc, #440]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d112      	bne.n	8001280 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800125a:	4b6b      	ldr	r3, [pc, #428]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6e      	ldr	r2, [pc, #440]	@ (8001418 <HAL_RCC_OscConfig+0x33c>)
 8001260:	4013      	ands	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800126e:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0adb      	lsrs	r3, r3, #11
 8001274:	2207      	movs	r2, #7
 8001276:	4013      	ands	r3, r2
 8001278:	4a68      	ldr	r2, [pc, #416]	@ (800141c <HAL_RCC_OscConfig+0x340>)
 800127a:	40da      	lsrs	r2, r3
 800127c:	4b68      	ldr	r3, [pc, #416]	@ (8001420 <HAL_RCC_OscConfig+0x344>)
 800127e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001280:	4b68      	ldr	r3, [pc, #416]	@ (8001424 <HAL_RCC_OscConfig+0x348>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fb6f 	bl	8000968 <HAL_InitTick>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d051      	beq.n	8001332 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e221      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d030      	beq.n	80012fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800129a:	4b5b      	ldr	r3, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5e      	ldr	r2, [pc, #376]	@ (8001418 <HAL_RCC_OscConfig+0x33c>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	4b57      	ldr	r3, [pc, #348]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012ae:	4b56      	ldr	r3, [pc, #344]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	0049      	lsls	r1, r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbb0 	bl	8000a20 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fbab 	bl	8000a20 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1fe      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4013      	ands	r3, r2
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <HAL_RCC_OscConfig+0x338>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	021a      	lsls	r2, r3, #8
 80012f4:	4b44      	ldr	r3, [pc, #272]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	e01b      	b.n	8001334 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012fc:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b41      	ldr	r3, [pc, #260]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001302:	4949      	ldr	r1, [pc, #292]	@ (8001428 <HAL_RCC_OscConfig+0x34c>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fb8a 	bl	8000a20 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fb85 	bl	8000a20 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1d8      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	4b38      	ldr	r3, [pc, #224]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4013      	ands	r3, r2
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x236>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001332:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2208      	movs	r2, #8
 800133a:	4013      	ands	r3, r2
 800133c:	d047      	beq.n	80013ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800133e:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	4013      	ands	r3, r2
 8001346:	2b18      	cmp	r3, #24
 8001348:	d10a      	bne.n	8001360 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d03c      	beq.n	80013ce <HAL_RCC_OscConfig+0x2f2>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d138      	bne.n	80013ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e1ba      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d019      	beq.n	800139c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800136a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800136c:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fb54 	bl	8000a20 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fb4f 	bl	8000a20 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a2      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001394:	2202      	movs	r2, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d0f1      	beq.n	800137e <HAL_RCC_OscConfig+0x2a2>
 800139a:	e018      	b.n	80013ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 800139e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	438a      	bics	r2, r1
 80013a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb3a 	bl	8000a20 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fb35 	bl	8000a20 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e188      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f1      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	4013      	ands	r3, r2
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x2fe>
 80013d8:	e0c6      	b.n	8001568 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2238      	movs	r2, #56	@ 0x38
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d11e      	bne.n	800142c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d100      	bne.n	80013fa <HAL_RCC_OscConfig+0x31e>
 80013f8:	e0b6      	b.n	8001568 <HAL_RCC_OscConfig+0x48c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d000      	beq.n	8001404 <HAL_RCC_OscConfig+0x328>
 8001402:	e0b1      	b.n	8001568 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e166      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
 8001408:	40021000 	.word	0x40021000
 800140c:	fffeffff 	.word	0xfffeffff
 8001410:	fffbffff 	.word	0xfffbffff
 8001414:	ffff80ff 	.word	0xffff80ff
 8001418:	ffffc7ff 	.word	0xffffc7ff
 800141c:	00f42400 	.word	0x00f42400
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800142c:	4bac      	ldr	r3, [pc, #688]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800142e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	055b      	lsls	r3, r3, #21
 8001434:	4013      	ands	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_RCC_OscConfig+0x360>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x362>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d011      	beq.n	8001466 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4ba7      	ldr	r3, [pc, #668]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001446:	4ba6      	ldr	r3, [pc, #664]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	0549      	lsls	r1, r1, #21
 800144c:	430a      	orrs	r2, r1
 800144e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001450:	4ba3      	ldr	r3, [pc, #652]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	055b      	lsls	r3, r3, #21
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800145e:	231f      	movs	r3, #31
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001466:	4b9f      	ldr	r3, [pc, #636]	@ (80016e4 <HAL_RCC_OscConfig+0x608>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4013      	ands	r3, r2
 8001470:	d11a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001472:	4b9c      	ldr	r3, [pc, #624]	@ (80016e4 <HAL_RCC_OscConfig+0x608>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b9b      	ldr	r3, [pc, #620]	@ (80016e4 <HAL_RCC_OscConfig+0x608>)
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	0049      	lsls	r1, r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001480:	f7ff face 	bl	8000a20 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148a:	f7ff fac9 	bl	8000a20 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e11c      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149c:	4b91      	ldr	r3, [pc, #580]	@ (80016e4 <HAL_RCC_OscConfig+0x608>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d106      	bne.n	80014be <HAL_RCC_OscConfig+0x3e2>
 80014b0:	4b8b      	ldr	r3, [pc, #556]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014b4:	4b8a      	ldr	r3, [pc, #552]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x41c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x404>
 80014c6:	4b86      	ldr	r3, [pc, #536]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014cc:	2104      	movs	r1, #4
 80014ce:	430a      	orrs	r2, r1
 80014d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014d2:	4b83      	ldr	r3, [pc, #524]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0x41c>
 80014e0:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e4:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014ec:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014f0:	4b7b      	ldr	r3, [pc, #492]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fa8e 	bl	8000a20 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fa89 	bl	8000a20 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a74      	ldr	r2, [pc, #464]	@ (80016e8 <HAL_RCC_OscConfig+0x60c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0db      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151e:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x42e>
 8001528:	e013      	b.n	8001552 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fa79 	bl	8000a20 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001532:	e009      	b.n	8001548 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fa74 	bl	8000a20 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a6a      	ldr	r2, [pc, #424]	@ (80016e8 <HAL_RCC_OscConfig+0x60c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0c6      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001548:	4b65      	ldr	r3, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800154a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800155e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001560:	4b5f      	ldr	r3, [pc, #380]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001562:	4962      	ldr	r1, [pc, #392]	@ (80016ec <HAL_RCC_OscConfig+0x610>)
 8001564:	400a      	ands	r2, r1
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x496>
 8001570:	e0b0      	b.n	80016d4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2238      	movs	r2, #56	@ 0x38
 8001578:	4013      	ands	r3, r2
 800157a:	2b10      	cmp	r3, #16
 800157c:	d100      	bne.n	8001580 <HAL_RCC_OscConfig+0x4a4>
 800157e:	e078      	b.n	8001672 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d153      	bne.n	8001630 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b54      	ldr	r3, [pc, #336]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800158e:	4958      	ldr	r1, [pc, #352]	@ (80016f0 <HAL_RCC_OscConfig+0x614>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fa44 	bl	8000a20 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fa3f 	bl	8000a20 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e092      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b0:	4b4b      	ldr	r3, [pc, #300]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	049b      	lsls	r3, r3, #18
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b48      	ldr	r3, [pc, #288]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	@ (80016f4 <HAL_RCC_OscConfig+0x618>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1a      	ldr	r2, [r3, #32]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	431a      	orrs	r2, r3
 80015e4:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ea:	4b3d      	ldr	r3, [pc, #244]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	0449      	lsls	r1, r1, #17
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015f8:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 80015fe:	2180      	movs	r1, #128	@ 0x80
 8001600:	0549      	lsls	r1, r1, #21
 8001602:	430a      	orrs	r2, r1
 8001604:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fa0b 	bl	8000a20 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fa06 	bl	8000a20 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e059      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	4013      	ands	r3, r2
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x534>
 800162e:	e051      	b.n	80016d4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001636:	492e      	ldr	r1, [pc, #184]	@ (80016f0 <HAL_RCC_OscConfig+0x614>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff f9f0 	bl	8000a20 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f9eb 	bl	8000a20 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e03e      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	049b      	lsls	r3, r3, #18
 8001660:	4013      	ands	r3, r2
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001664:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 800166a:	4923      	ldr	r1, [pc, #140]	@ (80016f8 <HAL_RCC_OscConfig+0x61c>)
 800166c:	400a      	ands	r2, r1
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	e030      	b.n	80016d4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e02b      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_RCC_OscConfig+0x604>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2203      	movs	r2, #3
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	429a      	cmp	r2, r3
 8001690:	d11e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2270      	movs	r2, #112	@ 0x70
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d117      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	23fe      	movs	r3, #254	@ 0xfe
 80016a4:	01db      	lsls	r3, r3, #7
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d10e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	23f8      	movs	r3, #248	@ 0xf8
 80016b6:	039b      	lsls	r3, r3, #14
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	0f5b      	lsrs	r3, r3, #29
 80016c6:	075a      	lsls	r2, r3, #29
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b008      	add	sp, #32
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
 80016e8:	00001388 	.word	0x00001388
 80016ec:	efffffff 	.word	0xefffffff
 80016f0:	feffffff 	.word	0xfeffffff
 80016f4:	1fc1808c 	.word	0x1fc1808c
 80016f8:	effefffc 	.word	0xeffefffc

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0e9      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b76      	ldr	r3, [pc, #472]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2207      	movs	r2, #7
 8001716:	4013      	ands	r3, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d91e      	bls.n	800175c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2207      	movs	r2, #7
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	4b70      	ldr	r3, [pc, #448]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001730:	f7ff f976 	bl	8000a20 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001738:	e009      	b.n	800174e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173a:	f7ff f971 	bl	8000a20 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a6a      	ldr	r2, [pc, #424]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0ca      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800174e:	4b67      	ldr	r3, [pc, #412]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2207      	movs	r2, #7
 8001754:	4013      	ands	r3, r2
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d1ee      	bne.n	800173a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d015      	beq.n	8001792 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	d006      	beq.n	800177e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001770:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4b5f      	ldr	r3, [pc, #380]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	21e0      	movs	r1, #224	@ 0xe0
 8001778:	01c9      	lsls	r1, r1, #7
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177e:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4a5d      	ldr	r2, [pc, #372]	@ (80018f8 <HAL_RCC_ClockConfig+0x1fc>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	d057      	beq.n	800184c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	4013      	ands	r3, r2
 80017ae:	d12b      	bne.n	8001808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e097      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017bc:	4b4d      	ldr	r3, [pc, #308]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	049b      	lsls	r3, r3, #18
 80017c4:	4013      	ands	r3, r2
 80017c6:	d11f      	bne.n	8001808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e08b      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d4:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	d113      	bne.n	8001808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e07f      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ec:	4b41      	ldr	r3, [pc, #260]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e074      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	4b3e      	ldr	r3, [pc, #248]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80017fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e06d      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2207      	movs	r2, #7
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800181c:	f7ff f900 	bl	8000a20 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001824:	e009      	b.n	800183a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7ff f8fb 	bl	8000a20 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e054      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2238      	movs	r2, #56	@ 0x38
 8001840:	401a      	ands	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	429a      	cmp	r2, r3
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2207      	movs	r2, #7
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d21e      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2207      	movs	r2, #7
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800186c:	f7ff f8d8 	bl	8000a20 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001874:	e009      	b.n	800188a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001876:	f7ff f8d3 	bl	8000a20 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e02c      	b.n	80018e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800188a:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2207      	movs	r2, #7
 8001890:	4013      	ands	r3, r2
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d1ee      	bne.n	8001876 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2204      	movs	r2, #4
 800189e:	4013      	ands	r3, r2
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <HAL_RCC_ClockConfig+0x200>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018b6:	f000 f829 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ba:	0001      	movs	r1, r0
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	220f      	movs	r2, #15
 80018c4:	401a      	ands	r2, r3
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_RCC_ClockConfig+0x204>)
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	58d3      	ldr	r3, [r2, r3]
 80018cc:	221f      	movs	r2, #31
 80018ce:	4013      	ands	r3, r2
 80018d0:	000a      	movs	r2, r1
 80018d2:	40da      	lsrs	r2, r3
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_ClockConfig+0x208>)
 80018d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_ClockConfig+0x20c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff f843 	bl	8000968 <HAL_InitTick>
 80018e2:	0003      	movs	r3, r0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40022000 	.word	0x40022000
 80018f0:	00001388 	.word	0x00001388
 80018f4:	40021000 	.word	0x40021000
 80018f8:	fffff0ff 	.word	0xfffff0ff
 80018fc:	ffff8fff 	.word	0xffff8fff
 8001900:	080035b4 	.word	0x080035b4
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	4b3c      	ldr	r3, [pc, #240]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2238      	movs	r2, #56	@ 0x38
 8001918:	4013      	ands	r3, r2
 800191a:	d10f      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0adb      	lsrs	r3, r3, #11
 8001922:	2207      	movs	r2, #7
 8001924:	4013      	ands	r3, r2
 8001926:	2201      	movs	r2, #1
 8001928:	409a      	lsls	r2, r3
 800192a:	0013      	movs	r3, r2
 800192c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	4835      	ldr	r0, [pc, #212]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001932:	f7fe fbe5 	bl	8000100 <__udivsi3>
 8001936:	0003      	movs	r3, r0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	e05d      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800193c:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2238      	movs	r2, #56	@ 0x38
 8001942:	4013      	ands	r3, r2
 8001944:	2b08      	cmp	r3, #8
 8001946:	d102      	bne.n	800194e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e054      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2238      	movs	r2, #56	@ 0x38
 8001954:	4013      	ands	r3, r2
 8001956:	2b10      	cmp	r3, #16
 8001958:	d138      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800195a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2203      	movs	r2, #3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	2207      	movs	r2, #7
 800196c:	4013      	ands	r3, r2
 800196e:	3301      	adds	r3, #1
 8001970:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d10d      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	4824      	ldr	r0, [pc, #144]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800197c:	f7fe fbc0 	bl	8000100 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	0019      	movs	r1, r3
 8001984:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	227f      	movs	r2, #127	@ 0x7f
 800198c:	4013      	ands	r3, r2
 800198e:	434b      	muls	r3, r1
 8001990:	617b      	str	r3, [r7, #20]
        break;
 8001992:	e00d      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001998:	f7fe fbb2 	bl	8000100 <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	0019      	movs	r1, r3
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	227f      	movs	r2, #127	@ 0x7f
 80019a8:	4013      	ands	r3, r2
 80019aa:	434b      	muls	r3, r1
 80019ac:	617b      	str	r3, [r7, #20]
        break;
 80019ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0f5b      	lsrs	r3, r3, #29
 80019b6:	2207      	movs	r2, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	6978      	ldr	r0, [r7, #20]
 80019c2:	f7fe fb9d 	bl	8000100 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e015      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2238      	movs	r2, #56	@ 0x38
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d103      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2238      	movs	r2, #56	@ 0x38
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d103      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019ec:	23fa      	movs	r3, #250	@ 0xfa
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e001      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019f8:	693b      	ldr	r3, [r7, #16]
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b006      	add	sp, #24
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b02      	ldr	r3, [pc, #8]	@ (8001a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a28:	f7ff fff2 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a2c:	0004      	movs	r4, r0
 8001a2e:	f7ff fb49 	bl	80010c4 <LL_RCC_GetAPB1Prescaler>
 8001a32:	0003      	movs	r3, r0
 8001a34:	0b1a      	lsrs	r2, r3, #12
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	4013      	ands	r3, r2
 8001a40:	40dc      	lsrs	r4, r3
 8001a42:	0023      	movs	r3, r4
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	080035f4 	.word	0x080035f4

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a58:	2313      	movs	r3, #19
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a60:	2312      	movs	r3, #18
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a74:	e0a3      	b.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2011      	movs	r0, #17
 8001a78:	183b      	adds	r3, r7, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b86      	ldr	r3, [pc, #536]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	055b      	lsls	r3, r3, #21
 8001a86:	4013      	ands	r3, r2
 8001a88:	d110      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b83      	ldr	r3, [pc, #524]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a8e:	4b82      	ldr	r3, [pc, #520]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a90:	2180      	movs	r1, #128	@ 0x80
 8001a92:	0549      	lsls	r1, r1, #21
 8001a94:	430a      	orrs	r2, r1
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a98:	4b7f      	ldr	r3, [pc, #508]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aac:	4b7b      	ldr	r3, [pc, #492]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ab2:	2180      	movs	r1, #128	@ 0x80
 8001ab4:	0049      	lsls	r1, r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aba:	f7fe ffb1 	bl	8000a20 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac2:	e00b      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac4:	f7fe ffac 	bl	8000a20 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d904      	bls.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ad2:	2313      	movs	r3, #19
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	701a      	strb	r2, [r3, #0]
        break;
 8001ada:	e005      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001adc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0ed      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ae8:	2313      	movs	r3, #19
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d154      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001af2:	4b69      	ldr	r3, [pc, #420]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001af6:	23c0      	movs	r3, #192	@ 0xc0
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d019      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d014      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b0e:	4b62      	ldr	r3, [pc, #392]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b18:	4b5f      	ldr	r3, [pc, #380]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	0249      	lsls	r1, r1, #9
 8001b22:	430a      	orrs	r2, r1
 8001b24:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b26:	4b5c      	ldr	r3, [pc, #368]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b2c:	495d      	ldr	r1, [pc, #372]	@ (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b32:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7fe ff6e 	bl	8000a20 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b48:	e00c      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe ff69 	bl	8000a20 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	4a54      	ldr	r2, [pc, #336]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d904      	bls.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b5a:	2313      	movs	r3, #19
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2203      	movs	r2, #3
 8001b60:	701a      	strb	r2, [r3, #0]
            break;
 8001b62:	e004      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b64:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0ed      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b6e:	2313      	movs	r3, #19
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b78:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	4a48      	ldr	r2, [pc, #288]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	4b44      	ldr	r3, [pc, #272]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2213      	movs	r2, #19
 8001b94:	18ba      	adds	r2, r7, r2
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2213      	movs	r2, #19
 8001ba2:	18ba      	adds	r2, r7, r2
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba8:	2311      	movs	r3, #17
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb8:	493c      	ldr	r1, [pc, #240]	@ (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	220c      	movs	r2, #12
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	4013      	ands	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	4013      	ands	r3, r2
 8001c22:	d015      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	0899      	lsrs	r1, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d106      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	0249      	lsls	r1, r1, #9
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d016      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c60:	4a14      	ldr	r2, [pc, #80]	@ (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	0249      	lsls	r1, r1, #9
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b006      	add	sp, #24
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	fffffcff 	.word	0xfffffcff
 8001ca4:	fffeffff 	.word	0xfffeffff
 8001ca8:	00001388 	.word	0x00001388
 8001cac:	efffffff 	.word	0xefffffff
 8001cb0:	ffffcfff 	.word	0xffffcfff
 8001cb4:	ffff3fff 	.word	0xffff3fff

08001cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0a8      	b.n	8001e1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	2382      	movs	r3, #130	@ 0x82
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d009      	beq.n	8001cf2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
 8001ce4:	e005      	b.n	8001cf2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	225d      	movs	r2, #93	@ 0x5d
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	225c      	movs	r2, #92	@ 0x5c
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7fe fd02 	bl	8000718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	225d      	movs	r2, #93	@ 0x5d
 8001d18:	2102      	movs	r1, #2
 8001d1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2140      	movs	r1, #64	@ 0x40
 8001d28:	438a      	bics	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	23e0      	movs	r3, #224	@ 0xe0
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d902      	bls.n	8001d3e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e002      	b.n	8001d44 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	23f0      	movs	r3, #240	@ 0xf0
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d008      	beq.n	8001d62 <HAL_SPI_Init+0xaa>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	23e0      	movs	r3, #224	@ 0xe0
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	2382      	movs	r3, #130	@ 0x82
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	2384      	movs	r3, #132	@ 0x84
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	400b      	ands	r3, r1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	400b      	ands	r3, r1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2101      	movs	r1, #1
 8001d88:	400b      	ands	r3, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6999      	ldr	r1, [r3, #24]
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	400b      	ands	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2138      	movs	r1, #56	@ 0x38
 8001d9e:	400b      	ands	r3, r1
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	400b      	ands	r3, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	0011      	movs	r1, r2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	2110      	movs	r1, #16
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd8:	2108      	movs	r1, #8
 8001dda:	400b      	ands	r3, r1
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68d9      	ldr	r1, [r3, #12]
 8001de2:	23f0      	movs	r3, #240	@ 0xf0
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	400b      	ands	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	0011      	movs	r1, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	015b      	lsls	r3, r3, #5
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <HAL_SPI_Init+0x16c>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	225d      	movs	r2, #93	@ 0x5d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	fffff7ff 	.word	0xfffff7ff

08001e28 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	1dbb      	adds	r3, r7, #6
 8001e34:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e36:	2117      	movs	r1, #23
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	225d      	movs	r2, #93	@ 0x5d
 8001e42:	5c9b      	ldrb	r3, [r3, r2]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d003      	beq.n	8001e52 <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e50:	e09c      	b.n	8001f8c <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d112      	bne.n	8001e80 <HAL_SPI_Receive_IT+0x58>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	2382      	movs	r3, #130	@ 0x82
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10c      	bne.n	8001e80 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	225d      	movs	r2, #93	@ 0x5d
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f898 	bl	8001fac <HAL_SPI_TransmitReceive_IT>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	e088      	b.n	8001f92 <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_SPI_Receive_IT+0x66>
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001e8e:	2317      	movs	r3, #23
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e96:	e079      	b.n	8001f8c <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	225c      	movs	r2, #92	@ 0x5c
 8001e9c:	5c9b      	ldrb	r3, [r3, r2]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_SPI_Receive_IT+0x7e>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e075      	b.n	8001f92 <HAL_SPI_Receive_IT+0x16a>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	225c      	movs	r2, #92	@ 0x5c
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	225d      	movs	r2, #93	@ 0x5d
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1dba      	adds	r2, r7, #6
 8001ec6:	2144      	movs	r1, #68	@ 0x44
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1dba      	adds	r2, r7, #6
 8001ed0:	2146      	movs	r1, #70	@ 0x46
 8001ed2:	8812      	ldrh	r2, [r2, #0]
 8001ed4:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	23e0      	movs	r3, #224	@ 0xe0
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d90b      	bls.n	8001f12 <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4925      	ldr	r1, [pc, #148]	@ (8001f9c <HAL_SPI_Receive_IT+0x174>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a24      	ldr	r2, [pc, #144]	@ (8001fa0 <HAL_SPI_Receive_IT+0x178>)
 8001f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f10:	e00b      	b.n	8001f2a <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0149      	lsls	r1, r1, #5
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <HAL_SPI_Receive_IT+0x17c>)
 8001f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10f      	bne.n	8001f56 <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2140      	movs	r1, #64	@ 0x40
 8001f42:	438a      	bics	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4915      	ldr	r1, [pc, #84]	@ (8001fa8 <HAL_SPI_Receive_IT+0x180>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2240      	movs	r2, #64	@ 0x40
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b40      	cmp	r3, #64	@ 0x40
 8001f62:	d007      	beq.n	8001f74 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2140      	movs	r1, #64	@ 0x40
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	225c      	movs	r2, #92	@ 0x5c
 8001f78:	2100      	movs	r1, #0
 8001f7a:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2160      	movs	r1, #96	@ 0x60
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8001f8c:	2317      	movs	r3, #23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	781b      	ldrb	r3, [r3, #0]
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	ffffefff 	.word	0xffffefff
 8001fa0:	080025cf 	.word	0x080025cf
 8001fa4:	0800257d 	.word	0x0800257d
 8001fa8:	ffffbfff 	.word	0xffffbfff

08001fac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	001a      	movs	r2, r3
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fbe:	2317      	movs	r3, #23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fc6:	2016      	movs	r0, #22
 8001fc8:	183b      	adds	r3, r7, r0
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	215d      	movs	r1, #93	@ 0x5d
 8001fce:	5c52      	ldrb	r2, [r2, r1]
 8001fd0:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fd8:	0001      	movs	r1, r0
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d011      	beq.n	8002006 <HAL_SPI_TransmitReceive_IT+0x5a>
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	2382      	movs	r3, #130	@ 0x82
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_SPI_TransmitReceive_IT+0x50>
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d004      	beq.n	8002006 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8001ffc:	2317      	movs	r3, #23
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2202      	movs	r2, #2
 8002002:	701a      	strb	r2, [r3, #0]
    goto error;
 8002004:	e088      	b.n	8002118 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_SPI_TransmitReceive_IT+0x6e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_SPI_TransmitReceive_IT+0x6e>
 8002012:	1cbb      	adds	r3, r7, #2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d104      	bne.n	8002024 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 800201a:	2317      	movs	r3, #23
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
    goto error;
 8002022:	e079      	b.n	8002118 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	225c      	movs	r2, #92	@ 0x5c
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_SPI_TransmitReceive_IT+0x86>
 800202e:	2302      	movs	r3, #2
 8002030:	e075      	b.n	800211e <HAL_SPI_TransmitReceive_IT+0x172>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	225c      	movs	r2, #92	@ 0x5c
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	225d      	movs	r2, #93	@ 0x5d
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b04      	cmp	r3, #4
 8002044:	d003      	beq.n	800204e <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	225d      	movs	r2, #93	@ 0x5d
 800204a:	2105      	movs	r1, #5
 800204c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1cba      	adds	r2, r7, #2
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1cba      	adds	r2, r7, #2
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1cba      	adds	r2, r7, #2
 8002074:	2144      	movs	r1, #68	@ 0x44
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1cba      	adds	r2, r7, #2
 800207e:	2146      	movs	r1, #70	@ 0x46
 8002080:	8812      	ldrh	r2, [r2, #0]
 8002082:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	23e0      	movs	r3, #224	@ 0xe0
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	429a      	cmp	r2, r3
 800208e:	d906      	bls.n	800209e <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_SPI_TransmitReceive_IT+0x17c>)
 8002094:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_SPI_TransmitReceive_IT+0x180>)
 800209a:	651a      	str	r2, [r3, #80]	@ 0x50
 800209c:	e005      	b.n	80020aa <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <HAL_SPI_TransmitReceive_IT+0x184>)
 80020a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a23      	ldr	r2, [pc, #140]	@ (8002134 <HAL_SPI_TransmitReceive_IT+0x188>)
 80020a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	23e0      	movs	r3, #224	@ 0xe0
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d803      	bhi.n	80020be <HAL_SPI_TransmitReceive_IT+0x112>
 80020b6:	1cbb      	adds	r3, r7, #2
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d908      	bls.n	80020d0 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	491b      	ldr	r1, [pc, #108]	@ (8002138 <HAL_SPI_TransmitReceive_IT+0x18c>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	e008      	b.n	80020e2 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0149      	lsls	r1, r1, #5
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2240      	movs	r2, #64	@ 0x40
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b40      	cmp	r3, #64	@ 0x40
 80020ee:	d007      	beq.n	8002100 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2140      	movs	r1, #64	@ 0x40
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	225c      	movs	r2, #92	@ 0x5c
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	21e0      	movs	r1, #224	@ 0xe0
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002118:	2317      	movs	r3, #23
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781b      	ldrb	r3, [r3, #0]
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b006      	add	sp, #24
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	080024b3 	.word	0x080024b3
 800212c:	0800251b 	.word	0x0800251b
 8002130:	0800235d 	.word	0x0800235d
 8002134:	0800241f 	.word	0x0800241f
 8002138:	ffffefff 	.word	0xffffefff

0800213c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	4013      	ands	r3, r2
 800215a:	d10d      	bne.n	8002178 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2201      	movs	r2, #1
 8002160:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002162:	d009      	beq.n	8002178 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	4013      	ands	r3, r2
 800216a:	d005      	beq.n	8002178 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	0010      	movs	r0, r2
 8002174:	4798      	blx	r3
    return;
 8002176:	e0c5      	b.n	8002304 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2202      	movs	r2, #2
 800217c:	4013      	ands	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_SPI_IRQHandler+0x58>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	4013      	ands	r3, r2
 8002186:	d005      	beq.n	8002194 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	0010      	movs	r0, r2
 8002190:	4798      	blx	r3
    return;
 8002192:	e0b7      	b.n	8002304 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2220      	movs	r2, #32
 8002198:	4013      	ands	r3, r2
 800219a:	d109      	bne.n	80021b0 <HAL_SPI_IRQHandler+0x74>
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2240      	movs	r2, #64	@ 0x40
 80021a0:	4013      	ands	r3, r2
 80021a2:	d105      	bne.n	80021b0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	d100      	bne.n	80021b0 <HAL_SPI_IRQHandler+0x74>
 80021ae:	e0a9      	b.n	8002304 <HAL_SPI_IRQHandler+0x1c8>
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2220      	movs	r2, #32
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_SPI_IRQHandler+0x7e>
 80021b8:	e0a4      	b.n	8002304 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2240      	movs	r2, #64	@ 0x40
 80021be:	4013      	ands	r3, r2
 80021c0:	d023      	beq.n	800220a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	225d      	movs	r2, #93	@ 0x5d
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d011      	beq.n	80021f2 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d2:	2204      	movs	r2, #4
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	e00b      	b.n	800220a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
        return;
 8002208:	e07c      	b.n	8002304 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2220      	movs	r2, #32
 800220e:	4013      	ands	r3, r2
 8002210:	d014      	beq.n	800223c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002216:	2201      	movs	r2, #1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2140      	movs	r1, #64	@ 0x40
 8002236:	438a      	bics	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d00c      	beq.n	8002260 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224a:	2208      	movs	r2, #8
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002264:	2b00      	cmp	r3, #0
 8002266:	d04c      	beq.n	8002302 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	21e0      	movs	r1, #224	@ 0xe0
 8002274:	438a      	bics	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	225d      	movs	r2, #93	@ 0x5d
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d103      	bne.n	8002290 <HAL_SPI_IRQHandler+0x154>
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2201      	movs	r2, #1
 800228c:	4013      	ands	r3, r2
 800228e:	d032      	beq.n	80022f6 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2103      	movs	r1, #3
 800229c:	438a      	bics	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	4a17      	ldr	r2, [pc, #92]	@ (800230c <HAL_SPI_IRQHandler+0x1d0>)
 80022ae:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fe fcbf 	bl	8000c38 <HAL_DMA_Abort_IT>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d005      	beq.n	80022ca <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_SPI_IRQHandler+0x1d0>)
 80022d8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fe fcaa 	bl	8000c38 <HAL_DMA_Abort_IT>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ec:	2240      	movs	r2, #64	@ 0x40
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80022f4:	e004      	b.n	8002300 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f811 	bl	8002320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80022fe:	e000      	b.n	8002302 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002300:	46c0      	nop			@ (mov r8, r8)
    return;
 8002302:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002304:	46bd      	mov	sp, r7
 8002306:	b008      	add	sp, #32
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	08002331 	.word	0x08002331

08002310 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2246      	movs	r2, #70	@ 0x46
 8002342:	2100      	movs	r1, #0
 8002344:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff ffe6 	bl	8002320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}

0800235c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2246      	movs	r2, #70	@ 0x46
 8002368:	5a9b      	ldrh	r3, [r3, r2]
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d924      	bls.n	80023ba <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	b292      	uxth	r2, r2
 800237c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2246      	movs	r2, #70	@ 0x46
 800238c:	5a9b      	ldrh	r3, [r3, r2]
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b02      	subs	r3, #2
 8002392:	b299      	uxth	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2246      	movs	r2, #70	@ 0x46
 8002398:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2246      	movs	r2, #70	@ 0x46
 800239e:	5a9b      	ldrh	r3, [r3, r2]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d120      	bne.n	80023e8 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	0149      	lsls	r1, r1, #5
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	e016      	b.n	80023e8 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330c      	adds	r3, #12
 80023c0:	001a      	movs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2246      	movs	r2, #70	@ 0x46
 80023da:	5a9b      	ldrh	r3, [r3, r2]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b299      	uxth	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2246      	movs	r2, #70	@ 0x46
 80023e6:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2246      	movs	r2, #70	@ 0x46
 80023ec:	5a9b      	ldrh	r3, [r3, r2]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d110      	bne.n	8002416 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2160      	movs	r1, #96	@ 0x60
 8002400:	438a      	bics	r2, r1
 8002402:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 fad7 	bl	80029c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}

0800241e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d912      	bls.n	8002456 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b02      	subs	r3, #2
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002454:	e012      	b.n	800247c <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d111      	bne.n	80024aa <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	438a      	bics	r2, r1
 8002494:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2246      	movs	r2, #70	@ 0x46
 800249a:	5a9b      	ldrh	r3, [r3, r2]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fa8d 	bl	80029c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2246      	movs	r2, #70	@ 0x46
 80024d6:	5a9b      	ldrh	r3, [r3, r2]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b299      	uxth	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2246      	movs	r2, #70	@ 0x46
 80024e2:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2246      	movs	r2, #70	@ 0x46
 80024e8:	5a9b      	ldrh	r3, [r3, r2]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d110      	bne.n	8002512 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2140      	movs	r1, #64	@ 0x40
 80024fc:	438a      	bics	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fa59 	bl	80029c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}

0800251a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	1c9a      	adds	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2180      	movs	r1, #128	@ 0x80
 800255c:	438a      	bics	r2, r1
 800255e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2246      	movs	r2, #70	@ 0x46
 8002564:	5a9b      	ldrh	r3, [r3, r2]
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fa28 	bl	80029c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	001a      	movs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2246      	movs	r2, #70	@ 0x46
 80025a4:	5a9b      	ldrh	r3, [r3, r2]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b299      	uxth	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2246      	movs	r2, #70	@ 0x46
 80025b0:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2246      	movs	r2, #70	@ 0x46
 80025b6:	5a9b      	ldrh	r3, [r3, r2]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 fa45 	bl	8002a50 <SPI_CloseRx_ISR>
  }
}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}

080025ce <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2246      	movs	r2, #70	@ 0x46
 80025f2:	5a9b      	ldrh	r3, [r3, r2]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b299      	uxth	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2246      	movs	r2, #70	@ 0x46
 80025fe:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2246      	movs	r2, #70	@ 0x46
 8002604:	5a9b      	ldrh	r3, [r3, r2]
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fa1e 	bl	8002a50 <SPI_CloseRx_ISR>
  }
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800262c:	f7fe f9f8 	bl	8000a20 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800263c:	f7fe f9f0 	bl	8000a20 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002644:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	015b      	lsls	r3, r3, #5
 800264a:	0d1b      	lsrs	r3, r3, #20
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	4353      	muls	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002652:	e058      	b.n	8002706 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	d055      	beq.n	8002706 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800265a:	f7fe f9e1 	bl	8000a20 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	429a      	cmp	r2, r3
 8002668:	d902      	bls.n	8002670 <SPI_WaitFlagStateUntilTimeout+0x54>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d142      	bne.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	21e0      	movs	r1, #224	@ 0xe0
 800267c:	438a      	bics	r2, r1
 800267e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2382      	movs	r3, #130	@ 0x82
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	429a      	cmp	r2, r3
 800268a:	d113      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	429a      	cmp	r2, r3
 8002696:	d005      	beq.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2140      	movs	r1, #64	@ 0x40
 80026b0:	438a      	bics	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	019b      	lsls	r3, r3, #6
 80026bc:	429a      	cmp	r2, r3
 80026be:	d110      	bne.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	491a      	ldr	r1, [pc, #104]	@ (8002734 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	0189      	lsls	r1, r1, #6
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	225d      	movs	r2, #93	@ 0x5d
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	225c      	movs	r2, #92	@ 0x5c
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e017      	b.n	8002726 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3b01      	subs	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4013      	ands	r3, r2
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	425a      	negs	r2, r3
 8002716:	4153      	adcs	r3, r2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	001a      	movs	r2, r3
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d197      	bne.n	8002654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b008      	add	sp, #32
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	20000000 	.word	0x20000000
 8002734:	ffffdfff 	.word	0xffffdfff

08002738 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002746:	2317      	movs	r3, #23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800274e:	f7fe f967 	bl	8000a20 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	18d3      	adds	r3, r2, r3
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800275e:	f7fe f95f 	bl	8000a20 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	0013      	movs	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	189b      	adds	r3, r3, r2
 8002778:	00da      	lsls	r2, r3, #3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	0d1b      	lsrs	r3, r3, #20
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	4353      	muls	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002784:	e068      	b.n	8002858 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	23c0      	movs	r3, #192	@ 0xc0
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	429a      	cmp	r2, r3
 800278e:	d10a      	bne.n	80027a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	2117      	movs	r1, #23
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	d055      	beq.n	8002858 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ac:	f7fe f938 	bl	8000a20 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d902      	bls.n	80027c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d142      	bne.n	8002848 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	21e0      	movs	r1, #224	@ 0xe0
 80027ce:	438a      	bics	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	2382      	movs	r3, #130	@ 0x82
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d113      	bne.n	8002806 <SPI_WaitFifoStateUntilTimeout+0xce>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d005      	beq.n	80027f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d107      	bne.n	8002806 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2140      	movs	r1, #64	@ 0x40
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	429a      	cmp	r2, r3
 8002810:	d110      	bne.n	8002834 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4916      	ldr	r1, [pc, #88]	@ (8002878 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800281e:	400a      	ands	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	0189      	lsls	r1, r1, #6
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	225d      	movs	r2, #93	@ 0x5d
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	225c      	movs	r2, #92	@ 0x5c
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e010      	b.n	800286a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3b01      	subs	r3, #1
 8002856:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d18e      	bne.n	8002786 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b00a      	add	sp, #40	@ 0x28
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	20000000 	.word	0x20000000
 8002878:	ffffdfff 	.word	0xffffdfff

0800287c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2382      	movs	r3, #130	@ 0x82
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	429a      	cmp	r2, r3
 8002892:	d113      	bne.n	80028bc <SPI_EndRxTransaction+0x40>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	429a      	cmp	r2, r3
 800289e:	d005      	beq.n	80028ac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2140      	movs	r1, #64	@ 0x40
 80028b8:	438a      	bics	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	0013      	movs	r3, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	f7ff fea7 	bl	800261c <SPI_WaitFlagStateUntilTimeout>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d007      	beq.n	80028e2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d6:	2220      	movs	r2, #32
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e026      	b.n	8002930 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	2382      	movs	r3, #130	@ 0x82
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11f      	bne.n	800292e <SPI_EndRxTransaction+0xb2>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d005      	beq.n	8002906 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	429a      	cmp	r2, r3
 8002904:	d113      	bne.n	800292e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	23c0      	movs	r3, #192	@ 0xc0
 800290a:	00d9      	lsls	r1, r3, #3
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	0013      	movs	r3, r2
 8002914:	2200      	movs	r2, #0
 8002916:	f7ff ff0f 	bl	8002738 <SPI_WaitFifoStateUntilTimeout>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d007      	beq.n	800292e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	2220      	movs	r2, #32
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e000      	b.n	8002930 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}

08002938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	23c0      	movs	r3, #192	@ 0xc0
 8002948:	0159      	lsls	r1, r3, #5
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	0013      	movs	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	f7ff fef0 	bl	8002738 <SPI_WaitFifoStateUntilTimeout>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d007      	beq.n	800296c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002960:	2220      	movs	r2, #32
 8002962:	431a      	orrs	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e027      	b.n	80029bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	0013      	movs	r3, r2
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	f7ff fe4f 	bl	800261c <SPI_WaitFlagStateUntilTimeout>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d007      	beq.n	8002992 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002986:	2220      	movs	r2, #32
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e014      	b.n	80029bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	23c0      	movs	r3, #192	@ 0xc0
 8002996:	00d9      	lsls	r1, r3, #3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	0013      	movs	r3, r2
 80029a0:	2200      	movs	r2, #0
 80029a2:	f7ff fec9 	bl	8002738 <SPI_WaitFifoStateUntilTimeout>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d007      	beq.n	80029ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	2220      	movs	r2, #32
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e000      	b.n	80029bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	b004      	add	sp, #16
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029cc:	f7fe f828 	bl	8000a20 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2120      	movs	r1, #32
 80029e0:	438a      	bics	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2164      	movs	r1, #100	@ 0x64
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff ffa4 	bl	8002938 <SPI_EndRxTxTransaction>
 80029f0:	1e03      	subs	r3, r0, #0
 80029f2:	d005      	beq.n	8002a00 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f8:	2220      	movs	r2, #32
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d117      	bne.n	8002a38 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	225d      	movs	r2, #93	@ 0x5d
 8002a0c:	5c9b      	ldrb	r3, [r3, r2]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d108      	bne.n	8002a26 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	225d      	movs	r2, #93	@ 0x5d
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fe32 	bl	8000688 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002a24:	e010      	b.n	8002a48 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	225d      	movs	r2, #93	@ 0x5d
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fc6d 	bl	8002310 <HAL_SPI_TxRxCpltCallback>
}
 8002a36:	e007      	b.n	8002a48 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	225d      	movs	r2, #93	@ 0x5d
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff fc6c 	bl	8002320 <HAL_SPI_ErrorCallback>
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2160      	movs	r1, #96	@ 0x60
 8002a64:	438a      	bics	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002a68:	f7fd ffda 	bl	8000a20 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2164      	movs	r1, #100	@ 0x64
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff ff02 	bl	800287c <SPI_EndRxTransaction>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d005      	beq.n	8002a88 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a80:	2220      	movs	r2, #32
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	225d      	movs	r2, #93	@ 0x5d
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fd fdf4 	bl	8000688 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002aa0:	e003      	b.n	8002aaa <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fc3b 	bl	8002320 <HAL_SPI_ErrorCallback>
}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e046      	b.n	8002b54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2288      	movs	r2, #136	@ 0x88
 8002aca:	589b      	ldr	r3, [r3, r2]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2284      	movs	r2, #132	@ 0x84
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd fe6e 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2288      	movs	r2, #136	@ 0x88
 8002ae4:	2124      	movs	r1, #36	@ 0x24
 8002ae6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f9d0 	bl	8002ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f828 	bl	8002b60 <UART_SetConfig>
 8002b10:	0003      	movs	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01c      	b.n	8002b54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	490d      	ldr	r1, [pc, #52]	@ (8002b5c <HAL_UART_Init+0xa8>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	212a      	movs	r1, #42	@ 0x2a
 8002b36:	438a      	bics	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fa5f 	bl	8003010 <UART_CheckIdleState>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffffb7ff 	.word	0xffffb7ff

08002b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b68:	231a      	movs	r3, #26
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4abc      	ldr	r2, [pc, #752]	@ (8002e80 <UART_SetConfig+0x320>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4ab7      	ldr	r2, [pc, #732]	@ (8002e84 <UART_SetConfig+0x324>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4aae      	ldr	r2, [pc, #696]	@ (8002e88 <UART_SetConfig+0x328>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	220f      	movs	r2, #15
 8002be4:	4393      	bics	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4aa4      	ldr	r2, [pc, #656]	@ (8002e8c <UART_SetConfig+0x32c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d127      	bne.n	8002c4e <UART_SetConfig+0xee>
 8002bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8002e90 <UART_SetConfig+0x330>)
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	2203      	movs	r2, #3
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d017      	beq.n	8002c3a <UART_SetConfig+0xda>
 8002c0a:	d81b      	bhi.n	8002c44 <UART_SetConfig+0xe4>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d00a      	beq.n	8002c26 <UART_SetConfig+0xc6>
 8002c10:	d818      	bhi.n	8002c44 <UART_SetConfig+0xe4>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <UART_SetConfig+0xbc>
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00a      	beq.n	8002c30 <UART_SetConfig+0xd0>
 8002c1a:	e013      	b.n	8002c44 <UART_SetConfig+0xe4>
 8002c1c:	231b      	movs	r3, #27
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e058      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c26:	231b      	movs	r3, #27
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e053      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c30:	231b      	movs	r3, #27
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2204      	movs	r2, #4
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e04e      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c3a:	231b      	movs	r3, #27
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2208      	movs	r2, #8
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e049      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c44:	231b      	movs	r3, #27
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2210      	movs	r2, #16
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e044      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a90      	ldr	r2, [pc, #576]	@ (8002e94 <UART_SetConfig+0x334>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d127      	bne.n	8002ca8 <UART_SetConfig+0x148>
 8002c58:	4b8d      	ldr	r3, [pc, #564]	@ (8002e90 <UART_SetConfig+0x330>)
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d017      	beq.n	8002c94 <UART_SetConfig+0x134>
 8002c64:	d81b      	bhi.n	8002c9e <UART_SetConfig+0x13e>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d00a      	beq.n	8002c80 <UART_SetConfig+0x120>
 8002c6a:	d818      	bhi.n	8002c9e <UART_SetConfig+0x13e>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <UART_SetConfig+0x116>
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00a      	beq.n	8002c8a <UART_SetConfig+0x12a>
 8002c74:	e013      	b.n	8002c9e <UART_SetConfig+0x13e>
 8002c76:	231b      	movs	r3, #27
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e02b      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c80:	231b      	movs	r3, #27
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e026      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2204      	movs	r2, #4
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e021      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c94:	231b      	movs	r3, #27
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2208      	movs	r2, #8
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e01c      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002c9e:	231b      	movs	r3, #27
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e017      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7a      	ldr	r2, [pc, #488]	@ (8002e98 <UART_SetConfig+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d104      	bne.n	8002cbc <UART_SetConfig+0x15c>
 8002cb2:	231b      	movs	r3, #27
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e00d      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a76      	ldr	r2, [pc, #472]	@ (8002e9c <UART_SetConfig+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d104      	bne.n	8002cd0 <UART_SetConfig+0x170>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e003      	b.n	8002cd8 <UART_SetConfig+0x178>
 8002cd0:	231b      	movs	r3, #27
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d000      	beq.n	8002ce6 <UART_SetConfig+0x186>
 8002ce4:	e065      	b.n	8002db2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002ce6:	231b      	movs	r3, #27
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d015      	beq.n	8002d1c <UART_SetConfig+0x1bc>
 8002cf0:	dc18      	bgt.n	8002d24 <UART_SetConfig+0x1c4>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00d      	beq.n	8002d12 <UART_SetConfig+0x1b2>
 8002cf6:	dc15      	bgt.n	8002d24 <UART_SetConfig+0x1c4>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x1a2>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x1ac>
 8002d00:	e010      	b.n	8002d24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d02:	f7fe fe8f 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8002d06:	0003      	movs	r3, r0
 8002d08:	617b      	str	r3, [r7, #20]
        break;
 8002d0a:	e012      	b.n	8002d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ea0 <UART_SetConfig+0x340>)
 8002d0e:	617b      	str	r3, [r7, #20]
        break;
 8002d10:	e00f      	b.n	8002d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d12:	f7fe fdfb 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8002d16:	0003      	movs	r3, r0
 8002d18:	617b      	str	r3, [r7, #20]
        break;
 8002d1a:	e00a      	b.n	8002d32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	617b      	str	r3, [r7, #20]
        break;
 8002d22:	e006      	b.n	8002d32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d28:	231a      	movs	r3, #26
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
        break;
 8002d30:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d100      	bne.n	8002d3a <UART_SetConfig+0x1da>
 8002d38:	e08d      	b.n	8002e56 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <UART_SetConfig+0x344>)
 8002d40:	0052      	lsls	r2, r2, #1
 8002d42:	5ad3      	ldrh	r3, [r2, r3]
 8002d44:	0019      	movs	r1, r3
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7fd f9da 	bl	8000100 <__udivsi3>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	005a      	lsls	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	18d2      	adds	r2, r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f7fd f9ce 	bl	8000100 <__udivsi3>
 8002d64:	0003      	movs	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d91c      	bls.n	8002da8 <UART_SetConfig+0x248>
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d217      	bcs.n	8002da8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	200e      	movs	r0, #14
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	210f      	movs	r1, #15
 8002d82:	438a      	bics	r2, r1
 8002d84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b299      	uxth	r1, r3
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	183a      	adds	r2, r7, r0
 8002d96:	8812      	ldrh	r2, [r2, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	183a      	adds	r2, r7, r0
 8002da2:	8812      	ldrh	r2, [r2, #0]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e056      	b.n	8002e56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002da8:	231a      	movs	r3, #26
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e051      	b.n	8002e56 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002db2:	231b      	movs	r3, #27
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d015      	beq.n	8002de8 <UART_SetConfig+0x288>
 8002dbc:	dc18      	bgt.n	8002df0 <UART_SetConfig+0x290>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00d      	beq.n	8002dde <UART_SetConfig+0x27e>
 8002dc2:	dc15      	bgt.n	8002df0 <UART_SetConfig+0x290>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <UART_SetConfig+0x26e>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d005      	beq.n	8002dd8 <UART_SetConfig+0x278>
 8002dcc:	e010      	b.n	8002df0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7fe fe29 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	617b      	str	r3, [r7, #20]
        break;
 8002dd6:	e012      	b.n	8002dfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <UART_SetConfig+0x340>)
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e00f      	b.n	8002dfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dde:	f7fe fd95 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8002de2:	0003      	movs	r3, r0
 8002de4:	617b      	str	r3, [r7, #20]
        break;
 8002de6:	e00a      	b.n	8002dfe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	617b      	str	r3, [r7, #20]
        break;
 8002dee:	e006      	b.n	8002dfe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002df4:	231a      	movs	r3, #26
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
        break;
 8002dfc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d028      	beq.n	8002e56 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e08:	4b26      	ldr	r3, [pc, #152]	@ (8002ea4 <UART_SetConfig+0x344>)
 8002e0a:	0052      	lsls	r2, r2, #1
 8002e0c:	5ad3      	ldrh	r3, [r2, r3]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	6978      	ldr	r0, [r7, #20]
 8002e12:	f7fd f975 	bl	8000100 <__udivsi3>
 8002e16:	0003      	movs	r3, r0
 8002e18:	001a      	movs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	18d2      	adds	r2, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0019      	movs	r1, r3
 8002e28:	0010      	movs	r0, r2
 8002e2a:	f7fd f969 	bl	8000100 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d90a      	bls.n	8002e4e <UART_SetConfig+0x2ee>
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	025b      	lsls	r3, r3, #9
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d205      	bcs.n	8002e4e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	e003      	b.n	8002e56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e4e:	231a      	movs	r3, #26
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	226a      	movs	r2, #106	@ 0x6a
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2268      	movs	r2, #104	@ 0x68
 8002e62:	2101      	movs	r1, #1
 8002e64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e72:	231a      	movs	r3, #26
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b008      	add	sp, #32
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	cfff69f3 	.word	0xcfff69f3
 8002e84:	ffffcfff 	.word	0xffffcfff
 8002e88:	11fff4ff 	.word	0x11fff4ff
 8002e8c:	40013800 	.word	0x40013800
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40004400 	.word	0x40004400
 8002e98:	40004800 	.word	0x40004800
 8002e9c:	40004c00 	.word	0x40004c00
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	08003614 	.word	0x08003614

08002ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fec <UART_AdvFeatureConfig+0x144>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a43      	ldr	r2, [pc, #268]	@ (8002ff0 <UART_AdvFeatureConfig+0x148>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <UART_AdvFeatureConfig+0x14c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a34      	ldr	r2, [pc, #208]	@ (8002ff8 <UART_AdvFeatureConfig+0x150>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <UART_AdvFeatureConfig+0x154>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	2220      	movs	r2, #32
 8002f60:	4013      	ands	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <UART_AdvFeatureConfig+0x158>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003004 <UART_AdvFeatureConfig+0x15c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	035b      	lsls	r3, r3, #13
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10b      	bne.n	8002fc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <UART_AdvFeatureConfig+0x160>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	2280      	movs	r2, #128	@ 0x80
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <UART_AdvFeatureConfig+0x164>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }
}
 8002fe4:	46c0      	nop			@ (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	ffff7fff 	.word	0xffff7fff
 8002ff0:	fffdffff 	.word	0xfffdffff
 8002ff4:	fffeffff 	.word	0xfffeffff
 8002ff8:	fffbffff 	.word	0xfffbffff
 8002ffc:	ffffefff 	.word	0xffffefff
 8003000:	ffffdfff 	.word	0xffffdfff
 8003004:	ffefffff 	.word	0xffefffff
 8003008:	ff9fffff 	.word	0xff9fffff
 800300c:	fff7ffff 	.word	0xfff7ffff

08003010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b092      	sub	sp, #72	@ 0x48
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2290      	movs	r2, #144	@ 0x90
 800301c:	2100      	movs	r1, #0
 800301e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003020:	f7fd fcfe 	bl	8000a20 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2208      	movs	r2, #8
 8003030:	4013      	ands	r3, r2
 8003032:	2b08      	cmp	r3, #8
 8003034:	d12d      	bne.n	8003092 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003038:	2280      	movs	r2, #128	@ 0x80
 800303a:	0391      	lsls	r1, r2, #14
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4a47      	ldr	r2, [pc, #284]	@ (800315c <UART_CheckIdleState+0x14c>)
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	f000 f88e 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d022      	beq.n	8003092 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304c:	f3ef 8310 	mrs	r3, PRIMASK
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003054:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003056:	2301      	movs	r3, #1
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	f383 8810 	msr	PRIMASK, r3
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	438a      	bics	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2288      	movs	r2, #136	@ 0x88
 8003082:	2120      	movs	r1, #32
 8003084:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2284      	movs	r2, #132	@ 0x84
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e060      	b.n	8003154 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2204      	movs	r2, #4
 800309a:	4013      	ands	r3, r2
 800309c:	2b04      	cmp	r3, #4
 800309e:	d146      	bne.n	800312e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	03d1      	lsls	r1, r2, #15
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4a2c      	ldr	r2, [pc, #176]	@ (800315c <UART_CheckIdleState+0x14c>)
 80030aa:	9200      	str	r2, [sp, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f000 f859 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d03b      	beq.n	800312e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4922      	ldr	r1, [pc, #136]	@ (8003160 <UART_CheckIdleState+0x150>)
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80030ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	438a      	bics	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	228c      	movs	r2, #140	@ 0x8c
 800311e:	2120      	movs	r1, #32
 8003120:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2284      	movs	r2, #132	@ 0x84
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e012      	b.n	8003154 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2288      	movs	r2, #136	@ 0x88
 8003132:	2120      	movs	r1, #32
 8003134:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	228c      	movs	r2, #140	@ 0x8c
 800313a:	2120      	movs	r1, #32
 800313c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2284      	movs	r2, #132	@ 0x84
 800314e:	2100      	movs	r1, #0
 8003150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b010      	add	sp, #64	@ 0x40
 800315a:	bd80      	pop	{r7, pc}
 800315c:	01ffffff 	.word	0x01ffffff
 8003160:	fffffedf 	.word	0xfffffedf

08003164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	e051      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3301      	adds	r3, #1
 800317a:	d04e      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fd fc50 	bl	8000a20 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <UART_WaitOnFlagUntilTimeout+0x2e>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e051      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	d03b      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	d038      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d035      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2208      	movs	r2, #8
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d111      	bne.n	80031e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 f83c 	bl	8003244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2290      	movs	r2, #144	@ 0x90
 80031d0:	2108      	movs	r1, #8
 80031d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2284      	movs	r2, #132	@ 0x84
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02c      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	401a      	ands	r2, r3
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d112      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 f81f 	bl	8003244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2290      	movs	r2, #144	@ 0x90
 800320a:	2120      	movs	r1, #32
 800320c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2284      	movs	r2, #132	@ 0x84
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e00f      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	425a      	negs	r2, r3
 800322a:	4153      	adcs	r3, r2
 800322c:	b2db      	uxtb	r3, r3
 800322e:	001a      	movs	r2, r3
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d09e      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b004      	add	sp, #16
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	@ 0x38
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	617b      	str	r3, [r7, #20]
  return(result);
 8003252:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4926      	ldr	r1, [pc, #152]	@ (8003308 <UART_EndRxTransfer+0xc4>)
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327e:	f3ef 8310 	mrs	r3, PRIMASK
 8003282:	623b      	str	r3, [r7, #32]
  return(result);
 8003284:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	491b      	ldr	r1, [pc, #108]	@ (800330c <UART_EndRxTransfer+0xc8>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	f383 8810 	msr	PRIMASK, r3
}
 80032ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d118      	bne.n	80032ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80032be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c2:	2301      	movs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2110      	movs	r1, #16
 80032da:	438a      	bics	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	228c      	movs	r2, #140	@ 0x8c
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b00e      	add	sp, #56	@ 0x38
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	fffffedf 	.word	0xfffffedf
 800330c:	effffffe 	.word	0xeffffffe

08003310 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2284      	movs	r2, #132	@ 0x84
 800331c:	5c9b      	ldrb	r3, [r3, r2]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_UARTEx_DisableFifoMode+0x16>
 8003322:	2302      	movs	r3, #2
 8003324:	e027      	b.n	8003376 <HAL_UARTEx_DisableFifoMode+0x66>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2284      	movs	r2, #132	@ 0x84
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2288      	movs	r2, #136	@ 0x88
 8003332:	2124      	movs	r1, #36	@ 0x24
 8003334:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	438a      	bics	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2288      	movs	r2, #136	@ 0x88
 8003368:	2120      	movs	r1, #32
 800336a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2284      	movs	r2, #132	@ 0x84
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	dfffffff 	.word	0xdfffffff

08003384 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	@ 0x84
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003398:	2302      	movs	r3, #2
 800339a:	e02e      	b.n	80033fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2284      	movs	r2, #132	@ 0x84
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2288      	movs	r2, #136	@ 0x88
 80033a8:	2124      	movs	r1, #36	@ 0x24
 80033aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	08d9      	lsrs	r1, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 f854 	bl	8003488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2288      	movs	r2, #136	@ 0x88
 80033ec:	2120      	movs	r1, #32
 80033ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2284      	movs	r2, #132	@ 0x84
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b004      	add	sp, #16
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2284      	movs	r2, #132	@ 0x84
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e02f      	b.n	800347c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2284      	movs	r2, #132	@ 0x84
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2288      	movs	r2, #136	@ 0x88
 8003428:	2124      	movs	r1, #36	@ 0x24
 800342a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	438a      	bics	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f000 f813 	bl	8003488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2288      	movs	r2, #136	@ 0x88
 800346e:	2120      	movs	r1, #32
 8003470:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2284      	movs	r2, #132	@ 0x84
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}
 8003484:	f1ffffff 	.word	0xf1ffffff

08003488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	226a      	movs	r2, #106	@ 0x6a
 800349c:	2101      	movs	r1, #1
 800349e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2268      	movs	r2, #104	@ 0x68
 80034a4:	2101      	movs	r1, #1
 80034a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034a8:	e043      	b.n	8003532 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034aa:	260f      	movs	r6, #15
 80034ac:	19bb      	adds	r3, r7, r6
 80034ae:	2208      	movs	r2, #8
 80034b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034b2:	200e      	movs	r0, #14
 80034b4:	183b      	adds	r3, r7, r0
 80034b6:	2208      	movs	r2, #8
 80034b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	0e5b      	lsrs	r3, r3, #25
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	240d      	movs	r4, #13
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	2107      	movs	r1, #7
 80034ca:	400a      	ands	r2, r1
 80034cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	0f5b      	lsrs	r3, r3, #29
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	250c      	movs	r5, #12
 80034da:	197b      	adds	r3, r7, r5
 80034dc:	2107      	movs	r1, #7
 80034de:	400a      	ands	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034e2:	183b      	adds	r3, r7, r0
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	197a      	adds	r2, r7, r5
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	4914      	ldr	r1, [pc, #80]	@ (800353c <UARTEx_SetNbDataToProcess+0xb4>)
 80034ec:	5c8a      	ldrb	r2, [r1, r2]
 80034ee:	435a      	muls	r2, r3
 80034f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80034f2:	197b      	adds	r3, r7, r5
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <UARTEx_SetNbDataToProcess+0xb8>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034fa:	0019      	movs	r1, r3
 80034fc:	f7fc fe8a 	bl	8000214 <__divsi3>
 8003500:	0003      	movs	r3, r0
 8003502:	b299      	uxth	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	226a      	movs	r2, #106	@ 0x6a
 8003508:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800350a:	19bb      	adds	r3, r7, r6
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	193a      	adds	r2, r7, r4
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	490a      	ldr	r1, [pc, #40]	@ (800353c <UARTEx_SetNbDataToProcess+0xb4>)
 8003514:	5c8a      	ldrb	r2, [r1, r2]
 8003516:	435a      	muls	r2, r3
 8003518:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800351a:	193b      	adds	r3, r7, r4
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4a08      	ldr	r2, [pc, #32]	@ (8003540 <UARTEx_SetNbDataToProcess+0xb8>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003522:	0019      	movs	r1, r3
 8003524:	f7fc fe76 	bl	8000214 <__divsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	b299      	uxth	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2268      	movs	r2, #104	@ 0x68
 8003530:	5299      	strh	r1, [r3, r2]
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b005      	add	sp, #20
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	0800362c 	.word	0x0800362c
 8003540:	08003634 	.word	0x08003634

08003544 <memset>:
 8003544:	0003      	movs	r3, r0
 8003546:	1882      	adds	r2, r0, r2
 8003548:	4293      	cmp	r3, r2
 800354a:	d100      	bne.n	800354e <memset+0xa>
 800354c:	4770      	bx	lr
 800354e:	7019      	strb	r1, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	e7f9      	b.n	8003548 <memset+0x4>

08003554 <__libc_init_array>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	2600      	movs	r6, #0
 8003558:	4c0c      	ldr	r4, [pc, #48]	@ (800358c <__libc_init_array+0x38>)
 800355a:	4d0d      	ldr	r5, [pc, #52]	@ (8003590 <__libc_init_array+0x3c>)
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	42a6      	cmp	r6, r4
 8003562:	d109      	bne.n	8003578 <__libc_init_array+0x24>
 8003564:	2600      	movs	r6, #0
 8003566:	f000 f819 	bl	800359c <_init>
 800356a:	4c0a      	ldr	r4, [pc, #40]	@ (8003594 <__libc_init_array+0x40>)
 800356c:	4d0a      	ldr	r5, [pc, #40]	@ (8003598 <__libc_init_array+0x44>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	42a6      	cmp	r6, r4
 8003574:	d105      	bne.n	8003582 <__libc_init_array+0x2e>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	00b3      	lsls	r3, r6, #2
 800357a:	58eb      	ldr	r3, [r5, r3]
 800357c:	4798      	blx	r3
 800357e:	3601      	adds	r6, #1
 8003580:	e7ee      	b.n	8003560 <__libc_init_array+0xc>
 8003582:	00b3      	lsls	r3, r6, #2
 8003584:	58eb      	ldr	r3, [r5, r3]
 8003586:	4798      	blx	r3
 8003588:	3601      	adds	r6, #1
 800358a:	e7f2      	b.n	8003572 <__libc_init_array+0x1e>
 800358c:	0800363c 	.word	0x0800363c
 8003590:	0800363c 	.word	0x0800363c
 8003594:	08003640 	.word	0x08003640
 8003598:	0800363c 	.word	0x0800363c

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
