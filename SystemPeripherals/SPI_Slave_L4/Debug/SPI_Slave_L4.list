
SPI_Slave_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c64  08003c64  00004c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb4  08003cb4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00004cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003cc8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003cc8  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb0b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c93  00000000  00000000  00011b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  000137e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000885  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002136c  00000000  00000000  00014b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4b7  00000000  00000000  00035ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbfe  00000000  00000000  00043390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ef8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  0010efd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00111cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c4c 	.word	0x08003c4c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003c4c 	.word	0x08003c4c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa7e 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f89c 	bl	8000610 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004d8:	f000 f860 	bl	800059c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	4904      	ldr	r1, [pc, #16]	@ (80004f0 <main+0x2c>)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <main+0x30>)
 80004e2:	f002 f893 	bl	800260c <HAL_SPI_Receive_IT>
  HAL_Delay(100);
 80004e6:	2064      	movs	r0, #100	@ 0x64
 80004e8:	f000 faea 	bl	8000ac0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <main+0x28>
 80004f0:	20000114 	.word	0x20000114
 80004f4:	20000028 	.word	0x20000028

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	@ 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	@ 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fb73 	bl	8003bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800051e:	f000 fde5 	bl	80010ec <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f908 	bl	800073c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000536:	2340      	movs	r3, #64	@ 0x40
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fe1c 	bl	8001198 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 f8e9 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fa1c 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8d5 	bl	800073c <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	@ 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005a2:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <MX_SPI1_Init+0x70>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005e2:	2207      	movs	r2, #7
 80005e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_SPI1_Init+0x6c>)
 80005f4:	f001 ff66 	bl	80024c4 <HAL_SPI_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80005fe:	f000 f89d 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028
 800060c:	40013000 	.word	0x40013000

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000616:	4a15      	ldr	r2, [pc, #84]	@ (800066c <MX_USART2_UART_Init+0x5c>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_USART2_UART_Init+0x58>)
 8000654:	f002 fde4 	bl	8003220 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800065e:	f000 f86d 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000008c 	.word	0x2000008c
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <MX_GPIO_Init+0xc4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <MX_GPIO_Init+0xc4>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <MX_GPIO_Init+0xc4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a24      	ldr	r2, [pc, #144]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ee:	f000 fcd7 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <MX_GPIO_Init+0xc8>)
 800070a:	f000 fb4f 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800070e:	2320      	movs	r3, #32
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f000 fb40 	bl	8000dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	48000800 	.word	0x48000800

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_MspInit+0x44>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <HAL_MspInit+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6613      	str	r3, [r2, #96]	@ 0x60
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_MspInit+0x44>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x44>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6593      	str	r3, [r2, #88]	@ 0x58
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x44>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <HAL_SPI_MspInit+0x8c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d130      	bne.n	8000814 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_SPI_MspInit+0x90>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80007e2:	23c2      	movs	r3, #194	@ 0xc2
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007f2:	2305      	movs	r3, #5
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 fad4 	bl	8000dac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2023      	movs	r0, #35	@ 0x23
 800080a:	f000 fa58 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800080e:	2023      	movs	r0, #35	@ 0x23
 8000810:	f000 fa71 	bl	8000cf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40013000 	.word	0x40013000
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0a4      	sub	sp, #144	@ 0x90
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2268      	movs	r2, #104	@ 0x68
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f9d4 	bl	8003bf2 <memset>
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a21      	ldr	r2, [pc, #132]	@ (80008d4 <HAL_UART_MspInit+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d13a      	bne.n	80008ca <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fad1 	bl	8001e08 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ff66 	bl	800073c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087a:	6593      	str	r3, [r2, #88]	@ 0x58
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088c:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_UART_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b6:	2307      	movs	r3, #7
 80008b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c6:	f000 fa71 	bl	8000dac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ca:	bf00      	nop
 80008cc:	3790      	adds	r7, #144	@ 0x90
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f8a5 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <SPI1_IRQHandler+0x10>)
 8000942:	f001 ffbf 	bl	80028c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000028 	.word	0x20000028

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	@ (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	@ (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f003 f92f 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fd8d 	bl	80004c4 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	2000011c 	.word	0x2000011c

080009c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_Init+0x3c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <HAL_Init+0x3c>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009de:	2003      	movs	r0, #3
 80009e0:	f000 f962 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f80f 	bl	8000a08 <HAL_InitTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f6:	f7ff fea7 	bl	8000748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f96d 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f937 	bl	8000cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000118 	.word	0x20000118

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000118 	.word	0x20000118

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	@ (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff29 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff3e 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff31 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa2 	bl	8000c64 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d005      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2204      	movs	r2, #4
 8000d46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e029      	b.n	8000da2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020e 	bic.w	r2, r2, #14
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f003 021c 	and.w	r2, r3, #28
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	4798      	blx	r3
    }
  }
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dba:	e154      	b.n	8001066 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8146 	beq.w	8001060 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x40>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d017      	beq.n	8000e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	6939      	ldr	r1, [r7, #16]
 8000eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0203 	and.w	r2, r3, #3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80a0 	beq.w	8001060 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f24:	4a57      	ldr	r2, [pc, #348]	@ (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2c:	4b55      	ldr	r3, [pc, #340]	@ (8001084 <HAL_GPIO_Init+0x2d8>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f38:	4a53      	ldr	r2, [pc, #332]	@ (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f62:	d019      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a49      	ldr	r2, [pc, #292]	@ (800108c <HAL_GPIO_Init+0x2e0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d013      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a48      	ldr	r2, [pc, #288]	@ (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a47      	ldr	r2, [pc, #284]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a46      	ldr	r2, [pc, #280]	@ (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1dc>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e008      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f88:	2307      	movs	r3, #7
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000faa:	4937      	ldr	r1, [pc, #220]	@ (8001088 <HAL_GPIO_Init+0x2dc>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001006:	4a25      	ldr	r2, [pc, #148]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001030:	4a1a      	ldr	r2, [pc, #104]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105a:	4a10      	ldr	r2, [pc, #64]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aea3 	bne.w	8000dbc <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40007000 	.word	0x40007000

080010ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010fa:	d130      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	4b23      	ldr	r3, [pc, #140]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001108:	d038      	beq.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	e002      	b.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b01      	subs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001144:	d102      	bne.n	800114c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f2      	bne.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001158:	d110      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e00f      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116a:	d007      	beq.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001174:	4a05      	ldr	r2, [pc, #20]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40007000 	.word	0x40007000
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83

08001198 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f000 bc02 	b.w	80019b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ac:	4b96      	ldr	r3, [pc, #600]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b6:	4b94      	ldr	r3, [pc, #592]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80e4 	beq.w	8001396 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <HAL_RCC_OscConfig+0x4c>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	f040 808b 	bne.w	80012f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	f040 8087 	bne.w	80012f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e4:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_OscConfig+0x64>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e3d9      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	4b81      	ldr	r3, [pc, #516]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <HAL_RCC_OscConfig+0x7e>
 800120c:	4b7e      	ldr	r3, [pc, #504]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001214:	e005      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
 8001216:	4b7c      	ldr	r3, [pc, #496]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001222:	4293      	cmp	r3, r2
 8001224:	d223      	bcs.n	800126e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd8c 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e3ba      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123a:	4b73      	ldr	r3, [pc, #460]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a72      	ldr	r2, [pc, #456]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b70      	ldr	r3, [pc, #448]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	496d      	ldr	r1, [pc, #436]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	4b6b      	ldr	r3, [pc, #428]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4968      	ldr	r1, [pc, #416]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e025      	b.n	80012ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126e:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a65      	ldr	r2, [pc, #404]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4960      	ldr	r1, [pc, #384]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128c:	4b5e      	ldr	r3, [pc, #376]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	495b      	ldr	r1, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fd4c 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e37a      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ba:	f000 fc81 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4950      	ldr	r1, [pc, #320]	@ (800140c <HAL_RCC_OscConfig+0x274>)
 80012cc:	5ccb      	ldrb	r3, [r1, r3]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001410 <HAL_RCC_OscConfig+0x278>)
 80012d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012da:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fb92 	bl	8000a08 <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d052      	beq.n	8001394 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	e35e      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d032      	beq.n	8001360 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012fa:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a42      	ldr	r2, [pc, #264]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001306:	f7ff fbcf 	bl	8000aa8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130e:	f7ff fbcb 	bl	8000aa8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e347      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001320:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132c:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a35      	ldr	r2, [pc, #212]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b33      	ldr	r3, [pc, #204]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4930      	ldr	r1, [pc, #192]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	492b      	ldr	r1, [pc, #172]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e01a      	b.n	8001396 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001360:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a28      	ldr	r2, [pc, #160]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb9c 	bl	8000aa8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001374:	f7ff fb98 	bl	8000aa8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e314      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1dc>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d073      	beq.n	800148a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x21c>
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d10e      	bne.n	80013cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d10b      	bne.n	80013cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d063      	beq.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d15f      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e2f1      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d4:	d106      	bne.n	80013e4 <HAL_RCC_OscConfig+0x24c>
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e025      	b.n	8001430 <HAL_RCC_OscConfig+0x298>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ec:	d114      	bne.n	8001418 <HAL_RCC_OscConfig+0x280>
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a02      	ldr	r2, [pc, #8]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e013      	b.n	8001430 <HAL_RCC_OscConfig+0x298>
 8001408:	40021000 	.word	0x40021000
 800140c:	08003c64 	.word	0x08003c64
 8001410:	20000000 	.word	0x20000000
 8001414:	20000004 	.word	0x20000004
 8001418:	4ba0      	ldr	r3, [pc, #640]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a9f      	ldr	r2, [pc, #636]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b9d      	ldr	r3, [pc, #628]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a9c      	ldr	r2, [pc, #624]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fb36 	bl	8000aa8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fb32 	bl	8000aa8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e2ae      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	4b92      	ldr	r3, [pc, #584]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x2a8>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fb22 	bl	8000aa8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fb1e 	bl	8000aa8 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e29a      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	4b88      	ldr	r3, [pc, #544]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d0>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d060      	beq.n	8001558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_OscConfig+0x310>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d119      	bne.n	80014d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d116      	bne.n	80014d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a8:	4b7c      	ldr	r3, [pc, #496]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x328>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e277      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b76      	ldr	r3, [pc, #472]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	4973      	ldr	r1, [pc, #460]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	e040      	b.n	8001558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d023      	beq.n	8001526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014de:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6e      	ldr	r2, [pc, #440]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fadd 	bl	8000aa8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fad9 	bl	8000aa8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e255      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001504:	4b65      	ldr	r3, [pc, #404]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b62      	ldr	r3, [pc, #392]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	061b      	lsls	r3, r3, #24
 800151e:	495f      	ldr	r1, [pc, #380]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
 8001524:	e018      	b.n	8001558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5c      	ldr	r2, [pc, #368]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fab9 	bl	8000aa8 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fab5 	bl	8000aa8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e231      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800154c:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03c      	beq.n	80015de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001572:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fa94 	bl	8000aa8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fa90 	bl	8000aa8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e20c      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ef      	beq.n	8001584 <HAL_RCC_OscConfig+0x3ec>
 80015a4:	e01b      	b.n	80015de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ac:	4a3b      	ldr	r2, [pc, #236]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa77 	bl	8000aa8 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa73 	bl	8000aa8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1ef      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80a6 	beq.w	8001738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	4b27      	ldr	r3, [pc, #156]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	4a26      	ldr	r2, [pc, #152]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001606:	6593      	str	r3, [r2, #88]	@ 0x58
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d118      	bne.n	8001656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001630:	f7ff fa3a 	bl	8000aa8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff fa36 	bl	8000aa8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1b2      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_RCC_OscConfig+0x4d8>
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166e:	e029      	b.n	80016c4 <HAL_RCC_OscConfig+0x52c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d115      	bne.n	80016a4 <HAL_RCC_OscConfig+0x50c>
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a03      	ldr	r2, [pc, #12]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x52c>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	40007000 	.word	0x40007000
 80016a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016aa:	4a99      	ldr	r2, [pc, #612]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b4:	4b96      	ldr	r3, [pc, #600]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	4a95      	ldr	r2, [pc, #596]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d016      	beq.n	80016fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff f9ec 	bl	8000aa8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff f9e8 	bl	8000aa8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e162      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ed      	beq.n	80016d4 <HAL_RCC_OscConfig+0x53c>
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff f9d5 	bl	8000aa8 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff f9d1 	bl	8000aa8 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e14b      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001718:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ed      	bne.n	8001702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b78      	ldr	r3, [pc, #480]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	4a77      	ldr	r2, [pc, #476]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001736:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03c      	beq.n	80017be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800174c:	4b70      	ldr	r3, [pc, #448]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800174e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001752:	4a6f      	ldr	r2, [pc, #444]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f9a4 	bl	8000aa8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001764:	f7ff f9a0 	bl	8000aa8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e11c      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001776:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x5cc>
 8001784:	e01b      	b.n	80017be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001786:	4b62      	ldr	r3, [pc, #392]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178c:	4a60      	ldr	r2, [pc, #384]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f987 	bl	8000aa8 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179e:	f7ff f983 	bl	8000aa8 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0ff      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b0:	4b57      	ldr	r3, [pc, #348]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80017b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80f3 	beq.w	80019ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	f040 80c9 	bne.w	8001964 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0203 	and.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d12c      	bne.n	8001840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	3b01      	subs	r3, #1
 80017f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d123      	bne.n	8001840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d11b      	bne.n	8001840 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001812:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d113      	bne.n	8001840 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d109      	bne.n	8001840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	3b01      	subs	r3, #1
 800183a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d06b      	beq.n	8001918 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b0c      	cmp	r3, #12
 8001844:	d062      	beq.n	800190c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0ac      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800185c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001860:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001862:	f7ff f921 	bl	8000aa8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f91d 	bl	8000aa8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e099      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_RCC_OscConfig+0x77c>)
 800188e:	4013      	ands	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001898:	3a01      	subs	r2, #1
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018a2:	0212      	lsls	r2, r2, #8
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	0552      	lsls	r2, r2, #21
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018b6:	0852      	lsrs	r2, r2, #1
 80018b8:	3a01      	subs	r2, #1
 80018ba:	0652      	lsls	r2, r2, #25
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018c2:	06d2      	lsls	r2, r2, #27
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4912      	ldr	r1, [pc, #72]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018cc:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff f8e0 	bl	8000aa8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f8dc 	bl	8000aa8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e058      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <HAL_RCC_OscConfig+0x778>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190a:	e050      	b.n	80019ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e04f      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
 8001910:	40021000 	.word	0x40021000
 8001914:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d144      	bne.n	80019ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800193c:	f7ff f8b4 	bl	8000aa8 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f8b0 	bl	8000aa8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e02c      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x7ac>
 8001962:	e024      	b.n	80019ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d01f      	beq.n	80019aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff f897 	bl	8000aa8 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f893 	bl	8000aa8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e00f      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4905      	ldr	r1, [pc, #20]	@ (80019b8 <HAL_RCC_OscConfig+0x820>)
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_RCC_OscConfig+0x824>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e001      	b.n	80019ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	feeefffc 	.word	0xfeeefffc

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0e7      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b75      	ldr	r3, [pc, #468]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d910      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b72      	ldr	r3, [pc, #456]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4970      	ldr	r1, [pc, #448]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b6e      	ldr	r3, [pc, #440]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cf      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d908      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b63      	ldr	r3, [pc, #396]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4960      	ldr	r1, [pc, #384]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d04c      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0a6      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5e:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e09a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e08e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e086      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b46      	ldr	r3, [pc, #280]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4943      	ldr	r1, [pc, #268]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa8:	f7fe fffe 	bl	8000aa8 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7fe fffa 	bl	8000aa8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e06e      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d208      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	492b      	ldr	r1, [pc, #172]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b06:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d210      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b14:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	4923      	ldr	r1, [pc, #140]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4918      	ldr	r1, [pc, #96]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4910      	ldr	r1, [pc, #64]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b74:	f000 f824 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	490b      	ldr	r1, [pc, #44]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_ClockConfig+0x1fc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe ff35 	bl	8000a08 <HAL_InitTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08003c64 	.word	0x08003c64
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08003c7c 	.word	0x08003c7c
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	@ (8001d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08003c74 	.word	0x08003c74

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d20:	f7ff ffda 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4904      	ldr	r1, [pc, #16]	@ (8001d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08003c74 	.word	0x08003c74

08001d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d60:	f7ff f9b6 	bl	80010d0 <HAL_PWREx_GetVoltageRange>
 8001d64:	6178      	str	r0, [r7, #20]
 8001d66:	e014      	b.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	4a24      	ldr	r2, [pc, #144]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d74:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d80:	f7ff f9a6 	bl	80010d0 <HAL_PWREx_GetVoltageRange>
 8001d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d98:	d10b      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	@ 0x80
 8001d9e:	d919      	bls.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001da4:	d902      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e013      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e010      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b80      	cmp	r3, #128	@ 0x80
 8001db6:	d902      	bls.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db8:	2303      	movs	r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e00a      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	@ 0x80
 8001dc2:	d102      	bne.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e004      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b70      	cmp	r3, #112	@ 0x70
 8001dce:	d101      	bne.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e10:	2300      	movs	r3, #0
 8001e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e14:	2300      	movs	r3, #0
 8001e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d031      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e2c:	d01a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e32:	d814      	bhi.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e4a:	e00c      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa44 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e5c:	e003      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	74fb      	strb	r3, [r7, #19]
      break;
 8001e62:	e000      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e6c:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	494e      	ldr	r1, [pc, #312]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e82:	e001      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 809e 	beq.w	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e9a:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a39      	ldr	r2, [pc, #228]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fde6 	bl	8000aa8 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7fe fde2 	bl	8000aa8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d902      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ef2:	e005      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef4:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d15a      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f06:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01e      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d019      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f22:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f34:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe fda2 	bl	8000aa8 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	e00b      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe fd9e 	bl	8000aa8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d902      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	74fb      	strb	r3, [r7, #19]
            break;
 8001f7e:	e006      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ec      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f94:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fa2:	4904      	ldr	r1, [pc, #16]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001faa:	e009      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	74bb      	strb	r3, [r7, #18]
 8001fb0:	e006      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc0:	7c7b      	ldrb	r3, [r7, #17]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	4a9d      	ldr	r2, [pc, #628]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fde:	4b98      	ldr	r3, [pc, #608]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe4:	f023 0203 	bic.w	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4994      	ldr	r1, [pc, #592]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002000:	4b8f      	ldr	r3, [pc, #572]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f023 020c 	bic.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	498c      	ldr	r1, [pc, #560]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002022:	4b87      	ldr	r3, [pc, #540]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002028:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	4983      	ldr	r1, [pc, #524]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002044:	4b7e      	ldr	r3, [pc, #504]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002052:	497b      	ldr	r1, [pc, #492]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002066:	4b76      	ldr	r3, [pc, #472]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4972      	ldr	r1, [pc, #456]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002088:	4b6d      	ldr	r3, [pc, #436]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	496a      	ldr	r1, [pc, #424]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020aa:	4b65      	ldr	r3, [pc, #404]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b8:	4961      	ldr	r1, [pc, #388]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	4959      	ldr	r1, [pc, #356]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ee:	4b54      	ldr	r3, [pc, #336]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	4950      	ldr	r1, [pc, #320]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211e:	4948      	ldr	r1, [pc, #288]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002132:	4b43      	ldr	r3, [pc, #268]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002134:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	493f      	ldr	r1, [pc, #252]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d028      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002154:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	4937      	ldr	r1, [pc, #220]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002172:	d106      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002174:	4b32      	ldr	r3, [pc, #200]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800217a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800217e:	60d3      	str	r3, [r2, #12]
 8002180:	e011      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800218a:	d10c      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f8a4 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d028      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b2:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	491f      	ldr	r1, [pc, #124]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021d0:	d106      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021dc:	60d3      	str	r3, [r2, #12]
 80021de:	e011      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f875 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 80021f6:	4603      	mov	r3, r0
 80021f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02b      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222e:	d109      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a02      	ldr	r2, [pc, #8]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
 800223c:	e014      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f843 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01c      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002282:	4916      	ldr	r1, [pc, #88]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002292:	d10c      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f820 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	4904      	ldr	r1, [pc, #16]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022ee:	4b74      	ldr	r3, [pc, #464]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d018      	beq.n	800232c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022fa:	4b71      	ldr	r3, [pc, #452]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0203 	and.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d10d      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
       ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002312:	4b6b      	ldr	r3, [pc, #428]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
       ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d047      	beq.n	80023b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e044      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d018      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x86>
 8002334:	2b03      	cmp	r3, #3
 8002336:	d825      	bhi.n	8002384 <RCCEx_PLLSAI1_Config+0xa4>
 8002338:	2b01      	cmp	r3, #1
 800233a:	d002      	beq.n	8002342 <RCCEx_PLLSAI1_Config+0x62>
 800233c:	2b02      	cmp	r3, #2
 800233e:	d009      	beq.n	8002354 <RCCEx_PLLSAI1_Config+0x74>
 8002340:	e020      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002342:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11d      	bne.n	800238a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002352:	e01a      	b.n	800238a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002354:	4b5a      	ldr	r3, [pc, #360]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d116      	bne.n	800238e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e013      	b.n	800238e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002366:	4b56      	ldr	r3, [pc, #344]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002372:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002382:	e006      	b.n	8002392 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e004      	b.n	8002394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800238a:	bf00      	nop
 800238c:	e002      	b.n	8002394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800238e:	bf00      	nop
 8002390:	e000      	b.n	8002394 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002392:	bf00      	nop
    }

    if(status == HAL_OK)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	430b      	orrs	r3, r1
 80023b0:	4943      	ldr	r1, [pc, #268]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d17c      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023bc:	4b40      	ldr	r3, [pc, #256]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3f      	ldr	r2, [pc, #252]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7fe fb6e 	bl	8000aa8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ce:	e009      	b.n	80023e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d0:	f7fe fb6a 	bl	8000aa8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	73fb      	strb	r3, [r7, #15]
        break;
 80023e2:	e005      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023e4:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ef      	bne.n	80023d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d15f      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d110      	bne.n	800241e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023fc:	4b30      	ldr	r3, [pc, #192]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002404:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6892      	ldr	r2, [r2, #8]
 800240c:	0211      	lsls	r1, r2, #8
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	06d2      	lsls	r2, r2, #27
 8002414:	430a      	orrs	r2, r1
 8002416:	492a      	ldr	r1, [pc, #168]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	610b      	str	r3, [r1, #16]
 800241c:	e027      	b.n	800246e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d112      	bne.n	800244a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002424:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800242c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	0211      	lsls	r1, r2, #8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6912      	ldr	r2, [r2, #16]
 800243a:	0852      	lsrs	r2, r2, #1
 800243c:	3a01      	subs	r2, #1
 800243e:	0552      	lsls	r2, r2, #21
 8002440:	430a      	orrs	r2, r1
 8002442:	491f      	ldr	r1, [pc, #124]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	610b      	str	r3, [r1, #16]
 8002448:	e011      	b.n	800246e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002452:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	0211      	lsls	r1, r2, #8
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6952      	ldr	r2, [r2, #20]
 8002460:	0852      	lsrs	r2, r2, #1
 8002462:	3a01      	subs	r2, #1
 8002464:	0652      	lsls	r2, r2, #25
 8002466:	430a      	orrs	r2, r1
 8002468:	4915      	ldr	r1, [pc, #84]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800246e:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a13      	ldr	r2, [pc, #76]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002478:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe fb15 	bl	8000aa8 <HAL_GetTick>
 800247e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002480:	e009      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002482:	f7fe fb11 	bl	8000aa8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d902      	bls.n	8002496 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	73fb      	strb	r3, [r7, #15]
          break;
 8002494:	e005      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ef      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4903      	ldr	r1, [pc, #12]	@ (80024c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e095      	b.n	8002602 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024e6:	d009      	beq.n	80024fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
 80024ee:	e005      	b.n	80024fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe f93a 	bl	8000790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002532:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800253c:	d902      	bls.n	8002544 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e002      	b.n	800254a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002548:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002552:	d007      	beq.n	8002564 <HAL_SPI_Init+0xa0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800255c:	d002      	beq.n	8002564 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	ea42 0103 	orr.w	r1, r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 0204 	and.w	r2, r3, #4
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80025e0:	ea42 0103 	orr.w	r1, r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d002      	beq.n	8002630 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800262e:	e092      	b.n	8002756 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d110      	bne.n	800265a <HAL_SPI_Receive_IT+0x4e>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002640:	d10b      	bne.n	800265a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2204      	movs	r2, #4
 8002646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f889 	bl	8002768 <HAL_SPI_TransmitReceive_IT>
 8002656:	4603      	mov	r3, r0
 8002658:	e07e      	b.n	8002758 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_SPI_Receive_IT+0x5a>
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800266a:	e074      	b.n	8002756 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_SPI_Receive_IT+0x6e>
 8002676:	2302      	movs	r3, #2
 8002678:	e06e      	b.n	8002758 <HAL_SPI_Receive_IT+0x14c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2204      	movs	r2, #4
 8002686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026c6:	d90b      	bls.n	80026e0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026d6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a21      	ldr	r2, [pc, #132]	@ (8002760 <HAL_SPI_Receive_IT+0x154>)
 80026dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80026de:	e00a      	b.n	80026f6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026ee:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002764 <HAL_SPI_Receive_IT+0x158>)
 80026f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fe:	d10f      	bne.n	8002720 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800270e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800271e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	d007      	beq.n	800273e <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002754:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08002d79 	.word	0x08002d79
 8002764:	08002d29 	.word	0x08002d29

08002768 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002780:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002788:	7dbb      	ldrb	r3, [r7, #22]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d00d      	beq.n	80027aa <HAL_SPI_TransmitReceive_IT+0x42>
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002794:	d106      	bne.n	80027a4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_SPI_TransmitReceive_IT+0x3c>
 800279e:	7dbb      	ldrb	r3, [r7, #22]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027a8:	e07d      	b.n	80028a6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_SPI_TransmitReceive_IT+0x54>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_SPI_TransmitReceive_IT+0x54>
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027c0:	e071      	b.n	80028a6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_SPI_TransmitReceive_IT+0x68>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e06b      	b.n	80028a8 <HAL_SPI_TransmitReceive_IT+0x140>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d003      	beq.n	80027ec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2205      	movs	r2, #5
 80027e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002822:	d906      	bls.n	8002832 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a23      	ldr	r2, [pc, #140]	@ (80028b4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002828:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <HAL_SPI_TransmitReceive_IT+0x150>)
 800282e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002830:	e005      	b.n	800283e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <HAL_SPI_TransmitReceive_IT+0x154>)
 8002836:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a21      	ldr	r2, [pc, #132]	@ (80028c0 <HAL_SPI_TransmitReceive_IT+0x158>)
 800283c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002846:	d802      	bhi.n	800284e <HAL_SPI_TransmitReceive_IT+0xe6>
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d908      	bls.n	8002860 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e007      	b.n	8002870 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800286e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d007      	beq.n	800288e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80028a4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	08002c63 	.word	0x08002c63
 80028b8:	08002cc9 	.word	0x08002cc9
 80028bc:	08002b13 	.word	0x08002b13
 80028c0:	08002bd1 	.word	0x08002bd1

080028c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10e      	bne.n	8002904 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
    return;
 8002902:	e0ce      	b.n	8002aa2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_SPI_IRQHandler+0x5e>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    return;
 8002920:	e0bf      	b.n	8002aa2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_SPI_IRQHandler+0x7e>
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80b0 	beq.w	8002aa2 <HAL_SPI_IRQHandler+0x1de>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80aa 	beq.w	8002aa2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d011      	beq.n	8002988 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	e00b      	b.n	80029a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
        return;
 800299e:	e080      	b.n	8002aa2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d014      	beq.n	80029d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	f043 0208 	orr.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d04f      	beq.n	8002aa0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <HAL_SPI_IRQHandler+0x168>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d034      	beq.n	8002a96 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0203 	bic.w	r2, r2, #3
 8002a3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d011      	beq.n	8002a68 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <HAL_SPI_IRQHandler+0x1e4>)
 8002a4a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe f96a 	bl	8000d2a <HAL_DMA_Abort_IT>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d016      	beq.n	8002a9e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <HAL_SPI_IRQHandler+0x1e4>)
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe f954 	bl	8000d2a <HAL_DMA_Abort_IT>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002a94:	e003      	b.n	8002a9e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f81c 	bl	8002ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a9c:	e000      	b.n	8002aa0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a9e:	bf00      	nop
    return;
 8002aa0:	bf00      	nop
  }
}
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	08002ae9 	.word	0x08002ae9

08002aac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff ffe5 	bl	8002ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d923      	bls.n	8002b6e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	b292      	uxth	r2, r2
 8002b32:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b02      	subs	r3, #2
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d11f      	bne.n	8002b9c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	e016      	b.n	8002b9c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f103 020c 	add.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bb6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faba 	bl	800313c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d912      	bls.n	8002c08 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b02      	subs	r3, #2
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c06:	e012      	b.n	8002c2e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d110      	bne.n	8002c5a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c46:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa71 	bl	800313c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	b292      	uxth	r2, r2
 8002c76:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa3e 	bl	800313c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	881a      	ldrh	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	1c9a      	adds	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d110      	bne.n	8002d20 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d0c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa0e 	bl	800313c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f103 020c 	add.w	r2, r3, #12
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa28 	bl	80031c0 <SPI_CloseRx_ISR>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	1c9a      	adds	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa02 	bl	80031c0 <SPI_CloseRx_ISR>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dd4:	f7fd fe68 	bl	8000aa8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002de4:	f7fd fe60 	bl	8000aa8 <HAL_GetTick>
 8002de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dea:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	0d1b      	lsrs	r3, r3, #20
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dfa:	e054      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d050      	beq.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e04:	f7fd fe50 	bl	8000aa8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d902      	bls.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13d      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e32:	d111      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3c:	d004      	beq.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d107      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e60:	d10f      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e017      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d19b      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ee6:	f7fd fddf 	bl	8000aa8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002ef6:	f7fd fdd7 	bl	8000aa8 <HAL_GetTick>
 8002efa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f04:	4b3d      	ldr	r3, [pc, #244]	@ (8002ffc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00da      	lsls	r2, r3, #3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	0d1b      	lsrs	r3, r3, #20
 8002f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f1c:	e060      	b.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f24:	d107      	bne.n	8002f36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d050      	beq.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f3e:	f7fd fdb3 	bl	8000aa8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d902      	bls.n	8002f54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d13d      	bne.n	8002fd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f6c:	d111      	bne.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f76:	d004      	beq.n	8002f82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f80:	d107      	bne.n	8002f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f9a:	d10f      	bne.n	8002fbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e010      	b.n	8002ff2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d196      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003014:	d111      	bne.n	800303a <SPI_EndRxTransaction+0x3a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301e:	d004      	beq.n	800302a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003028:	d107      	bne.n	800303a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff febd 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e023      	b.n	80030a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003068:	d11d      	bne.n	80030a6 <SPI_EndRxTransaction+0xa6>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003072:	d004      	beq.n	800307e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307c:	d113      	bne.n	80030a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff22 	bl	8002ed4 <SPI_WaitFifoStateUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e000      	b.n	80030a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff ff03 	bl	8002ed4 <SPI_WaitFifoStateUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e027      	b.n	8003134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2180      	movs	r1, #128	@ 0x80
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff fe68 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e014      	b.n	8003134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fedc 	bl	8002ed4 <SPI_WaitFifoStateUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e000      	b.n	8003134 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003144:	f7fd fcb0 	bl	8000aa8 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0220 	bic.w	r2, r2, #32
 8003158:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	2164      	movs	r1, #100	@ 0x64
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa6 	bl	80030b0 <SPI_EndRxTxTransaction>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b04      	cmp	r3, #4
 8003188:	d107      	bne.n	800319a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fc8a 	bl	8002aac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003198:	e00e      	b.n	80031b8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fc8c 	bl	8002ac0 <HAL_SPI_TxRxCpltCallback>
}
 80031a8:	e006      	b.n	80031b8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fc8e 	bl	8002ad4 <HAL_SPI_ErrorCallback>
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031d6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80031d8:	f7fd fc66 	bl	8000aa8 <HAL_GetTick>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	2164      	movs	r1, #100	@ 0x64
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ff0c 	bl	8003000 <SPI_EndRxTransaction>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fc4e 	bl	8002aac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003210:	e002      	b.n	8003218 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fc5e 	bl	8002ad4 <HAL_SPI_ErrorCallback>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e040      	b.n	80032b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd faee 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	@ 0x24
 800324c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 faae 	bl	80037c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f825 	bl	80032bc <UART_SetConfig>
 8003272:	4603      	mov	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e01b      	b.n	80032b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800329a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb2d 	bl	800390c <UART_CheckIdleState>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b08a      	sub	sp, #40	@ 0x28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003580 <UART_SetConfig+0x2c4>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a9a      	ldr	r2, [pc, #616]	@ (8003584 <UART_SetConfig+0x2c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4313      	orrs	r3, r2
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a91      	ldr	r2, [pc, #580]	@ (8003588 <UART_SetConfig+0x2cc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d126      	bne.n	8003394 <UART_SetConfig+0xd8>
 8003346:	4b91      	ldr	r3, [pc, #580]	@ (800358c <UART_SetConfig+0x2d0>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d81b      	bhi.n	800338c <UART_SetConfig+0xd0>
 8003354:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <UART_SetConfig+0xa0>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	0800336d 	.word	0x0800336d
 8003360:	0800337d 	.word	0x0800337d
 8003364:	08003375 	.word	0x08003375
 8003368:	08003385 	.word	0x08003385
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003372:	e0d6      	b.n	8003522 <UART_SetConfig+0x266>
 8003374:	2302      	movs	r3, #2
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337a:	e0d2      	b.n	8003522 <UART_SetConfig+0x266>
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003382:	e0ce      	b.n	8003522 <UART_SetConfig+0x266>
 8003384:	2308      	movs	r3, #8
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338a:	e0ca      	b.n	8003522 <UART_SetConfig+0x266>
 800338c:	2310      	movs	r3, #16
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003392:	e0c6      	b.n	8003522 <UART_SetConfig+0x266>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a7d      	ldr	r2, [pc, #500]	@ (8003590 <UART_SetConfig+0x2d4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d138      	bne.n	8003410 <UART_SetConfig+0x154>
 800339e:	4b7b      	ldr	r3, [pc, #492]	@ (800358c <UART_SetConfig+0x2d0>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d82d      	bhi.n	8003408 <UART_SetConfig+0x14c>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <UART_SetConfig+0xf8>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	08003409 	.word	0x08003409
 80033bc:	08003409 	.word	0x08003409
 80033c0:	08003409 	.word	0x08003409
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003409 	.word	0x08003409
 80033cc:	08003409 	.word	0x08003409
 80033d0:	08003409 	.word	0x08003409
 80033d4:	080033f1 	.word	0x080033f1
 80033d8:	08003409 	.word	0x08003409
 80033dc:	08003409 	.word	0x08003409
 80033e0:	08003409 	.word	0x08003409
 80033e4:	08003401 	.word	0x08003401
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e098      	b.n	8003522 <UART_SetConfig+0x266>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e094      	b.n	8003522 <UART_SetConfig+0x266>
 80033f8:	2304      	movs	r3, #4
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e090      	b.n	8003522 <UART_SetConfig+0x266>
 8003400:	2308      	movs	r3, #8
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e08c      	b.n	8003522 <UART_SetConfig+0x266>
 8003408:	2310      	movs	r3, #16
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e088      	b.n	8003522 <UART_SetConfig+0x266>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5f      	ldr	r2, [pc, #380]	@ (8003594 <UART_SetConfig+0x2d8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d125      	bne.n	8003466 <UART_SetConfig+0x1aa>
 800341a:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <UART_SetConfig+0x2d0>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003424:	2b30      	cmp	r3, #48	@ 0x30
 8003426:	d016      	beq.n	8003456 <UART_SetConfig+0x19a>
 8003428:	2b30      	cmp	r3, #48	@ 0x30
 800342a:	d818      	bhi.n	800345e <UART_SetConfig+0x1a2>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d00a      	beq.n	8003446 <UART_SetConfig+0x18a>
 8003430:	2b20      	cmp	r3, #32
 8003432:	d814      	bhi.n	800345e <UART_SetConfig+0x1a2>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <UART_SetConfig+0x182>
 8003438:	2b10      	cmp	r3, #16
 800343a:	d008      	beq.n	800344e <UART_SetConfig+0x192>
 800343c:	e00f      	b.n	800345e <UART_SetConfig+0x1a2>
 800343e:	2300      	movs	r3, #0
 8003440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003444:	e06d      	b.n	8003522 <UART_SetConfig+0x266>
 8003446:	2302      	movs	r3, #2
 8003448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344c:	e069      	b.n	8003522 <UART_SetConfig+0x266>
 800344e:	2304      	movs	r3, #4
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003454:	e065      	b.n	8003522 <UART_SetConfig+0x266>
 8003456:	2308      	movs	r3, #8
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345c:	e061      	b.n	8003522 <UART_SetConfig+0x266>
 800345e:	2310      	movs	r3, #16
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003464:	e05d      	b.n	8003522 <UART_SetConfig+0x266>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4b      	ldr	r2, [pc, #300]	@ (8003598 <UART_SetConfig+0x2dc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d125      	bne.n	80034bc <UART_SetConfig+0x200>
 8003470:	4b46      	ldr	r3, [pc, #280]	@ (800358c <UART_SetConfig+0x2d0>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800347a:	2bc0      	cmp	r3, #192	@ 0xc0
 800347c:	d016      	beq.n	80034ac <UART_SetConfig+0x1f0>
 800347e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003480:	d818      	bhi.n	80034b4 <UART_SetConfig+0x1f8>
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d00a      	beq.n	800349c <UART_SetConfig+0x1e0>
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d814      	bhi.n	80034b4 <UART_SetConfig+0x1f8>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <UART_SetConfig+0x1d8>
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d008      	beq.n	80034a4 <UART_SetConfig+0x1e8>
 8003492:	e00f      	b.n	80034b4 <UART_SetConfig+0x1f8>
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800349a:	e042      	b.n	8003522 <UART_SetConfig+0x266>
 800349c:	2302      	movs	r3, #2
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a2:	e03e      	b.n	8003522 <UART_SetConfig+0x266>
 80034a4:	2304      	movs	r3, #4
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034aa:	e03a      	b.n	8003522 <UART_SetConfig+0x266>
 80034ac:	2308      	movs	r3, #8
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b2:	e036      	b.n	8003522 <UART_SetConfig+0x266>
 80034b4:	2310      	movs	r3, #16
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ba:	e032      	b.n	8003522 <UART_SetConfig+0x266>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a30      	ldr	r2, [pc, #192]	@ (8003584 <UART_SetConfig+0x2c8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d12a      	bne.n	800351c <UART_SetConfig+0x260>
 80034c6:	4b31      	ldr	r3, [pc, #196]	@ (800358c <UART_SetConfig+0x2d0>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034d4:	d01a      	beq.n	800350c <UART_SetConfig+0x250>
 80034d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034da:	d81b      	bhi.n	8003514 <UART_SetConfig+0x258>
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e0:	d00c      	beq.n	80034fc <UART_SetConfig+0x240>
 80034e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e6:	d815      	bhi.n	8003514 <UART_SetConfig+0x258>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <UART_SetConfig+0x238>
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f0:	d008      	beq.n	8003504 <UART_SetConfig+0x248>
 80034f2:	e00f      	b.n	8003514 <UART_SetConfig+0x258>
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fa:	e012      	b.n	8003522 <UART_SetConfig+0x266>
 80034fc:	2302      	movs	r3, #2
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003502:	e00e      	b.n	8003522 <UART_SetConfig+0x266>
 8003504:	2304      	movs	r3, #4
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e00a      	b.n	8003522 <UART_SetConfig+0x266>
 800350c:	2308      	movs	r3, #8
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e006      	b.n	8003522 <UART_SetConfig+0x266>
 8003514:	2310      	movs	r3, #16
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e002      	b.n	8003522 <UART_SetConfig+0x266>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <UART_SetConfig+0x2c8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	f040 808b 	bne.w	8003644 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800352e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003532:	2b08      	cmp	r3, #8
 8003534:	d834      	bhi.n	80035a0 <UART_SetConfig+0x2e4>
 8003536:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0x280>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003561 	.word	0x08003561
 8003540:	080035a1 	.word	0x080035a1
 8003544:	08003569 	.word	0x08003569
 8003548:	080035a1 	.word	0x080035a1
 800354c:	0800356f 	.word	0x0800356f
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080035a1 	.word	0x080035a1
 8003558:	080035a1 	.word	0x080035a1
 800355c:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7fe fbc6 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003564:	61f8      	str	r0, [r7, #28]
        break;
 8003566:	e021      	b.n	80035ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <UART_SetConfig+0x2e0>)
 800356a:	61fb      	str	r3, [r7, #28]
        break;
 800356c:	e01e      	b.n	80035ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7fe fb27 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003572:	61f8      	str	r0, [r7, #28]
        break;
 8003574:	e01a      	b.n	80035ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	61fb      	str	r3, [r7, #28]
        break;
 800357c:	e016      	b.n	80035ac <UART_SetConfig+0x2f0>
 800357e:	bf00      	nop
 8003580:	efff69f3 	.word	0xefff69f3
 8003584:	40008000 	.word	0x40008000
 8003588:	40013800 	.word	0x40013800
 800358c:	40021000 	.word	0x40021000
 8003590:	40004400 	.word	0x40004400
 8003594:	40004800 	.word	0x40004800
 8003598:	40004c00 	.word	0x40004c00
 800359c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80fa 	beq.w	80037a8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d305      	bcc.n	80035d0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d903      	bls.n	80035d8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80035d6:	e0e7      	b.n	80037a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2200      	movs	r2, #0
 80035dc:	461c      	mov	r4, r3
 80035de:	4615      	mov	r5, r2
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	022b      	lsls	r3, r5, #8
 80035ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035ee:	0222      	lsls	r2, r4, #8
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	6849      	ldr	r1, [r1, #4]
 80035f4:	0849      	lsrs	r1, r1, #1
 80035f6:	2000      	movs	r0, #0
 80035f8:	4688      	mov	r8, r1
 80035fa:	4681      	mov	r9, r0
 80035fc:	eb12 0a08 	adds.w	sl, r2, r8
 8003600:	eb43 0b09 	adc.w	fp, r3, r9
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003612:	4650      	mov	r0, sl
 8003614:	4659      	mov	r1, fp
 8003616:	f7fc fddd 	bl	80001d4 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4613      	mov	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003628:	d308      	bcc.n	800363c <UART_SetConfig+0x380>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003630:	d204      	bcs.n	800363c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e0b5      	b.n	80037a8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003642:	e0b1      	b.n	80037a8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800364c:	d15d      	bne.n	800370a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800364e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003652:	2b08      	cmp	r3, #8
 8003654:	d827      	bhi.n	80036a6 <UART_SetConfig+0x3ea>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <UART_SetConfig+0x3a0>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003681 	.word	0x08003681
 8003660:	08003689 	.word	0x08003689
 8003664:	08003691 	.word	0x08003691
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003697 	.word	0x08003697
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036a7 	.word	0x080036a7
 8003678:	080036a7 	.word	0x080036a7
 800367c:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe fb36 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003684:	61f8      	str	r0, [r7, #28]
        break;
 8003686:	e014      	b.n	80036b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe fb48 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 800368c:	61f8      	str	r0, [r7, #28]
        break;
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b4c      	ldr	r3, [pc, #304]	@ (80037c4 <UART_SetConfig+0x508>)
 8003692:	61fb      	str	r3, [r7, #28]
        break;
 8003694:	e00d      	b.n	80036b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe fa93 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800369a:	61f8      	str	r0, [r7, #28]
        break;
 800369c:	e009      	b.n	80036b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a2:	61fb      	str	r3, [r7, #28]
        break;
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d077      	beq.n	80037a8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005a      	lsls	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	441a      	add	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d916      	bls.n	8003702 <UART_SetConfig+0x446>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036da:	d212      	bcs.n	8003702 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f023 030f 	bic.w	r3, r3, #15
 80036e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	8afb      	ldrh	r3, [r7, #22]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	8afa      	ldrh	r2, [r7, #22]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e052      	b.n	80037a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003708:	e04e      	b.n	80037a8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800370a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800370e:	2b08      	cmp	r3, #8
 8003710:	d827      	bhi.n	8003762 <UART_SetConfig+0x4a6>
 8003712:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0x45c>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	0800373d 	.word	0x0800373d
 800371c:	08003745 	.word	0x08003745
 8003720:	0800374d 	.word	0x0800374d
 8003724:	08003763 	.word	0x08003763
 8003728:	08003753 	.word	0x08003753
 800372c:	08003763 	.word	0x08003763
 8003730:	08003763 	.word	0x08003763
 8003734:	08003763 	.word	0x08003763
 8003738:	0800375b 	.word	0x0800375b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7fe fad8 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003740:	61f8      	str	r0, [r7, #28]
        break;
 8003742:	e014      	b.n	800376e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7fe faea 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8003748:	61f8      	str	r0, [r7, #28]
        break;
 800374a:	e010      	b.n	800376e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374c:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <UART_SetConfig+0x508>)
 800374e:	61fb      	str	r3, [r7, #28]
        break;
 8003750:	e00d      	b.n	800376e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003752:	f7fe fa35 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003756:	61f8      	str	r0, [r7, #28]
        break;
 8003758:	e009      	b.n	800376e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e005      	b.n	800376e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800376c:	bf00      	nop
    }

    if (pclk != 0U)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d019      	beq.n	80037a8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	085a      	lsrs	r2, r3, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	441a      	add	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0f      	cmp	r3, #15
 800378c:	d909      	bls.n	80037a2 <UART_SetConfig+0x4e6>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d205      	bcs.n	80037a2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	e002      	b.n	80037a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	@ 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c2:	bf00      	nop
 80037c4:	00f42400 	.word	0x00f42400

080037c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01a      	beq.n	80038de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c6:	d10a      	bne.n	80038de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b098      	sub	sp, #96	@ 0x60
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800391c:	f7fd f8c4 	bl	8000aa8 <HAL_GetTick>
 8003920:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b08      	cmp	r3, #8
 800392e:	d12e      	bne.n	800398e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f88c 	bl	8003a5c <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d021      	beq.n	800398e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003968:	647b      	str	r3, [r7, #68]	@ 0x44
 800396a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800396e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e6      	bne.n	800394a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e062      	b.n	8003a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d149      	bne.n	8003a30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f856 	bl	8003a5c <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d03c      	beq.n	8003a30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	623b      	str	r3, [r7, #32]
   return(result);
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e6      	bne.n	80039b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a08:	61fa      	str	r2, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	617b      	str	r3, [r7, #20]
   return(result);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e5      	bne.n	80039e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e011      	b.n	8003a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3758      	adds	r7, #88	@ 0x58
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6c:	e049      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d045      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fd f817 	bl	8000aa8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e048      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d031      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d110      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f838 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2208      	movs	r2, #8
 8003abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e029      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	d111      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f81e 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e00f      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d0a6      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b095      	sub	sp, #84	@ 0x54
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3308      	adds	r3, #8
 8003b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d118      	bne.n	8003bd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f023 0310 	bic.w	r3, r3, #16
 8003bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	613b      	str	r3, [r7, #16]
   return(result);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003be6:	bf00      	nop
 8003be8:	3754      	adds	r7, #84	@ 0x54
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <memset>:
 8003bf2:	4402      	add	r2, r0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <memset+0xa>
 8003bfa:	4770      	bx	lr
 8003bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003c00:	e7f9      	b.n	8003bf6 <memset+0x4>
	...

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4d0d      	ldr	r5, [pc, #52]	@ (8003c3c <__libc_init_array+0x38>)
 8003c08:	4c0d      	ldr	r4, [pc, #52]	@ (8003c40 <__libc_init_array+0x3c>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	2600      	movs	r6, #0
 8003c10:	42a6      	cmp	r6, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	4d0b      	ldr	r5, [pc, #44]	@ (8003c44 <__libc_init_array+0x40>)
 8003c16:	4c0c      	ldr	r4, [pc, #48]	@ (8003c48 <__libc_init_array+0x44>)
 8003c18:	f000 f818 	bl	8003c4c <_init>
 8003c1c:	1b64      	subs	r4, r4, r5
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	2600      	movs	r6, #0
 8003c22:	42a6      	cmp	r6, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2c:	4798      	blx	r3
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c36:	4798      	blx	r3
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	08003cb4 	.word	0x08003cb4
 8003c40:	08003cb4 	.word	0x08003cb4
 8003c44:	08003cb4 	.word	0x08003cb4
 8003c48:	08003cb8 	.word	0x08003cb8

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
