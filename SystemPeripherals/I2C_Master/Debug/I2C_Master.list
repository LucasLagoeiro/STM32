
I2C_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef0  08003ef0  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef0  08003ef0  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef0  08003ef0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003ef8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  08003f08  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003f08  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e608  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002195  00000000  00000000  00013640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  000157d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d0  00000000  00000000  00016318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f19  00000000  00000000  00016be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe4f  00000000  00000000  0002bb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008361d  00000000  00000000  0003b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bef6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  000befb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c176c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003e50 	.word	0x08003e50

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003e50 	.word	0x08003e50

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fae7 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f837 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f91f 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fe:	f000 f8cf 	bl	80005a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000402:	f000 f88d 	bl	8000520 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	while (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)) {
 8000406:	e008      	b.n	800041a <main+0x2e>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000408:	23a0      	movs	r3, #160	@ 0xa0
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	2120      	movs	r1, #32
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fe74 	bl	80010fc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000414:	2064      	movs	r0, #100	@ 0x64
 8000416:	f000 fb5b 	bl	8000ad0 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)) {
 800041a:	2380      	movs	r3, #128	@ 0x80
 800041c:	019b      	lsls	r3, r3, #6
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <main+0x6c>)
 8000420:	0019      	movs	r1, r3
 8000422:	0010      	movs	r0, r2
 8000424:	f000 fe30 	bl	8001088 <HAL_GPIO_ReadPin>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d1ed      	bne.n	8000408 <main+0x1c>
	}
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800042c:	23a0      	movs	r3, #160	@ 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2200      	movs	r2, #0
 8000432:	2120      	movs	r1, #32
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fe44 	bl	80010c2 <HAL_GPIO_WritePin>

	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)I2C_ADDRESS,&TX_Buffer,1,1000); //Sending in Blocking mode
 800043a:	4a08      	ldr	r2, [pc, #32]	@ (800045c <main+0x70>)
 800043c:	4908      	ldr	r1, [pc, #32]	@ (8000460 <main+0x74>)
 800043e:	4809      	ldr	r0, [pc, #36]	@ (8000464 <main+0x78>)
 8000440:	23fa      	movs	r3, #250	@ 0xfa
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	f000 ff1a 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800044c:	2064      	movs	r0, #100	@ 0x64
 800044e:	f000 fb3f 	bl	8000ad0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	e7fd      	b.n	8000452 <main+0x66>
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	50000800 	.word	0x50000800
 800045c:	20000000 	.word	0x20000000
 8000460:	0000030f 	.word	0x0000030f
 8000464:	2000002c 	.word	0x2000002c

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b093      	sub	sp, #76	@ 0x4c
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	2414      	movs	r4, #20
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2334      	movs	r3, #52	@ 0x34
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fcbd 	bl	8003df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2310      	movs	r3, #16
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fcb6 	bl	8003df8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f92f 	bl	80026f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2202      	movs	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	0052      	lsls	r2, r2, #1
 80004a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a4:	0021      	movs	r1, r4
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2240      	movs	r2, #64	@ 0x40
 80004b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2202      	movs	r2, #2
 80004b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2202      	movs	r2, #2
 80004bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2208      	movs	r2, #8
 80004c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	0292      	lsls	r2, r2, #10
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	0592      	lsls	r2, r2, #22
 80004d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 f955 	bl	800278c <HAL_RCC_OscConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004e6:	f000 f917 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2207      	movs	r2, #7
 80004ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2202      	movs	r2, #2
 80004f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2280      	movs	r2, #128	@ 0x80
 80004fa:	0112      	lsls	r2, r2, #4
 80004fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2101      	movs	r1, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f002 fc4f 	bl	8002dac <HAL_RCC_ClockConfig>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000512:	f000 f901 	bl	8000718 <Error_Handler>
  }
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b013      	add	sp, #76	@ 0x4c
 800051c:	bd90      	pop	{r4, r7, pc}
	...

08000520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000526:	4a1c      	ldr	r2, [pc, #112]	@ (8000598 <MX_I2C1_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800052a:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <MX_I2C1_Init+0x74>)
 800052c:	4a1b      	ldr	r2, [pc, #108]	@ (800059c <MX_I2C1_Init+0x7c>)
 800052e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000530:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000538:	2201      	movs	r2, #1
 800053a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000548:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_I2C1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_I2C1_Init+0x74>)
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fde9 	bl	8001134 <HAL_I2C_Init>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000566:	f000 f8d7 	bl	8000718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <MX_I2C1_Init+0x74>)
 800056c:	2100      	movs	r1, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f828 	bl	80025c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000578:	f000 f8ce 	bl	8000718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <MX_I2C1_Init+0x74>)
 800057e:	2100      	movs	r1, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f002 f86b 	bl	800265c <HAL_I2CEx_ConfigDigitalFilter>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800058a:	f000 f8c5 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000002c 	.word	0x2000002c
 8000598:	40005400 	.word	0x40005400
 800059c:	00707cbb 	.word	0x00707cbb

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005a6:	4a24      	ldr	r2, [pc, #144]	@ (8000638 <MX_USART2_UART_Init+0x98>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005ac:	22e1      	movs	r2, #225	@ 0xe1
 80005ae:	0252      	lsls	r2, r2, #9
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	0552      	lsls	r2, r2, #21
 80005b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005c8:	220c      	movs	r2, #12
 80005ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 febb 	bl	8003368 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80005f6:	f000 f88f 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	0018      	movs	r0, r3
 8000600:	f003 fb1a 	bl	8003c38 <HAL_UARTEx_SetTxFifoThreshold>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000608:	f000 f886 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 800060e:	2100      	movs	r1, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f003 fb51 	bl	8003cb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800061a:	f000 f87d 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <MX_USART2_UART_Init+0x94>)
 8000620:	0018      	movs	r0, r3
 8000622:	f003 facf 	bl	8003bc4 <HAL_UARTEx_DisableFifoMode>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800062a:	f000 f875 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000080 	.word	0x20000080
 8000638:	40004400 	.word	0x40004400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b08b      	sub	sp, #44	@ 0x2c
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	2414      	movs	r4, #20
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2314      	movs	r3, #20
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f003 fbd3 	bl	8003df8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000656:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000658:	2104      	movs	r1, #4
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	@ 0x34
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000662:	2204      	movs	r2, #4
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xd4>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000670:	2120      	movs	r1, #32
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067a:	2220      	movs	r2, #32
 800067c:	4013      	ands	r3, r2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xd4>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_GPIO_Init+0xd4>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_GPIO_Init+0xd4>)
 80006a0:	2102      	movs	r1, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_GPIO_Init+0xd4>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006aa:	2202      	movs	r2, #2
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006b2:	23a0      	movs	r3, #160	@ 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd01 	bl	80010c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	0192      	lsls	r2, r2, #6
 80006c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000714 <MX_GPIO_Init+0xd8>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fb70 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2220      	movs	r2, #32
 80006e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2201      	movs	r2, #1
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006fa:	187a      	adds	r2, r7, r1
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fb5c 	bl	8000dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b00b      	add	sp, #44	@ 0x2c
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	50000800 	.word	0x50000800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <Error_Handler+0x8>

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x44>)
 800072c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_MspInit+0x44>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	641a      	str	r2, [r3, #64]	@ 0x40
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x44>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x44>)
 8000744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_MspInit+0x44>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	430a      	orrs	r2, r1
 800074e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_MspInit+0x44>)
 8000752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b091      	sub	sp, #68	@ 0x44
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	232c      	movs	r3, #44	@ 0x2c
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	0018      	movs	r0, r3
 800077a:	2314      	movs	r3, #20
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f003 fb3a 	bl	8003df8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	2410      	movs	r4, #16
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	231c      	movs	r3, #28
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 fb32 	bl	8003df8 <memset>
  if(hi2c->Instance==I2C1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a26      	ldr	r2, [pc, #152]	@ (8000834 <HAL_I2C_MspInit+0xc8>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d146      	bne.n	800082c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2220      	movs	r2, #32
 80007a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fca7 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007b6:	f7ff ffaf 	bl	8000718 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 80007c0:	2102      	movs	r1, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ca:	2202      	movs	r2, #2
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d2:	212c      	movs	r1, #44	@ 0x2c
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	22c0      	movs	r2, #192	@ 0xc0
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2212      	movs	r2, #18
 80007e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2201      	movs	r2, #1
 80007e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2203      	movs	r2, #3
 80007ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2206      	movs	r2, #6
 80007f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <HAL_I2C_MspInit+0xd0>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f000 fae0 	bl	8000dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 8000802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	0389      	lsls	r1, r1, #14
 800080a:	430a      	orrs	r2, r1
 800080c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_I2C_MspInit+0xcc>)
 8000810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	039b      	lsls	r3, r3, #14
 8000816:	4013      	ands	r3, r2
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2017      	movs	r0, #23
 8000822:	f000 fa25 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000826:	2017      	movs	r0, #23
 8000828:	f000 fa37 	bl	8000c9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b011      	add	sp, #68	@ 0x44
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	40021000 	.word	0x40021000
 800083c:	50000400 	.word	0x50000400

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b091      	sub	sp, #68	@ 0x44
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	232c      	movs	r3, #44	@ 0x2c
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	0018      	movs	r0, r3
 800084e:	2314      	movs	r3, #20
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f003 fad0 	bl	8003df8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	2410      	movs	r4, #16
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	231c      	movs	r3, #28
 8000860:	001a      	movs	r2, r3
 8000862:	2100      	movs	r1, #0
 8000864:	f003 fac8 	bl	8003df8 <memset>
  if(huart->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <HAL_UART_MspInit+0xb8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d13e      	bne.n	80008f0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	f002 fc3d 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800088a:	f7ff ff45 	bl	8000718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 8000890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	0289      	lsls	r1, r1, #10
 8000898:	430a      	orrs	r2, r1
 800089a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 800089e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	029b      	lsls	r3, r3, #10
 80008a4:	4013      	ands	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_UART_MspInit+0xbc>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c2:	212c      	movs	r1, #44	@ 0x2c
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2201      	movs	r2, #1
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	23a0      	movs	r3, #160	@ 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fa68 	bl	8000dc0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b011      	add	sp, #68	@ 0x44
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40004400 	.word	0x40004400
 80008fc:	40021000 	.word	0x40021000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f8b6 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <I2C1_IRQHandler+0x2c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	23e0      	movs	r3, #224	@ 0xe0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4013      	ands	r3, r2
 8000944:	d004      	beq.n	8000950 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <I2C1_IRQHandler+0x2c>)
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fddd 	bl	8001508 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800094e:	e003      	b.n	8000958 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <I2C1_IRQHandler+0x2c>)
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fdbe 	bl	80014d4 <HAL_I2C_EV_IRQHandler>
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	2000002c 	.word	0x2000002c

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000972:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000974:	f7ff fff6 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099e:	f003 fa33 	bl	8003e08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009a2:	f7ff fd23 	bl	80003ec <main>

080009a6 <LoopForever>:

LoopForever:
  b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   r0, =_estack
 80009a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b4:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 80009b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009bc:	20000118 	.word	0x20000118

080009c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <HAL_Init+0x3c>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_Init+0x3c>)
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	0049      	lsls	r1, r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f810 	bl	8000a04 <HAL_InitTick>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fe98 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <HAL_InitTick+0x88>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d02b      	beq.n	8000a74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0x8c>)
 8000a1e:	681c      	ldr	r4, [r3, #0]
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_InitTick+0x88>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	0019      	movs	r1, r3
 8000a26:	23fa      	movs	r3, #250	@ 0xfa
 8000a28:	0098      	lsls	r0, r3, #2
 8000a2a:	f7ff fb69 	bl	8000100 <__udivsi3>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	0019      	movs	r1, r3
 8000a32:	0020      	movs	r0, r4
 8000a34:	f7ff fb64 	bl	8000100 <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f93d 	bl	8000cba <HAL_SYSTICK_Config>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d112      	bne.n	8000a6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d80a      	bhi.n	8000a60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 f90c 	bl	8000c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_InitTick+0x90>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e00d      	b.n	8000a7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e008      	b.n	8000a7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e003      	b.n	8000a7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	781b      	ldrb	r3, [r3, #0]
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b005      	add	sp, #20
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20000004 	.word	0x20000004
 8000a94:	20000008 	.word	0x20000008

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000114 	.word	0x20000114

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	@ (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000114 	.word	0x20000114

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b2a:	d809      	bhi.n	8000b40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	231f      	movs	r3, #31
 8000b34:	401a      	ands	r2, r3
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <__NVIC_EnableIRQ+0x30>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b60:	d828      	bhi.n	8000bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b62:	4a2f      	ldr	r2, [pc, #188]	@ (8000c20 <__NVIC_SetPriority+0xd4>)
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	33c0      	adds	r3, #192	@ 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	589b      	ldr	r3, [r3, r2]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	@ 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	@ 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <__NVIC_SetPriority+0xd4>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	33c0      	adds	r3, #192	@ 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bb2:	e031      	b.n	8000c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0019      	movs	r1, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1dfa      	adds	r2, r7, #7
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	21ff      	movs	r1, #255	@ 0xff
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	000a      	movs	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	22ff      	movs	r2, #255	@ 0xff
 8000bec:	401a      	ands	r2, r3
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	4003      	ands	r3, r0
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001c      	movs	r4, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	3306      	adds	r3, #6
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	18c3      	adds	r3, r0, r3
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	045b      	lsls	r3, r3, #17
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d301      	bcc.n	8000c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e010      	b.n	8000c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <SysTick_Config+0x44>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	3a01      	subs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff7c 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <SysTick_Config+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SysTick_Config+0x44>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffaf 	bl	8000c28 <SysTick_Config>
 8000cca:	0003      	movs	r3, r0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cdc:	210f      	movs	r1, #15
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2225      	movs	r2, #37	@ 0x25
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d006      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e049      	b.n	8000d92 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	210e      	movs	r1, #14
 8000d0a:	438a      	bics	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	491d      	ldr	r1, [pc, #116]	@ (8000da0 <HAL_DMA_Abort_IT+0xcc>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_DMA_Abort_IT+0xd0>)
 8000d30:	6859      	ldr	r1, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	221c      	movs	r2, #28
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_DMA_Abort_IT+0xd0>)
 8000d40:	430a      	orrs	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00c      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d60:	490f      	ldr	r1, [pc, #60]	@ (8000da0 <HAL_DMA_Abort_IT+0xcc>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2225      	movs	r2, #37	@ 0x25
 8000d74:	2101      	movs	r1, #1
 8000d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	0010      	movs	r0, r2
 8000d90:	4798      	blx	r3
    }
  }
  return status;
 8000d92:	230f      	movs	r3, #15
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	fffffeff 	.word	0xfffffeff
 8000da4:	40020000 	.word	0x40020000

08000da8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2225      	movs	r2, #37	@ 0x25
 8000db4:	5c9b      	ldrb	r3, [r3, r2]
 8000db6:	b2db      	uxtb	r3, r3
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e147      	b.n	8001060 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <HAL_GPIO_Init+0x28>
 8000de6:	e138      	b.n	800105a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	58d3      	ldr	r3, [r2, r3]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	6939      	ldr	r1, [r7, #16]
 8000ef0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	401a      	ands	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	23c0      	movs	r3, #192	@ 0xc0
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_GPIO_Init+0x174>
 8000f32:	e092      	b.n	800105a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f34:	4a50      	ldr	r2, [pc, #320]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	589b      	ldr	r3, [r3, r2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23a0      	movs	r3, #160	@ 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x1ca>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a45      	ldr	r2, [pc, #276]	@ (800107c <HAL_GPIO_Init+0x2bc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x1c6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	@ (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x1c2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a43      	ldr	r2, [pc, #268]	@ (8001084 <HAL_GPIO_Init+0x2c4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x1be>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	00d2      	lsls	r2, r2, #3
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f9c:	4936      	ldr	r1, [pc, #216]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000faa:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	035b      	lsls	r3, r3, #13
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	039b      	lsls	r3, r3, #14
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8001000:	2384      	movs	r3, #132	@ 0x84
 8001002:	58d3      	ldr	r3, [r2, r3]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001024:	4914      	ldr	r1, [pc, #80]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8001026:	2284      	movs	r2, #132	@ 0x84
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800102c:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	58d3      	ldr	r3, [r2, r3]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001052:	4909      	ldr	r1, [pc, #36]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e13      	subs	r3, r2, #0
 800106a:	d000      	beq.n	800106e <HAL_GPIO_Init+0x2ae>
 800106c:	e6b0      	b.n	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b006      	add	sp, #24
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021800 	.word	0x40021800
 800107c:	50000400 	.word	0x50000400
 8001080:	50000800 	.word	0x50000800
 8001084:	50000c00 	.word	0x50000c00

08001088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	000a      	movs	r2, r1
 8001092:	1cbb      	adds	r3, r7, #2
 8001094:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	1cba      	adds	r2, r7, #2
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	4013      	ands	r3, r2
 80010a0:	d004      	beq.n	80010ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010a2:	230f      	movs	r3, #15
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	0008      	movs	r0, r1
 80010cc:	0011      	movs	r1, r2
 80010ce:	1cbb      	adds	r3, r7, #2
 80010d0:	1c02      	adds	r2, r0, #0
 80010d2:	801a      	strh	r2, [r3, #0]
 80010d4:	1c7b      	adds	r3, r7, #1
 80010d6:	1c0a      	adds	r2, r1, #0
 80010d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010da:	1c7b      	adds	r3, r7, #1
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ea:	e003      	b.n	80010f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ec:	1cbb      	adds	r3, r7, #2
 80010ee:	881a      	ldrh	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	000a      	movs	r2, r1
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001110:	1cbb      	adds	r3, r7, #2
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	1cb9      	adds	r1, r7, #2
 8001120:	8809      	ldrh	r1, [r1, #0]
 8001122:	400b      	ands	r3, r1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e08f      	b.n	8001266 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2241      	movs	r2, #65	@ 0x41
 800114a:	5c9b      	ldrb	r3, [r3, r2]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d107      	bne.n	8001162 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2240      	movs	r2, #64	@ 0x40
 8001156:	2100      	movs	r1, #0
 8001158:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fb05 	bl	800076c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2241      	movs	r2, #65	@ 0x41
 8001166:	2124      	movs	r1, #36	@ 0x24
 8001168:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	493b      	ldr	r1, [pc, #236]	@ (8001270 <HAL_I2C_Init+0x13c>)
 8001184:	400a      	ands	r2, r1
 8001186:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4938      	ldr	r1, [pc, #224]	@ (8001274 <HAL_I2C_Init+0x140>)
 8001194:	400a      	ands	r2, r1
 8001196:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	0209      	lsls	r1, r1, #8
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e007      	b.n	80011c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2184      	movs	r1, #132	@ 0x84
 80011bc:	0209      	lsls	r1, r1, #8
 80011be:	430a      	orrs	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d109      	bne.n	80011de <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	0109      	lsls	r1, r1, #4
 80011d8:	430a      	orrs	r2, r1
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	e007      	b.n	80011ee <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4923      	ldr	r1, [pc, #140]	@ (8001278 <HAL_I2C_Init+0x144>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4920      	ldr	r1, [pc, #128]	@ (800127c <HAL_I2C_Init+0x148>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	491a      	ldr	r1, [pc, #104]	@ (8001274 <HAL_I2C_Init+0x140>)
 800120a:	400a      	ands	r2, r1
 800120c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	431a      	orrs	r2, r3
 8001218:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69d9      	ldr	r1, [r3, #28]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2241      	movs	r2, #65	@ 0x41
 8001252:	2120      	movs	r1, #32
 8001254:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2242      	movs	r2, #66	@ 0x42
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	f0ffffff 	.word	0xf0ffffff
 8001274:	ffff7fff 	.word	0xffff7fff
 8001278:	fffff7ff 	.word	0xfffff7ff
 800127c:	02008000 	.word	0x02008000

08001280 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af02      	add	r7, sp, #8
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	0008      	movs	r0, r1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	0019      	movs	r1, r3
 800128e:	230a      	movs	r3, #10
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	1c02      	adds	r2, r0, #0
 8001294:	801a      	strh	r2, [r3, #0]
 8001296:	2308      	movs	r3, #8
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	1c0a      	adds	r2, r1, #0
 800129c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2241      	movs	r2, #65	@ 0x41
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d000      	beq.n	80012ac <HAL_I2C_Master_Transmit+0x2c>
 80012aa:	e10a      	b.n	80014c2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2240      	movs	r2, #64	@ 0x40
 80012b0:	5c9b      	ldrb	r3, [r3, r2]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Master_Transmit+0x3a>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e104      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2240      	movs	r2, #64	@ 0x40
 80012be:	2101      	movs	r1, #1
 80012c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012c2:	f7ff fbfb 	bl	8000abc <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	0219      	lsls	r1, r3, #8
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2319      	movs	r3, #25
 80012d6:	2201      	movs	r2, #1
 80012d8:	f000 fefc 	bl	80020d4 <I2C_WaitOnFlagUntilTimeout>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0ef      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2241      	movs	r2, #65	@ 0x41
 80012e8:	2121      	movs	r1, #33	@ 0x21
 80012ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2242      	movs	r2, #66	@ 0x42
 80012f0:	2110      	movs	r1, #16
 80012f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2208      	movs	r2, #8
 8001304:	18ba      	adds	r2, r7, r2
 8001306:	8812      	ldrh	r2, [r2, #0]
 8001308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001314:	b29b      	uxth	r3, r3
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d906      	bls.n	8001328 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	22ff      	movs	r2, #255	@ 0xff
 800131e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	045b      	lsls	r3, r3, #17
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e007      	b.n	8001338 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	049b      	lsls	r3, r3, #18
 8001336:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800133c:	2b00      	cmp	r3, #0
 800133e:	d027      	beq.n	8001390 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	697c      	ldr	r4, [r7, #20]
 800137c:	230a      	movs	r3, #10
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	8819      	ldrh	r1, [r3, #0]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <HAL_I2C_Master_Transmit+0x24c>)
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	0023      	movs	r3, r4
 800138a:	f001 f87d 	bl	8002488 <I2C_TransferConfig>
 800138e:	e06f      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001394:	b2da      	uxtb	r2, r3
 8001396:	697c      	ldr	r4, [r7, #20]
 8001398:	230a      	movs	r3, #10
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	8819      	ldrh	r1, [r3, #0]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <HAL_I2C_Master_Transmit+0x24c>)
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	0023      	movs	r3, r4
 80013a6:	f001 f86f 	bl	8002488 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013aa:	e061      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fee6 	bl	8002184 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e081      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d03a      	beq.n	8001470 <HAL_I2C_Master_Transmit+0x1f0>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d136      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	0013      	movs	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	f000 fe60 	bl	80020d4 <I2C_WaitOnFlagUntilTimeout>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e053      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	2bff      	cmp	r3, #255	@ 0xff
 8001424:	d911      	bls.n	800144a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	22ff      	movs	r2, #255	@ 0xff
 800142a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001430:	b2da      	uxtb	r2, r3
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	045c      	lsls	r4, r3, #17
 8001436:	230a      	movs	r3, #10
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	8819      	ldrh	r1, [r3, #0]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	2300      	movs	r3, #0
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	0023      	movs	r3, r4
 8001444:	f001 f820 	bl	8002488 <I2C_TransferConfig>
 8001448:	e012      	b.n	8001470 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001458:	b2da      	uxtb	r2, r3
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	049c      	lsls	r4, r3, #18
 800145e:	230a      	movs	r3, #10
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	8819      	ldrh	r1, [r3, #0]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	0023      	movs	r3, r4
 800146c:	f001 f80c 	bl	8002488 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d198      	bne.n	80013ac <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fec5 	bl	8002210 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e01a      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2220      	movs	r2, #32
 8001494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	490b      	ldr	r1, [pc, #44]	@ (80014d0 <HAL_I2C_Master_Transmit+0x250>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2241      	movs	r2, #65	@ 0x41
 80014aa:	2120      	movs	r1, #32
 80014ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2242      	movs	r2, #66	@ 0x42
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2240      	movs	r2, #64	@ 0x40
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80014c2:	2302      	movs	r3, #2
  }
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b007      	add	sp, #28
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	80002000 	.word	0x80002000
 80014d0:	fe00e800 	.word	0xfe00e800

080014d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	68f9      	ldr	r1, [r7, #12]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
  }
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4013      	ands	r3, r2
 8001528:	d00e      	beq.n	8001548 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001530:	d00a      	beq.n	8001548 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	2201      	movs	r2, #1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	0052      	lsls	r2, r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4013      	ands	r3, r2
 8001550:	d00e      	beq.n	8001570 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001558:	d00a      	beq.n	8001570 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	2208      	movs	r2, #8
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	00d2      	lsls	r2, r2, #3
 800156e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d00e      	beq.n	8001598 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001580:	d00a      	beq.n	8001598 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	2202      	movs	r2, #2
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2280      	movs	r2, #128	@ 0x80
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	220b      	movs	r2, #11
 80015a2:	4013      	ands	r3, r2
 80015a4:	d005      	beq.n	80015b2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 fc25 	bl	8001dfc <I2C_ITError>
  }
}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b006      	add	sp, #24
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	0008      	movs	r0, r1
 80015e4:	0011      	movs	r1, r2
 80015e6:	1cfb      	adds	r3, r7, #3
 80015e8:	1c02      	adds	r2, r0, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	003b      	movs	r3, r7
 80015ee:	1c0a      	adds	r2, r1, #0
 80015f0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2240      	movs	r2, #64	@ 0x40
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <I2C_Slave_ISR_IT+0x24>
 800164c:	2302      	movs	r3, #2
 800164e:	e0e7      	b.n	8001820 <I2C_Slave_ISR_IT+0x1f4>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2240      	movs	r2, #64	@ 0x40
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2220      	movs	r2, #32
 800165c:	4013      	ands	r3, r2
 800165e:	d00a      	beq.n	8001676 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2220      	movs	r2, #32
 8001664:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001666:	d006      	beq.n	8001676 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f000 f9e4 	bl	8001a3c <I2C_ITSlaveCplt>
 8001674:	e0cf      	b.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2210      	movs	r2, #16
 800167a:	4013      	ands	r3, r2
 800167c:	d052      	beq.n	8001724 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2210      	movs	r2, #16
 8001682:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001684:	d04e      	beq.n	8001724 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d12d      	bne.n	80016ec <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2241      	movs	r2, #65	@ 0x41
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b28      	cmp	r3, #40	@ 0x28
 800169a:	d10b      	bne.n	80016b4 <I2C_Slave_ISR_IT+0x88>
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	049b      	lsls	r3, r3, #18
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d106      	bne.n	80016b4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f000 fb4d 	bl	8001d4c <I2C_ITListenCplt>
 80016b2:	e036      	b.n	8001722 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	@ 0x41
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b29      	cmp	r3, #41	@ 0x29
 80016be:	d110      	bne.n	80016e2 <I2C_Slave_ISR_IT+0xb6>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4a59      	ldr	r2, [pc, #356]	@ (8001828 <I2C_Slave_ISR_IT+0x1fc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00c      	beq.n	80016e2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 fcbd 	bl	8002052 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	0018      	movs	r0, r3
 80016dc:	f000 f94a 	bl	8001974 <I2C_ITSlaveSeqCplt>
 80016e0:	e01f      	b.n	8001722 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2210      	movs	r2, #16
 80016e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80016ea:	e091      	b.n	8001810 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2210      	movs	r2, #16
 80016f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	2204      	movs	r2, #4
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <I2C_Slave_ISR_IT+0xe6>
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	045b      	lsls	r3, r3, #17
 800170c:	429a      	cmp	r2, r3
 800170e:	d000      	beq.n	8001712 <I2C_Slave_ISR_IT+0xe6>
 8001710:	e07e      	b.n	8001810 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f000 fb6e 	bl	8001dfc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001720:	e076      	b.n	8001810 <I2C_Slave_ISR_IT+0x1e4>
 8001722:	e075      	b.n	8001810 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2204      	movs	r2, #4
 8001728:	4013      	ands	r3, r2
 800172a:	d02f      	beq.n	800178c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001732:	d02b      	beq.n	800178c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d018      	beq.n	8001770 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d14c      	bne.n	8001814 <I2C_Slave_ISR_IT+0x1e8>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	4a2a      	ldr	r2, [pc, #168]	@ (8001828 <I2C_Slave_ISR_IT+0x1fc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d048      	beq.n	8001814 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f8f5 	bl	8001974 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800178a:	e043      	b.n	8001814 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2208      	movs	r2, #8
 8001790:	4013      	ands	r3, r2
 8001792:	d00a      	beq.n	80017aa <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2208      	movs	r2, #8
 8001798:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800179a:	d006      	beq.n	80017aa <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f842 	bl	800182c <I2C_ITAddrCplt>
 80017a8:	e035      	b.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d031      	beq.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017b8:	d02d      	beq.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d018      	beq.n	80017f6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80017f4:	e00f      	b.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	045b      	lsls	r3, r3, #17
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d002      	beq.n	8001806 <I2C_Slave_ISR_IT+0x1da>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d107      	bne.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 f8b3 	bl	8001974 <I2C_ITSlaveSeqCplt>
 800180e:	e002      	b.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	e000      	b.n	8001816 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8001814:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2240      	movs	r2, #64	@ 0x40
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b006      	add	sp, #24
 8001826:	bd80      	pop	{r7, pc}
 8001828:	ffff0000 	.word	0xffff0000

0800182c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2241      	movs	r2, #65	@ 0x41
 800183a:	5c9b      	ldrb	r3, [r3, r2]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	001a      	movs	r2, r3
 8001840:	2328      	movs	r3, #40	@ 0x28
 8001842:	4013      	ands	r3, r2
 8001844:	2b28      	cmp	r3, #40	@ 0x28
 8001846:	d000      	beq.n	800184a <I2C_ITAddrCplt+0x1e>
 8001848:	e088      	b.n	800195c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	b2da      	uxtb	r2, r3
 8001854:	250f      	movs	r5, #15
 8001856:	197b      	adds	r3, r7, r5
 8001858:	2101      	movs	r1, #1
 800185a:	400a      	ands	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	b29a      	uxth	r2, r3
 8001868:	200c      	movs	r0, #12
 800186a:	183b      	adds	r3, r7, r0
 800186c:	21fe      	movs	r1, #254	@ 0xfe
 800186e:	400a      	ands	r2, r1
 8001870:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	b29a      	uxth	r2, r3
 800187a:	240a      	movs	r4, #10
 800187c:	193b      	adds	r3, r7, r4
 800187e:	0592      	lsls	r2, r2, #22
 8001880:	0d92      	lsrs	r2, r2, #22
 8001882:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	b29a      	uxth	r2, r3
 800188c:	2308      	movs	r3, #8
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	21fe      	movs	r1, #254	@ 0xfe
 8001892:	400a      	ands	r2, r1
 8001894:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d148      	bne.n	8001930 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800189e:	0021      	movs	r1, r4
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	09db      	lsrs	r3, r3, #7
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	4053      	eors	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	001a      	movs	r2, r3
 80018b2:	2306      	movs	r3, #6
 80018b4:	4013      	ands	r3, r2
 80018b6:	d120      	bne.n	80018fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	187a      	adds	r2, r7, r1
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d14c      	bne.n	800196c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2208      	movs	r2, #8
 80018de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2240      	movs	r2, #64	@ 0x40
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80018e8:	183b      	adds	r3, r7, r0
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	197b      	adds	r3, r7, r5
 80018ee:	7819      	ldrb	r1, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7ff fe71 	bl	80015da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80018f8:	e038      	b.n	800196c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80018fa:	240c      	movs	r4, #12
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	2208      	movs	r2, #8
 8001900:	18ba      	adds	r2, r7, r2
 8001902:	8812      	ldrh	r2, [r2, #0]
 8001904:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	021a      	lsls	r2, r3, #8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f000 fdf4 	bl	80024fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800191c:	193b      	adds	r3, r7, r4
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	7819      	ldrb	r1, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fe56 	bl	80015da <HAL_I2C_AddrCallback>
}
 800192e:	e01d      	b.n	800196c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	021a      	lsls	r2, r3, #8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fddf 	bl	80024fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2240      	movs	r2, #64	@ 0x40
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001946:	230c      	movs	r3, #12
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	230f      	movs	r3, #15
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	7819      	ldrb	r1, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff fe40 	bl	80015da <HAL_I2C_AddrCallback>
}
 800195a:	e007      	b.n	800196c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2240      	movs	r2, #64	@ 0x40
 8001968:	2100      	movs	r1, #0
 800196a:	5499      	strb	r1, [r3, r2]
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bdb0      	pop	{r4, r5, r7, pc}

08001974 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2242      	movs	r2, #66	@ 0x42
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	4013      	ands	r3, r2
 8001994:	d008      	beq.n	80019a8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4924      	ldr	r1, [pc, #144]	@ (8001a34 <I2C_ITSlaveSeqCplt+0xc0>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00c      	b.n	80019c2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	4013      	ands	r3, r2
 80019b0:	d007      	beq.n	80019c2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	491e      	ldr	r1, [pc, #120]	@ (8001a38 <I2C_ITSlaveSeqCplt+0xc4>)
 80019be:	400a      	ands	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	@ 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b29      	cmp	r3, #41	@ 0x29
 80019cc:	d114      	bne.n	80019f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2241      	movs	r2, #65	@ 0x41
 80019d2:	2128      	movs	r1, #40	@ 0x28
 80019d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2221      	movs	r2, #33	@ 0x21
 80019da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2101      	movs	r1, #1
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 fd8b 	bl	80024fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2240      	movs	r2, #64	@ 0x40
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff fde2 	bl	80015ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80019f6:	e019      	b.n	8001a2c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	@ 0x41
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a02:	d113      	bne.n	8001a2c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2241      	movs	r2, #65	@ 0x41
 8001a08:	2128      	movs	r1, #40	@ 0x28
 8001a0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2222      	movs	r2, #34	@ 0x22
 8001a10:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2102      	movs	r1, #2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fd70 	bl	80024fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	2100      	movs	r1, #0
 8001a22:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fdcf 	bl	80015ca <HAL_I2C_SlaveRxCpltCallback>
}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	ffffbfff 	.word	0xffffbfff
 8001a38:	ffff7fff 	.word	0xffff7fff

08001a3c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001a58:	200b      	movs	r0, #11
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	2141      	movs	r1, #65	@ 0x41
 8001a60:	5c52      	ldrb	r2, [r2, r1]
 8001a62:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b21      	cmp	r3, #33	@ 0x21
 8001a72:	d003      	beq.n	8001a7c <I2C_ITSlaveCplt+0x40>
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b29      	cmp	r3, #41	@ 0x29
 8001a7a:	d109      	bne.n	8001a90 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001a7c:	4aac      	ldr	r2, [pc, #688]	@ (8001d30 <I2C_ITSlaveCplt+0x2f4>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0011      	movs	r1, r2
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fd3a 	bl	80024fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2221      	movs	r2, #33	@ 0x21
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a8e:	e020      	b.n	8001ad2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a90:	220b      	movs	r2, #11
 8001a92:	18bb      	adds	r3, r7, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b22      	cmp	r3, #34	@ 0x22
 8001a98:	d003      	beq.n	8001aa2 <I2C_ITSlaveCplt+0x66>
 8001a9a:	18bb      	adds	r3, r7, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001aa0:	d109      	bne.n	8001ab6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001aa2:	4aa4      	ldr	r2, [pc, #656]	@ (8001d34 <I2C_ITSlaveCplt+0x2f8>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 fd27 	bl	80024fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2222      	movs	r2, #34	@ 0x22
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab4:	e00d      	b.n	8001ad2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001ab6:	230b      	movs	r3, #11
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b28      	cmp	r3, #40	@ 0x28
 8001abe:	d108      	bne.n	8001ad2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001ac0:	4a9d      	ldr	r2, [pc, #628]	@ (8001d38 <I2C_ITSlaveCplt+0x2fc>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fd18 	bl	80024fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2180      	movs	r1, #128	@ 0x80
 8001ade:	0209      	lsls	r1, r1, #8
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4993      	ldr	r1, [pc, #588]	@ (8001d3c <I2C_ITSlaveCplt+0x300>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 faab 	bl	8002052 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	01db      	lsls	r3, r3, #7
 8001b02:	4013      	ands	r3, r2
 8001b04:	d013      	beq.n	8001b2e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	498b      	ldr	r1, [pc, #556]	@ (8001d40 <I2C_ITSlaveCplt+0x304>)
 8001b12:	400a      	ands	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01f      	beq.n	8001b5e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b2c:	e017      	b.n	8001b5e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4013      	ands	r3, r2
 8001b36:	d012      	beq.n	8001b5e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4980      	ldr	r1, [pc, #512]	@ (8001d44 <I2C_ITSlaveCplt+0x308>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4013      	ands	r3, r2
 8001b64:	d020      	beq.n	8001ba8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d04f      	beq.n	8001c66 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001bcc:	d04b      	beq.n	8001c66 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d12d      	bne.n	8001c34 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2241      	movs	r2, #65	@ 0x41
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b28      	cmp	r3, #40	@ 0x28
 8001be2:	d10b      	bne.n	8001bfc <I2C_ITSlaveCplt+0x1c0>
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	049b      	lsls	r3, r3, #18
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d106      	bne.n	8001bfc <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f8a9 	bl	8001d4c <I2C_ITListenCplt>
 8001bfa:	e034      	b.n	8001c66 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2241      	movs	r2, #65	@ 0x41
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b29      	cmp	r3, #41	@ 0x29
 8001c06:	d110      	bne.n	8001c2a <I2C_ITSlaveCplt+0x1ee>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a4f      	ldr	r2, [pc, #316]	@ (8001d48 <I2C_ITSlaveCplt+0x30c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00c      	beq.n	8001c2a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 fa19 	bl	8002052 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff fea6 	bl	8001974 <I2C_ITSlaveSeqCplt>
 8001c28:	e01d      	b.n	8001c66 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	61da      	str	r2, [r3, #28]
 8001c32:	e018      	b.n	8001c66 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c40:	2204      	movs	r2, #4
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <I2C_ITSlaveCplt+0x21c>
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	045b      	lsls	r3, r3, #17
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0011      	movs	r1, r2
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 f8cb 	bl	8001dfc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2242      	movs	r2, #66	@ 0x42
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 f8b9 	bl	8001dfc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2241      	movs	r2, #65	@ 0x41
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b28      	cmp	r3, #40	@ 0x28
 8001c94:	d147      	bne.n	8001d26 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 f855 	bl	8001d4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ca2:	e040      	b.n	8001d26 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca8:	4a27      	ldr	r2, [pc, #156]	@ (8001d48 <I2C_ITSlaveCplt+0x30c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d016      	beq.n	8001cdc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fe5f 	bl	8001974 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a23      	ldr	r2, [pc, #140]	@ (8001d48 <I2C_ITSlaveCplt+0x30c>)
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2241      	movs	r2, #65	@ 0x41
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	2100      	movs	r1, #0
 8001cd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff fc90 	bl	80015fa <HAL_I2C_ListenCpltCallback>
}
 8001cda:	e024      	b.n	8001d26 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2241      	movs	r2, #65	@ 0x41
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b22      	cmp	r3, #34	@ 0x22
 8001ce6:	d10f      	bne.n	8001d08 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2241      	movs	r2, #65	@ 0x41
 8001cec:	2120      	movs	r1, #32
 8001cee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2240      	movs	r2, #64	@ 0x40
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff fc62 	bl	80015ca <HAL_I2C_SlaveRxCpltCallback>
}
 8001d06:	e00e      	b.n	8001d26 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2241      	movs	r2, #65	@ 0x41
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2240      	movs	r2, #64	@ 0x40
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fc4a 	bl	80015ba <HAL_I2C_SlaveTxCpltCallback>
}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	00008001 	.word	0x00008001
 8001d34:	00008002 	.word	0x00008002
 8001d38:	00008003 	.word	0x00008003
 8001d3c:	fe00e800 	.word	0xfe00e800
 8001d40:	ffffbfff 	.word	0xffffbfff
 8001d44:	ffff7fff 	.word	0xffff7fff
 8001d48:	ffff0000 	.word	0xffff0000

08001d4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a26      	ldr	r2, [pc, #152]	@ (8001df4 <I2C_ITListenCplt+0xa8>)
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2241      	movs	r2, #65	@ 0x41
 8001d66:	2120      	movs	r1, #32
 8001d68:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2242      	movs	r2, #66	@ 0x42
 8001d6e:	2100      	movs	r1, #0
 8001d70:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <I2C_ITListenCplt+0xac>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fb95 	bl	80024fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fc08 	bl	80015fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	ffff0000 	.word	0xffff0000
 8001df8:	00008003 	.word	0x00008003

08001dfc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e06:	200f      	movs	r0, #15
 8001e08:	183b      	adds	r3, r7, r0
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	2141      	movs	r1, #65	@ 0x41
 8001e0e:	5c52      	ldrb	r2, [r2, r1]
 8001e10:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2242      	movs	r2, #66	@ 0x42
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a72      	ldr	r2, [pc, #456]	@ (8001fe8 <I2C_ITError+0x1ec>)
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b28      	cmp	r3, #40	@ 0x28
 8001e38:	d007      	beq.n	8001e4a <I2C_ITError+0x4e>
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b29      	cmp	r3, #41	@ 0x29
 8001e40:	d003      	beq.n	8001e4a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e48:	d10c      	bne.n	8001e64 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 fb54 	bl	80024fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2241      	movs	r2, #65	@ 0x41
 8001e58:	2128      	movs	r1, #40	@ 0x28
 8001e5a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a63      	ldr	r2, [pc, #396]	@ (8001fec <I2C_ITError+0x1f0>)
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e62:	e032      	b.n	8001eca <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e64:	4a62      	ldr	r2, [pc, #392]	@ (8001ff0 <I2C_ITError+0x1f4>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 fb46 	bl	80024fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 f8ed 	bl	8002052 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2241      	movs	r2, #65	@ 0x41
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b60      	cmp	r3, #96	@ 0x60
 8001e82:	d01f      	beq.n	8001ec4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2241      	movs	r2, #65	@ 0x41
 8001e88:	2120      	movs	r1, #32
 8001e8a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2220      	movs	r2, #32
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d114      	bne.n	8001ec4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d109      	bne.n	8001ebc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03b      	beq.n	8001f50 <I2C_ITError+0x154>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b11      	cmp	r3, #17
 8001edc:	d002      	beq.n	8001ee4 <I2C_ITError+0xe8>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b21      	cmp	r3, #33	@ 0x21
 8001ee2:	d135      	bne.n	8001f50 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	01db      	lsls	r3, r3, #7
 8001eee:	401a      	ands	r2, r3
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d107      	bne.n	8001f08 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	493c      	ldr	r1, [pc, #240]	@ (8001ff4 <I2C_ITError+0x1f8>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe ff4b 	bl	8000da8 <HAL_DMA_GetState>
 8001f12:	0003      	movs	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d016      	beq.n	8001f46 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ff8 <I2C_ITError+0x1fc>)
 8001f1e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2240      	movs	r2, #64	@ 0x40
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fed1 	bl	8000cd4 <HAL_DMA_Abort_IT>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d051      	beq.n	8001fda <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f40:	0018      	movs	r0, r3
 8001f42:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f44:	e049      	b.n	8001fda <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 f859 	bl	8002000 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f4e:	e044      	b.n	8001fda <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03b      	beq.n	8001fd0 <I2C_ITError+0x1d4>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d002      	beq.n	8001f64 <I2C_ITError+0x168>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b22      	cmp	r3, #34	@ 0x22
 8001f62:	d135      	bne.n	8001fd0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	401a      	ands	r2, r3
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	491e      	ldr	r1, [pc, #120]	@ (8001ffc <I2C_ITError+0x200>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe ff0b 	bl	8000da8 <HAL_DMA_GetState>
 8001f92:	0003      	movs	r3, r0
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d016      	beq.n	8001fc6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <I2C_ITError+0x1fc>)
 8001f9e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7fe fe91 	bl	8000cd4 <HAL_DMA_Abort_IT>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d013      	beq.n	8001fde <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fc4:	e00b      	b.n	8001fde <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f819 	bl	8002000 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fce:	e006      	b.n	8001fde <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f814 	bl	8002000 <I2C_TreatErrorCallback>
  }
}
 8001fd8:	e002      	b.n	8001fe0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	e000      	b.n	8001fe0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fde:	46c0      	nop			@ (mov r8, r8)
}
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	ffff0000 	.word	0xffff0000
 8001fec:	0800162d 	.word	0x0800162d
 8001ff0:	00008003 	.word	0x00008003
 8001ff4:	ffffbfff 	.word	0xffffbfff
 8001ff8:	08002097 	.word	0x08002097
 8001ffc:	ffff7fff 	.word	0xffff7fff

08002000 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2241      	movs	r2, #65	@ 0x41
 800200c:	5c9b      	ldrb	r3, [r3, r2]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b60      	cmp	r3, #96	@ 0x60
 8002012:	d10f      	bne.n	8002034 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2241      	movs	r2, #65	@ 0x41
 8002018:	2120      	movs	r1, #32
 800201a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2240      	movs	r2, #64	@ 0x40
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff faf4 	bl	800161a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002032:	e00a      	b.n	800204a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2240      	movs	r2, #64	@ 0x40
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff fae0 	bl	800160a <HAL_I2C_ErrorCallback>
}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d103      	bne.n	8002070 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	2b01      	cmp	r3, #1
 800207c:	d007      	beq.n	800208e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	619a      	str	r2, [r3, #24]
  }
}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}

08002096 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b0:	2200      	movs	r2, #0
 80020b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	2200      	movs	r2, #0
 80020c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff ff9a 	bl	8002000 <I2C_TreatErrorCallback>
}
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e4:	e03a      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	6839      	ldr	r1, [r7, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f8d3 	bl	8002298 <I2C_IsErrorOccurred>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e040      	b.n	800217c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	d02d      	beq.n	800215c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002100:	f7fe fcdc 	bl	8000abc <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d302      	bcc.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d122      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	425a      	negs	r2, r3
 8002126:	4153      	adcs	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	001a      	movs	r2, r3
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d113      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	2220      	movs	r2, #32
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2241      	movs	r2, #65	@ 0x41
 8002144:	2120      	movs	r1, #32
 8002146:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2242      	movs	r2, #66	@ 0x42
 800214c:	2100      	movs	r1, #0
 800214e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	2100      	movs	r1, #0
 8002156:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e00f      	b.n	800217c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	425a      	negs	r2, r3
 800216c:	4153      	adcs	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	001a      	movs	r2, r3
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d0b5      	beq.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	e032      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f87d 	bl	8002298 <I2C_IsErrorOccurred>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e030      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	d025      	beq.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7fe fc86 	bl	8000abc <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11a      	bne.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d013      	beq.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	2220      	movs	r2, #32
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2241      	movs	r2, #65	@ 0x41
 80021e0:	2120      	movs	r1, #32
 80021e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2242      	movs	r2, #66	@ 0x42
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2240      	movs	r2, #64	@ 0x40
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e007      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d1c5      	bne.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800221c:	e02f      	b.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f837 	bl	8002298 <I2C_IsErrorOccurred>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d001      	beq.n	8002232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e02d      	b.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7fe fc43 	bl	8000abc <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11a      	bne.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2220      	movs	r2, #32
 8002250:	4013      	ands	r3, r2
 8002252:	2b20      	cmp	r3, #32
 8002254:	d013      	beq.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	2220      	movs	r2, #32
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2241      	movs	r2, #65	@ 0x41
 8002266:	2120      	movs	r1, #32
 8002268:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2242      	movs	r2, #66	@ 0x42
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2220      	movs	r2, #32
 8002286:	4013      	ands	r3, r2
 8002288:	2b20      	cmp	r3, #32
 800228a:	d1c8      	bne.n	800221e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2327      	movs	r3, #39	@ 0x27
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2210      	movs	r2, #16
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <I2C_IsErrorOccurred+0x2e>
 80022c4:	e079      	b.n	80023ba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2210      	movs	r2, #16
 80022cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ce:	e057      	b.n	8002380 <I2C_IsErrorOccurred+0xe8>
 80022d0:	2227      	movs	r2, #39	@ 0x27
 80022d2:	18bb      	adds	r3, r7, r2
 80022d4:	18ba      	adds	r2, r7, r2
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	d04f      	beq.n	8002380 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7fe fbec 	bl	8000abc <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d302      	bcc.n	80022f6 <I2C_IsErrorOccurred+0x5e>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d144      	bne.n	8002380 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	01db      	lsls	r3, r3, #7
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002304:	2013      	movs	r0, #19
 8002306:	183b      	adds	r3, r7, r0
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	2142      	movs	r1, #66	@ 0x42
 800230c:	5c52      	ldrb	r2, [r2, r1]
 800230e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	401a      	ands	r2, r3
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	429a      	cmp	r2, r3
 8002322:	d126      	bne.n	8002372 <I2C_IsErrorOccurred+0xda>
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	01db      	lsls	r3, r3, #7
 800232a:	429a      	cmp	r2, r3
 800232c:	d021      	beq.n	8002372 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800232e:	183b      	adds	r3, r7, r0
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b20      	cmp	r3, #32
 8002334:	d01d      	beq.n	8002372 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2180      	movs	r1, #128	@ 0x80
 8002342:	01c9      	lsls	r1, r1, #7
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002348:	f7fe fbb8 	bl	8000abc <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	e00f      	b.n	8002372 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002352:	f7fe fbb3 	bl	8000abc <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b19      	cmp	r3, #25
 800235e:	d908      	bls.n	8002372 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	2220      	movs	r2, #32
 8002364:	4313      	orrs	r3, r2
 8002366:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002368:	2327      	movs	r3, #39	@ 0x27
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]

              break;
 8002370:	e006      	b.n	8002380 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2220      	movs	r2, #32
 800237a:	4013      	ands	r3, r2
 800237c:	2b20      	cmp	r3, #32
 800237e:	d1e8      	bne.n	8002352 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2220      	movs	r2, #32
 8002388:	4013      	ands	r3, r2
 800238a:	2b20      	cmp	r3, #32
 800238c:	d004      	beq.n	8002398 <I2C_IsErrorOccurred+0x100>
 800238e:	2327      	movs	r3, #39	@ 0x27
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d09b      	beq.n	80022d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002398:	2327      	movs	r3, #39	@ 0x27
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2220      	movs	r2, #32
 80023a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023b2:	2327      	movs	r3, #39	@ 0x27
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00c      	beq.n	80023e6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4313      	orrs	r3, r2
 80023d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2280      	movs	r2, #128	@ 0x80
 80023da:	0052      	lsls	r2, r2, #1
 80023dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023de:	2327      	movs	r3, #39	@ 0x27
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	d00c      	beq.n	800240a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2208      	movs	r2, #8
 80023f4:	4313      	orrs	r3, r2
 80023f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002402:	2327      	movs	r3, #39	@ 0x27
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d00c      	beq.n	800242e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	2202      	movs	r2, #2
 8002418:	4313      	orrs	r3, r2
 800241a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002426:	2327      	movs	r3, #39	@ 0x27
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800242e:	2327      	movs	r3, #39	@ 0x27
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01d      	beq.n	8002474 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	0018      	movs	r0, r3
 800243c:	f7ff fe09 	bl	8002052 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	490e      	ldr	r1, [pc, #56]	@ (8002484 <I2C_IsErrorOccurred+0x1ec>)
 800244c:	400a      	ands	r2, r1
 800244e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2241      	movs	r2, #65	@ 0x41
 8002460:	2120      	movs	r1, #32
 8002462:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2242      	movs	r2, #66	@ 0x42
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002474:	2327      	movs	r3, #39	@ 0x27
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b00a      	add	sp, #40	@ 0x28
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	0008      	movs	r0, r1
 8002492:	0011      	movs	r1, r2
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	240a      	movs	r4, #10
 8002498:	193b      	adds	r3, r7, r4
 800249a:	1c02      	adds	r2, r0, #0
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	2009      	movs	r0, #9
 80024a0:	183b      	adds	r3, r7, r0
 80024a2:	1c0a      	adds	r2, r1, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	059b      	lsls	r3, r3, #22
 80024ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	0419      	lsls	r1, r3, #16
 80024b4:	23ff      	movs	r3, #255	@ 0xff
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c2:	4313      	orrs	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d2:	0d51      	lsrs	r1, r2, #21
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	00d2      	lsls	r2, r2, #3
 80024d8:	400a      	ands	r2, r1
 80024da:	4907      	ldr	r1, [pc, #28]	@ (80024f8 <I2C_TransferConfig+0x70>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	43d2      	mvns	r2, r2
 80024e0:	401a      	ands	r2, r3
 80024e2:	0011      	movs	r1, r2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b007      	add	sp, #28
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	03ff63ff 	.word	0x03ff63ff

080024fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	000a      	movs	r2, r1
 8002506:	1cbb      	adds	r3, r7, #2
 8002508:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800250e:	1cbb      	adds	r3, r7, #2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d010      	beq.n	800253a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2242      	movs	r2, #66	@ 0x42
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2241      	movs	r2, #65	@ 0x41
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	001a      	movs	r2, r3
 800252a:	2328      	movs	r3, #40	@ 0x28
 800252c:	4013      	ands	r3, r2
 800252e:	2b28      	cmp	r3, #40	@ 0x28
 8002530:	d003      	beq.n	800253a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	22b0      	movs	r2, #176	@ 0xb0
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800253a:	1cbb      	adds	r3, r7, #2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	4013      	ands	r3, r2
 8002542:	d010      	beq.n	8002566 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2244      	movs	r2, #68	@ 0x44
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2241      	movs	r2, #65	@ 0x41
 8002550:	5c9b      	ldrb	r3, [r3, r2]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	001a      	movs	r2, r3
 8002556:	2328      	movs	r3, #40	@ 0x28
 8002558:	4013      	ands	r3, r2
 800255a:	2b28      	cmp	r3, #40	@ 0x28
 800255c:	d003      	beq.n	8002566 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	22b0      	movs	r2, #176	@ 0xb0
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002566:	1cbb      	adds	r3, r7, #2
 8002568:	2200      	movs	r2, #0
 800256a:	5e9b      	ldrsh	r3, [r3, r2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da03      	bge.n	8002578 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	22b8      	movs	r2, #184	@ 0xb8
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002578:	1cbb      	adds	r3, r7, #2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d103      	bne.n	8002588 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2290      	movs	r2, #144	@ 0x90
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002588:	1cbb      	adds	r3, r7, #2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2b20      	cmp	r3, #32
 800258e:	d103      	bne.n	8002598 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002598:	1cbb      	adds	r3, r7, #2
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d103      	bne.n	80025a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2240      	movs	r2, #64	@ 0x40
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43d9      	mvns	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2241      	movs	r2, #65	@ 0x41
 80025d2:	5c9b      	ldrb	r3, [r3, r2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d138      	bne.n	800264c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2240      	movs	r2, #64	@ 0x40
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e032      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2240      	movs	r2, #64	@ 0x40
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2241      	movs	r2, #65	@ 0x41
 80025f4:	2124      	movs	r1, #36	@ 0x24
 80025f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4911      	ldr	r1, [pc, #68]	@ (8002658 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2241      	movs	r2, #65	@ 0x41
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	ffffefff 	.word	0xffffefff

0800265c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2241      	movs	r2, #65	@ 0x41
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	d139      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2240      	movs	r2, #64	@ 0x40
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267c:	2302      	movs	r3, #2
 800267e:	e033      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2241      	movs	r2, #65	@ 0x41
 800268c:	2124      	movs	r1, #36	@ 0x24
 800268e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	438a      	bics	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a11      	ldr	r2, [pc, #68]	@ (80026f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	@ 0x41
 80026d6:	2120      	movs	r1, #32
 80026d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fffff0ff 	.word	0xfffff0ff

080026f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d11f      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	0013      	movs	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	189b      	adds	r3, r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4912      	ldr	r1, [pc, #72]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002726:	0018      	movs	r0, r3
 8002728:	f7fd fcea 	bl	8000100 <__udivsi3>
 800272c:	0003      	movs	r3, r0
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002732:	e008      	b.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3b01      	subs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e001      	b.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e009      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	401a      	ands	r2, r3
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	429a      	cmp	r2, r3
 8002756:	d0ed      	beq.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b004      	add	sp, #16
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	40007000 	.word	0x40007000
 8002768:	fffff9ff 	.word	0xfffff9ff
 800276c:	20000004 	.word	0x20000004
 8002770:	000f4240 	.word	0x000f4240

08002774 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <LL_RCC_GetAPB1Prescaler+0x14>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	23e0      	movs	r3, #224	@ 0xe0
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4013      	ands	r3, r2
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e2f3      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	4013      	ands	r3, r2
 80027a6:	d100      	bne.n	80027aa <HAL_RCC_OscConfig+0x1e>
 80027a8:	e07c      	b.n	80028a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027aa:	4bc3      	ldr	r3, [pc, #780]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2238      	movs	r2, #56	@ 0x38
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b4:	4bc0      	ldr	r3, [pc, #768]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2203      	movs	r2, #3
 80027ba:	4013      	ands	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_OscConfig+0x3e>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d062      	beq.n	80028a2 <HAL_RCC_OscConfig+0x116>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d15e      	bne.n	80028a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e2ce      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x78>
 80027f4:	4bb0      	ldr	r3, [pc, #704]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4baf      	ldr	r3, [pc, #700]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	0249      	lsls	r1, r1, #9
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e020      	b.n	8002846 <HAL_RCC_OscConfig+0xba>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	23a0      	movs	r3, #160	@ 0xa0
 800280a:	02db      	lsls	r3, r3, #11
 800280c:	429a      	cmp	r2, r3
 800280e:	d10e      	bne.n	800282e <HAL_RCC_OscConfig+0xa2>
 8002810:	4ba9      	ldr	r3, [pc, #676]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4ba8      	ldr	r3, [pc, #672]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	02c9      	lsls	r1, r1, #11
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4ba5      	ldr	r3, [pc, #660]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	0249      	lsls	r1, r1, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0xba>
 800282e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4ba1      	ldr	r3, [pc, #644]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002834:	49a1      	ldr	r1, [pc, #644]	@ (8002abc <HAL_RCC_OscConfig+0x330>)
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	4b9f      	ldr	r3, [pc, #636]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002840:	499f      	ldr	r1, [pc, #636]	@ (8002ac0 <HAL_RCC_OscConfig+0x334>)
 8002842:	400a      	ands	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d014      	beq.n	8002878 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe f935 	bl	8000abc <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe f930 	bl	8000abc <HAL_GetTick>
 800285c:	0002      	movs	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e28d      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286a:	4b93      	ldr	r3, [pc, #588]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xcc>
 8002876:	e015      	b.n	80028a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe f920 	bl	8000abc <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe f91b 	bl	8000abc <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e278      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002894:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0xf6>
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x124>
 80028ae:	e099      	b.n	80029e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b0:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2238      	movs	r2, #56	@ 0x38
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2203      	movs	r2, #3
 80028c0:	4013      	ands	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0x144>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d002      	beq.n	80028d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d135      	bne.n	8002942 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d6:	4b78      	ldr	r3, [pc, #480]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4013      	ands	r3, r2
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x162>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e24b      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4a74      	ldr	r2, [pc, #464]	@ (8002ac4 <HAL_RCC_OscConfig+0x338>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d112      	bne.n	8002930 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800290a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac8 <HAL_RCC_OscConfig+0x33c>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800291e:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	2207      	movs	r2, #7
 8002926:	4013      	ands	r3, r2
 8002928:	4a68      	ldr	r2, [pc, #416]	@ (8002acc <HAL_RCC_OscConfig+0x340>)
 800292a:	40da      	lsrs	r2, r3
 800292c:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <HAL_RCC_OscConfig+0x344>)
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002930:	4b68      	ldr	r3, [pc, #416]	@ (8002ad4 <HAL_RCC_OscConfig+0x348>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f7fe f865 	bl	8000a04 <HAL_InitTick>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d051      	beq.n	80029e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e221      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d030      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800294a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ac8 <HAL_RCC_OscConfig+0x33c>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800295e:	4b56      	ldr	r3, [pc, #344]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b55      	ldr	r3, [pc, #340]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	0049      	lsls	r1, r1, #1
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe f8a6 	bl	8000abc <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe f8a1 	bl	8000abc <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1fe      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4013      	ands	r3, r2
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x338>)
 800299a:	4013      	ands	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	021a      	lsls	r2, r3, #8
 80029a4:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80029ac:	4b42      	ldr	r3, [pc, #264]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	4949      	ldr	r1, [pc, #292]	@ (8002ad8 <HAL_RCC_OscConfig+0x34c>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f880 	bl	8000abc <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe f87b 	bl	8000abc <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1d8      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d4:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x236>
 80029e0:	e000      	b.n	80029e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	d047      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029ee:	4b32      	ldr	r3, [pc, #200]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2238      	movs	r2, #56	@ 0x38
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b18      	cmp	r3, #24
 80029f8:	d10a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80029fa:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d03c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2f2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d138      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e1ba      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d019      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a18:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a1c:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe f84a 	bl	8000abc <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe f845 	bl	8000abc <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a2      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a40:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a44:	2202      	movs	r2, #2
 8002a46:	4013      	ands	r3, r2
 8002a48:	d0f1      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2a2>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	438a      	bics	r2, r1
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe f830 	bl	8000abc <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe f82b 	bl	8000abc <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e188      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d1f1      	bne.n	8002a62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2204      	movs	r2, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2fe>
 8002a88:	e0c6      	b.n	8002c18 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2238      	movs	r2, #56	@ 0x38
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d11e      	bne.n	8002adc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x32c>)
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <HAL_RCC_OscConfig+0x31e>
 8002aa8:	e0b6      	b.n	8002c18 <HAL_RCC_OscConfig+0x48c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d000      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x328>
 8002ab2:	e0b1      	b.n	8002c18 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e166      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	fffeffff 	.word	0xfffeffff
 8002ac0:	fffbffff 	.word	0xfffbffff
 8002ac4:	ffff80ff 	.word	0xffff80ff
 8002ac8:	ffffc7ff 	.word	0xffffc7ff
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002adc:	4bac      	ldr	r3, [pc, #688]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ae0:	2380      	movs	r3, #128	@ 0x80
 8002ae2:	055b      	lsls	r3, r3, #21
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_OscConfig+0x360>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x362>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d011      	beq.n	8002b16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4ba7      	ldr	r3, [pc, #668]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002af6:	4ba6      	ldr	r3, [pc, #664]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	0549      	lsls	r1, r1, #21
 8002afc:	430a      	orrs	r2, r1
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b00:	4ba3      	ldr	r3, [pc, #652]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b16:	4b9f      	ldr	r3, [pc, #636]	@ (8002d94 <HAL_RCC_OscConfig+0x608>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	@ 0x80
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b22:	4b9c      	ldr	r3, [pc, #624]	@ (8002d94 <HAL_RCC_OscConfig+0x608>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b9b      	ldr	r3, [pc, #620]	@ (8002d94 <HAL_RCC_OscConfig+0x608>)
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	0049      	lsls	r1, r1, #1
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b30:	f7fd ffc4 	bl	8000abc <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fd ffbf 	bl	8000abc <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e11c      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4c:	4b91      	ldr	r3, [pc, #580]	@ (8002d94 <HAL_RCC_OscConfig+0x608>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3e2>
 8002b60:	4b8b      	ldr	r3, [pc, #556]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b64:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x404>
 8002b76:	4b86      	ldr	r3, [pc, #536]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b7a:	4b85      	ldr	r3, [pc, #532]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b82:	4b83      	ldr	r3, [pc, #524]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b86:	4b82      	ldr	r3, [pc, #520]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b88:	2101      	movs	r1, #1
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002b90:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b94:	4b7e      	ldr	r3, [pc, #504]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002b9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d014      	beq.n	8002bda <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fd ff84 	bl	8000abc <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb8:	e009      	b.n	8002bce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fd ff7f 	bl	8000abc <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	4a74      	ldr	r2, [pc, #464]	@ (8002d98 <HAL_RCC_OscConfig+0x60c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0db      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	4b70      	ldr	r3, [pc, #448]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x42e>
 8002bd8:	e013      	b.n	8002c02 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fd ff6f 	bl	8000abc <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be2:	e009      	b.n	8002bf8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fd ff6a 	bl	8000abc <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_RCC_OscConfig+0x60c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0c6      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4b65      	ldr	r3, [pc, #404]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c02:	231f      	movs	r3, #31
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c10:	4b5f      	ldr	r3, [pc, #380]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c12:	4962      	ldr	r1, [pc, #392]	@ (8002d9c <HAL_RCC_OscConfig+0x610>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d100      	bne.n	8002c22 <HAL_RCC_OscConfig+0x496>
 8002c20:	e0b0      	b.n	8002d84 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c22:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2238      	movs	r2, #56	@ 0x38
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d100      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4a4>
 8002c2e:	e078      	b.n	8002d22 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d153      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b55      	ldr	r3, [pc, #340]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b54      	ldr	r3, [pc, #336]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c3e:	4958      	ldr	r1, [pc, #352]	@ (8002da0 <HAL_RCC_OscConfig+0x614>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd ff3a 	bl	8000abc <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fd ff35 	bl	8000abc <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e092      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c60:	4b4b      	ldr	r3, [pc, #300]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	049b      	lsls	r3, r3, #18
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b48      	ldr	r3, [pc, #288]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	@ (8002da4 <HAL_RCC_OscConfig+0x618>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	431a      	orrs	r2, r3
 8002c94:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	0449      	lsls	r1, r1, #17
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ca8:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	0549      	lsls	r1, r1, #21
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fd ff01 	bl	8000abc <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fd fefc 	bl	8000abc <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e059      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	049b      	lsls	r3, r3, #18
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x534>
 8002cde:	e051      	b.n	8002d84 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002ce6:	492e      	ldr	r1, [pc, #184]	@ (8002da0 <HAL_RCC_OscConfig+0x614>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fd fee6 	bl	8000abc <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fd fee1 	bl	8000abc <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e03e      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	049b      	lsls	r3, r3, #18
 8002d10:	4013      	ands	r3, r2
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002d1a:	4923      	ldr	r1, [pc, #140]	@ (8002da8 <HAL_RCC_OscConfig+0x61c>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e030      	b.n	8002d84 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e02b      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_RCC_OscConfig+0x604>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2203      	movs	r2, #3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d11e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2270      	movs	r2, #112	@ 0x70
 8002d46:	401a      	ands	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d117      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	23fe      	movs	r3, #254	@ 0xfe
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	401a      	ands	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	23f8      	movs	r3, #248	@ 0xf8
 8002d66:	039b      	lsls	r3, r3, #14
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	0f5b      	lsrs	r3, r3, #29
 8002d76:	075a      	lsls	r2, r3, #29
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b008      	add	sp, #32
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
 8002d98:	00001388 	.word	0x00001388
 8002d9c:	efffffff 	.word	0xefffffff
 8002da0:	feffffff 	.word	0xfeffffff
 8002da4:	1fc1808c 	.word	0x1fc1808c
 8002da8:	effefffc 	.word	0xeffefffc

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0e9      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b76      	ldr	r3, [pc, #472]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d91e      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b73      	ldr	r3, [pc, #460]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002de0:	f7fd fe6c 	bl	8000abc <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dea:	f7fd fe67 	bl	8000abc <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0ca      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dfe:	4b67      	ldr	r3, [pc, #412]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2207      	movs	r2, #7
 8002e04:	4013      	ands	r3, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d006      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e20:	4b60      	ldr	r3, [pc, #384]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e26:	21e0      	movs	r1, #224	@ 0xe0
 8002e28:	01c9      	lsls	r1, r1, #7
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b59      	ldr	r3, [pc, #356]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d057      	beq.n	8002efc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e54:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d12b      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e097      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	049b      	lsls	r3, r3, #18
 8002e74:	4013      	ands	r3, r2
 8002e76:	d11f      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e08b      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d113      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e07f      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9c:	4b41      	ldr	r3, [pc, #260]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e074      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e06d      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b37      	ldr	r3, [pc, #220]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fd fdf6 	bl	8000abc <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e009      	b.n	8002eea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fd fdf1 	bl	8000abc <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e054      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eea:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2238      	movs	r2, #56	@ 0x38
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1ec      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efc:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2207      	movs	r2, #7
 8002f02:	4013      	ands	r3, r2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d21e      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2207      	movs	r2, #7
 8002f10:	4393      	bics	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f1c:	f7fd fdce 	bl	8000abc <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f24:	e009      	b.n	8002f3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f26:	f7fd fdc9 	bl	8000abc <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e02c      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f3a:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4013      	ands	r3, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <HAL_RCC_ClockConfig+0x200>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f66:	f000 f829 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f6a:	0001      	movs	r1, r0
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	220f      	movs	r2, #15
 8002f74:	401a      	ands	r2, r3
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <HAL_RCC_ClockConfig+0x204>)
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	58d3      	ldr	r3, [r2, r3]
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	4013      	ands	r3, r2
 8002f80:	000a      	movs	r2, r1
 8002f82:	40da      	lsrs	r2, r3
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_ClockConfig+0x208>)
 8002f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_ClockConfig+0x20c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fd fd39 	bl	8000a04 <HAL_InitTick>
 8002f92:	0003      	movs	r3, r0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	00001388 	.word	0x00001388
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	fffff0ff 	.word	0xfffff0ff
 8002fac:	ffff8fff 	.word	0xffff8fff
 8002fb0:	08003e68 	.word	0x08003e68
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000008 	.word	0x20000008

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2238      	movs	r2, #56	@ 0x38
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d10f      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002fcc:	4b39      	ldr	r3, [pc, #228]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0adb      	lsrs	r3, r3, #11
 8002fd2:	2207      	movs	r2, #7
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	0013      	movs	r3, r2
 8002fdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	4835      	ldr	r0, [pc, #212]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fe2:	f7fd f88d 	bl	8000100 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e05d      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fec:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2238      	movs	r2, #56	@ 0x38
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff8:	4b30      	ldr	r3, [pc, #192]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x100>)
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	e054      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2238      	movs	r2, #56	@ 0x38
 8003004:	4013      	ands	r3, r2
 8003006:	2b10      	cmp	r3, #16
 8003008:	d138      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2203      	movs	r2, #3
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003014:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	2207      	movs	r2, #7
 800301c:	4013      	ands	r3, r2
 800301e:	3301      	adds	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d10d      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4824      	ldr	r0, [pc, #144]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x100>)
 800302c:	f7fd f868 	bl	8000100 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	0019      	movs	r1, r3
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	227f      	movs	r2, #127	@ 0x7f
 800303c:	4013      	ands	r3, r2
 800303e:	434b      	muls	r3, r1
 8003040:	617b      	str	r3, [r7, #20]
        break;
 8003042:	e00d      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	481c      	ldr	r0, [pc, #112]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003048:	f7fd f85a 	bl	8000100 <__udivsi3>
 800304c:	0003      	movs	r3, r0
 800304e:	0019      	movs	r1, r3
 8003050:	4b18      	ldr	r3, [pc, #96]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	227f      	movs	r2, #127	@ 0x7f
 8003058:	4013      	ands	r3, r2
 800305a:	434b      	muls	r3, r1
 800305c:	617b      	str	r3, [r7, #20]
        break;
 800305e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003060:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0f5b      	lsrs	r3, r3, #29
 8003066:	2207      	movs	r2, #7
 8003068:	4013      	ands	r3, r2
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7fd f845 	bl	8000100 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e015      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800307c:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2238      	movs	r2, #56	@ 0x38
 8003082:	4013      	ands	r3, r2
 8003084:	2b20      	cmp	r3, #32
 8003086:	d103      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003088:	2380      	movs	r3, #128	@ 0x80
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003090:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2238      	movs	r2, #56	@ 0x38
 8003096:	4013      	ands	r3, r2
 8003098:	2b18      	cmp	r3, #24
 800309a:	d103      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800309c:	23fa      	movs	r3, #250	@ 0xfa
 800309e:	01db      	lsls	r3, r3, #7
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e001      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030a8:	693b      	ldr	r3, [r7, #16]
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b006      	add	sp, #24
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	0004      	movs	r4, r0
 80030de:	f7ff fb49 	bl	8002774 <LL_RCC_GetAPB1Prescaler>
 80030e2:	0003      	movs	r3, r0
 80030e4:	0b1a      	lsrs	r2, r3, #12
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	58d3      	ldr	r3, [r2, r3]
 80030ec:	221f      	movs	r2, #31
 80030ee:	4013      	ands	r3, r2
 80030f0:	40dc      	lsrs	r4, r3
 80030f2:	0023      	movs	r3, r4
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdb0      	pop	{r4, r5, r7, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	08003ea8 	.word	0x08003ea8

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003108:	2313      	movs	r3, #19
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003110:	2312      	movs	r3, #18
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	4013      	ands	r3, r2
 8003122:	d100      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003124:	e0a3      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2011      	movs	r0, #17
 8003128:	183b      	adds	r3, r7, r0
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b86      	ldr	r3, [pc, #536]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	055b      	lsls	r3, r3, #21
 8003136:	4013      	ands	r3, r2
 8003138:	d110      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b83      	ldr	r3, [pc, #524]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800313e:	4b82      	ldr	r3, [pc, #520]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003140:	2180      	movs	r1, #128	@ 0x80
 8003142:	0549      	lsls	r1, r1, #21
 8003144:	430a      	orrs	r2, r1
 8003146:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003148:	4b7f      	ldr	r3, [pc, #508]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800314a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	183b      	adds	r3, r7, r0
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b7b      	ldr	r3, [pc, #492]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b7a      	ldr	r3, [pc, #488]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003162:	2180      	movs	r1, #128	@ 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800316a:	f7fd fca7 	bl	8000abc <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fd fca2 	bl	8000abc <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d904      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003182:	2313      	movs	r3, #19
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2203      	movs	r2, #3
 8003188:	701a      	strb	r2, [r3, #0]
        break;
 800318a:	e005      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800318c:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4013      	ands	r3, r2
 8003196:	d0ed      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003198:	2313      	movs	r3, #19
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d154      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a2:	4b69      	ldr	r3, [pc, #420]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031a6:	23c0      	movs	r3, #192	@ 0xc0
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d019      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d014      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031be:	4b62      	ldr	r3, [pc, #392]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	4a63      	ldr	r2, [pc, #396]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ce:	2180      	movs	r1, #128	@ 0x80
 80031d0:	0249      	lsls	r1, r1, #9
 80031d2:	430a      	orrs	r2, r1
 80031d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031da:	4b5b      	ldr	r3, [pc, #364]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031dc:	495d      	ldr	r1, [pc, #372]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031de:	400a      	ands	r2, r1
 80031e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e2:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d016      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd fc64 	bl	8000abc <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	e00c      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fc5f 	bl	8000abc <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a54      	ldr	r2, [pc, #336]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d904      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800320a:	2313      	movs	r3, #19
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2203      	movs	r2, #3
 8003210:	701a      	strb	r2, [r3, #0]
            break;
 8003212:	e004      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003214:	4b4c      	ldr	r3, [pc, #304]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	2202      	movs	r2, #2
 800321a:	4013      	ands	r3, r2
 800321c:	d0ed      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800321e:	2313      	movs	r3, #19
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003228:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	4a48      	ldr	r2, [pc, #288]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800322e:	4013      	ands	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	4b44      	ldr	r3, [pc, #272]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003238:	430a      	orrs	r2, r1
 800323a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800323c:	e00c      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800323e:	2312      	movs	r3, #18
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2213      	movs	r2, #19
 8003244:	18ba      	adds	r2, r7, r2
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e005      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	2312      	movs	r3, #18
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	2213      	movs	r2, #19
 8003252:	18ba      	adds	r2, r7, r2
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003258:	2311      	movs	r3, #17
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003266:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003268:	493c      	ldr	r1, [pc, #240]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800326a:	400a      	ands	r2, r1
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003278:	4b33      	ldr	r3, [pc, #204]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	2203      	movs	r2, #3
 800327e:	4393      	bics	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2202      	movs	r2, #2
 8003292:	4013      	ands	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003296:	4b2c      	ldr	r3, [pc, #176]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	220c      	movs	r2, #12
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032b4:	4b24      	ldr	r3, [pc, #144]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	4a29      	ldr	r2, [pc, #164]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032c4:	430a      	orrs	r2, r1
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	d015      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	0899      	lsrs	r1, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d106      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032f2:	4b15      	ldr	r3, [pc, #84]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	0249      	lsls	r1, r1, #9
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	4013      	ands	r3, r2
 800330a:	d016      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800331c:	430a      	orrs	r2, r1
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	01db      	lsls	r3, r3, #7
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	0249      	lsls	r1, r1, #9
 8003336:	430a      	orrs	r2, r1
 8003338:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800333a:	2312      	movs	r3, #18
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
 8003350:	fffffcff 	.word	0xfffffcff
 8003354:	fffeffff 	.word	0xfffeffff
 8003358:	00001388 	.word	0x00001388
 800335c:	efffffff 	.word	0xefffffff
 8003360:	ffffcfff 	.word	0xffffcfff
 8003364:	ffff3fff 	.word	0xffff3fff

08003368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e046      	b.n	8003408 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2288      	movs	r2, #136	@ 0x88
 800337e:	589b      	ldr	r3, [r3, r2]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2284      	movs	r2, #132	@ 0x84
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	0018      	movs	r0, r3
 8003390:	f7fd fa56 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2288      	movs	r2, #136	@ 0x88
 8003398:	2124      	movs	r1, #36	@ 0x24
 800339a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f9d0 	bl	800375c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f828 	bl	8003414 <UART_SetConfig>
 80033c4:	0003      	movs	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01c      	b.n	8003408 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	490d      	ldr	r1, [pc, #52]	@ (8003410 <HAL_UART_Init+0xa8>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	212a      	movs	r1, #42	@ 0x2a
 80033ea:	438a      	bics	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fa5f 	bl	80038c4 <UART_CheckIdleState>
 8003406:	0003      	movs	r3, r0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	ffffb7ff 	.word	0xffffb7ff

08003414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800341c:	231a      	movs	r3, #26
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4abc      	ldr	r2, [pc, #752]	@ (8003734 <UART_SetConfig+0x320>)
 8003444:	4013      	ands	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4ab7      	ldr	r2, [pc, #732]	@ (8003738 <UART_SetConfig+0x324>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	4313      	orrs	r3, r2
 8003478:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4aae      	ldr	r2, [pc, #696]	@ (800373c <UART_SetConfig+0x328>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	220f      	movs	r2, #15
 8003498:	4393      	bics	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4aa4      	ldr	r2, [pc, #656]	@ (8003740 <UART_SetConfig+0x32c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d127      	bne.n	8003502 <UART_SetConfig+0xee>
 80034b2:	4ba4      	ldr	r3, [pc, #656]	@ (8003744 <UART_SetConfig+0x330>)
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	2203      	movs	r2, #3
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d017      	beq.n	80034ee <UART_SetConfig+0xda>
 80034be:	d81b      	bhi.n	80034f8 <UART_SetConfig+0xe4>
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d00a      	beq.n	80034da <UART_SetConfig+0xc6>
 80034c4:	d818      	bhi.n	80034f8 <UART_SetConfig+0xe4>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <UART_SetConfig+0xbc>
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d00a      	beq.n	80034e4 <UART_SetConfig+0xd0>
 80034ce:	e013      	b.n	80034f8 <UART_SetConfig+0xe4>
 80034d0:	231b      	movs	r3, #27
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e058      	b.n	800358c <UART_SetConfig+0x178>
 80034da:	231b      	movs	r3, #27
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e053      	b.n	800358c <UART_SetConfig+0x178>
 80034e4:	231b      	movs	r3, #27
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2204      	movs	r2, #4
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e04e      	b.n	800358c <UART_SetConfig+0x178>
 80034ee:	231b      	movs	r3, #27
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2208      	movs	r2, #8
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e049      	b.n	800358c <UART_SetConfig+0x178>
 80034f8:	231b      	movs	r3, #27
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2210      	movs	r2, #16
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e044      	b.n	800358c <UART_SetConfig+0x178>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a90      	ldr	r2, [pc, #576]	@ (8003748 <UART_SetConfig+0x334>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d127      	bne.n	800355c <UART_SetConfig+0x148>
 800350c:	4b8d      	ldr	r3, [pc, #564]	@ (8003744 <UART_SetConfig+0x330>)
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	220c      	movs	r2, #12
 8003512:	4013      	ands	r3, r2
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d017      	beq.n	8003548 <UART_SetConfig+0x134>
 8003518:	d81b      	bhi.n	8003552 <UART_SetConfig+0x13e>
 800351a:	2b08      	cmp	r3, #8
 800351c:	d00a      	beq.n	8003534 <UART_SetConfig+0x120>
 800351e:	d818      	bhi.n	8003552 <UART_SetConfig+0x13e>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <UART_SetConfig+0x116>
 8003524:	2b04      	cmp	r3, #4
 8003526:	d00a      	beq.n	800353e <UART_SetConfig+0x12a>
 8003528:	e013      	b.n	8003552 <UART_SetConfig+0x13e>
 800352a:	231b      	movs	r3, #27
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e02b      	b.n	800358c <UART_SetConfig+0x178>
 8003534:	231b      	movs	r3, #27
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2202      	movs	r2, #2
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e026      	b.n	800358c <UART_SetConfig+0x178>
 800353e:	231b      	movs	r3, #27
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	2204      	movs	r2, #4
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e021      	b.n	800358c <UART_SetConfig+0x178>
 8003548:	231b      	movs	r3, #27
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2208      	movs	r2, #8
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e01c      	b.n	800358c <UART_SetConfig+0x178>
 8003552:	231b      	movs	r3, #27
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2210      	movs	r2, #16
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e017      	b.n	800358c <UART_SetConfig+0x178>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7a      	ldr	r2, [pc, #488]	@ (800374c <UART_SetConfig+0x338>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d104      	bne.n	8003570 <UART_SetConfig+0x15c>
 8003566:	231b      	movs	r3, #27
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e00d      	b.n	800358c <UART_SetConfig+0x178>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a76      	ldr	r2, [pc, #472]	@ (8003750 <UART_SetConfig+0x33c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d104      	bne.n	8003584 <UART_SetConfig+0x170>
 800357a:	231b      	movs	r3, #27
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e003      	b.n	800358c <UART_SetConfig+0x178>
 8003584:	231b      	movs	r3, #27
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2210      	movs	r2, #16
 800358a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	429a      	cmp	r2, r3
 8003596:	d000      	beq.n	800359a <UART_SetConfig+0x186>
 8003598:	e065      	b.n	8003666 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800359a:	231b      	movs	r3, #27
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d015      	beq.n	80035d0 <UART_SetConfig+0x1bc>
 80035a4:	dc18      	bgt.n	80035d8 <UART_SetConfig+0x1c4>
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00d      	beq.n	80035c6 <UART_SetConfig+0x1b2>
 80035aa:	dc15      	bgt.n	80035d8 <UART_SetConfig+0x1c4>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <UART_SetConfig+0x1a2>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d005      	beq.n	80035c0 <UART_SetConfig+0x1ac>
 80035b4:	e010      	b.n	80035d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b6:	f7ff fd8d 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80035ba:	0003      	movs	r3, r0
 80035bc:	617b      	str	r3, [r7, #20]
        break;
 80035be:	e012      	b.n	80035e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b64      	ldr	r3, [pc, #400]	@ (8003754 <UART_SetConfig+0x340>)
 80035c2:	617b      	str	r3, [r7, #20]
        break;
 80035c4:	e00f      	b.n	80035e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7ff fcf9 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80035ca:	0003      	movs	r3, r0
 80035cc:	617b      	str	r3, [r7, #20]
        break;
 80035ce:	e00a      	b.n	80035e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	617b      	str	r3, [r7, #20]
        break;
 80035d6:	e006      	b.n	80035e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035dc:	231a      	movs	r3, #26
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
        break;
 80035e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d100      	bne.n	80035ee <UART_SetConfig+0x1da>
 80035ec:	e08d      	b.n	800370a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f2:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <UART_SetConfig+0x344>)
 80035f4:	0052      	lsls	r2, r2, #1
 80035f6:	5ad3      	ldrh	r3, [r2, r3]
 80035f8:	0019      	movs	r1, r3
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7fc fd80 	bl	8000100 <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	005a      	lsls	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	18d2      	adds	r2, r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f7fc fd74 	bl	8000100 <__udivsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	d91c      	bls.n	800365c <UART_SetConfig+0x248>
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	025b      	lsls	r3, r3, #9
 8003628:	429a      	cmp	r2, r3
 800362a:	d217      	bcs.n	800365c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	b29a      	uxth	r2, r3
 8003630:	200e      	movs	r0, #14
 8003632:	183b      	adds	r3, r7, r0
 8003634:	210f      	movs	r1, #15
 8003636:	438a      	bics	r2, r1
 8003638:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	2207      	movs	r2, #7
 8003642:	4013      	ands	r3, r2
 8003644:	b299      	uxth	r1, r3
 8003646:	183b      	adds	r3, r7, r0
 8003648:	183a      	adds	r2, r7, r0
 800364a:	8812      	ldrh	r2, [r2, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	183a      	adds	r2, r7, r0
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e056      	b.n	800370a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800365c:	231a      	movs	r3, #26
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e051      	b.n	800370a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003666:	231b      	movs	r3, #27
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d015      	beq.n	800369c <UART_SetConfig+0x288>
 8003670:	dc18      	bgt.n	80036a4 <UART_SetConfig+0x290>
 8003672:	2b04      	cmp	r3, #4
 8003674:	d00d      	beq.n	8003692 <UART_SetConfig+0x27e>
 8003676:	dc15      	bgt.n	80036a4 <UART_SetConfig+0x290>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <UART_SetConfig+0x26e>
 800367c:	2b02      	cmp	r3, #2
 800367e:	d005      	beq.n	800368c <UART_SetConfig+0x278>
 8003680:	e010      	b.n	80036a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003682:	f7ff fd27 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8003686:	0003      	movs	r3, r0
 8003688:	617b      	str	r3, [r7, #20]
        break;
 800368a:	e012      	b.n	80036b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800368c:	4b31      	ldr	r3, [pc, #196]	@ (8003754 <UART_SetConfig+0x340>)
 800368e:	617b      	str	r3, [r7, #20]
        break;
 8003690:	e00f      	b.n	80036b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003692:	f7ff fc93 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8003696:	0003      	movs	r3, r0
 8003698:	617b      	str	r3, [r7, #20]
        break;
 800369a:	e00a      	b.n	80036b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	617b      	str	r3, [r7, #20]
        break;
 80036a2:	e006      	b.n	80036b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036a8:	231a      	movs	r3, #26
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
        break;
 80036b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d028      	beq.n	800370a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036bc:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <UART_SetConfig+0x344>)
 80036be:	0052      	lsls	r2, r2, #1
 80036c0:	5ad3      	ldrh	r3, [r2, r3]
 80036c2:	0019      	movs	r1, r3
 80036c4:	6978      	ldr	r0, [r7, #20]
 80036c6:	f7fc fd1b 	bl	8000100 <__udivsi3>
 80036ca:	0003      	movs	r3, r0
 80036cc:	001a      	movs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	18d2      	adds	r2, r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0019      	movs	r1, r3
 80036dc:	0010      	movs	r0, r2
 80036de:	f7fc fd0f 	bl	8000100 <__udivsi3>
 80036e2:	0003      	movs	r3, r0
 80036e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d90a      	bls.n	8003702 <UART_SetConfig+0x2ee>
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	2380      	movs	r3, #128	@ 0x80
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d205      	bcs.n	8003702 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e003      	b.n	800370a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003702:	231a      	movs	r3, #26
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	226a      	movs	r2, #106	@ 0x6a
 800370e:	2101      	movs	r1, #1
 8003710:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2268      	movs	r2, #104	@ 0x68
 8003716:	2101      	movs	r1, #1
 8003718:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003726:	231a      	movs	r3, #26
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	781b      	ldrb	r3, [r3, #0]
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b008      	add	sp, #32
 8003732:	bd80      	pop	{r7, pc}
 8003734:	cfff69f3 	.word	0xcfff69f3
 8003738:	ffffcfff 	.word	0xffffcfff
 800373c:	11fff4ff 	.word	0x11fff4ff
 8003740:	40013800 	.word	0x40013800
 8003744:	40021000 	.word	0x40021000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	40004c00 	.word	0x40004c00
 8003754:	00f42400 	.word	0x00f42400
 8003758:	08003ec8 	.word	0x08003ec8

0800375c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	2208      	movs	r2, #8
 800376a:	4013      	ands	r3, r2
 800376c:	d00b      	beq.n	8003786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a4a      	ldr	r2, [pc, #296]	@ (80038a0 <UART_AdvFeatureConfig+0x144>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	d00b      	beq.n	80037a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a43      	ldr	r2, [pc, #268]	@ (80038a4 <UART_AdvFeatureConfig+0x148>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d00b      	beq.n	80037ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a3b      	ldr	r2, [pc, #236]	@ (80038a8 <UART_AdvFeatureConfig+0x14c>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	2204      	movs	r2, #4
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a34      	ldr	r2, [pc, #208]	@ (80038ac <UART_AdvFeatureConfig+0x150>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	2210      	movs	r2, #16
 80037f2:	4013      	ands	r3, r2
 80037f4:	d00b      	beq.n	800380e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <UART_AdvFeatureConfig+0x154>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	2220      	movs	r2, #32
 8003814:	4013      	ands	r3, r2
 8003816:	d00b      	beq.n	8003830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4a25      	ldr	r2, [pc, #148]	@ (80038b4 <UART_AdvFeatureConfig+0x158>)
 8003820:	4013      	ands	r3, r2
 8003822:	0019      	movs	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	4013      	ands	r3, r2
 8003838:	d01d      	beq.n	8003876 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <UART_AdvFeatureConfig+0x15c>)
 8003842:	4013      	ands	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	035b      	lsls	r3, r3, #13
 800385a:	429a      	cmp	r2, r3
 800385c:	d10b      	bne.n	8003876 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a15      	ldr	r2, [pc, #84]	@ (80038bc <UART_AdvFeatureConfig+0x160>)
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	4013      	ands	r3, r2
 800387e:	d00b      	beq.n	8003898 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a0e      	ldr	r2, [pc, #56]	@ (80038c0 <UART_AdvFeatureConfig+0x164>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	ffff7fff 	.word	0xffff7fff
 80038a4:	fffdffff 	.word	0xfffdffff
 80038a8:	fffeffff 	.word	0xfffeffff
 80038ac:	fffbffff 	.word	0xfffbffff
 80038b0:	ffffefff 	.word	0xffffefff
 80038b4:	ffffdfff 	.word	0xffffdfff
 80038b8:	ffefffff 	.word	0xffefffff
 80038bc:	ff9fffff 	.word	0xff9fffff
 80038c0:	fff7ffff 	.word	0xfff7ffff

080038c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b092      	sub	sp, #72	@ 0x48
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2290      	movs	r2, #144	@ 0x90
 80038d0:	2100      	movs	r1, #0
 80038d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d4:	f7fd f8f2 	bl	8000abc <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2208      	movs	r2, #8
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d12d      	bne.n	8003946 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ec:	2280      	movs	r2, #128	@ 0x80
 80038ee:	0391      	lsls	r1, r2, #14
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4a47      	ldr	r2, [pc, #284]	@ (8003a10 <UART_CheckIdleState+0x14c>)
 80038f4:	9200      	str	r2, [sp, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f000 f88e 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d022      	beq.n	8003946 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003900:	f3ef 8310 	mrs	r3, PRIMASK
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800390a:	2301      	movs	r3, #1
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	f383 8810 	msr	PRIMASK, r3
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2180      	movs	r1, #128	@ 0x80
 8003922:	438a      	bics	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2288      	movs	r2, #136	@ 0x88
 8003936:	2120      	movs	r1, #32
 8003938:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2284      	movs	r2, #132	@ 0x84
 800393e:	2100      	movs	r1, #0
 8003940:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e060      	b.n	8003a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	4013      	ands	r3, r2
 8003950:	2b04      	cmp	r3, #4
 8003952:	d146      	bne.n	80039e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003956:	2280      	movs	r2, #128	@ 0x80
 8003958:	03d1      	lsls	r1, r2, #15
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a10 <UART_CheckIdleState+0x14c>)
 800395e:	9200      	str	r2, [sp, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	f000 f859 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d03b      	beq.n	80039e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396a:	f3ef 8310 	mrs	r3, PRIMASK
 800396e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003972:	637b      	str	r3, [r7, #52]	@ 0x34
 8003974:	2301      	movs	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4922      	ldr	r1, [pc, #136]	@ (8003a14 <UART_CheckIdleState+0x150>)
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f383 8810 	msr	PRIMASK, r3
}
 800399a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399c:	f3ef 8310 	mrs	r3, PRIMASK
 80039a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80039a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a6:	2301      	movs	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	438a      	bics	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	228c      	movs	r2, #140	@ 0x8c
 80039d2:	2120      	movs	r1, #32
 80039d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2284      	movs	r2, #132	@ 0x84
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e012      	b.n	8003a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2288      	movs	r2, #136	@ 0x88
 80039e6:	2120      	movs	r1, #32
 80039e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	228c      	movs	r2, #140	@ 0x8c
 80039ee:	2120      	movs	r1, #32
 80039f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2284      	movs	r2, #132	@ 0x84
 8003a02:	2100      	movs	r1, #0
 8003a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b010      	add	sp, #64	@ 0x40
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	01ffffff 	.word	0x01ffffff
 8003a14:	fffffedf 	.word	0xfffffedf

08003a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a28:	e051      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d04e      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fd f844 	bl	8000abc <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e051      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2204      	movs	r2, #4
 8003a52:	4013      	ands	r3, r2
 8003a54:	d03b      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d038      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b40      	cmp	r3, #64	@ 0x40
 8003a60:	d035      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d111      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2208      	movs	r2, #8
 8003a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 f83c 	bl	8003af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2290      	movs	r2, #144	@ 0x90
 8003a84:	2108      	movs	r1, #8
 8003a86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2284      	movs	r2, #132	@ 0x84
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e02c      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d112      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	0112      	lsls	r2, r2, #4
 8003ab0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 f81f 	bl	8003af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2290      	movs	r2, #144	@ 0x90
 8003abe:	2120      	movs	r1, #32
 8003ac0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2284      	movs	r2, #132	@ 0x84
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e00f      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	425a      	negs	r2, r3
 8003ade:	4153      	adcs	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d09e      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08e      	sub	sp, #56	@ 0x38
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b00:	f3ef 8310 	mrs	r3, PRIMASK
 8003b04:	617b      	str	r3, [r7, #20]
  return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f383 8810 	msr	PRIMASK, r3
}
 8003b14:	46c0      	nop			@ (mov r8, r8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4926      	ldr	r1, [pc, #152]	@ (8003bbc <UART_EndRxTransfer+0xc4>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b32:	f3ef 8310 	mrs	r3, PRIMASK
 8003b36:	623b      	str	r3, [r7, #32]
  return(result);
 8003b38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	491b      	ldr	r1, [pc, #108]	@ (8003bc0 <UART_EndRxTransfer+0xc8>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d118      	bne.n	8003b9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b76:	2301      	movs	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2110      	movs	r1, #16
 8003b8e:	438a      	bics	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	228c      	movs	r2, #140	@ 0x8c
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b00e      	add	sp, #56	@ 0x38
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	fffffedf 	.word	0xfffffedf
 8003bc0:	effffffe 	.word	0xeffffffe

08003bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	@ 0x84
 8003bd0:	5c9b      	ldrb	r3, [r3, r2]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_UARTEx_DisableFifoMode+0x16>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e027      	b.n	8003c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2284      	movs	r2, #132	@ 0x84
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2288      	movs	r2, #136	@ 0x88
 8003be6:	2124      	movs	r1, #36	@ 0x24
 8003be8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	438a      	bics	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a0b      	ldr	r2, [pc, #44]	@ (8003c34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2288      	movs	r2, #136	@ 0x88
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2284      	movs	r2, #132	@ 0x84
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	dfffffff 	.word	0xdfffffff

08003c38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2284      	movs	r2, #132	@ 0x84
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e02e      	b.n	8003cae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2284      	movs	r2, #132	@ 0x84
 8003c54:	2101      	movs	r1, #1
 8003c56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2288      	movs	r2, #136	@ 0x88
 8003c5c:	2124      	movs	r1, #36	@ 0x24
 8003c5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	438a      	bics	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	08d9      	lsrs	r1, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 f854 	bl	8003d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2288      	movs	r2, #136	@ 0x88
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2284      	movs	r2, #132	@ 0x84
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2284      	movs	r2, #132	@ 0x84
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e02f      	b.n	8003d30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2284      	movs	r2, #132	@ 0x84
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2288      	movs	r2, #136	@ 0x88
 8003cdc:	2124      	movs	r1, #36	@ 0x24
 8003cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8003d38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 f813 	bl	8003d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2288      	movs	r2, #136	@ 0x88
 8003d22:	2120      	movs	r1, #32
 8003d24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2284      	movs	r2, #132	@ 0x84
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	f1ffffff 	.word	0xf1ffffff

08003d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	226a      	movs	r2, #106	@ 0x6a
 8003d50:	2101      	movs	r1, #1
 8003d52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2268      	movs	r2, #104	@ 0x68
 8003d58:	2101      	movs	r1, #1
 8003d5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d5c:	e043      	b.n	8003de6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d5e:	260f      	movs	r6, #15
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	2208      	movs	r2, #8
 8003d64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d66:	200e      	movs	r0, #14
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	0e5b      	lsrs	r3, r3, #25
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	240d      	movs	r4, #13
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	2107      	movs	r1, #7
 8003d7e:	400a      	ands	r2, r1
 8003d80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	0f5b      	lsrs	r3, r3, #29
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	250c      	movs	r5, #12
 8003d8e:	197b      	adds	r3, r7, r5
 8003d90:	2107      	movs	r1, #7
 8003d92:	400a      	ands	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d96:	183b      	adds	r3, r7, r0
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	197a      	adds	r2, r7, r5
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	4914      	ldr	r1, [pc, #80]	@ (8003df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003da0:	5c8a      	ldrb	r2, [r1, r2]
 8003da2:	435a      	muls	r2, r3
 8003da4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003da6:	197b      	adds	r3, r7, r5
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dae:	0019      	movs	r1, r3
 8003db0:	f7fc fa30 	bl	8000214 <__divsi3>
 8003db4:	0003      	movs	r3, r0
 8003db6:	b299      	uxth	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	226a      	movs	r2, #106	@ 0x6a
 8003dbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dbe:	19bb      	adds	r3, r7, r6
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	193a      	adds	r2, r7, r4
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	490a      	ldr	r1, [pc, #40]	@ (8003df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003dc8:	5c8a      	ldrb	r2, [r1, r2]
 8003dca:	435a      	muls	r2, r3
 8003dcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f7fc fa1c 	bl	8000214 <__divsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	b299      	uxth	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2268      	movs	r2, #104	@ 0x68
 8003de4:	5299      	strh	r1, [r3, r2]
}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b005      	add	sp, #20
 8003dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	08003ee0 	.word	0x08003ee0
 8003df4:	08003ee8 	.word	0x08003ee8

08003df8 <memset>:
 8003df8:	0003      	movs	r3, r0
 8003dfa:	1882      	adds	r2, r0, r2
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	7019      	strb	r1, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	4c0c      	ldr	r4, [pc, #48]	@ (8003e40 <__libc_init_array+0x38>)
 8003e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e44 <__libc_init_array+0x3c>)
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	2600      	movs	r6, #0
 8003e1a:	f000 f819 	bl	8003e50 <_init>
 8003e1e:	4c0a      	ldr	r4, [pc, #40]	@ (8003e48 <__libc_init_array+0x40>)
 8003e20:	4d0a      	ldr	r5, [pc, #40]	@ (8003e4c <__libc_init_array+0x44>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	00b3      	lsls	r3, r6, #2
 8003e2e:	58eb      	ldr	r3, [r5, r3]
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	00b3      	lsls	r3, r6, #2
 8003e38:	58eb      	ldr	r3, [r5, r3]
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08003ef0 	.word	0x08003ef0
 8003e44:	08003ef0 	.word	0x08003ef0
 8003e48:	08003ef4 	.word	0x08003ef4
 8003e4c:	08003ef0 	.word	0x08003ef0

08003e50 <_init>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr

08003e5c <_fini>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr
