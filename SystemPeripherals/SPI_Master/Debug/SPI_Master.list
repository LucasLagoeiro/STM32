
SPI_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080031d0  080031d0  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d0  080031d0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080031d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  080031e8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080031e8  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d057  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f86  00000000  00000000  0001208f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00014018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007eb  00000000  00000000  00014a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bf9  00000000  00000000  00015233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d988  00000000  00000000  00029e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008297d  00000000  00000000  000377b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000ba174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bc504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003130 	.word	0x08003130

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003130 	.word	0x08003130

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 faae 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f832 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f916 	bl	8000628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f8c6 	bl	800058c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000400:	f000 f886 	bl	8000510 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED4 */
  while (HAL_GPIO_ReadPin(BUTTON_PIN_GPIO_Port, BUTTON_PIN_Pin))
 8000404:	e008      	b.n	8000418 <main+0x2c>
    {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000406:	23a0      	movs	r3, #160	@ 0xa0
 8000408:	05db      	lsls	r3, r3, #23
 800040a:	2120      	movs	r1, #32
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fe2f 	bl	8001070 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000412:	2064      	movs	r0, #100	@ 0x64
 8000414:	f000 fb22 	bl	8000a5c <HAL_Delay>
  while (HAL_GPIO_ReadPin(BUTTON_PIN_GPIO_Port, BUTTON_PIN_Pin))
 8000418:	2380      	movs	r3, #128	@ 0x80
 800041a:	019b      	lsls	r3, r3, #6
 800041c:	4a0c      	ldr	r2, [pc, #48]	@ (8000450 <main+0x64>)
 800041e:	0019      	movs	r1, r3
 8000420:	0010      	movs	r0, r2
 8000422:	f000 fdeb 	bl	8000ffc <HAL_GPIO_ReadPin>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d1ed      	bne.n	8000406 <main+0x1a>
    }
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800042a:	23a0      	movs	r3, #160	@ 0xa0
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fdff 	bl	8001036 <HAL_GPIO_WritePin>

//
  HAL_SPI_Transmit(&hspi1, &TX_Buffer, 1,1000); //Sending in Blocking mode
 8000438:	23fa      	movs	r3, #250	@ 0xfa
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4905      	ldr	r1, [pc, #20]	@ (8000454 <main+0x68>)
 800043e:	4806      	ldr	r0, [pc, #24]	@ (8000458 <main+0x6c>)
 8000440:	2201      	movs	r2, #1
 8000442:	f001 fd23 	bl	8001e8c <HAL_SPI_Transmit>
  HAL_Delay(100);
 8000446:	2064      	movs	r0, #100	@ 0x64
 8000448:	f000 fb08 	bl	8000a5c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	e7fd      	b.n	800044c <main+0x60>
 8000450:	50000800 	.word	0x50000800
 8000454:	20000000 	.word	0x20000000
 8000458:	2000002c 	.word	0x2000002c

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b093      	sub	sp, #76	@ 0x4c
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	2414      	movs	r4, #20
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2334      	movs	r3, #52	@ 0x34
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 fe33 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	0018      	movs	r0, r3
 8000476:	2310      	movs	r3, #16
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f002 fe2c 	bl	80030d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fe0f 	bl	80010a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2280      	movs	r2, #128	@ 0x80
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000498:	0021      	movs	r1, r4
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2240      	movs	r2, #64	@ 0x40
 80004a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2202      	movs	r2, #2
 80004aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2202      	movs	r2, #2
 80004b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 14;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	220e      	movs	r2, #14
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	0292      	lsls	r2, r2, #10
 80004c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	22c0      	movs	r2, #192	@ 0xc0
 80004ca:	05d2      	lsls	r2, r2, #23
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fe35 	bl	8001140 <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004da:	f000 f907 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2202      	movs	r2, #2
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2102      	movs	r1, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 f930 	bl	8001760 <HAL_RCC_ClockConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000504:	f000 f8f2 	bl	80006ec <Error_Handler>
  }
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b013      	add	sp, #76	@ 0x4c
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	@ (8000588 <MX_SPI1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_SPI1_Init+0x74>)
 800051c:	2282      	movs	r2, #130	@ 0x82
 800051e:	0052      	lsls	r2, r2, #1
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_SPI1_Init+0x74>)
 800052a:	22c0      	movs	r2, #192	@ 0xc0
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000536:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_SPI1_Init+0x74>)
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_SPI1_Init+0x74>)
 800055e:	2207      	movs	r2, #7
 8000560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <MX_SPI1_Init+0x74>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fbd3 	bl	8001d1c <HAL_SPI_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 f8b7 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000002c 	.word	0x2000002c
 8000588:	40013000 	.word	0x40013000

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_USART2_UART_Init+0x98>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 8000598:	22e1      	movs	r2, #225	@ 0xe1
 800059a:	0252      	lsls	r2, r2, #9
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0552      	lsls	r2, r2, #21
 80005a4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005b4:	220c      	movs	r2, #12
 80005b6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d6:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 f835 	bl	8002648 <HAL_UART_Init>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80005e2:	f000 f883 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fc94 	bl	8002f18 <HAL_UARTEx_SetTxFifoThreshold>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80005f4:	f000 f87a 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 fccb 	bl	8002f98 <HAL_UARTEx_SetRxFifoThreshold>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000606:	f000 f871 	bl	80006ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <MX_USART2_UART_Init+0x94>)
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fc49 	bl	8002ea4 <HAL_UARTEx_DisableFifoMode>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000616:	f000 f869 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000090 	.word	0x20000090
 8000624:	40004400 	.word	0x40004400

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b089      	sub	sp, #36	@ 0x24
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	240c      	movs	r4, #12
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2314      	movs	r3, #20
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f002 fd4d 	bl	80030d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000644:	2104      	movs	r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
 800064a:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800064e:	2204      	movs	r2, #4
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 800065c:	2120      	movs	r1, #32
 800065e:	430a      	orrs	r2, r1
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000666:	2220      	movs	r2, #32
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0xbc>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000686:	23a0      	movs	r3, #160	@ 0xa0
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fcd1 	bl	8001036 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_PIN_Pin */
  GPIO_InitStruct.Pin = BUTTON_PIN_Pin;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	0192      	lsls	r2, r2, #6
 800069a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_PIN_GPIO_Port, &GPIO_InitStruct);
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <MX_GPIO_Init+0xc0>)
 80006ac:	0019      	movs	r1, r3
 80006ae:	0010      	movs	r0, r2
 80006b0:	f000 fb40 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2220      	movs	r2, #32
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fb2c 	bl	8000d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b009      	add	sp, #36	@ 0x24
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	50000800 	.word	0x50000800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x44>)
 8000700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <HAL_MspInit+0x44>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	641a      	str	r2, [r3, #64]	@ 0x40
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x44>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x44>)
 8000718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_MspInit+0x44>)
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	0549      	lsls	r1, r1, #21
 8000720:	430a      	orrs	r2, r1
 8000722:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_MspInit+0x44>)
 8000726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000728:	2380      	movs	r3, #128	@ 0x80
 800072a:	055b      	lsls	r3, r3, #21
 800072c:	4013      	ands	r3, r2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	2414      	movs	r4, #20
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fcc0 	bl	80030d8 <memset>
  if(hspi->Instance==SPI1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <HAL_SPI_MspInit+0x9c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d138      	bne.n	80007d4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 8000764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0149      	lsls	r1, r1, #5
 800076c:	430a      	orrs	r2, r1
 800076e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 8000772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	015b      	lsls	r3, r3, #5
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_SPI_MspInit+0xa0>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	22c2      	movs	r2, #194	@ 0xc2
 800079c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2202      	movs	r2, #2
 80007a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2203      	movs	r2, #3
 80007ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	187a      	adds	r2, r7, r1
 80007b8:	23a0      	movs	r3, #160	@ 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fab8 	bl	8000d34 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2019      	movs	r0, #25
 80007ca:	f000 fa17 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007ce:	2019      	movs	r0, #25
 80007d0:	f000 fa29 	bl	8000c26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b00b      	add	sp, #44	@ 0x2c
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b091      	sub	sp, #68	@ 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	232c      	movs	r3, #44	@ 0x2c
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f002 fc6e 	bl	80030d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	2410      	movs	r4, #16
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	231c      	movs	r3, #28
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fc66 	bl	80030d8 <memset>
  if(huart->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a22      	ldr	r2, [pc, #136]	@ (800089c <HAL_UART_MspInit+0xb8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d13e      	bne.n	8000894 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2202      	movs	r2, #2
 800081a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	f001 f945 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f7ff ff5d 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 8000834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	0289      	lsls	r1, r1, #10
 800083c:	430a      	orrs	r2, r1
 800083e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 8000842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	029b      	lsls	r3, r3, #10
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_UART_MspInit+0xbc>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000866:	212c      	movs	r1, #44	@ 0x2c
 8000868:	187b      	adds	r3, r7, r1
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2202      	movs	r2, #2
 8000872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	187a      	adds	r2, r7, r1
 8000888:	23a0      	movs	r3, #160	@ 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fa50 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b011      	add	sp, #68	@ 0x44
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	40004400 	.word	0x40004400
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8aa 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <SPI1_IRQHandler+0x14>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fc34 	bl	800214c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	2000002c 	.word	0x2000002c

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f7ff fff6 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092a:	f002 fbdd 	bl	80030e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800092e:	f7ff fd5d 	bl	80003ec <main>

08000932 <LoopForever>:

LoopForever:
  b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   r0, =_estack
 8000934:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000940:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 8000944:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000948:	20000128 	.word	0x20000128

0800094c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_IRQHandler>
	...

08000950 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_Init+0x3c>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_Init+0x3c>)
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	0049      	lsls	r1, r1, #1
 8000966:	430a      	orrs	r2, r1
 8000968:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f810 	bl	8000990 <HAL_InitTick>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d003      	beq.n	800097c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff febc 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <HAL_InitTick+0x88>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d02b      	beq.n	8000a00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_InitTick+0x8c>)
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_InitTick+0x88>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	23fa      	movs	r3, #250	@ 0xfa
 80009b4:	0098      	lsls	r0, r3, #2
 80009b6:	f7ff fba3 	bl	8000100 <__udivsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	0019      	movs	r1, r3
 80009be:	0020      	movs	r0, r4
 80009c0:	f7ff fb9e 	bl	8000100 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f93d 	bl	8000c46 <HAL_SYSTICK_Config>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d112      	bne.n	80009f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d80a      	bhi.n	80009ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	2301      	movs	r3, #1
 80009da:	425b      	negs	r3, r3
 80009dc:	2200      	movs	r2, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f90c 	bl	8000bfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_InitTick+0x90>)
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e00d      	b.n	8000a08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e008      	b.n	8000a08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f6:	230f      	movs	r3, #15
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e003      	b.n	8000a08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a00:	230f      	movs	r3, #15
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	781b      	ldrb	r3, [r3, #0]
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b005      	add	sp, #20
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	2000000c 	.word	0x2000000c
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	18d2      	adds	r2, r2, r3
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	20000124 	.word	0x20000124

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000124 	.word	0x20000124

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff0 	bl	8000a48 <HAL_GetTick>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	f7ff ffe0 	bl	8000a48 <HAL_GetTick>
 8000a88:	0002      	movs	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	2000000c 	.word	0x2000000c

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab6:	d809      	bhi.n	8000acc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	231f      	movs	r3, #31
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_EnableIRQ+0x30>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	000a      	movs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aec:	d828      	bhi.n	8000b40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aee:	4a2f      	ldr	r2, [pc, #188]	@ (8000bac <__NVIC_SetPriority+0xd4>)
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b25b      	sxtb	r3, r3
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	33c0      	adds	r3, #192	@ 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	589b      	ldr	r3, [r3, r2]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	@ 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	481f      	ldr	r0, [pc, #124]	@ (8000bac <__NVIC_SetPriority+0xd4>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	430a      	orrs	r2, r1
 8000b38:	33c0      	adds	r3, #192	@ 0xc0
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3e:	e031      	b.n	8000ba4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0019      	movs	r1, r3
 8000b48:	230f      	movs	r3, #15
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	3b08      	subs	r3, #8
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3306      	adds	r3, #6
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	@ 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <__NVIC_SetPriority+0xd8>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001c      	movs	r4, r3
 8000b90:	230f      	movs	r3, #15
 8000b92:	4023      	ands	r3, r4
 8000b94:	3b08      	subs	r3, #8
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	3306      	adds	r3, #6
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	18c3      	adds	r3, r0, r3
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	045b      	lsls	r3, r3, #17
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d301      	bcc.n	8000bcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e010      	b.n	8000bee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <SysTick_Config+0x44>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	2103      	movs	r1, #3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff ff7c 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x44>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x44>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	210f      	movs	r1, #15
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	1c02      	adds	r2, r0, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ff33 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ffaf 	bl	8000bb4 <SysTick_Config>
 8000c56:	0003      	movs	r3, r0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c68:	210f      	movs	r1, #15
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2225      	movs	r2, #37	@ 0x25
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d006      	beq.n	8000c8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e049      	b.n	8000d1e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	210e      	movs	r1, #14
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb4:	491d      	ldr	r1, [pc, #116]	@ (8000d2c <HAL_DMA_Abort_IT+0xcc>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_DMA_Abort_IT+0xd0>)
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	221c      	movs	r2, #28
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_DMA_Abort_IT+0xd0>)
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000cd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00c      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cec:	490f      	ldr	r1, [pc, #60]	@ (8000d2c <HAL_DMA_Abort_IT+0xcc>)
 8000cee:	400a      	ands	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000cfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2225      	movs	r2, #37	@ 0x25
 8000d00:	2101      	movs	r1, #1
 8000d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2224      	movs	r2, #36	@ 0x24
 8000d08:	2100      	movs	r1, #0
 8000d0a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d004      	beq.n	8000d1e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	4798      	blx	r3
    }
  }
  return status;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	fffffeff 	.word	0xfffffeff
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e147      	b.n	8000fd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	000a      	movs	r2, r1
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <HAL_GPIO_Init+0x28>
 8000d5a:	e138      	b.n	8000fce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2203      	movs	r2, #3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2207      	movs	r2, #7
 8000e30:	4013      	ands	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	43da      	mvns	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	401a      	ands	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d100      	bne.n	8000ea8 <HAL_GPIO_Init+0x174>
 8000ea6:	e092      	b.n	8000fce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ea8:	4a50      	ldr	r2, [pc, #320]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3318      	adds	r3, #24
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	589b      	ldr	r3, [r3, r2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	23a0      	movs	r3, #160	@ 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x1ca>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a45      	ldr	r2, [pc, #276]	@ (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x1c6>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a44      	ldr	r2, [pc, #272]	@ (8000ff4 <HAL_GPIO_Init+0x2c0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x1c2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	@ (8000ff8 <HAL_GPIO_Init+0x2c4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x1be>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x1cc>
 8000efe:	2300      	movs	r3, #0
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	2103      	movs	r1, #3
 8000f04:	400a      	ands	r2, r1
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f10:	4936      	ldr	r1, [pc, #216]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3318      	adds	r3, #24
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	035b      	lsls	r3, r3, #13
 8000f36:	4013      	ands	r3, r2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	039b      	lsls	r3, r3, #14
 8000f60:	4013      	ands	r3, r2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f72:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f74:	2384      	movs	r3, #132	@ 0x84
 8000f76:	58d3      	ldr	r3, [r2, r3]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f98:	4914      	ldr	r1, [pc, #80]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000f9a:	2284      	movs	r2, #132	@ 0x84
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	58d3      	ldr	r3, [r2, r3]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4909      	ldr	r1, [pc, #36]	@ (8000fec <HAL_GPIO_Init+0x2b8>)
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ae>
 8000fe0:	e6b0      	b.n	8000d44 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	50000400 	.word	0x50000400
 8000ff4:	50000800 	.word	0x50000800
 8000ff8:	50000c00 	.word	0x50000c00

08000ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	000a      	movs	r2, r1
 8001006:	1cbb      	adds	r3, r7, #2
 8001008:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	1cba      	adds	r2, r7, #2
 8001010:	8812      	ldrh	r2, [r2, #0]
 8001012:	4013      	ands	r3, r2
 8001014:	d004      	beq.n	8001020 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001016:	230f      	movs	r3, #15
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e003      	b.n	8001028 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001020:	230f      	movs	r3, #15
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	781b      	ldrb	r3, [r3, #0]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	0008      	movs	r0, r1
 8001040:	0011      	movs	r1, r2
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	1c02      	adds	r2, r0, #0
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	1c7b      	adds	r3, r7, #1
 800104a:	1c0a      	adds	r2, r1, #0
 800104c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800104e:	1c7b      	adds	r3, r7, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	1cbb      	adds	r3, r7, #2
 8001058:	881a      	ldrh	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105e:	e003      	b.n	8001068 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001060:	1cbb      	adds	r3, r7, #2
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	000a      	movs	r2, r1
 800107a:	1cbb      	adds	r3, r7, #2
 800107c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001084:	1cbb      	adds	r3, r7, #2
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	1cb9      	adds	r1, r7, #2
 8001094:	8809      	ldrh	r1, [r1, #0]
 8001096:	400b      	ands	r3, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a19      	ldr	r2, [pc, #100]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	0019      	movs	r1, r3
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d11f      	bne.n	800110c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	0013      	movs	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	189b      	adds	r3, r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4912      	ldr	r1, [pc, #72]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff f810 	bl	8000100 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e6:	e008      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e001      	b.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e009      	b.n	800110e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	401a      	ands	r2, r3
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	429a      	cmp	r2, r3
 800110a:	d0ed      	beq.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	40007000 	.word	0x40007000
 800111c:	fffff9ff 	.word	0xfffff9ff
 8001120:	20000004 	.word	0x20000004
 8001124:	000f4240 	.word	0x000f4240

08001128 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <LL_RCC_GetAPB1Prescaler+0x14>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	23e0      	movs	r3, #224	@ 0xe0
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	4013      	ands	r3, r2
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e2f3      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d100      	bne.n	800115e <HAL_RCC_OscConfig+0x1e>
 800115c:	e07c      	b.n	8001258 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4bc3      	ldr	r3, [pc, #780]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2238      	movs	r2, #56	@ 0x38
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4bc0      	ldr	r3, [pc, #768]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2203      	movs	r2, #3
 800116e:	4013      	ands	r3, r2
 8001170:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b10      	cmp	r3, #16
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x3e>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d002      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4bb9      	ldr	r3, [pc, #740]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d062      	beq.n	8001256 <HAL_RCC_OscConfig+0x116>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d15e      	bne.n	8001256 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e2ce      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x78>
 80011a8:	4bb0      	ldr	r3, [pc, #704]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4baf      	ldr	r3, [pc, #700]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	0249      	lsls	r1, r1, #9
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e020      	b.n	80011fa <HAL_RCC_OscConfig+0xba>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	23a0      	movs	r3, #160	@ 0xa0
 80011be:	02db      	lsls	r3, r3, #11
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d10e      	bne.n	80011e2 <HAL_RCC_OscConfig+0xa2>
 80011c4:	4ba9      	ldr	r3, [pc, #676]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4ba8      	ldr	r3, [pc, #672]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	02c9      	lsls	r1, r1, #11
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4ba6      	ldr	r3, [pc, #664]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4ba5      	ldr	r3, [pc, #660]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0249      	lsls	r1, r1, #9
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0xba>
 80011e2:	4ba2      	ldr	r3, [pc, #648]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba1      	ldr	r3, [pc, #644]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011e8:	49a1      	ldr	r1, [pc, #644]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	4b9f      	ldr	r3, [pc, #636]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b9e      	ldr	r3, [pc, #632]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80011f4:	499f      	ldr	r1, [pc, #636]	@ (8001474 <HAL_RCC_OscConfig+0x334>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d014      	beq.n	800122c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fc21 	bl	8000a48 <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fc1c 	bl	8000a48 <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e28d      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121e:	4b93      	ldr	r3, [pc, #588]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xcc>
 800122a:	e015      	b.n	8001258 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fc0c 	bl	8000a48 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001236:	f7ff fc07 	bl	8000a48 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	@ 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e278      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001248:	4b88      	ldr	r3, [pc, #544]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0xf6>
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001256:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d100      	bne.n	8001264 <HAL_RCC_OscConfig+0x124>
 8001262:	e099      	b.n	8001398 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001264:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2238      	movs	r2, #56	@ 0x38
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800126e:	4b7f      	ldr	r3, [pc, #508]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2203      	movs	r2, #3
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0x144>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d002      	beq.n	800128a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d135      	bne.n	80012f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128a:	4b78      	ldr	r3, [pc, #480]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4013      	ands	r3, r2
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x162>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e24b      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b72      	ldr	r3, [pc, #456]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a74      	ldr	r2, [pc, #464]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	021a      	lsls	r2, r3, #8
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012be:	4b6b      	ldr	r3, [pc, #428]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6e      	ldr	r2, [pc, #440]	@ (800147c <HAL_RCC_OscConfig+0x33c>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	4b67      	ldr	r3, [pc, #412]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012d2:	4b66      	ldr	r3, [pc, #408]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0adb      	lsrs	r3, r3, #11
 80012d8:	2207      	movs	r2, #7
 80012da:	4013      	ands	r3, r2
 80012dc:	4a68      	ldr	r2, [pc, #416]	@ (8001480 <HAL_RCC_OscConfig+0x340>)
 80012de:	40da      	lsrs	r2, r3
 80012e0:	4b68      	ldr	r3, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x344>)
 80012e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012e4:	4b68      	ldr	r3, [pc, #416]	@ (8001488 <HAL_RCC_OscConfig+0x348>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fb51 	bl	8000990 <HAL_InitTick>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d051      	beq.n	8001396 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e221      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d030      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012fe:	4b5b      	ldr	r3, [pc, #364]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a5e      	ldr	r2, [pc, #376]	@ (800147c <HAL_RCC_OscConfig+0x33c>)
 8001304:	4013      	ands	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	4b57      	ldr	r3, [pc, #348]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001312:	4b56      	ldr	r3, [pc, #344]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b55      	ldr	r3, [pc, #340]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001318:	2180      	movs	r1, #128	@ 0x80
 800131a:	0049      	lsls	r1, r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fb92 	bl	8000a48 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fb8d 	bl	8000a48 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1fe      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4013      	ands	r3, r2
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b48      	ldr	r3, [pc, #288]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a4a      	ldr	r2, [pc, #296]	@ (8001478 <HAL_RCC_OscConfig+0x338>)
 800134e:	4013      	ands	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	021a      	lsls	r2, r3, #8
 8001358:	4b44      	ldr	r3, [pc, #272]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800135a:	430a      	orrs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	e01b      	b.n	8001398 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001360:	4b42      	ldr	r3, [pc, #264]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b41      	ldr	r3, [pc, #260]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001366:	4949      	ldr	r1, [pc, #292]	@ (800148c <HAL_RCC_OscConfig+0x34c>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fb6c 	bl	8000a48 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fb67 	bl	8000a48 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1d8      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001388:	4b38      	ldr	r3, [pc, #224]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4013      	ands	r3, r2
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x236>
 8001394:	e000      	b.n	8001398 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001396:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	4013      	ands	r3, r2
 80013a0:	d047      	beq.n	8001432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2238      	movs	r2, #56	@ 0x38
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b18      	cmp	r3, #24
 80013ac:	d10a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d03c      	beq.n	8001432 <HAL_RCC_OscConfig+0x2f2>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d138      	bne.n	8001432 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e1ba      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d019      	beq.n	8001400 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb36 	bl	8000a48 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb31 	bl	8000a48 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a2      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d0f1      	beq.n	80013e2 <HAL_RCC_OscConfig+0x2a2>
 80013fe:	e018      	b.n	8001432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001402:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001406:	2101      	movs	r1, #1
 8001408:	438a      	bics	r2, r1
 800140a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fb1c 	bl	8000a48 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fb17 	bl	8000a48 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e188      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 800142a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142c:	2202      	movs	r2, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d1f1      	bne.n	8001416 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x2fe>
 800143c:	e0c6      	b.n	80015cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	231f      	movs	r3, #31
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2238      	movs	r2, #56	@ 0x38
 800144c:	4013      	ands	r3, r2
 800144e:	2b20      	cmp	r3, #32
 8001450:	d11e      	bne.n	8001490 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_RCC_OscConfig+0x32c>)
 8001454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d100      	bne.n	800145e <HAL_RCC_OscConfig+0x31e>
 800145c:	e0b6      	b.n	80015cc <HAL_RCC_OscConfig+0x48c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d000      	beq.n	8001468 <HAL_RCC_OscConfig+0x328>
 8001466:	e0b1      	b.n	80015cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e166      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
 800146c:	40021000 	.word	0x40021000
 8001470:	fffeffff 	.word	0xfffeffff
 8001474:	fffbffff 	.word	0xfffbffff
 8001478:	ffff80ff 	.word	0xffff80ff
 800147c:	ffffc7ff 	.word	0xffffc7ff
 8001480:	00f42400 	.word	0x00f42400
 8001484:	20000004 	.word	0x20000004
 8001488:	20000008 	.word	0x20000008
 800148c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001490:	4bac      	ldr	r3, [pc, #688]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	055b      	lsls	r3, r3, #21
 8001498:	4013      	ands	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x360>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x362>
 80014a0:	2300      	movs	r3, #0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d011      	beq.n	80014ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4ba7      	ldr	r3, [pc, #668]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80014a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014aa:	4ba6      	ldr	r3, [pc, #664]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	0549      	lsls	r1, r1, #21
 80014b0:	430a      	orrs	r2, r1
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014b4:	4ba3      	ldr	r3, [pc, #652]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80014b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	055b      	lsls	r3, r3, #21
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014c2:	231f      	movs	r3, #31
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001748 <HAL_RCC_OscConfig+0x608>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001748 <HAL_RCC_OscConfig+0x608>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b9b      	ldr	r3, [pc, #620]	@ (8001748 <HAL_RCC_OscConfig+0x608>)
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0049      	lsls	r1, r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fab0 	bl	8000a48 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff faab 	bl	8000a48 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e11c      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	4b91      	ldr	r3, [pc, #580]	@ (8001748 <HAL_RCC_OscConfig+0x608>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x3e2>
 8001514:	4b8b      	ldr	r3, [pc, #556]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001518:	4b8a      	ldr	r3, [pc, #552]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800151a:	2101      	movs	r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x41c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x404>
 800152a:	4b86      	ldr	r3, [pc, #536]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800152c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800152e:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001530:	2104      	movs	r1, #4
 8001532:	430a      	orrs	r2, r1
 8001534:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001536:	4b83      	ldr	r3, [pc, #524]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800153a:	4b82      	ldr	r3, [pc, #520]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x41c>
 8001544:	4b7f      	ldr	r3, [pc, #508]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001546:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001548:	4b7e      	ldr	r3, [pc, #504]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800154a:	2101      	movs	r1, #1
 800154c:	438a      	bics	r2, r1
 800154e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001550:	4b7c      	ldr	r3, [pc, #496]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001552:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001554:	4b7b      	ldr	r3, [pc, #492]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001556:	2104      	movs	r1, #4
 8001558:	438a      	bics	r2, r1
 800155a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d014      	beq.n	800158e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fa70 	bl	8000a48 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156c:	e009      	b.n	8001582 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fa6b 	bl	8000a48 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	4a74      	ldr	r2, [pc, #464]	@ (800174c <HAL_RCC_OscConfig+0x60c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0db      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001582:	4b70      	ldr	r3, [pc, #448]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x42e>
 800158c:	e013      	b.n	80015b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fa5b 	bl	8000a48 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001596:	e009      	b.n	80015ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fa56 	bl	8000a48 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	4a6a      	ldr	r2, [pc, #424]	@ (800174c <HAL_RCC_OscConfig+0x60c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0c6      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ac:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015b6:	231f      	movs	r3, #31
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015c6:	4962      	ldr	r1, [pc, #392]	@ (8001750 <HAL_RCC_OscConfig+0x610>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <HAL_RCC_OscConfig+0x496>
 80015d4:	e0b0      	b.n	8001738 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2238      	movs	r2, #56	@ 0x38
 80015dc:	4013      	ands	r3, r2
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d100      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4a4>
 80015e2:	e078      	b.n	80016d6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d153      	bne.n	8001694 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b55      	ldr	r3, [pc, #340]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b54      	ldr	r3, [pc, #336]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80015f2:	4958      	ldr	r1, [pc, #352]	@ (8001754 <HAL_RCC_OscConfig+0x614>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa26 	bl	8000a48 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fa21 	bl	8000a48 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e092      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	049b      	lsls	r3, r3, #18
 800161c:	4013      	ands	r3, r2
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <HAL_RCC_OscConfig+0x618>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	431a      	orrs	r2, r3
 8001648:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001654:	2180      	movs	r1, #128	@ 0x80
 8001656:	0449      	lsls	r1, r1, #17
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	0549      	lsls	r1, r1, #21
 8001666:	430a      	orrs	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff f9ed 	bl	8000a48 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f9e8 	bl	8000a48 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e059      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x534>
 8001692:	e051      	b.n	8001738 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 800169a:	492e      	ldr	r1, [pc, #184]	@ (8001754 <HAL_RCC_OscConfig+0x614>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9d2 	bl	8000a48 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff f9cd 	bl	8000a48 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03e      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	049b      	lsls	r3, r3, #18
 80016c4:	4013      	ands	r3, r2
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80016ce:	4923      	ldr	r1, [pc, #140]	@ (800175c <HAL_RCC_OscConfig+0x61c>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	e030      	b.n	8001738 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e02b      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_RCC_OscConfig+0x604>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2203      	movs	r2, #3
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11e      	bne.n	8001734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2270      	movs	r2, #112	@ 0x70
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d117      	bne.n	8001734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	23fe      	movs	r3, #254	@ 0xfe
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d10e      	bne.n	8001734 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	23f8      	movs	r3, #248	@ 0xf8
 800171a:	039b      	lsls	r3, r3, #14
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	0f5b      	lsrs	r3, r3, #29
 800172a:	075a      	lsls	r2, r3, #29
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b008      	add	sp, #32
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	1fc1808c 	.word	0x1fc1808c
 800175c:	effefffc 	.word	0xeffefffc

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0e9      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2207      	movs	r2, #7
 800177a:	4013      	ands	r3, r2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d91e      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b73      	ldr	r3, [pc, #460]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2207      	movs	r2, #7
 8001788:	4393      	bics	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	4b70      	ldr	r3, [pc, #448]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001794:	f7ff f958 	bl	8000a48 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f7ff f953 	bl	8000a48 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001954 <HAL_RCC_ClockConfig+0x1f4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0ca      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b2:	4b67      	ldr	r3, [pc, #412]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2207      	movs	r2, #7
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d015      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d006      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017d4:	4b60      	ldr	r3, [pc, #384]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	21e0      	movs	r1, #224	@ 0xe0
 80017dc:	01c9      	lsls	r1, r1, #7
 80017de:	430a      	orrs	r2, r1
 80017e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4a5d      	ldr	r2, [pc, #372]	@ (800195c <HAL_RCC_ClockConfig+0x1fc>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d057      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d12b      	bne.n	800186c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e097      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d107      	bne.n	8001830 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	4b4d      	ldr	r3, [pc, #308]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	049b      	lsls	r3, r3, #18
 8001828:	4013      	ands	r3, r2
 800182a:	d11f      	bne.n	800186c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e08b      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4013      	ands	r3, r2
 8001842:	d113      	bne.n	800186c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e07f      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d106      	bne.n	800185e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001850:	4b41      	ldr	r3, [pc, #260]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d108      	bne.n	800186c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e074      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e06d      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186c:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2207      	movs	r2, #7
 8001872:	4393      	bics	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 800187c:	430a      	orrs	r2, r1
 800187e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001880:	f7ff f8e2 	bl	8000a48 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001888:	e009      	b.n	800189e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188a:	f7ff f8dd 	bl	8000a48 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a2f      	ldr	r2, [pc, #188]	@ (8001954 <HAL_RCC_ClockConfig+0x1f4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e054      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2238      	movs	r2, #56	@ 0x38
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1ec      	bne.n	800188a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2207      	movs	r2, #7
 80018b6:	4013      	ands	r3, r2
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d21e      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2207      	movs	r2, #7
 80018c4:	4393      	bics	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f8ba 	bl	8000a48 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f8b5 	bl	8000a48 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_RCC_ClockConfig+0x1f4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e02c      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2204      	movs	r2, #4
 8001902:	4013      	ands	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a15      	ldr	r2, [pc, #84]	@ (8001960 <HAL_RCC_ClockConfig+0x200>)
 800190c:	4013      	ands	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800191a:	f000 f829 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800191e:	0001      	movs	r1, r0
 8001920:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	220f      	movs	r2, #15
 8001928:	401a      	ands	r2, r3
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x204>)
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	58d3      	ldr	r3, [r2, r3]
 8001930:	221f      	movs	r2, #31
 8001932:	4013      	ands	r3, r2
 8001934:	000a      	movs	r2, r1
 8001936:	40da      	lsrs	r2, r3
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_ClockConfig+0x208>)
 800193a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_ClockConfig+0x20c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff f825 	bl	8000990 <HAL_InitTick>
 8001946:	0003      	movs	r3, r0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b004      	add	sp, #16
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40022000 	.word	0x40022000
 8001954:	00001388 	.word	0x00001388
 8001958:	40021000 	.word	0x40021000
 800195c:	fffff0ff 	.word	0xfffff0ff
 8001960:	ffff8fff 	.word	0xffff8fff
 8001964:	08003148 	.word	0x08003148
 8001968:	20000004 	.word	0x20000004
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001976:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2238      	movs	r2, #56	@ 0x38
 800197c:	4013      	ands	r3, r2
 800197e:	d10f      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0adb      	lsrs	r3, r3, #11
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	2201      	movs	r2, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	4835      	ldr	r0, [pc, #212]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001996:	f7fe fbb3 	bl	8000100 <__udivsi3>
 800199a:	0003      	movs	r3, r0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	e05d      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2238      	movs	r2, #56	@ 0x38
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019ac:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x100>)
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	e054      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2238      	movs	r2, #56	@ 0x38
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d138      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019be:	4b2a      	ldr	r3, [pc, #168]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2203      	movs	r2, #3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c8:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	2207      	movs	r2, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	3301      	adds	r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d10d      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	4824      	ldr	r0, [pc, #144]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x100>)
 80019e0:	f7fe fb8e 	bl	8000100 <__udivsi3>
 80019e4:	0003      	movs	r3, r0
 80019e6:	0019      	movs	r1, r3
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	227f      	movs	r2, #127	@ 0x7f
 80019f0:	4013      	ands	r3, r2
 80019f2:	434b      	muls	r3, r1
 80019f4:	617b      	str	r3, [r7, #20]
        break;
 80019f6:	e00d      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xfc>)
 80019fc:	f7fe fb80 	bl	8000100 <__udivsi3>
 8001a00:	0003      	movs	r3, r0
 8001a02:	0019      	movs	r1, r3
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	227f      	movs	r2, #127	@ 0x7f
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	434b      	muls	r3, r1
 8001a10:	617b      	str	r3, [r7, #20]
        break;
 8001a12:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0f5b      	lsrs	r3, r3, #29
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	3301      	adds	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6978      	ldr	r0, [r7, #20]
 8001a26:	f7fe fb6b 	bl	8000100 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e015      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2238      	movs	r2, #56	@ 0x38
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d103      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2238      	movs	r2, #56	@ 0x38
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b18      	cmp	r3, #24
 8001a4e:	d103      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a50:	23fa      	movs	r3, #250	@ 0xfa
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e001      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a5c:	693b      	ldr	r3, [r7, #16]
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b006      	add	sp, #24
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200

08001a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	0004      	movs	r4, r0
 8001a92:	f7ff fb49 	bl	8001128 <LL_RCC_GetAPB1Prescaler>
 8001a96:	0003      	movs	r3, r0
 8001a98:	0b1a      	lsrs	r2, r3, #12
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	58d3      	ldr	r3, [r2, r3]
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	40dc      	lsrs	r4, r3
 8001aa6:	0023      	movs	r3, r4
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bdb0      	pop	{r4, r5, r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	08003188 	.word	0x08003188

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001abc:	2313      	movs	r3, #19
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d100      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ad8:	e0a3      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2011      	movs	r0, #17
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b86      	ldr	r3, [pc, #536]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	055b      	lsls	r3, r3, #21
 8001aea:	4013      	ands	r3, r2
 8001aec:	d110      	bne.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b83      	ldr	r3, [pc, #524]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af2:	4b82      	ldr	r3, [pc, #520]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0549      	lsls	r1, r1, #21
 8001af8:	430a      	orrs	r2, r1
 8001afa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001afc:	4b7f      	ldr	r3, [pc, #508]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	183b      	adds	r3, r7, r0
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b10:	4b7b      	ldr	r3, [pc, #492]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	0049      	lsls	r1, r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b1e:	f7fe ff93 	bl	8000a48 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b26:	e00b      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b28:	f7fe ff8e 	bl	8000a48 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d904      	bls.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b36:	2313      	movs	r3, #19
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	701a      	strb	r2, [r3, #0]
        break;
 8001b3e:	e005      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b40:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0ed      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b4c:	2313      	movs	r3, #19
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d154      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b56:	4b69      	ldr	r3, [pc, #420]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b5a:	23c0      	movs	r3, #192	@ 0xc0
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d019      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d014      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b72:	4b62      	ldr	r3, [pc, #392]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	4a63      	ldr	r2, [pc, #396]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b80:	4b5e      	ldr	r3, [pc, #376]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	0249      	lsls	r1, r1, #9
 8001b86:	430a      	orrs	r2, r1
 8001b88:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b90:	495d      	ldr	r1, [pc, #372]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b96:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff50 	bl	8000a48 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bac:	e00c      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe ff4b 	bl	8000a48 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a54      	ldr	r2, [pc, #336]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d904      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001bbe:	2313      	movs	r3, #19
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	701a      	strb	r2, [r3, #0]
            break;
 8001bc6:	e004      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0ed      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bd2:	2313      	movs	r3, #19
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10a      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bdc:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be0:	4a48      	ldr	r2, [pc, #288]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	4b44      	ldr	r3, [pc, #272]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bf0:	e00c      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bf2:	2312      	movs	r3, #18
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2213      	movs	r2, #19
 8001bf8:	18ba      	adds	r2, r7, r2
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e005      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c00:	2312      	movs	r3, #18
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2213      	movs	r2, #19
 8001c06:	18ba      	adds	r2, r7, r2
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c0c:	2311      	movs	r3, #17
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d105      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c1a:	4b38      	ldr	r3, [pc, #224]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c1c:	493c      	ldr	r1, [pc, #240]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c2c:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	2203      	movs	r2, #3
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	220c      	movs	r2, #12
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2220      	movs	r2, #32
 8001c64:	4013      	ands	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6c:	4a29      	ldr	r2, [pc, #164]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	4013      	ands	r3, r2
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	0899      	lsrs	r1, r3, #2
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cac:	2180      	movs	r1, #128	@ 0x80
 8001cae:	0249      	lsls	r1, r1, #9
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d016      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	01db      	lsls	r3, r3, #7
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce6:	2180      	movs	r1, #128	@ 0x80
 8001ce8:	0249      	lsls	r1, r1, #9
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	fffffcff 	.word	0xfffffcff
 8001d08:	fffeffff 	.word	0xfffeffff
 8001d0c:	00001388 	.word	0x00001388
 8001d10:	efffffff 	.word	0xefffffff
 8001d14:	ffffcfff 	.word	0xffffcfff
 8001d18:	ffff3fff 	.word	0xffff3fff

08001d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0a8      	b.n	8001e80 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	2382      	movs	r3, #130	@ 0x82
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d009      	beq.n	8001d56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	e005      	b.n	8001d56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	225d      	movs	r2, #93	@ 0x5d
 8001d60:	5c9b      	ldrb	r3, [r3, r2]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	225c      	movs	r2, #92	@ 0x5c
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe fce4 	bl	8000740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	225d      	movs	r2, #93	@ 0x5d
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	23e0      	movs	r3, #224	@ 0xe0
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d902      	bls.n	8001da2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e002      	b.n	8001da8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	23f0      	movs	r3, #240	@ 0xf0
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d008      	beq.n	8001dc6 <HAL_SPI_Init+0xaa>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	23e0      	movs	r3, #224	@ 0xe0
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d002      	beq.n	8001dc6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	2382      	movs	r3, #130	@ 0x82
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	2384      	movs	r3, #132	@ 0x84
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	400b      	ands	r3, r1
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2102      	movs	r1, #2
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2101      	movs	r1, #1
 8001dec:	400b      	ands	r3, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6999      	ldr	r1, [r3, #24]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	400b      	ands	r3, r1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2138      	movs	r1, #56	@ 0x38
 8001e02:	400b      	ands	r3, r1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	0011      	movs	r1, r2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	2110      	movs	r1, #16
 8001e34:	400b      	ands	r3, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	23f0      	movs	r3, #240	@ 0xf0
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	0011      	movs	r1, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4907      	ldr	r1, [pc, #28]	@ (8001e88 <HAL_SPI_Init+0x16c>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	225d      	movs	r2, #93	@ 0x5d
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	fffff7ff 	.word	0xfffff7ff

08001e8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	225c      	movs	r2, #92	@ 0x5c
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_SPI_Transmit+0x26>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e147      	b.n	8002142 <HAL_SPI_Transmit+0x2b6>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	225c      	movs	r2, #92	@ 0x5c
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eba:	f7fe fdc5 	bl	8000a48 <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001ec2:	2316      	movs	r3, #22
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	225d      	movs	r2, #93	@ 0x5d
 8001ed0:	5c9b      	ldrb	r3, [r3, r2]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d004      	beq.n	8001ee2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001ed8:	231f      	movs	r3, #31
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2202      	movs	r2, #2
 8001ede:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ee0:	e128      	b.n	8002134 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_SPI_Transmit+0x64>
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d104      	bne.n	8001efa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ef0:	231f      	movs	r3, #31
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ef8:	e11c      	b.n	8002134 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	225d      	movs	r2, #93	@ 0x5d
 8001efe:	2103      	movs	r1, #3
 8001f00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1dba      	adds	r2, r7, #6
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1dba      	adds	r2, r7, #6
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2244      	movs	r2, #68	@ 0x44
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2246      	movs	r2, #70	@ 0x46
 8001f30:	2100      	movs	r1, #0
 8001f32:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d110      	bne.n	8001f6e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	438a      	bics	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2180      	movs	r1, #128	@ 0x80
 8001f68:	01c9      	lsls	r1, r1, #7
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2240      	movs	r2, #64	@ 0x40
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b40      	cmp	r3, #64	@ 0x40
 8001f7a:	d007      	beq.n	8001f8c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2140      	movs	r1, #64	@ 0x40
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	23e0      	movs	r3, #224	@ 0xe0
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d952      	bls.n	800203e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_SPI_Transmit+0x11e>
 8001fa0:	2316      	movs	r3, #22
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d143      	bne.n	8002032 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	1c9a      	adds	r2, r3, #2
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fce:	e030      	b.n	8002032 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d112      	bne.n	8002004 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fee:	1c9a      	adds	r2, r3, #2
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002002:	e016      	b.n	8002032 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002004:	f7fe fd20 	bl	8000a48 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d802      	bhi.n	800201a <HAL_SPI_Transmit+0x18e>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_SPI_Transmit+0x194>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d108      	bne.n	8002032 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002020:	231f      	movs	r3, #31
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2203      	movs	r2, #3
 8002026:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	225d      	movs	r2, #93	@ 0x5d
 800202c:	2101      	movs	r1, #1
 800202e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002030:	e080      	b.n	8002134 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1c9      	bne.n	8001fd0 <HAL_SPI_Transmit+0x144>
 800203c:	e053      	b.n	80020e6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_SPI_Transmit+0x1c4>
 8002046:	2316      	movs	r3, #22
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d145      	bne.n	80020dc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	330c      	adds	r3, #12
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002076:	e031      	b.n	80020dc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d113      	bne.n	80020ae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020ac:	e016      	b.n	80020dc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ae:	f7fe fccb 	bl	8000a48 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d802      	bhi.n	80020c4 <HAL_SPI_Transmit+0x238>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	d102      	bne.n	80020ca <HAL_SPI_Transmit+0x23e>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80020ca:	231f      	movs	r3, #31
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	225d      	movs	r2, #93	@ 0x5d
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80020da:	e02b      	b.n	8002134 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1c8      	bne.n	8002078 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	6839      	ldr	r1, [r7, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 fa65 	bl	80025bc <SPI_EndRxTxTransaction>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d002      	beq.n	80020fc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002122:	231f      	movs	r3, #31
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e003      	b.n	8002134 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	225d      	movs	r2, #93	@ 0x5d
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	225c      	movs	r2, #92	@ 0x5c
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800213c:	231f      	movs	r3, #31
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781b      	ldrb	r3, [r3, #0]
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b008      	add	sp, #32
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	4013      	ands	r3, r2
 800216a:	d10d      	bne.n	8002188 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002172:	d009      	beq.n	8002188 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	4013      	ands	r3, r2
 800217a:	d005      	beq.n	8002188 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	0010      	movs	r0, r2
 8002184:	4798      	blx	r3
    return;
 8002186:	e0c5      	b.n	8002314 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_SPI_IRQHandler+0x58>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	4013      	ands	r3, r2
 8002196:	d005      	beq.n	80021a4 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	0010      	movs	r0, r2
 80021a0:	4798      	blx	r3
    return;
 80021a2:	e0b7      	b.n	8002314 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	d109      	bne.n	80021c0 <HAL_SPI_IRQHandler+0x74>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	4013      	ands	r3, r2
 80021b2:	d105      	bne.n	80021c0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_SPI_IRQHandler+0x74>
 80021be:	e0a9      	b.n	8002314 <HAL_SPI_IRQHandler+0x1c8>
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2220      	movs	r2, #32
 80021c4:	4013      	ands	r3, r2
 80021c6:	d100      	bne.n	80021ca <HAL_SPI_IRQHandler+0x7e>
 80021c8:	e0a4      	b.n	8002314 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	d023      	beq.n	800221a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	225d      	movs	r2, #93	@ 0x5d
 80021d6:	5c9b      	ldrb	r3, [r3, r2]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d011      	beq.n	8002202 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e2:	2204      	movs	r2, #4
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	e00b      	b.n	800221a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
        return;
 8002218:	e07c      	b.n	8002314 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2220      	movs	r2, #32
 800221e:	4013      	ands	r3, r2
 8002220:	d014      	beq.n	800224c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	2201      	movs	r2, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2140      	movs	r1, #64	@ 0x40
 8002246:	438a      	bics	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d00c      	beq.n	8002270 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	2208      	movs	r2, #8
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04c      	beq.n	8002312 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	21e0      	movs	r1, #224	@ 0xe0
 8002284:	438a      	bics	r2, r1
 8002286:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	225d      	movs	r2, #93	@ 0x5d
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2202      	movs	r2, #2
 8002294:	4013      	ands	r3, r2
 8002296:	d103      	bne.n	80022a0 <HAL_SPI_IRQHandler+0x154>
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d032      	beq.n	8002306 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2103      	movs	r1, #3
 80022ac:	438a      	bics	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_SPI_IRQHandler+0x1d0>)
 80022be:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7fe fccb 	bl	8000c60 <HAL_DMA_Abort_IT>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d005      	beq.n	80022da <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <HAL_SPI_IRQHandler+0x1d0>)
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe fcb6 	bl	8000c60 <HAL_DMA_Abort_IT>
 80022f4:	1e03      	subs	r3, r0, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	2240      	movs	r2, #64	@ 0x40
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002304:	e004      	b.n	8002310 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f809 	bl	8002320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800230e:	e000      	b.n	8002312 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002310:	46c0      	nop			@ (mov r8, r8)
    return;
 8002312:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002314:	46bd      	mov	sp, r7
 8002316:	b008      	add	sp, #32
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	08002331 	.word	0x08002331

08002320 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2246      	movs	r2, #70	@ 0x46
 8002342:	2100      	movs	r1, #0
 8002344:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff ffe6 	bl	8002320 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}

0800235c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800236c:	f7fe fb6c 	bl	8000a48 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	18d3      	adds	r3, r2, r3
 800237a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800237c:	f7fe fb64 	bl	8000a48 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002384:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	0d1b      	lsrs	r3, r3, #20
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	4353      	muls	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002392:	e058      	b.n	8002446 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	d055      	beq.n	8002446 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800239a:	f7fe fb55 	bl	8000a48 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d902      	bls.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d142      	bne.n	8002436 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	21e0      	movs	r1, #224	@ 0xe0
 80023bc:	438a      	bics	r2, r1
 80023be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	2382      	movs	r3, #130	@ 0x82
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d113      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2140      	movs	r1, #64	@ 0x40
 80023f0:	438a      	bics	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	019b      	lsls	r3, r3, #6
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d110      	bne.n	8002422 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	491a      	ldr	r1, [pc, #104]	@ (8002474 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800240c:	400a      	ands	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2180      	movs	r1, #128	@ 0x80
 800241c:	0189      	lsls	r1, r1, #6
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	225d      	movs	r2, #93	@ 0x5d
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	225c      	movs	r2, #92	@ 0x5c
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e017      	b.n	8002466 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3b01      	subs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	425a      	negs	r2, r3
 8002456:	4153      	adcs	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	001a      	movs	r2, r3
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d197      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b008      	add	sp, #32
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	20000004 	.word	0x20000004
 8002474:	ffffdfff 	.word	0xffffdfff

08002478 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002486:	2317      	movs	r3, #23
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800248e:	f7fe fadb 	bl	8000a48 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800249e:	f7fe fad3 	bl	8000a48 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	0013      	movs	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	0d1b      	lsrs	r3, r3, #20
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	4353      	muls	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80024c4:	e068      	b.n	8002598 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	23c0      	movs	r3, #192	@ 0xc0
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10a      	bne.n	80024e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	2117      	movs	r1, #23
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	d055      	beq.n	8002598 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024ec:	f7fe faac 	bl	8000a48 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d902      	bls.n	8002502 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d142      	bne.n	8002588 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	21e0      	movs	r1, #224	@ 0xe0
 800250e:	438a      	bics	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2382      	movs	r3, #130	@ 0x82
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	429a      	cmp	r2, r3
 800251c:	d113      	bne.n	8002546 <SPI_WaitFifoStateUntilTimeout+0xce>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	429a      	cmp	r2, r3
 8002528:	d005      	beq.n	8002536 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	429a      	cmp	r2, r3
 8002534:	d107      	bne.n	8002546 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2140      	movs	r1, #64	@ 0x40
 8002542:	438a      	bics	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	429a      	cmp	r2, r3
 8002550:	d110      	bne.n	8002574 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800255e:	400a      	ands	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	0189      	lsls	r1, r1, #6
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	225d      	movs	r2, #93	@ 0x5d
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	225c      	movs	r2, #92	@ 0x5c
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e010      	b.n	80025aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3b01      	subs	r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d18e      	bne.n	80024c6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b00a      	add	sp, #40	@ 0x28
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	20000004 	.word	0x20000004
 80025b8:	ffffdfff 	.word	0xffffdfff

080025bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	23c0      	movs	r3, #192	@ 0xc0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	0013      	movs	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	f7ff ff4e 	bl	8002478 <SPI_WaitFifoStateUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d007      	beq.n	80025f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e4:	2220      	movs	r2, #32
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e027      	b.n	8002640 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	0013      	movs	r3, r2
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	f7ff fead 	bl	800235c <SPI_WaitFlagStateUntilTimeout>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d007      	beq.n	8002616 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	2220      	movs	r2, #32
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e014      	b.n	8002640 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	23c0      	movs	r3, #192	@ 0xc0
 800261a:	00d9      	lsls	r1, r3, #3
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	0013      	movs	r3, r2
 8002624:	2200      	movs	r2, #0
 8002626:	f7ff ff27 	bl	8002478 <SPI_WaitFifoStateUntilTimeout>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d007      	beq.n	800263e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	2220      	movs	r2, #32
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e000      	b.n	8002640 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e046      	b.n	80026e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2288      	movs	r2, #136	@ 0x88
 800265e:	589b      	ldr	r3, [r3, r2]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2284      	movs	r2, #132	@ 0x84
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f7fe f8b8 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2288      	movs	r2, #136	@ 0x88
 8002678:	2124      	movs	r1, #36	@ 0x24
 800267a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f000 f9d0 	bl	8002a3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f828 	bl	80026f4 <UART_SetConfig>
 80026a4:	0003      	movs	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01c      	b.n	80026e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <HAL_UART_Init+0xa8>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	212a      	movs	r1, #42	@ 0x2a
 80026ca:	438a      	bics	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fa5f 	bl	8002ba4 <UART_CheckIdleState>
 80026e6:	0003      	movs	r3, r0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	ffffb7ff 	.word	0xffffb7ff

080026f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026fc:	231a      	movs	r3, #26
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4313      	orrs	r3, r2
 800271a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4abc      	ldr	r2, [pc, #752]	@ (8002a14 <UART_SetConfig+0x320>)
 8002724:	4013      	ands	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4ab7      	ldr	r2, [pc, #732]	@ (8002a18 <UART_SetConfig+0x324>)
 800273a:	4013      	ands	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	4313      	orrs	r3, r2
 8002758:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4aae      	ldr	r2, [pc, #696]	@ (8002a1c <UART_SetConfig+0x328>)
 8002762:	4013      	ands	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	220f      	movs	r2, #15
 8002778:	4393      	bics	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4aa4      	ldr	r2, [pc, #656]	@ (8002a20 <UART_SetConfig+0x32c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d127      	bne.n	80027e2 <UART_SetConfig+0xee>
 8002792:	4ba4      	ldr	r3, [pc, #656]	@ (8002a24 <UART_SetConfig+0x330>)
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	2203      	movs	r2, #3
 8002798:	4013      	ands	r3, r2
 800279a:	2b03      	cmp	r3, #3
 800279c:	d017      	beq.n	80027ce <UART_SetConfig+0xda>
 800279e:	d81b      	bhi.n	80027d8 <UART_SetConfig+0xe4>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d00a      	beq.n	80027ba <UART_SetConfig+0xc6>
 80027a4:	d818      	bhi.n	80027d8 <UART_SetConfig+0xe4>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <UART_SetConfig+0xbc>
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00a      	beq.n	80027c4 <UART_SetConfig+0xd0>
 80027ae:	e013      	b.n	80027d8 <UART_SetConfig+0xe4>
 80027b0:	231b      	movs	r3, #27
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e058      	b.n	800286c <UART_SetConfig+0x178>
 80027ba:	231b      	movs	r3, #27
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2202      	movs	r2, #2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e053      	b.n	800286c <UART_SetConfig+0x178>
 80027c4:	231b      	movs	r3, #27
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2204      	movs	r2, #4
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e04e      	b.n	800286c <UART_SetConfig+0x178>
 80027ce:	231b      	movs	r3, #27
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e049      	b.n	800286c <UART_SetConfig+0x178>
 80027d8:	231b      	movs	r3, #27
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2210      	movs	r2, #16
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e044      	b.n	800286c <UART_SetConfig+0x178>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a90      	ldr	r2, [pc, #576]	@ (8002a28 <UART_SetConfig+0x334>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d127      	bne.n	800283c <UART_SetConfig+0x148>
 80027ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002a24 <UART_SetConfig+0x330>)
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	220c      	movs	r2, #12
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d017      	beq.n	8002828 <UART_SetConfig+0x134>
 80027f8:	d81b      	bhi.n	8002832 <UART_SetConfig+0x13e>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d00a      	beq.n	8002814 <UART_SetConfig+0x120>
 80027fe:	d818      	bhi.n	8002832 <UART_SetConfig+0x13e>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <UART_SetConfig+0x116>
 8002804:	2b04      	cmp	r3, #4
 8002806:	d00a      	beq.n	800281e <UART_SetConfig+0x12a>
 8002808:	e013      	b.n	8002832 <UART_SetConfig+0x13e>
 800280a:	231b      	movs	r3, #27
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e02b      	b.n	800286c <UART_SetConfig+0x178>
 8002814:	231b      	movs	r3, #27
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e026      	b.n	800286c <UART_SetConfig+0x178>
 800281e:	231b      	movs	r3, #27
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2204      	movs	r2, #4
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e021      	b.n	800286c <UART_SetConfig+0x178>
 8002828:	231b      	movs	r3, #27
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2208      	movs	r2, #8
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e01c      	b.n	800286c <UART_SetConfig+0x178>
 8002832:	231b      	movs	r3, #27
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2210      	movs	r2, #16
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e017      	b.n	800286c <UART_SetConfig+0x178>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7a      	ldr	r2, [pc, #488]	@ (8002a2c <UART_SetConfig+0x338>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d104      	bne.n	8002850 <UART_SetConfig+0x15c>
 8002846:	231b      	movs	r3, #27
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e00d      	b.n	800286c <UART_SetConfig+0x178>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a76      	ldr	r2, [pc, #472]	@ (8002a30 <UART_SetConfig+0x33c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d104      	bne.n	8002864 <UART_SetConfig+0x170>
 800285a:	231b      	movs	r3, #27
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e003      	b.n	800286c <UART_SetConfig+0x178>
 8002864:	231b      	movs	r3, #27
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	2210      	movs	r2, #16
 800286a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	429a      	cmp	r2, r3
 8002876:	d000      	beq.n	800287a <UART_SetConfig+0x186>
 8002878:	e065      	b.n	8002946 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800287a:	231b      	movs	r3, #27
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d015      	beq.n	80028b0 <UART_SetConfig+0x1bc>
 8002884:	dc18      	bgt.n	80028b8 <UART_SetConfig+0x1c4>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d00d      	beq.n	80028a6 <UART_SetConfig+0x1b2>
 800288a:	dc15      	bgt.n	80028b8 <UART_SetConfig+0x1c4>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <UART_SetConfig+0x1a2>
 8002890:	2b02      	cmp	r3, #2
 8002892:	d005      	beq.n	80028a0 <UART_SetConfig+0x1ac>
 8002894:	e010      	b.n	80028b8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002896:	f7ff f8f7 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 800289a:	0003      	movs	r3, r0
 800289c:	617b      	str	r3, [r7, #20]
        break;
 800289e:	e012      	b.n	80028c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028a0:	4b64      	ldr	r3, [pc, #400]	@ (8002a34 <UART_SetConfig+0x340>)
 80028a2:	617b      	str	r3, [r7, #20]
        break;
 80028a4:	e00f      	b.n	80028c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028a6:	f7ff f863 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 80028aa:	0003      	movs	r3, r0
 80028ac:	617b      	str	r3, [r7, #20]
        break;
 80028ae:	e00a      	b.n	80028c6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	617b      	str	r3, [r7, #20]
        break;
 80028b6:	e006      	b.n	80028c6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80028bc:	231a      	movs	r3, #26
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
        break;
 80028c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d100      	bne.n	80028ce <UART_SetConfig+0x1da>
 80028cc:	e08d      	b.n	80029ea <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d2:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <UART_SetConfig+0x344>)
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	5ad3      	ldrh	r3, [r2, r3]
 80028d8:	0019      	movs	r1, r3
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7fd fc10 	bl	8000100 <__udivsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	005a      	lsls	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	18d2      	adds	r2, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f7fd fc04 	bl	8000100 <__udivsi3>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	d91c      	bls.n	800293c <UART_SetConfig+0x248>
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	025b      	lsls	r3, r3, #9
 8002908:	429a      	cmp	r2, r3
 800290a:	d217      	bcs.n	800293c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	b29a      	uxth	r2, r3
 8002910:	200e      	movs	r0, #14
 8002912:	183b      	adds	r3, r7, r0
 8002914:	210f      	movs	r1, #15
 8002916:	438a      	bics	r2, r1
 8002918:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	b29b      	uxth	r3, r3
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	b299      	uxth	r1, r3
 8002926:	183b      	adds	r3, r7, r0
 8002928:	183a      	adds	r2, r7, r0
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	183a      	adds	r2, r7, r0
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	e056      	b.n	80029ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800293c:	231a      	movs	r3, #26
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e051      	b.n	80029ea <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002946:	231b      	movs	r3, #27
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d015      	beq.n	800297c <UART_SetConfig+0x288>
 8002950:	dc18      	bgt.n	8002984 <UART_SetConfig+0x290>
 8002952:	2b04      	cmp	r3, #4
 8002954:	d00d      	beq.n	8002972 <UART_SetConfig+0x27e>
 8002956:	dc15      	bgt.n	8002984 <UART_SetConfig+0x290>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <UART_SetConfig+0x26e>
 800295c:	2b02      	cmp	r3, #2
 800295e:	d005      	beq.n	800296c <UART_SetConfig+0x278>
 8002960:	e010      	b.n	8002984 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002962:	f7ff f891 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002966:	0003      	movs	r3, r0
 8002968:	617b      	str	r3, [r7, #20]
        break;
 800296a:	e012      	b.n	8002992 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <UART_SetConfig+0x340>)
 800296e:	617b      	str	r3, [r7, #20]
        break;
 8002970:	e00f      	b.n	8002992 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7fe fffd 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8002976:	0003      	movs	r3, r0
 8002978:	617b      	str	r3, [r7, #20]
        break;
 800297a:	e00a      	b.n	8002992 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	617b      	str	r3, [r7, #20]
        break;
 8002982:	e006      	b.n	8002992 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002988:	231a      	movs	r3, #26
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
        break;
 8002990:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d028      	beq.n	80029ea <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800299c:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <UART_SetConfig+0x344>)
 800299e:	0052      	lsls	r2, r2, #1
 80029a0:	5ad3      	ldrh	r3, [r2, r3]
 80029a2:	0019      	movs	r1, r3
 80029a4:	6978      	ldr	r0, [r7, #20]
 80029a6:	f7fd fbab 	bl	8000100 <__udivsi3>
 80029aa:	0003      	movs	r3, r0
 80029ac:	001a      	movs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	18d2      	adds	r2, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0019      	movs	r1, r3
 80029bc:	0010      	movs	r0, r2
 80029be:	f7fd fb9f 	bl	8000100 <__udivsi3>
 80029c2:	0003      	movs	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d90a      	bls.n	80029e2 <UART_SetConfig+0x2ee>
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d205      	bcs.n	80029e2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	e003      	b.n	80029ea <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80029e2:	231a      	movs	r3, #26
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	226a      	movs	r2, #106	@ 0x6a
 80029ee:	2101      	movs	r1, #1
 80029f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2268      	movs	r2, #104	@ 0x68
 80029f6:	2101      	movs	r1, #1
 80029f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002a06:	231a      	movs	r3, #26
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	781b      	ldrb	r3, [r3, #0]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b008      	add	sp, #32
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	cfff69f3 	.word	0xcfff69f3
 8002a18:	ffffcfff 	.word	0xffffcfff
 8002a1c:	11fff4ff 	.word	0x11fff4ff
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	40004c00 	.word	0x40004c00
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	080031a8 	.word	0x080031a8

08002a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	@ (8002b80 <UART_AdvFeatureConfig+0x144>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a43      	ldr	r2, [pc, #268]	@ (8002b84 <UART_AdvFeatureConfig+0x148>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a3b      	ldr	r2, [pc, #236]	@ (8002b88 <UART_AdvFeatureConfig+0x14c>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a34      	ldr	r2, [pc, #208]	@ (8002b8c <UART_AdvFeatureConfig+0x150>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a2c      	ldr	r2, [pc, #176]	@ (8002b90 <UART_AdvFeatureConfig+0x154>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	2220      	movs	r2, #32
 8002af4:	4013      	ands	r3, r2
 8002af6:	d00b      	beq.n	8002b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4a25      	ldr	r2, [pc, #148]	@ (8002b94 <UART_AdvFeatureConfig+0x158>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	4013      	ands	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <UART_AdvFeatureConfig+0x15c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	035b      	lsls	r3, r3, #13
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10b      	bne.n	8002b56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a15      	ldr	r2, [pc, #84]	@ (8002b9c <UART_AdvFeatureConfig+0x160>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <UART_AdvFeatureConfig+0x164>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	ffff7fff 	.word	0xffff7fff
 8002b84:	fffdffff 	.word	0xfffdffff
 8002b88:	fffeffff 	.word	0xfffeffff
 8002b8c:	fffbffff 	.word	0xfffbffff
 8002b90:	ffffefff 	.word	0xffffefff
 8002b94:	ffffdfff 	.word	0xffffdfff
 8002b98:	ffefffff 	.word	0xffefffff
 8002b9c:	ff9fffff 	.word	0xff9fffff
 8002ba0:	fff7ffff 	.word	0xfff7ffff

08002ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b092      	sub	sp, #72	@ 0x48
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2290      	movs	r2, #144	@ 0x90
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bb4:	f7fd ff48 	bl	8000a48 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d12d      	bne.n	8002c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	0391      	lsls	r1, r2, #14
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4a47      	ldr	r2, [pc, #284]	@ (8002cf0 <UART_CheckIdleState+0x14c>)
 8002bd4:	9200      	str	r2, [sp, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f000 f88e 	bl	8002cf8 <UART_WaitOnFlagUntilTimeout>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d022      	beq.n	8002c26 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bea:	2301      	movs	r3, #1
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	438a      	bics	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2288      	movs	r2, #136	@ 0x88
 8002c16:	2120      	movs	r1, #32
 8002c18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2284      	movs	r2, #132	@ 0x84
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e060      	b.n	8002ce8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d146      	bne.n	8002cc2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	03d1      	lsls	r1, r2, #15
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf0 <UART_CheckIdleState+0x14c>)
 8002c3e:	9200      	str	r2, [sp, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f000 f859 	bl	8002cf8 <UART_WaitOnFlagUntilTimeout>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d03b      	beq.n	8002cc2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c50:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c54:	2301      	movs	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f383 8810 	msr	PRIMASK, r3
}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4922      	ldr	r1, [pc, #136]	@ (8002cf4 <UART_CheckIdleState+0x150>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f383 8810 	msr	PRIMASK, r3
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c82:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c86:	2301      	movs	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f383 8810 	msr	PRIMASK, r3
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	228c      	movs	r2, #140	@ 0x8c
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2284      	movs	r2, #132	@ 0x84
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e012      	b.n	8002ce8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2288      	movs	r2, #136	@ 0x88
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	228c      	movs	r2, #140	@ 0x8c
 8002cce:	2120      	movs	r1, #32
 8002cd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2284      	movs	r2, #132	@ 0x84
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b010      	add	sp, #64	@ 0x40
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	01ffffff 	.word	0x01ffffff
 8002cf4:	fffffedf 	.word	0xfffffedf

08002cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d08:	e051      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	d04e      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d10:	f7fd fe9a 	bl	8000a48 <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d302      	bcc.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e051      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d03b      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d038      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d035      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d111      	bne.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2208      	movs	r2, #8
 8002d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f83c 	bl	8002dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2290      	movs	r2, #144	@ 0x90
 8002d64:	2108      	movs	r1, #8
 8002d66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2284      	movs	r2, #132	@ 0x84
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e02c      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	401a      	ands	r2, r3
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d112      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2280      	movs	r2, #128	@ 0x80
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 f81f 	bl	8002dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2290      	movs	r2, #144	@ 0x90
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2284      	movs	r2, #132	@ 0x84
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e00f      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	425a      	negs	r2, r3
 8002dbe:	4153      	adcs	r3, r2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d09e      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	@ 0x38
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de0:	f3ef 8310 	mrs	r3, PRIMASK
 8002de4:	617b      	str	r3, [r7, #20]
  return(result);
 8002de6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dea:	2301      	movs	r3, #1
 8002dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f383 8810 	msr	PRIMASK, r3
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4926      	ldr	r1, [pc, #152]	@ (8002e9c <UART_EndRxTransfer+0xc4>)
 8002e02:	400a      	ands	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f383 8810 	msr	PRIMASK, r3
}
 8002e10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e12:	f3ef 8310 	mrs	r3, PRIMASK
 8002e16:	623b      	str	r3, [r7, #32]
  return(result);
 8002e18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	491b      	ldr	r1, [pc, #108]	@ (8002ea0 <UART_EndRxTransfer+0xc8>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d118      	bne.n	8002e7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e56:	2301      	movs	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	438a      	bics	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f383 8810 	msr	PRIMASK, r3
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	228c      	movs	r2, #140	@ 0x8c
 8002e82:	2120      	movs	r1, #32
 8002e84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b00e      	add	sp, #56	@ 0x38
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	fffffedf 	.word	0xfffffedf
 8002ea0:	effffffe 	.word	0xeffffffe

08002ea4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2284      	movs	r2, #132	@ 0x84
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_UARTEx_DisableFifoMode+0x16>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e027      	b.n	8002f0a <HAL_UARTEx_DisableFifoMode+0x66>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2284      	movs	r2, #132	@ 0x84
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2288      	movs	r2, #136	@ 0x88
 8002ec6:	2124      	movs	r1, #36	@ 0x24
 8002ec8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2288      	movs	r2, #136	@ 0x88
 8002efc:	2120      	movs	r1, #32
 8002efe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2284      	movs	r2, #132	@ 0x84
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	dfffffff 	.word	0xdfffffff

08002f18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2284      	movs	r2, #132	@ 0x84
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e02e      	b.n	8002f8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2284      	movs	r2, #132	@ 0x84
 8002f34:	2101      	movs	r1, #1
 8002f36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2288      	movs	r2, #136	@ 0x88
 8002f3c:	2124      	movs	r1, #36	@ 0x24
 8002f3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	08d9      	lsrs	r1, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 f854 	bl	800301c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2288      	movs	r2, #136	@ 0x88
 8002f80:	2120      	movs	r1, #32
 8002f82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2284      	movs	r2, #132	@ 0x84
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2284      	movs	r2, #132	@ 0x84
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e02f      	b.n	8003010 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2284      	movs	r2, #132	@ 0x84
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2288      	movs	r2, #136	@ 0x88
 8002fbc:	2124      	movs	r1, #36	@ 0x24
 8002fbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4a0e      	ldr	r2, [pc, #56]	@ (8003018 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f813 	bl	800301c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2288      	movs	r2, #136	@ 0x88
 8003002:	2120      	movs	r1, #32
 8003004:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2284      	movs	r2, #132	@ 0x84
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b004      	add	sp, #16
 8003016:	bd80      	pop	{r7, pc}
 8003018:	f1ffffff 	.word	0xf1ffffff

0800301c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003028:	2b00      	cmp	r3, #0
 800302a:	d108      	bne.n	800303e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	226a      	movs	r2, #106	@ 0x6a
 8003030:	2101      	movs	r1, #1
 8003032:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2268      	movs	r2, #104	@ 0x68
 8003038:	2101      	movs	r1, #1
 800303a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800303c:	e043      	b.n	80030c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800303e:	260f      	movs	r6, #15
 8003040:	19bb      	adds	r3, r7, r6
 8003042:	2208      	movs	r2, #8
 8003044:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003046:	200e      	movs	r0, #14
 8003048:	183b      	adds	r3, r7, r0
 800304a:	2208      	movs	r2, #8
 800304c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	0e5b      	lsrs	r3, r3, #25
 8003056:	b2da      	uxtb	r2, r3
 8003058:	240d      	movs	r4, #13
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2107      	movs	r1, #7
 800305e:	400a      	ands	r2, r1
 8003060:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0f5b      	lsrs	r3, r3, #29
 800306a:	b2da      	uxtb	r2, r3
 800306c:	250c      	movs	r5, #12
 800306e:	197b      	adds	r3, r7, r5
 8003070:	2107      	movs	r1, #7
 8003072:	400a      	ands	r2, r1
 8003074:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003076:	183b      	adds	r3, r7, r0
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	197a      	adds	r2, r7, r5
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	4914      	ldr	r1, [pc, #80]	@ (80030d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003080:	5c8a      	ldrb	r2, [r1, r2]
 8003082:	435a      	muls	r2, r3
 8003084:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003086:	197b      	adds	r3, r7, r5
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4a12      	ldr	r2, [pc, #72]	@ (80030d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800308c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800308e:	0019      	movs	r1, r3
 8003090:	f7fd f8c0 	bl	8000214 <__divsi3>
 8003094:	0003      	movs	r3, r0
 8003096:	b299      	uxth	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	226a      	movs	r2, #106	@ 0x6a
 800309c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800309e:	19bb      	adds	r3, r7, r6
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	193a      	adds	r2, r7, r4
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	490a      	ldr	r1, [pc, #40]	@ (80030d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80030a8:	5c8a      	ldrb	r2, [r1, r2]
 80030aa:	435a      	muls	r2, r3
 80030ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030b6:	0019      	movs	r1, r3
 80030b8:	f7fd f8ac 	bl	8000214 <__divsi3>
 80030bc:	0003      	movs	r3, r0
 80030be:	b299      	uxth	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2268      	movs	r2, #104	@ 0x68
 80030c4:	5299      	strh	r1, [r3, r2]
}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b005      	add	sp, #20
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	080031c0 	.word	0x080031c0
 80030d4:	080031c8 	.word	0x080031c8

080030d8 <memset>:
 80030d8:	0003      	movs	r3, r0
 80030da:	1882      	adds	r2, r0, r2
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	7019      	strb	r1, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <__libc_init_array>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	2600      	movs	r6, #0
 80030ec:	4c0c      	ldr	r4, [pc, #48]	@ (8003120 <__libc_init_array+0x38>)
 80030ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003124 <__libc_init_array+0x3c>)
 80030f0:	1b64      	subs	r4, r4, r5
 80030f2:	10a4      	asrs	r4, r4, #2
 80030f4:	42a6      	cmp	r6, r4
 80030f6:	d109      	bne.n	800310c <__libc_init_array+0x24>
 80030f8:	2600      	movs	r6, #0
 80030fa:	f000 f819 	bl	8003130 <_init>
 80030fe:	4c0a      	ldr	r4, [pc, #40]	@ (8003128 <__libc_init_array+0x40>)
 8003100:	4d0a      	ldr	r5, [pc, #40]	@ (800312c <__libc_init_array+0x44>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	42a6      	cmp	r6, r4
 8003108:	d105      	bne.n	8003116 <__libc_init_array+0x2e>
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	00b3      	lsls	r3, r6, #2
 800310e:	58eb      	ldr	r3, [r5, r3]
 8003110:	4798      	blx	r3
 8003112:	3601      	adds	r6, #1
 8003114:	e7ee      	b.n	80030f4 <__libc_init_array+0xc>
 8003116:	00b3      	lsls	r3, r6, #2
 8003118:	58eb      	ldr	r3, [r5, r3]
 800311a:	4798      	blx	r3
 800311c:	3601      	adds	r6, #1
 800311e:	e7f2      	b.n	8003106 <__libc_init_array+0x1e>
 8003120:	080031d0 	.word	0x080031d0
 8003124:	080031d0 	.word	0x080031d0
 8003128:	080031d4 	.word	0x080031d4
 800312c:	080031d0 	.word	0x080031d0

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	46c0      	nop			@ (mov r8, r8)
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
