
CustomSignal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009d68  08009d68  0000ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009da8  08009da8  0000b17c  2**0
                  CONTENTS
  4 .ARM          00000008  08009da8  08009da8  0000ada8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db0  08009db0  0000b17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db0  08009db0  0000adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009db4  08009db4  0000adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  24000000  08009db8  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240000bc  08009e74  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400011c  08009ed4  0000b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000074c  2400017c  08009f34  0000b17c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008c8  08009f34  0000b8c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ed02  00000000  00000000  0000b1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000337f  00000000  00000000  00029eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001680  00000000  00000000  0002d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000119f  00000000  00000000  0002e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bd32  00000000  00000000  0002fa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e593  00000000  00000000  0006b781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018c73a  00000000  00000000  00089d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021644e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000061a8  00000000  00000000  00216494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0021c63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400017c 	.word	0x2400017c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009d50 	.word	0x08009d50

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000180 	.word	0x24000180
 80002d4:	08009d50 	.word	0x08009d50

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006fa:	4b6f      	ldr	r3, [pc, #444]	@ (80008b8 <main+0x1c4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d11b      	bne.n	800073e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
}
 800070a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070c:	f3bf 8f6f 	isb	sy
}
 8000710:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000712:	4b69      	ldr	r3, [pc, #420]	@ (80008b8 <main+0x1c4>)
 8000714:	2200      	movs	r2, #0
 8000716:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800071a:	f3bf 8f4f 	dsb	sy
}
 800071e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000720:	f3bf 8f6f 	isb	sy
}
 8000724:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000726:	4b64      	ldr	r3, [pc, #400]	@ (80008b8 <main+0x1c4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a63      	ldr	r2, [pc, #396]	@ (80008b8 <main+0x1c4>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000738:	f3bf 8f6f 	isb	sy
}
 800073c:	e000      	b.n	8000740 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800073e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000740:	4b5d      	ldr	r3, [pc, #372]	@ (80008b8 <main+0x1c4>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d138      	bne.n	80007be <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074c:	4b5a      	ldr	r3, [pc, #360]	@ (80008b8 <main+0x1c4>)
 800074e:	2200      	movs	r2, #0
 8000750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800075a:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <main+0x1c4>)
 800075c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000760:	623b      	str	r3, [r7, #32]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	0b5b      	lsrs	r3, r3, #13
 8000766:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800076a:	61fb      	str	r3, [r7, #28]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000774:	61bb      	str	r3, [r7, #24]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	015a      	lsls	r2, r3, #5
 800077a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800077e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000784:	494c      	ldr	r1, [pc, #304]	@ (80008b8 <main+0x1c4>)
 8000786:	4313      	orrs	r3, r2
 8000788:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	61ba      	str	r2, [r7, #24]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ef      	bne.n	8000776 <main+0x82>
    } while(sets-- != 0U);
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	61fa      	str	r2, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1e5      	bne.n	800076c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007a6:	4b44      	ldr	r3, [pc, #272]	@ (80008b8 <main+0x1c4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a43      	ldr	r2, [pc, #268]	@ (80008b8 <main+0x1c4>)
 80007ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b2:	f3bf 8f4f 	dsb	sy
}
 80007b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007b8:	f3bf 8f6f 	isb	sy
}
 80007bc:	e000      	b.n	80007c0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007be:	bf00      	nop
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007c6:	bf00      	nop
 80007c8:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <main+0x1c8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <main+0xea>
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dcf4      	bgt.n	80007c8 <main+0xd4>
  if ( timeout < 0 )
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da01      	bge.n	80007e8 <main+0xf4>
  {
  Error_Handler();
 80007e4:	f000 fa94 	bl	8000d10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fd74 	bl	80012d4 <HAL_Init>
 80007ec:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <main+0x1cc>)
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	2325      	movs	r3, #37	@ 0x25
 80007f2:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	dd1d      	ble.n	8000836 <main+0x142>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800080a:	f3bf 8f4f 	dsb	sy
}
 800080e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000810:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <main+0x1c4>)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3320      	adds	r3, #32
 800081c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3b20      	subs	r3, #32
 8000822:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	dcf2      	bgt.n	8000810 <main+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000830:	f3bf 8f6f 	isb	sy
}
 8000834:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000836:	bf00      	nop
  /* Clean Data Cache to update the content of the SRAM to be used by the DMA */
  SCB_CleanDCache_by_Addr((uint32_t *) DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f846 	bl	80008c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <main+0x1c8>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <main+0x1c8>)
 8000844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <main+0x1c8>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085a:	2000      	movs	r0, #0
 800085c:	f003 fddc 	bl	8004418 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000860:	2100      	movs	r1, #0
 8000862:	2000      	movs	r0, #0
 8000864:	f003 fdf2 	bl	800444c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800086e:	bf00      	nop
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <main+0x1c8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <main+0x192>
 800087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	627a      	str	r2, [r7, #36]	@ 0x24
 8000882:	2b00      	cmp	r3, #0
 8000884:	dcf4      	bgt.n	8000870 <main+0x17c>
if ( timeout < 0 )
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	2b00      	cmp	r3, #0
 800088a:	da01      	bge.n	8000890 <main+0x19c>
{
Error_Handler();
 800088c:	f000 fa40 	bl	8000d10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 f9d8 	bl	8000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f000 f9b6 	bl	8000c04 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000898:	f000 f936 	bl	8000b08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800089c:	f000 f980 	bl	8000ba0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80008a0:	f000 f8d8 	bl	8000a54 <MX_TIM4_Init>
  MX_ETH_Init();
 80008a4:	f000 f88a 	bl	80009bc <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
 80008a8:	2325      	movs	r3, #37	@ 0x25
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <main+0x1cc>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <main+0x1d0>)
 80008b0:	f006 fde4 	bl	800747c <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <main+0x1c0>
 80008b8:	e000ed00 	.word	0xe000ed00
 80008bc:	58024400 	.word	0x58024400
 80008c0:	24000020 	.word	0x24000020
 80008c4:	24000280 	.word	0x24000280

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	@ 0x70
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	224c      	movs	r2, #76	@ 0x4c
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 fa0d 	bl	8009cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2220      	movs	r2, #32
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fa07 	bl	8009cf6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008e8:	2004      	movs	r0, #4
 80008ea:	f003 fef3 	bl	80046d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <SystemClock_Config+0xec>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a2f      	ldr	r2, [pc, #188]	@ (80009b4 <SystemClock_Config+0xec>)
 80008f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fc:	6193      	str	r3, [r2, #24]
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <SystemClock_Config+0xec>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <SystemClock_Config+0xf0>)
 800090a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090c:	4a2a      	ldr	r2, [pc, #168]	@ (80009b8 <SystemClock_Config+0xf0>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000914:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <SystemClock_Config+0xf0>)
 8000916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <SystemClock_Config+0xec>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	2302      	movs	r3, #2
 8000940:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000946:	2378      	movs	r3, #120	@ 0x78
 8000948:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000956:	230c      	movs	r3, #12
 8000958:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800095a:	2300      	movs	r3, #0
 800095c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000966:	4618      	mov	r0, r3
 8000968:	f003 ff1e 	bl	80047a8 <HAL_RCC_OscConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000972:	f000 f9cd 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000976:	233f      	movs	r3, #63	@ 0x3f
 8000978:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097a:	2303      	movs	r3, #3
 800097c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000982:	2308      	movs	r3, #8
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000986:	2340      	movs	r3, #64	@ 0x40
 8000988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800098a:	2340      	movs	r3, #64	@ 0x40
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800098e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000994:	2340      	movs	r3, #64	@ 0x40
 8000996:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2104      	movs	r1, #4
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fb5d 	bl	800505c <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009a8:	f000 f9b2 	bl	8000d10 <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3770      	adds	r7, #112	@ 0x70
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024800 	.word	0x58024800
 80009b8:	58000400 	.word	0x58000400

080009bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <MX_ETH_Init+0x80>)
 80009c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <MX_ETH_Init+0x84>)
 80009c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009ce:	2280      	movs	r2, #128	@ 0x80
 80009d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009d4:	22e1      	movs	r2, #225	@ 0xe1
 80009d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009da:	2200      	movs	r2, #0
 80009dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_ETH_Init+0x80>)
 80009ec:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <MX_ETH_Init+0x88>)
 80009ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_ETH_Init+0x80>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_ETH_Init+0x80>)
 80009f8:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <MX_ETH_Init+0x8c>)
 80009fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_ETH_Init+0x80>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <MX_ETH_Init+0x90>)
 8000a00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_ETH_Init+0x80>)
 8000a04:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_ETH_Init+0x80>)
 8000a0c:	f002 ff20 	bl	8003850 <HAL_ETH_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a16:	f000 f97b 	bl	8000d10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a1a:	2238      	movs	r2, #56	@ 0x38
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_ETH_Init+0x94>)
 8000a20:	f009 f969 	bl	8009cf6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_ETH_Init+0x94>)
 8000a26:	2221      	movs	r2, #33	@ 0x21
 8000a28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_ETH_Init+0x94>)
 8000a2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_ETH_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	240001d0 	.word	0x240001d0
 8000a40:	40028000 	.word	0x40028000
 8000a44:	240008bc 	.word	0x240008bc
 8000a48:	2400011c 	.word	0x2400011c
 8000a4c:	240000bc 	.word	0x240000bc
 8000a50:	24000198 	.word	0x24000198

08000a54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a7a:	4a22      	ldr	r2, [pc, #136]	@ (8000b04 <MX_TIM4_Init+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a86:	2220      	movs	r2, #32
 8000a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a8c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9e:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000aa0:	f006 fc94 	bl	80073cc <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 f931 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000abe:	f007 fca9 	bl	8008414 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ac8:	f000 f922 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	@ 0x60
 8000ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000ae4:	f006 fef0 	bl	80078c8 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000aee:	f000 f90f 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <MX_TIM4_Init+0xac>)
 8000af4:	f000 fa58 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	24000280 	.word	0x24000280
 8000b04:	40000800 	.word	0x40000800

08000b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	@ (8000b9c <MX_USART3_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b50:	4811      	ldr	r0, [pc, #68]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b52:	f007 fced 	bl	8008530 <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f8d8 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b64:	f008 fcf5 	bl	8009552 <HAL_UARTEx_SetTxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f000 f8cf 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b76:	f008 fd2a 	bl	80095ce <HAL_UARTEx_SetRxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f8c6 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b86:	f008 fcab 	bl	80094e0 <HAL_UARTEx_DisableFifoMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f000 f8be 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24000344 	.word	0x24000344
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba6:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bac:	2209      	movs	r2, #9
 8000bae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	f003 fc44 	bl	8004474 <HAL_PCD_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bf2:	f000 f88d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240003d8 	.word	0x240003d8
 8000c00:	40080000 	.word	0x40080000

08000c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <MX_DMA_Init+0x3c>)
 8000c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <MX_DMA_Init+0x3c>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_DMA_Init+0x3c>)
 8000c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	200b      	movs	r0, #11
 8000c2e:	f000 fd02 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c32:	200b      	movs	r0, #11
 8000c34:	f000 fd19 	bl	800166a <HAL_NVIC_EnableIRQ>

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58024400 	.word	0x58024400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b30      	ldr	r3, [pc, #192]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a2e      	ldr	r2, [pc, #184]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a27      	ldr	r2, [pc, #156]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a18      	ldr	r2, [pc, #96]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_GPIO_Init+0xc8>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	58024400 	.word	0x58024400

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	58024400 	.word	0x58024400

08000d50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a59      	ldr	r2, [pc, #356]	@ (8000ed4 <HAL_ETH_MspInit+0x184>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 80ab 	bne.w	8000eca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d74:	4b58      	ldr	r3, [pc, #352]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7a:	4a57      	ldr	r2, [pc, #348]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d84:	4b54      	ldr	r3, [pc, #336]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d92:	4b51      	ldr	r3, [pc, #324]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d98:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000da2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000db0:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db6:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dc0:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a40      	ldr	r2, [pc, #256]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a39      	ldr	r2, [pc, #228]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a31      	ldr	r2, [pc, #196]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e46:	2332      	movs	r3, #50	@ 0x32
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481e      	ldr	r0, [pc, #120]	@ (8000edc <HAL_ETH_MspInit+0x18c>)
 8000e62:	f003 f929 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e66:	2386      	movs	r3, #134	@ 0x86
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	@ (8000ee0 <HAL_ETH_MspInit+0x190>)
 8000e82:	f003 f919 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4810      	ldr	r0, [pc, #64]	@ (8000ee4 <HAL_ETH_MspInit+0x194>)
 8000ea4:	f003 f908 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ea8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <HAL_ETH_MspInit+0x198>)
 8000ec6:	f003 f8f7 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	@ 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40028000 	.word	0x40028000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020800 	.word	0x58020800
 8000ee0:	58020000 	.word	0x58020000
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021800 	.word	0x58021800

08000eec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <HAL_TIM_PWM_MspInit+0xac>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d147      	bne.n	8000f8e <HAL_TIM_PWM_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000efe:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <HAL_TIM_PWM_MspInit+0xb0>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f04:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <HAL_TIM_PWM_MspInit+0xb0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_TIM_PWM_MspInit+0xb0>)
 8000f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0xb8>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f24:	221d      	movs	r2, #29
 8000f26:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f2a:	2240      	movs	r2, #64	@ 0x40
 8000f2c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f42:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f4a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f52:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim4_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim4_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim4_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f74:	f000 fb94 	bl	80016a0 <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 8000f7e:	f7ff fec7 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f88:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40000800 	.word	0x40000800
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	240002cc 	.word	0x240002cc
 8000fa4:	40020010 	.word	0x40020010

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <HAL_TIM_MspPostInit+0x6c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d11f      	bne.n	800100a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <HAL_TIM_MspPostInit+0x70>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	4a11      	ldr	r2, [pc, #68]	@ (8001018 <HAL_TIM_MspPostInit+0x70>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_TIM_MspPostInit+0x70>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_TIM_MspPostInit+0x74>)
 8001006:	f003 f857 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000800 	.word	0x40000800
 8001018:	58024400 	.word	0x58024400
 800101c:	58020c00 	.word	0x58020c00

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ba      	sub	sp, #232	@ 0xe8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	22c0      	movs	r2, #192	@ 0xc0
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f008 fe58 	bl	8009cf6 <memset>
  if(huart->Instance==USART3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a27      	ldr	r2, [pc, #156]	@ (80010e8 <HAL_UART_MspInit+0xc8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d146      	bne.n	80010de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001050:	f04f 0202 	mov.w	r2, #2
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4618      	mov	r0, r3
 8001068:	f004 fb84 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001072:	f7ff fe4d 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 800107e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001082:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800108c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0xcc>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <HAL_UART_MspInit+0xd0>)
 80010da:	f002 ffed 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	37e8      	adds	r7, #232	@ 0xe8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004800 	.word	0x40004800
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58020c00 	.word	0x58020c00

080010f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ba      	sub	sp, #232	@ 0xe8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	22c0      	movs	r2, #192	@ 0xc0
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f008 fdee 	bl	8009cf6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a38      	ldr	r2, [pc, #224]	@ (8001200 <HAL_PCD_MspInit+0x10c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d169      	bne.n	80011f8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001124:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001134:	2312      	movs	r3, #18
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800113c:	2303      	movs	r3, #3
 800113e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001144:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 800114a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800114e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001150:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fb09 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001168:	f7ff fdd2 	bl	8000d10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800116c:	f003 fb0c 	bl	8004788 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800118e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011a8:	230a      	movs	r3, #10
 80011aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4814      	ldr	r0, [pc, #80]	@ (8001208 <HAL_PCD_MspInit+0x114>)
 80011b6:	f002 ff7f 	bl	80040b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_PCD_MspInit+0x114>)
 80011d6:	f002 ff6f 	bl	80040b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 80011e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_PCD_MspInit+0x110>)
 80011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	37e8      	adds	r7, #232	@ 0xe8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40080000 	.word	0x40080000
 8001204:	58024400 	.word	0x58024400
 8001208:	58020000 	.word	0x58020000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f8a9 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <DMA1_Stream0_IRQHandler+0x10>)
 8001272:	f000 ffdb 	bl	800222c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	240002cc 	.word	0x240002cc

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff f9a0 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f008 fd2b 	bl	8009d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fa1f 	bl	80006f4 <main>
  bx  lr
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c0:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 80012c4:	08009db8 	.word	0x08009db8
  ldr r2, =_sbss
 80012c8:	2400017c 	.word	0x2400017c
  ldr r4, =_ebss
 80012cc:	240008c8 	.word	0x240008c8

080012d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC3_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f9a0 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012e0:	f004 f872 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_Init+0x68>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	4913      	ldr	r1, [pc, #76]	@ (8001340 <HAL_Init+0x6c>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
 80012fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_Init+0x6c>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <HAL_Init+0x70>)
 8001316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <HAL_Init+0x74>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f814 	bl	800134c <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e002      	b.n	8001334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800132e:	f7ff fcf5 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58024400 	.word	0x58024400
 8001340:	08009d68 	.word	0x08009d68
 8001344:	24000004 	.word	0x24000004
 8001348:	24000000 	.word	0x24000000

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001354:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e021      	b.n	80013a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_InitTick+0x64>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f985 	bl	8001686 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f94f 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <HAL_InitTick+0x68>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	240000b8 	.word	0x240000b8
 80013b0:	24000000 	.word	0x24000000
 80013b4:	240000b4 	.word	0x240000b4

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	240000b8 	.word	0x240000b8
 80013dc:	240008c4 	.word	0x240008c4

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	240008c4 	.word	0x240008c4

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	240000b8 	.word	0x240000b8

08001440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetREVID+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0c1b      	lsrs	r3, r3, #16
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	5c001000 	.word	0x5c001000

08001458 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001468:	4904      	ldr	r1, [pc, #16]	@ (800147c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	58000400 	.word	0x58000400

08001480 <__NVIC_SetPriorityGrouping>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	05fa0000 	.word	0x05fa0000

080014c8 <__NVIC_GetPriorityGrouping>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	@ (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	@ (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	@ (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff40 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff33 	bl	80014e4 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa4 	bl	80015dc <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff fe9a 	bl	80013e0 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e316      	b.n	8001ce6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a66      	ldr	r2, [pc, #408]	@ (8001858 <HAL_DMA_Init+0x1b8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d04a      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a65      	ldr	r2, [pc, #404]	@ (800185c <HAL_DMA_Init+0x1bc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d045      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a63      	ldr	r2, [pc, #396]	@ (8001860 <HAL_DMA_Init+0x1c0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d040      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a62      	ldr	r2, [pc, #392]	@ (8001864 <HAL_DMA_Init+0x1c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d03b      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a60      	ldr	r2, [pc, #384]	@ (8001868 <HAL_DMA_Init+0x1c8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d036      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5f      	ldr	r2, [pc, #380]	@ (800186c <HAL_DMA_Init+0x1cc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d031      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <HAL_DMA_Init+0x1d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d02c      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5c      	ldr	r2, [pc, #368]	@ (8001874 <HAL_DMA_Init+0x1d4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d027      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5a      	ldr	r2, [pc, #360]	@ (8001878 <HAL_DMA_Init+0x1d8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d022      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a59      	ldr	r2, [pc, #356]	@ (800187c <HAL_DMA_Init+0x1dc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d01d      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a57      	ldr	r2, [pc, #348]	@ (8001880 <HAL_DMA_Init+0x1e0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d018      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a56      	ldr	r2, [pc, #344]	@ (8001884 <HAL_DMA_Init+0x1e4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a54      	ldr	r2, [pc, #336]	@ (8001888 <HAL_DMA_Init+0x1e8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00e      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a53      	ldr	r2, [pc, #332]	@ (800188c <HAL_DMA_Init+0x1ec>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d009      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a51      	ldr	r2, [pc, #324]	@ (8001890 <HAL_DMA_Init+0x1f0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Init+0xb8>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <HAL_DMA_Init+0x1f4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_DMA_Init+0xbc>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_DMA_Init+0xbe>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 813b 	beq.w	80019da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a37      	ldr	r2, [pc, #220]	@ (8001858 <HAL_DMA_Init+0x1b8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d04a      	beq.n	8001814 <HAL_DMA_Init+0x174>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a36      	ldr	r2, [pc, #216]	@ (800185c <HAL_DMA_Init+0x1bc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d045      	beq.n	8001814 <HAL_DMA_Init+0x174>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <HAL_DMA_Init+0x1c0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d040      	beq.n	8001814 <HAL_DMA_Init+0x174>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a33      	ldr	r2, [pc, #204]	@ (8001864 <HAL_DMA_Init+0x1c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d03b      	beq.n	8001814 <HAL_DMA_Init+0x174>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <HAL_DMA_Init+0x1c8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d036      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a30      	ldr	r2, [pc, #192]	@ (800186c <HAL_DMA_Init+0x1cc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d031      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001870 <HAL_DMA_Init+0x1d0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02c      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2d      	ldr	r2, [pc, #180]	@ (8001874 <HAL_DMA_Init+0x1d4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d027      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001878 <HAL_DMA_Init+0x1d8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d022      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a2a      	ldr	r2, [pc, #168]	@ (800187c <HAL_DMA_Init+0x1dc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d01d      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a28      	ldr	r2, [pc, #160]	@ (8001880 <HAL_DMA_Init+0x1e0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d018      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_DMA_Init+0x1e4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a25      	ldr	r2, [pc, #148]	@ (8001888 <HAL_DMA_Init+0x1e8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_DMA_Init+0x174>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a24      	ldr	r2, [pc, #144]	@ (800188c <HAL_DMA_Init+0x1ec>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_DMA_Init+0x174>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_DMA_Init+0x1f0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Init+0x174>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <HAL_DMA_Init+0x1f4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d108      	bne.n	8001826 <HAL_DMA_Init+0x186>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e007      	b.n	8001836 <HAL_DMA_Init+0x196>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001836:	e02f      	b.n	8001898 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001838:	f7ff fdd2 	bl	80013e0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b05      	cmp	r3, #5
 8001844:	d928      	bls.n	8001898 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e246      	b.n	8001ce6 <HAL_DMA_Init+0x646>
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1c8      	bne.n	8001838 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4b83      	ldr	r3, [pc, #524]	@ (8001ac0 <HAL_DMA_Init+0x420>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	4313      	orrs	r3, r2
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018fc:	4b71      	ldr	r3, [pc, #452]	@ (8001ac4 <HAL_DMA_Init+0x424>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b71      	ldr	r3, [pc, #452]	@ (8001ac8 <HAL_DMA_Init+0x428>)
 8001902:	4013      	ands	r3, r2
 8001904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001908:	d328      	bcc.n	800195c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b28      	cmp	r3, #40	@ 0x28
 8001910:	d903      	bls.n	800191a <HAL_DMA_Init+0x27a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b2e      	cmp	r3, #46	@ 0x2e
 8001918:	d917      	bls.n	800194a <HAL_DMA_Init+0x2aa>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001920:	d903      	bls.n	800192a <HAL_DMA_Init+0x28a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b42      	cmp	r3, #66	@ 0x42
 8001928:	d90f      	bls.n	800194a <HAL_DMA_Init+0x2aa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b46      	cmp	r3, #70	@ 0x46
 8001930:	d903      	bls.n	800193a <HAL_DMA_Init+0x29a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b48      	cmp	r3, #72	@ 0x48
 8001938:	d907      	bls.n	800194a <HAL_DMA_Init+0x2aa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001940:	d905      	bls.n	800194e <HAL_DMA_Init+0x2ae>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b52      	cmp	r3, #82	@ 0x52
 8001948:	d801      	bhi.n	800194e <HAL_DMA_Init+0x2ae>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_DMA_Init+0x2b0>
 800194e:	2300      	movs	r3, #0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800195a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0307 	bic.w	r3, r3, #7
 8001972:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	2b04      	cmp	r3, #4
 8001984:	d117      	bne.n	80019b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f001 fdcf 	bl	800353c <DMA_CheckFifoParam>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2240      	movs	r2, #64	@ 0x40
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e197      	b.n	8001ce6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f001 fd0a 	bl	80033d8 <DMA_CalcBaseAndBitshift>
 80019c4:	4603      	mov	r3, r0
 80019c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	223f      	movs	r2, #63	@ 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e0cd      	b.n	8001b76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a3b      	ldr	r2, [pc, #236]	@ (8001acc <HAL_DMA_Init+0x42c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a39      	ldr	r2, [pc, #228]	@ (8001ad0 <HAL_DMA_Init+0x430>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01d      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a38      	ldr	r2, [pc, #224]	@ (8001ad4 <HAL_DMA_Init+0x434>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d018      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a36      	ldr	r2, [pc, #216]	@ (8001ad8 <HAL_DMA_Init+0x438>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a35      	ldr	r2, [pc, #212]	@ (8001adc <HAL_DMA_Init+0x43c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a33      	ldr	r2, [pc, #204]	@ (8001ae0 <HAL_DMA_Init+0x440>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d009      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <HAL_DMA_Init+0x444>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d004      	beq.n	8001a2a <HAL_DMA_Init+0x38a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a30      	ldr	r2, [pc, #192]	@ (8001ae8 <HAL_DMA_Init+0x448>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Init+0x38e>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_Init+0x390>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8097 	beq.w	8001b64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <HAL_DMA_Init+0x42c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d021      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <HAL_DMA_Init+0x430>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01c      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <HAL_DMA_Init+0x434>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d017      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad8 <HAL_DMA_Init+0x438>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d012      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <HAL_DMA_Init+0x43c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_DMA_Init+0x440>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d008      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <HAL_DMA_Init+0x444>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d003      	beq.n	8001a84 <HAL_DMA_Init+0x3e4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_DMA_Init+0x448>)
 8001a82:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_DMA_Init+0x44c>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b40      	cmp	r3, #64	@ 0x40
 8001aaa:	d021      	beq.n	8001af0 <HAL_DMA_Init+0x450>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b80      	cmp	r3, #128	@ 0x80
 8001ab2:	d102      	bne.n	8001aba <HAL_DMA_Init+0x41a>
 8001ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab8:	e01b      	b.n	8001af2 <HAL_DMA_Init+0x452>
 8001aba:	2300      	movs	r3, #0
 8001abc:	e019      	b.n	8001af2 <HAL_DMA_Init+0x452>
 8001abe:	bf00      	nop
 8001ac0:	fe10803f 	.word	0xfe10803f
 8001ac4:	5c001000 	.word	0x5c001000
 8001ac8:	ffff0000 	.word	0xffff0000
 8001acc:	58025408 	.word	0x58025408
 8001ad0:	5802541c 	.word	0x5802541c
 8001ad4:	58025430 	.word	0x58025430
 8001ad8:	58025444 	.word	0x58025444
 8001adc:	58025458 	.word	0x58025458
 8001ae0:	5802546c 	.word	0x5802546c
 8001ae4:	58025480 	.word	0x58025480
 8001ae8:	58025494 	.word	0x58025494
 8001aec:	fffe000f 	.word	0xfffe000f
 8001af0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68d2      	ldr	r2, [r2, #12]
 8001af6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf0 <HAL_DMA_Init+0x650>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_DMA_Init+0x654>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 fc45 	bl	80033d8 <DMA_CalcBaseAndBitshift>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e008      	b.n	8001b76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0b7      	b.n	8001ce6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf8 <HAL_DMA_Init+0x658>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d072      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a5d      	ldr	r2, [pc, #372]	@ (8001cfc <HAL_DMA_Init+0x65c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d06d      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d00 <HAL_DMA_Init+0x660>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d068      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5a      	ldr	r2, [pc, #360]	@ (8001d04 <HAL_DMA_Init+0x664>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d063      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a59      	ldr	r2, [pc, #356]	@ (8001d08 <HAL_DMA_Init+0x668>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d05e      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a57      	ldr	r2, [pc, #348]	@ (8001d0c <HAL_DMA_Init+0x66c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d059      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_DMA_Init+0x670>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d054      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	@ (8001d14 <HAL_DMA_Init+0x674>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d04f      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a53      	ldr	r2, [pc, #332]	@ (8001d18 <HAL_DMA_Init+0x678>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04a      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a51      	ldr	r2, [pc, #324]	@ (8001d1c <HAL_DMA_Init+0x67c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d045      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a50      	ldr	r2, [pc, #320]	@ (8001d20 <HAL_DMA_Init+0x680>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d040      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_DMA_Init+0x684>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d03b      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d28 <HAL_DMA_Init+0x688>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d036      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001d2c <HAL_DMA_Init+0x68c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d031      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4a      	ldr	r2, [pc, #296]	@ (8001d30 <HAL_DMA_Init+0x690>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d02c      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a48      	ldr	r2, [pc, #288]	@ (8001d34 <HAL_DMA_Init+0x694>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d027      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a47      	ldr	r2, [pc, #284]	@ (8001d38 <HAL_DMA_Init+0x698>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a45      	ldr	r2, [pc, #276]	@ (8001d3c <HAL_DMA_Init+0x69c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01d      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a44      	ldr	r2, [pc, #272]	@ (8001d40 <HAL_DMA_Init+0x6a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a42      	ldr	r2, [pc, #264]	@ (8001d44 <HAL_DMA_Init+0x6a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a41      	ldr	r2, [pc, #260]	@ (8001d48 <HAL_DMA_Init+0x6a8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d4c <HAL_DMA_Init+0x6ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3e      	ldr	r2, [pc, #248]	@ (8001d50 <HAL_DMA_Init+0x6b0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_Init+0x5c6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a3c      	ldr	r2, [pc, #240]	@ (8001d54 <HAL_DMA_Init+0x6b4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Init+0x5ca>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_Init+0x5cc>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d032      	beq.n	8001cd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f001 fcdf 	bl	8003634 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b80      	cmp	r3, #128	@ 0x80
 8001c7c:	d102      	bne.n	8001c84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_DMA_Init+0x624>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d80c      	bhi.n	8001cc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 fd5c 	bl	8003768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	e008      	b.n	8001cd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	a7fdabf8 	.word	0xa7fdabf8
 8001cf4:	cccccccd 	.word	0xcccccccd
 8001cf8:	40020010 	.word	0x40020010
 8001cfc:	40020028 	.word	0x40020028
 8001d00:	40020040 	.word	0x40020040
 8001d04:	40020058 	.word	0x40020058
 8001d08:	40020070 	.word	0x40020070
 8001d0c:	40020088 	.word	0x40020088
 8001d10:	400200a0 	.word	0x400200a0
 8001d14:	400200b8 	.word	0x400200b8
 8001d18:	40020410 	.word	0x40020410
 8001d1c:	40020428 	.word	0x40020428
 8001d20:	40020440 	.word	0x40020440
 8001d24:	40020458 	.word	0x40020458
 8001d28:	40020470 	.word	0x40020470
 8001d2c:	40020488 	.word	0x40020488
 8001d30:	400204a0 	.word	0x400204a0
 8001d34:	400204b8 	.word	0x400204b8
 8001d38:	58025408 	.word	0x58025408
 8001d3c:	5802541c 	.word	0x5802541c
 8001d40:	58025430 	.word	0x58025430
 8001d44:	58025444 	.word	0x58025444
 8001d48:	58025458 	.word	0x58025458
 8001d4c:	5802546c 	.word	0x5802546c
 8001d50:	58025480 	.word	0x58025480
 8001d54:	58025494 	.word	0x58025494

08001d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e226      	b.n	80021c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Start_IT+0x2a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e21f      	b.n	80021c2 <HAL_DMA_Start_IT+0x46a>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f040 820a 	bne.w	80021ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a68      	ldr	r2, [pc, #416]	@ (8001f4c <HAL_DMA_Start_IT+0x1f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d04a      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a66      	ldr	r2, [pc, #408]	@ (8001f50 <HAL_DMA_Start_IT+0x1f8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d045      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a65      	ldr	r2, [pc, #404]	@ (8001f54 <HAL_DMA_Start_IT+0x1fc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d040      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a63      	ldr	r2, [pc, #396]	@ (8001f58 <HAL_DMA_Start_IT+0x200>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d03b      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a62      	ldr	r2, [pc, #392]	@ (8001f5c <HAL_DMA_Start_IT+0x204>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d036      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a60      	ldr	r2, [pc, #384]	@ (8001f60 <HAL_DMA_Start_IT+0x208>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f64 <HAL_DMA_Start_IT+0x20c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d02c      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f68 <HAL_DMA_Start_IT+0x210>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f6c <HAL_DMA_Start_IT+0x214>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5a      	ldr	r2, [pc, #360]	@ (8001f70 <HAL_DMA_Start_IT+0x218>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01d      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a59      	ldr	r2, [pc, #356]	@ (8001f74 <HAL_DMA_Start_IT+0x21c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d018      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a57      	ldr	r2, [pc, #348]	@ (8001f78 <HAL_DMA_Start_IT+0x220>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a56      	ldr	r2, [pc, #344]	@ (8001f7c <HAL_DMA_Start_IT+0x224>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	@ (8001f80 <HAL_DMA_Start_IT+0x228>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a53      	ldr	r2, [pc, #332]	@ (8001f84 <HAL_DMA_Start_IT+0x22c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_DMA_Start_IT+0xee>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a51      	ldr	r2, [pc, #324]	@ (8001f88 <HAL_DMA_Start_IT+0x230>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d108      	bne.n	8001e58 <HAL_DMA_Start_IT+0x100>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_DMA_Start_IT+0x110>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f001 f906 	bl	8003080 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a34      	ldr	r2, [pc, #208]	@ (8001f4c <HAL_DMA_Start_IT+0x1f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d04a      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a33      	ldr	r2, [pc, #204]	@ (8001f50 <HAL_DMA_Start_IT+0x1f8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d045      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a31      	ldr	r2, [pc, #196]	@ (8001f54 <HAL_DMA_Start_IT+0x1fc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d040      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <HAL_DMA_Start_IT+0x200>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d03b      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <HAL_DMA_Start_IT+0x204>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d036      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <HAL_DMA_Start_IT+0x208>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d031      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f64 <HAL_DMA_Start_IT+0x20c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02c      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <HAL_DMA_Start_IT+0x210>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d027      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <HAL_DMA_Start_IT+0x214>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a27      	ldr	r2, [pc, #156]	@ (8001f70 <HAL_DMA_Start_IT+0x218>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01d      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <HAL_DMA_Start_IT+0x21c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a24      	ldr	r2, [pc, #144]	@ (8001f78 <HAL_DMA_Start_IT+0x220>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	@ (8001f7c <HAL_DMA_Start_IT+0x224>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <HAL_DMA_Start_IT+0x228>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	@ (8001f84 <HAL_DMA_Start_IT+0x22c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_DMA_Start_IT+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <HAL_DMA_Start_IT+0x230>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Start_IT+0x1c0>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_Start_IT+0x1c2>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d036      	beq.n	8001f8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 021e 	bic.w	r2, r3, #30
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0216 	orr.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03e      	beq.n	8001fb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0208 	orr.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e035      	b.n	8001fb8 <HAL_DMA_Start_IT+0x260>
 8001f4c:	40020010 	.word	0x40020010
 8001f50:	40020028 	.word	0x40020028
 8001f54:	40020040 	.word	0x40020040
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	40020070 	.word	0x40020070
 8001f60:	40020088 	.word	0x40020088
 8001f64:	400200a0 	.word	0x400200a0
 8001f68:	400200b8 	.word	0x400200b8
 8001f6c:	40020410 	.word	0x40020410
 8001f70:	40020428 	.word	0x40020428
 8001f74:	40020440 	.word	0x40020440
 8001f78:	40020458 	.word	0x40020458
 8001f7c:	40020470 	.word	0x40020470
 8001f80:	40020488 	.word	0x40020488
 8001f84:	400204a0 	.word	0x400204a0
 8001f88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 020e 	bic.w	r2, r3, #14
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 020a 	orr.w	r2, r2, #10
 8001f9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0204 	orr.w	r2, r2, #4
 8001fb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a83      	ldr	r2, [pc, #524]	@ (80021cc <HAL_DMA_Start_IT+0x474>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d072      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a82      	ldr	r2, [pc, #520]	@ (80021d0 <HAL_DMA_Start_IT+0x478>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d06d      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a80      	ldr	r2, [pc, #512]	@ (80021d4 <HAL_DMA_Start_IT+0x47c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d068      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7f      	ldr	r2, [pc, #508]	@ (80021d8 <HAL_DMA_Start_IT+0x480>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d063      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80021dc <HAL_DMA_Start_IT+0x484>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d05e      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7c      	ldr	r2, [pc, #496]	@ (80021e0 <HAL_DMA_Start_IT+0x488>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d059      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80021e4 <HAL_DMA_Start_IT+0x48c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d054      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a79      	ldr	r2, [pc, #484]	@ (80021e8 <HAL_DMA_Start_IT+0x490>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d04f      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a77      	ldr	r2, [pc, #476]	@ (80021ec <HAL_DMA_Start_IT+0x494>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d04a      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a76      	ldr	r2, [pc, #472]	@ (80021f0 <HAL_DMA_Start_IT+0x498>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d045      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a74      	ldr	r2, [pc, #464]	@ (80021f4 <HAL_DMA_Start_IT+0x49c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d040      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	@ (80021f8 <HAL_DMA_Start_IT+0x4a0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d03b      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a71      	ldr	r2, [pc, #452]	@ (80021fc <HAL_DMA_Start_IT+0x4a4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d036      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a70      	ldr	r2, [pc, #448]	@ (8002200 <HAL_DMA_Start_IT+0x4a8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d031      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6e      	ldr	r2, [pc, #440]	@ (8002204 <HAL_DMA_Start_IT+0x4ac>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d02c      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6d      	ldr	r2, [pc, #436]	@ (8002208 <HAL_DMA_Start_IT+0x4b0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d027      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6b      	ldr	r2, [pc, #428]	@ (800220c <HAL_DMA_Start_IT+0x4b4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d022      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6a      	ldr	r2, [pc, #424]	@ (8002210 <HAL_DMA_Start_IT+0x4b8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d01d      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a68      	ldr	r2, [pc, #416]	@ (8002214 <HAL_DMA_Start_IT+0x4bc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d018      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a67      	ldr	r2, [pc, #412]	@ (8002218 <HAL_DMA_Start_IT+0x4c0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d013      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a65      	ldr	r2, [pc, #404]	@ (800221c <HAL_DMA_Start_IT+0x4c4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00e      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a64      	ldr	r2, [pc, #400]	@ (8002220 <HAL_DMA_Start_IT+0x4c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a62      	ldr	r2, [pc, #392]	@ (8002224 <HAL_DMA_Start_IT+0x4cc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_DMA_Start_IT+0x350>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a61      	ldr	r2, [pc, #388]	@ (8002228 <HAL_DMA_Start_IT+0x4d0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Start_IT+0x354>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_DMA_Start_IT+0x356>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a37      	ldr	r2, [pc, #220]	@ (80021cc <HAL_DMA_Start_IT+0x474>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04a      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a36      	ldr	r2, [pc, #216]	@ (80021d0 <HAL_DMA_Start_IT+0x478>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d045      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a34      	ldr	r2, [pc, #208]	@ (80021d4 <HAL_DMA_Start_IT+0x47c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d040      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a33      	ldr	r2, [pc, #204]	@ (80021d8 <HAL_DMA_Start_IT+0x480>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d03b      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a31      	ldr	r2, [pc, #196]	@ (80021dc <HAL_DMA_Start_IT+0x484>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d036      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <HAL_DMA_Start_IT+0x488>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d031      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2e      	ldr	r2, [pc, #184]	@ (80021e4 <HAL_DMA_Start_IT+0x48c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d02c      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <HAL_DMA_Start_IT+0x490>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d027      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2b      	ldr	r2, [pc, #172]	@ (80021ec <HAL_DMA_Start_IT+0x494>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d022      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <HAL_DMA_Start_IT+0x498>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d01d      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a28      	ldr	r2, [pc, #160]	@ (80021f4 <HAL_DMA_Start_IT+0x49c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <HAL_DMA_Start_IT+0x4a0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a25      	ldr	r2, [pc, #148]	@ (80021fc <HAL_DMA_Start_IT+0x4a4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <HAL_DMA_Start_IT+0x4a8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_DMA_Start_IT+0x4ac>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_DMA_Start_IT+0x430>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a21      	ldr	r2, [pc, #132]	@ (8002208 <HAL_DMA_Start_IT+0x4b0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <HAL_DMA_Start_IT+0x442>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e012      	b.n	80021c0 <HAL_DMA_Start_IT+0x468>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e009      	b.n	80021c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
 800220c:	58025408 	.word	0x58025408
 8002210:	5802541c 	.word	0x5802541c
 8002214:	58025430 	.word	0x58025430
 8002218:	58025444 	.word	0x58025444
 800221c:	58025458 	.word	0x58025458
 8002220:	5802546c 	.word	0x5802546c
 8002224:	58025480 	.word	0x58025480
 8002228:	58025494 	.word	0x58025494

0800222c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002238:	4b67      	ldr	r3, [pc, #412]	@ (80023d8 <HAL_DMA_IRQHandler+0x1ac>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	@ (80023dc <HAL_DMA_IRQHandler+0x1b0>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0a9b      	lsrs	r3, r3, #10
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5f      	ldr	r2, [pc, #380]	@ (80023e0 <HAL_DMA_IRQHandler+0x1b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04a      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_DMA_IRQHandler+0x1b8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d045      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	@ (80023e8 <HAL_DMA_IRQHandler+0x1bc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d040      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_DMA_IRQHandler+0x1c0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d03b      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <HAL_DMA_IRQHandler+0x1c4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d036      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_DMA_IRQHandler+0x1c8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d031      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a56      	ldr	r2, [pc, #344]	@ (80023f8 <HAL_DMA_IRQHandler+0x1cc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d02c      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_DMA_IRQHandler+0x1d0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d027      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a53      	ldr	r2, [pc, #332]	@ (8002400 <HAL_DMA_IRQHandler+0x1d4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a51      	ldr	r2, [pc, #324]	@ (8002404 <HAL_DMA_IRQHandler+0x1d8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01d      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a50      	ldr	r2, [pc, #320]	@ (8002408 <HAL_DMA_IRQHandler+0x1dc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d018      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a4e      	ldr	r2, [pc, #312]	@ (800240c <HAL_DMA_IRQHandler+0x1e0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4d      	ldr	r2, [pc, #308]	@ (8002410 <HAL_DMA_IRQHandler+0x1e4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00e      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002414 <HAL_DMA_IRQHandler+0x1e8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002418 <HAL_DMA_IRQHandler+0x1ec>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_DMA_IRQHandler+0xd2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a48      	ldr	r2, [pc, #288]	@ (800241c <HAL_DMA_IRQHandler+0x1f0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_DMA_IRQHandler+0xd6>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0xd8>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 842b 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	2208      	movs	r2, #8
 8002314:	409a      	lsls	r2, r3
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80a2 	beq.w	8002464 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2e      	ldr	r2, [pc, #184]	@ (80023e0 <HAL_DMA_IRQHandler+0x1b4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2d      	ldr	r2, [pc, #180]	@ (80023e4 <HAL_DMA_IRQHandler+0x1b8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2b      	ldr	r2, [pc, #172]	@ (80023e8 <HAL_DMA_IRQHandler+0x1bc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <HAL_DMA_IRQHandler+0x1c0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a28      	ldr	r2, [pc, #160]	@ (80023f0 <HAL_DMA_IRQHandler+0x1c4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a27      	ldr	r2, [pc, #156]	@ (80023f4 <HAL_DMA_IRQHandler+0x1c8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <HAL_DMA_IRQHandler+0x1cc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a24      	ldr	r2, [pc, #144]	@ (80023fc <HAL_DMA_IRQHandler+0x1d0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a22      	ldr	r2, [pc, #136]	@ (8002400 <HAL_DMA_IRQHandler+0x1d4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a21      	ldr	r2, [pc, #132]	@ (8002404 <HAL_DMA_IRQHandler+0x1d8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1f      	ldr	r2, [pc, #124]	@ (8002408 <HAL_DMA_IRQHandler+0x1dc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1e      	ldr	r2, [pc, #120]	@ (800240c <HAL_DMA_IRQHandler+0x1e0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1c      	ldr	r2, [pc, #112]	@ (8002410 <HAL_DMA_IRQHandler+0x1e4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002414 <HAL_DMA_IRQHandler+0x1e8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_DMA_IRQHandler+0x1ec>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x194>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_DMA_IRQHandler+0x1f0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d12f      	bne.n	8002420 <HAL_DMA_IRQHandler+0x1f4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e02e      	b.n	8002434 <HAL_DMA_IRQHandler+0x208>
 80023d6:	bf00      	nop
 80023d8:	24000000 	.word	0x24000000
 80023dc:	1b4e81b5 	.word	0x1b4e81b5
 80023e0:	40020010 	.word	0x40020010
 80023e4:	40020028 	.word	0x40020028
 80023e8:	40020040 	.word	0x40020040
 80023ec:	40020058 	.word	0x40020058
 80023f0:	40020070 	.word	0x40020070
 80023f4:	40020088 	.word	0x40020088
 80023f8:	400200a0 	.word	0x400200a0
 80023fc:	400200b8 	.word	0x400200b8
 8002400:	40020410 	.word	0x40020410
 8002404:	40020428 	.word	0x40020428
 8002408:	40020440 	.word	0x40020440
 800240c:	40020458 	.word	0x40020458
 8002410:	40020470 	.word	0x40020470
 8002414:	40020488 	.word	0x40020488
 8002418:	400204a0 	.word	0x400204a0
 800241c:	400204b8 	.word	0x400204b8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0204 	bic.w	r2, r2, #4
 8002446:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d06e      	beq.n	8002558 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a69      	ldr	r2, [pc, #420]	@ (8002624 <HAL_DMA_IRQHandler+0x3f8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04a      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	@ (8002628 <HAL_DMA_IRQHandler+0x3fc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d045      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a66      	ldr	r2, [pc, #408]	@ (800262c <HAL_DMA_IRQHandler+0x400>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d040      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a64      	ldr	r2, [pc, #400]	@ (8002630 <HAL_DMA_IRQHandler+0x404>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d03b      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a63      	ldr	r2, [pc, #396]	@ (8002634 <HAL_DMA_IRQHandler+0x408>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d036      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a61      	ldr	r2, [pc, #388]	@ (8002638 <HAL_DMA_IRQHandler+0x40c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d031      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a60      	ldr	r2, [pc, #384]	@ (800263c <HAL_DMA_IRQHandler+0x410>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d02c      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002640 <HAL_DMA_IRQHandler+0x414>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d027      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002644 <HAL_DMA_IRQHandler+0x418>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <HAL_DMA_IRQHandler+0x41c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01d      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5a      	ldr	r2, [pc, #360]	@ (800264c <HAL_DMA_IRQHandler+0x420>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <HAL_DMA_IRQHandler+0x424>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_DMA_IRQHandler+0x428>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00e      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a55      	ldr	r2, [pc, #340]	@ (8002658 <HAL_DMA_IRQHandler+0x42c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_DMA_IRQHandler+0x430>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_DMA_IRQHandler+0x2ee>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a52      	ldr	r2, [pc, #328]	@ (8002660 <HAL_DMA_IRQHandler+0x434>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10a      	bne.n	8002530 <HAL_DMA_IRQHandler+0x304>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e003      	b.n	8002538 <HAL_DMA_IRQHandler+0x30c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	f043 0202 	orr.w	r2, r3, #2
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2204      	movs	r2, #4
 8002562:	409a      	lsls	r2, r3
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 808f 	beq.w	800268c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2c      	ldr	r2, [pc, #176]	@ (8002624 <HAL_DMA_IRQHandler+0x3f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d04a      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2a      	ldr	r2, [pc, #168]	@ (8002628 <HAL_DMA_IRQHandler+0x3fc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d045      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a29      	ldr	r2, [pc, #164]	@ (800262c <HAL_DMA_IRQHandler+0x400>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d040      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a27      	ldr	r2, [pc, #156]	@ (8002630 <HAL_DMA_IRQHandler+0x404>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d03b      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a26      	ldr	r2, [pc, #152]	@ (8002634 <HAL_DMA_IRQHandler+0x408>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d036      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a24      	ldr	r2, [pc, #144]	@ (8002638 <HAL_DMA_IRQHandler+0x40c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a23      	ldr	r2, [pc, #140]	@ (800263c <HAL_DMA_IRQHandler+0x410>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d02c      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a21      	ldr	r2, [pc, #132]	@ (8002640 <HAL_DMA_IRQHandler+0x414>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d027      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a20      	ldr	r2, [pc, #128]	@ (8002644 <HAL_DMA_IRQHandler+0x418>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_DMA_IRQHandler+0x41c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01d      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <HAL_DMA_IRQHandler+0x420>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d018      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_DMA_IRQHandler+0x424>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_DMA_IRQHandler+0x428>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <HAL_DMA_IRQHandler+0x42c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_DMA_IRQHandler+0x430>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_DMA_IRQHandler+0x3e2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <HAL_DMA_IRQHandler+0x434>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12a      	bne.n	8002664 <HAL_DMA_IRQHandler+0x438>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e023      	b.n	800266c <HAL_DMA_IRQHandler+0x440>
 8002624:	40020010 	.word	0x40020010
 8002628:	40020028 	.word	0x40020028
 800262c:	40020040 	.word	0x40020040
 8002630:	40020058 	.word	0x40020058
 8002634:	40020070 	.word	0x40020070
 8002638:	40020088 	.word	0x40020088
 800263c:	400200a0 	.word	0x400200a0
 8002640:	400200b8 	.word	0x400200b8
 8002644:	40020410 	.word	0x40020410
 8002648:	40020428 	.word	0x40020428
 800264c:	40020440 	.word	0x40020440
 8002650:	40020458 	.word	0x40020458
 8002654:	40020470 	.word	0x40020470
 8002658:	40020488 	.word	0x40020488
 800265c:	400204a0 	.word	0x400204a0
 8002660:	400204b8 	.word	0x400204b8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2210      	movs	r2, #16
 8002696:	409a      	lsls	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a85      	ldr	r2, [pc, #532]	@ (80028bc <HAL_DMA_IRQHandler+0x690>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04a      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a83      	ldr	r2, [pc, #524]	@ (80028c0 <HAL_DMA_IRQHandler+0x694>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d045      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a82      	ldr	r2, [pc, #520]	@ (80028c4 <HAL_DMA_IRQHandler+0x698>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d040      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a80      	ldr	r2, [pc, #512]	@ (80028c8 <HAL_DMA_IRQHandler+0x69c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d03b      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7f      	ldr	r2, [pc, #508]	@ (80028cc <HAL_DMA_IRQHandler+0x6a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d036      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7d      	ldr	r2, [pc, #500]	@ (80028d0 <HAL_DMA_IRQHandler+0x6a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d031      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7c      	ldr	r2, [pc, #496]	@ (80028d4 <HAL_DMA_IRQHandler+0x6a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d02c      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7a      	ldr	r2, [pc, #488]	@ (80028d8 <HAL_DMA_IRQHandler+0x6ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d027      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a79      	ldr	r2, [pc, #484]	@ (80028dc <HAL_DMA_IRQHandler+0x6b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a77      	ldr	r2, [pc, #476]	@ (80028e0 <HAL_DMA_IRQHandler+0x6b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a76      	ldr	r2, [pc, #472]	@ (80028e4 <HAL_DMA_IRQHandler+0x6b8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d018      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a74      	ldr	r2, [pc, #464]	@ (80028e8 <HAL_DMA_IRQHandler+0x6bc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a73      	ldr	r2, [pc, #460]	@ (80028ec <HAL_DMA_IRQHandler+0x6c0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00e      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a71      	ldr	r2, [pc, #452]	@ (80028f0 <HAL_DMA_IRQHandler+0x6c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a70      	ldr	r2, [pc, #448]	@ (80028f4 <HAL_DMA_IRQHandler+0x6c8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_DMA_IRQHandler+0x516>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6e      	ldr	r2, [pc, #440]	@ (80028f8 <HAL_DMA_IRQHandler+0x6cc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10a      	bne.n	8002758 <HAL_DMA_IRQHandler+0x52c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e009      	b.n	800276c <HAL_DMA_IRQHandler+0x540>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03e      	beq.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2210      	movs	r2, #16
 800277a:	409a      	lsls	r2, r3
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d108      	bne.n	80027ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d024      	beq.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e01f      	b.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01b      	beq.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
 80027be:	e016      	b.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0208 	bic.w	r2, r2, #8
 80027dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2220      	movs	r2, #32
 80027f8:	409a      	lsls	r2, r3
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8110 	beq.w	8002a24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2c      	ldr	r2, [pc, #176]	@ (80028bc <HAL_DMA_IRQHandler+0x690>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2b      	ldr	r2, [pc, #172]	@ (80028c0 <HAL_DMA_IRQHandler+0x694>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a29      	ldr	r2, [pc, #164]	@ (80028c4 <HAL_DMA_IRQHandler+0x698>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a28      	ldr	r2, [pc, #160]	@ (80028c8 <HAL_DMA_IRQHandler+0x69c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_DMA_IRQHandler+0x6a0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a25      	ldr	r2, [pc, #148]	@ (80028d0 <HAL_DMA_IRQHandler+0x6a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a23      	ldr	r2, [pc, #140]	@ (80028d4 <HAL_DMA_IRQHandler+0x6a8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <HAL_DMA_IRQHandler+0x6ac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_DMA_IRQHandler+0x6b0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_DMA_IRQHandler+0x6b4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_DMA_IRQHandler+0x6b8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1c      	ldr	r2, [pc, #112]	@ (80028e8 <HAL_DMA_IRQHandler+0x6bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1a      	ldr	r2, [pc, #104]	@ (80028ec <HAL_DMA_IRQHandler+0x6c0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_DMA_IRQHandler+0x6c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <HAL_DMA_IRQHandler+0x6c8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x678>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_DMA_IRQHandler+0x6cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d12b      	bne.n	80028fc <HAL_DMA_IRQHandler+0x6d0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e02a      	b.n	8002910 <HAL_DMA_IRQHandler+0x6e4>
 80028ba:	bf00      	nop
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8087 	beq.w	8002a24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2220      	movs	r2, #32
 8002920:	409a      	lsls	r2, r3
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b04      	cmp	r3, #4
 8002930:	d139      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0216 	bic.w	r2, r2, #22
 8002940:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002950:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <HAL_DMA_IRQHandler+0x736>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	223f      	movs	r2, #63	@ 0x3f
 800297c:	409a      	lsls	r2, r3
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 834a 	beq.w	8003030 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
          }
          return;
 80029a4:	e344      	b.n	8003030 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d018      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02c      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	4798      	blx	r3
 80029d2:	e027      	b.n	8002a24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e01e      	b.n	8002a24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8306 	beq.w	800303a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8088 	beq.w	8002b4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7a      	ldr	r2, [pc, #488]	@ (8002c34 <HAL_DMA_IRQHandler+0xa08>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d04a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a79      	ldr	r2, [pc, #484]	@ (8002c38 <HAL_DMA_IRQHandler+0xa0c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d045      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a77      	ldr	r2, [pc, #476]	@ (8002c3c <HAL_DMA_IRQHandler+0xa10>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d040      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a76      	ldr	r2, [pc, #472]	@ (8002c40 <HAL_DMA_IRQHandler+0xa14>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d03b      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a74      	ldr	r2, [pc, #464]	@ (8002c44 <HAL_DMA_IRQHandler+0xa18>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d036      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	@ (8002c48 <HAL_DMA_IRQHandler+0xa1c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d031      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a71      	ldr	r2, [pc, #452]	@ (8002c4c <HAL_DMA_IRQHandler+0xa20>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d02c      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a70      	ldr	r2, [pc, #448]	@ (8002c50 <HAL_DMA_IRQHandler+0xa24>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d027      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_DMA_IRQHandler+0xa28>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d022      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8002c58 <HAL_DMA_IRQHandler+0xa2c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_DMA_IRQHandler+0xa30>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_DMA_IRQHandler+0xa34>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <HAL_DMA_IRQHandler+0xa38>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a67      	ldr	r2, [pc, #412]	@ (8002c68 <HAL_DMA_IRQHandler+0xa3c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_DMA_IRQHandler+0xa40>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x8b8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a64      	ldr	r2, [pc, #400]	@ (8002c70 <HAL_DMA_IRQHandler+0xa44>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d108      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x8ca>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e007      	b.n	8002b06 <HAL_DMA_IRQHandler+0x8da>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d307      	bcc.n	8002b22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f2      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x8da>
 8002b20:	e000      	b.n	8002b24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002b22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002b3a:	e003      	b.n	8002b44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8272 	beq.w	800303a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
 8002b5e:	e26c      	b.n	800303a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a43      	ldr	r2, [pc, #268]	@ (8002c74 <HAL_DMA_IRQHandler+0xa48>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a42      	ldr	r2, [pc, #264]	@ (8002c78 <HAL_DMA_IRQHandler+0xa4c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a40      	ldr	r2, [pc, #256]	@ (8002c7c <HAL_DMA_IRQHandler+0xa50>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a3f      	ldr	r2, [pc, #252]	@ (8002c80 <HAL_DMA_IRQHandler+0xa54>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c84 <HAL_DMA_IRQHandler+0xa58>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a3c      	ldr	r2, [pc, #240]	@ (8002c88 <HAL_DMA_IRQHandler+0xa5c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <HAL_DMA_IRQHandler+0xa60>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x984>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a39      	ldr	r2, [pc, #228]	@ (8002c90 <HAL_DMA_IRQHandler+0xa64>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x988>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x98a>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 823f 	beq.w	800303a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2204      	movs	r2, #4
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80cd 	beq.w	8002d74 <HAL_DMA_IRQHandler+0xb48>
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80c7 	beq.w	8002d74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2204      	movs	r2, #4
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d049      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8210 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c1c:	e20a      	b.n	8003034 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8206 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c30:	e200      	b.n	8003034 <HAL_DMA_IRQHandler+0xe08>
 8002c32:	bf00      	nop
 8002c34:	40020010 	.word	0x40020010
 8002c38:	40020028 	.word	0x40020028
 8002c3c:	40020040 	.word	0x40020040
 8002c40:	40020058 	.word	0x40020058
 8002c44:	40020070 	.word	0x40020070
 8002c48:	40020088 	.word	0x40020088
 8002c4c:	400200a0 	.word	0x400200a0
 8002c50:	400200b8 	.word	0x400200b8
 8002c54:	40020410 	.word	0x40020410
 8002c58:	40020428 	.word	0x40020428
 8002c5c:	40020440 	.word	0x40020440
 8002c60:	40020458 	.word	0x40020458
 8002c64:	40020470 	.word	0x40020470
 8002c68:	40020488 	.word	0x40020488
 8002c6c:	400204a0 	.word	0x400204a0
 8002c70:	400204b8 	.word	0x400204b8
 8002c74:	58025408 	.word	0x58025408
 8002c78:	5802541c 	.word	0x5802541c
 8002c7c:	58025430 	.word	0x58025430
 8002c80:	58025444 	.word	0x58025444
 8002c84:	58025458 	.word	0x58025458
 8002c88:	5802546c 	.word	0x5802546c
 8002c8c:	58025480 	.word	0x58025480
 8002c90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d160      	bne.n	8002d60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea0 <HAL_DMA_IRQHandler+0xc74>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04a      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea4 <HAL_DMA_IRQHandler+0xc78>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d045      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d040      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8002eac <HAL_DMA_IRQHandler+0xc80>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d03b      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a79      	ldr	r2, [pc, #484]	@ (8002eb0 <HAL_DMA_IRQHandler+0xc84>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d036      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	@ (8002eb4 <HAL_DMA_IRQHandler+0xc88>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d031      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a76      	ldr	r2, [pc, #472]	@ (8002eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d02c      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a74      	ldr	r2, [pc, #464]	@ (8002ebc <HAL_DMA_IRQHandler+0xc90>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d027      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	@ (8002ec0 <HAL_DMA_IRQHandler+0xc94>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a71      	ldr	r2, [pc, #452]	@ (8002ec4 <HAL_DMA_IRQHandler+0xc98>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01d      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a70      	ldr	r2, [pc, #448]	@ (8002ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d018      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_DMA_IRQHandler+0xca0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed0 <HAL_DMA_IRQHandler+0xca4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed4 <HAL_DMA_IRQHandler+0xca8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed8 <HAL_DMA_IRQHandler+0xcac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xb12>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	@ (8002edc <HAL_DMA_IRQHandler+0xcb0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <HAL_DMA_IRQHandler+0xb24>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e007      	b.n	8002d60 <HAL_DMA_IRQHandler+0xb34>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8165 	beq.w	8003034 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d72:	e15f      	b.n	8003034 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80c5 	beq.w	8002f14 <HAL_DMA_IRQHandler+0xce8>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80bf 	beq.w	8002f14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2202      	movs	r2, #2
 8002da0:	409a      	lsls	r2, r3
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 813a 	beq.w	8003038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dcc:	e134      	b.n	8003038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8130 	beq.w	8003038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002de0:	e12a      	b.n	8003038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 8089 	bne.w	8002f00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea0 <HAL_DMA_IRQHandler+0xc74>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04a      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_DMA_IRQHandler+0xc78>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d045      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d040      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <HAL_DMA_IRQHandler+0xc80>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	@ (8002eb0 <HAL_DMA_IRQHandler+0xc84>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d036      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <HAL_DMA_IRQHandler+0xc88>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d02c      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a20      	ldr	r2, [pc, #128]	@ (8002ebc <HAL_DMA_IRQHandler+0xc90>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec0 <HAL_DMA_IRQHandler+0xc94>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_DMA_IRQHandler+0xc98>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <HAL_DMA_IRQHandler+0xca0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <HAL_DMA_IRQHandler+0xca4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <HAL_DMA_IRQHandler+0xca8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <HAL_DMA_IRQHandler+0xcac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xc62>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <HAL_DMA_IRQHandler+0xcb0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d128      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0xcb4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0214 	bic.w	r2, r2, #20
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e027      	b.n	8002ef0 <HAL_DMA_IRQHandler+0xcc4>
 8002ea0:	40020010 	.word	0x40020010
 8002ea4:	40020028 	.word	0x40020028
 8002ea8:	40020040 	.word	0x40020040
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	40020070 	.word	0x40020070
 8002eb4:	40020088 	.word	0x40020088
 8002eb8:	400200a0 	.word	0x400200a0
 8002ebc:	400200b8 	.word	0x400200b8
 8002ec0:	40020410 	.word	0x40020410
 8002ec4:	40020428 	.word	0x40020428
 8002ec8:	40020440 	.word	0x40020440
 8002ecc:	40020458 	.word	0x40020458
 8002ed0:	40020470 	.word	0x40020470
 8002ed4:	40020488 	.word	0x40020488
 8002ed8:	400204a0 	.word	0x400204a0
 8002edc:	400204b8 	.word	0x400204b8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020a 	bic.w	r2, r2, #10
 8002eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f12:	e091      	b.n	8003038 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8088 	beq.w	800303a <HAL_DMA_IRQHandler+0xe0e>
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8082 	beq.w	800303a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a41      	ldr	r2, [pc, #260]	@ (8003040 <HAL_DMA_IRQHandler+0xe14>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d04a      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <HAL_DMA_IRQHandler+0xe18>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d045      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003048 <HAL_DMA_IRQHandler+0xe1c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d040      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3c      	ldr	r2, [pc, #240]	@ (800304c <HAL_DMA_IRQHandler+0xe20>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a3b      	ldr	r2, [pc, #236]	@ (8003050 <HAL_DMA_IRQHandler+0xe24>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d036      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a39      	ldr	r2, [pc, #228]	@ (8003054 <HAL_DMA_IRQHandler+0xe28>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <HAL_DMA_IRQHandler+0xe2c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02c      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a36      	ldr	r2, [pc, #216]	@ (800305c <HAL_DMA_IRQHandler+0xe30>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d027      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a35      	ldr	r2, [pc, #212]	@ (8003060 <HAL_DMA_IRQHandler+0xe34>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a33      	ldr	r2, [pc, #204]	@ (8003064 <HAL_DMA_IRQHandler+0xe38>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <HAL_DMA_IRQHandler+0xe3c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a30      	ldr	r2, [pc, #192]	@ (800306c <HAL_DMA_IRQHandler+0xe40>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003070 <HAL_DMA_IRQHandler+0xe44>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <HAL_DMA_IRQHandler+0xe48>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003078 <HAL_DMA_IRQHandler+0xe4c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xdaa>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800307c <HAL_DMA_IRQHandler+0xe50>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0xdbc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 021c 	bic.w	r2, r2, #28
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e007      	b.n	8002ff8 <HAL_DMA_IRQHandler+0xdcc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 020e 	bic.w	r2, r2, #14
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
 800302e:	e004      	b.n	800303a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003030:	bf00      	nop
 8003032:	e002      	b.n	800303a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003034:	bf00      	nop
 8003036:	e000      	b.n	800303a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003038:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800303a:	3728      	adds	r7, #40	@ 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40020010 	.word	0x40020010
 8003044:	40020028 	.word	0x40020028
 8003048:	40020040 	.word	0x40020040
 800304c:	40020058 	.word	0x40020058
 8003050:	40020070 	.word	0x40020070
 8003054:	40020088 	.word	0x40020088
 8003058:	400200a0 	.word	0x400200a0
 800305c:	400200b8 	.word	0x400200b8
 8003060:	40020410 	.word	0x40020410
 8003064:	40020428 	.word	0x40020428
 8003068:	40020440 	.word	0x40020440
 800306c:	40020458 	.word	0x40020458
 8003070:	40020470 	.word	0x40020470
 8003074:	40020488 	.word	0x40020488
 8003078:	400204a0 	.word	0x400204a0
 800307c:	400204b8 	.word	0x400204b8

08003080 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7f      	ldr	r2, [pc, #508]	@ (800329c <DMA_SetConfig+0x21c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d072      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7d      	ldr	r2, [pc, #500]	@ (80032a0 <DMA_SetConfig+0x220>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d06d      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <DMA_SetConfig+0x224>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d068      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a7a      	ldr	r2, [pc, #488]	@ (80032a8 <DMA_SetConfig+0x228>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d063      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a79      	ldr	r2, [pc, #484]	@ (80032ac <DMA_SetConfig+0x22c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d05e      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a77      	ldr	r2, [pc, #476]	@ (80032b0 <DMA_SetConfig+0x230>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d059      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a76      	ldr	r2, [pc, #472]	@ (80032b4 <DMA_SetConfig+0x234>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d054      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a74      	ldr	r2, [pc, #464]	@ (80032b8 <DMA_SetConfig+0x238>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04f      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a73      	ldr	r2, [pc, #460]	@ (80032bc <DMA_SetConfig+0x23c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d04a      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a71      	ldr	r2, [pc, #452]	@ (80032c0 <DMA_SetConfig+0x240>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d045      	beq.n	800318a <DMA_SetConfig+0x10a>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a70      	ldr	r2, [pc, #448]	@ (80032c4 <DMA_SetConfig+0x244>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d040      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <DMA_SetConfig+0x248>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03b      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	@ (80032cc <DMA_SetConfig+0x24c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d036      	beq.n	800318a <DMA_SetConfig+0x10a>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	@ (80032d0 <DMA_SetConfig+0x250>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6a      	ldr	r2, [pc, #424]	@ (80032d4 <DMA_SetConfig+0x254>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d02c      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	@ (80032d8 <DMA_SetConfig+0x258>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <DMA_SetConfig+0x10a>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a67      	ldr	r2, [pc, #412]	@ (80032dc <DMA_SetConfig+0x25c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	@ (80032e0 <DMA_SetConfig+0x260>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <DMA_SetConfig+0x10a>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	@ (80032e4 <DMA_SetConfig+0x264>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	@ (80032e8 <DMA_SetConfig+0x268>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <DMA_SetConfig+0x26c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <DMA_SetConfig+0x10a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	@ (80032f0 <DMA_SetConfig+0x270>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	@ (80032f4 <DMA_SetConfig+0x274>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <DMA_SetConfig+0x10a>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	@ (80032f8 <DMA_SetConfig+0x278>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <DMA_SetConfig+0x10e>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <DMA_SetConfig+0x110>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800319c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a39      	ldr	r2, [pc, #228]	@ (800329c <DMA_SetConfig+0x21c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a38      	ldr	r2, [pc, #224]	@ (80032a0 <DMA_SetConfig+0x220>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a36      	ldr	r2, [pc, #216]	@ (80032a4 <DMA_SetConfig+0x224>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a35      	ldr	r2, [pc, #212]	@ (80032a8 <DMA_SetConfig+0x228>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a33      	ldr	r2, [pc, #204]	@ (80032ac <DMA_SetConfig+0x22c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <DMA_SetConfig+0x230>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a30      	ldr	r2, [pc, #192]	@ (80032b4 <DMA_SetConfig+0x234>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2f      	ldr	r2, [pc, #188]	@ (80032b8 <DMA_SetConfig+0x238>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2d      	ldr	r2, [pc, #180]	@ (80032bc <DMA_SetConfig+0x23c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <DMA_SetConfig+0x240>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2a      	ldr	r2, [pc, #168]	@ (80032c4 <DMA_SetConfig+0x244>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a29      	ldr	r2, [pc, #164]	@ (80032c8 <DMA_SetConfig+0x248>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <DMA_SetConfig+0x24c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a26      	ldr	r2, [pc, #152]	@ (80032d0 <DMA_SetConfig+0x250>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <DMA_SetConfig+0x254>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <DMA_SetConfig+0x1d0>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a23      	ldr	r2, [pc, #140]	@ (80032d8 <DMA_SetConfig+0x258>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <DMA_SetConfig+0x1d4>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <DMA_SetConfig+0x1d6>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d059      	beq.n	800330e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	223f      	movs	r2, #63	@ 0x3f
 8003264:	409a      	lsls	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003278:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d138      	bne.n	80032fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800329a:	e086      	b.n	80033aa <DMA_SetConfig+0x32a>
 800329c:	40020010 	.word	0x40020010
 80032a0:	40020028 	.word	0x40020028
 80032a4:	40020040 	.word	0x40020040
 80032a8:	40020058 	.word	0x40020058
 80032ac:	40020070 	.word	0x40020070
 80032b0:	40020088 	.word	0x40020088
 80032b4:	400200a0 	.word	0x400200a0
 80032b8:	400200b8 	.word	0x400200b8
 80032bc:	40020410 	.word	0x40020410
 80032c0:	40020428 	.word	0x40020428
 80032c4:	40020440 	.word	0x40020440
 80032c8:	40020458 	.word	0x40020458
 80032cc:	40020470 	.word	0x40020470
 80032d0:	40020488 	.word	0x40020488
 80032d4:	400204a0 	.word	0x400204a0
 80032d8:	400204b8 	.word	0x400204b8
 80032dc:	58025408 	.word	0x58025408
 80032e0:	5802541c 	.word	0x5802541c
 80032e4:	58025430 	.word	0x58025430
 80032e8:	58025444 	.word	0x58025444
 80032ec:	58025458 	.word	0x58025458
 80032f0:	5802546c 	.word	0x5802546c
 80032f4:	58025480 	.word	0x58025480
 80032f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
}
 800330c:	e04d      	b.n	80033aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a29      	ldr	r2, [pc, #164]	@ (80033b8 <DMA_SetConfig+0x338>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <DMA_SetConfig+0x2de>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <DMA_SetConfig+0x33c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <DMA_SetConfig+0x2de>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a26      	ldr	r2, [pc, #152]	@ (80033c0 <DMA_SetConfig+0x340>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <DMA_SetConfig+0x2de>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a24      	ldr	r2, [pc, #144]	@ (80033c4 <DMA_SetConfig+0x344>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <DMA_SetConfig+0x2de>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <DMA_SetConfig+0x348>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <DMA_SetConfig+0x2de>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a21      	ldr	r2, [pc, #132]	@ (80033cc <DMA_SetConfig+0x34c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <DMA_SetConfig+0x2de>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a20      	ldr	r2, [pc, #128]	@ (80033d0 <DMA_SetConfig+0x350>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <DMA_SetConfig+0x2de>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <DMA_SetConfig+0x354>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <DMA_SetConfig+0x2e2>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <DMA_SetConfig+0x2e4>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d108      	bne.n	800339a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	60da      	str	r2, [r3, #12]
}
 8003398:	e007      	b.n	80033aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	58025408 	.word	0x58025408
 80033bc:	5802541c 	.word	0x5802541c
 80033c0:	58025430 	.word	0x58025430
 80033c4:	58025444 	.word	0x58025444
 80033c8:	58025458 	.word	0x58025458
 80033cc:	5802546c 	.word	0x5802546c
 80033d0:	58025480 	.word	0x58025480
 80033d4:	58025494 	.word	0x58025494

080033d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a42      	ldr	r2, [pc, #264]	@ (80034f0 <DMA_CalcBaseAndBitshift+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04a      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a41      	ldr	r2, [pc, #260]	@ (80034f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d045      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3f      	ldr	r2, [pc, #252]	@ (80034f8 <DMA_CalcBaseAndBitshift+0x120>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d040      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3e      	ldr	r2, [pc, #248]	@ (80034fc <DMA_CalcBaseAndBitshift+0x124>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d03b      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <DMA_CalcBaseAndBitshift+0x128>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d036      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	@ (8003504 <DMA_CalcBaseAndBitshift+0x12c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d031      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a39      	ldr	r2, [pc, #228]	@ (8003508 <DMA_CalcBaseAndBitshift+0x130>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02c      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a38      	ldr	r2, [pc, #224]	@ (800350c <DMA_CalcBaseAndBitshift+0x134>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d027      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a36      	ldr	r2, [pc, #216]	@ (8003510 <DMA_CalcBaseAndBitshift+0x138>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a35      	ldr	r2, [pc, #212]	@ (8003514 <DMA_CalcBaseAndBitshift+0x13c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a33      	ldr	r2, [pc, #204]	@ (8003518 <DMA_CalcBaseAndBitshift+0x140>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a32      	ldr	r2, [pc, #200]	@ (800351c <DMA_CalcBaseAndBitshift+0x144>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <DMA_CalcBaseAndBitshift+0x148>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <DMA_CalcBaseAndBitshift+0x14c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	@ (8003528 <DMA_CalcBaseAndBitshift+0x150>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <DMA_CalcBaseAndBitshift+0xa8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <DMA_CalcBaseAndBitshift+0x154>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <DMA_CalcBaseAndBitshift+0xac>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <DMA_CalcBaseAndBitshift+0xae>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d024      	beq.n	80034d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3b10      	subs	r3, #16
 8003492:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <DMA_CalcBaseAndBitshift+0x158>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	4a24      	ldr	r2, [pc, #144]	@ (8003534 <DMA_CalcBaseAndBitshift+0x15c>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d908      	bls.n	80034c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003538 <DMA_CalcBaseAndBitshift+0x160>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	1d1a      	adds	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80034c2:	e00d      	b.n	80034e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <DMA_CalcBaseAndBitshift+0x160>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d2:	e005      	b.n	80034e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8
 8003530:	aaaaaaab 	.word	0xaaaaaaab
 8003534:	08009d78 	.word	0x08009d78
 8003538:	fffffc00 	.word	0xfffffc00

0800353c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d120      	bne.n	8003592 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	2b03      	cmp	r3, #3
 8003556:	d858      	bhi.n	800360a <DMA_CheckFifoParam+0xce>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <DMA_CheckFifoParam+0x24>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003571 	.word	0x08003571
 8003564:	08003583 	.word	0x08003583
 8003568:	08003571 	.word	0x08003571
 800356c:	0800360b 	.word	0x0800360b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d048      	beq.n	800360e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003580:	e045      	b.n	800360e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800358a:	d142      	bne.n	8003612 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003590:	e03f      	b.n	8003612 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800359a:	d123      	bne.n	80035e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d838      	bhi.n	8003616 <DMA_CheckFifoParam+0xda>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <DMA_CheckFifoParam+0x70>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c3 	.word	0x080035c3
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	080035d5 	.word	0x080035d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
        break;
 80035c0:	e030      	b.n	8003624 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035d2:	e022      	b.n	800361a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035e2:	e01c      	b.n	800361e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d902      	bls.n	80035f2 <DMA_CheckFifoParam+0xb6>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d003      	beq.n	80035f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80035f0:	e018      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
        break;
 80035f6:	e015      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
    break;
 8003608:	e00b      	b.n	8003622 <DMA_CheckFifoParam+0xe6>
        break;
 800360a:	bf00      	nop
 800360c:	e00a      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        break;
 800360e:	bf00      	nop
 8003610:	e008      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        break;
 8003612:	bf00      	nop
 8003614:	e006      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
    break;
 8003622:	bf00      	nop
    }
  }

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a38      	ldr	r2, [pc, #224]	@ (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a36      	ldr	r2, [pc, #216]	@ (800372c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	@ (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01a      	beq.n	80036d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3b08      	subs	r3, #8
 80036a4:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4b26      	ldr	r3, [pc, #152]	@ (800374c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80036c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80036d0:	e024      	b.n	800371c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3b10      	subs	r3, #16
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d806      	bhi.n	80036fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d902      	bls.n	80036fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3308      	adds	r3, #8
 80036f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4b18      	ldr	r3, [pc, #96]	@ (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a16      	ldr	r2, [pc, #88]	@ (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800370c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	58025408 	.word	0x58025408
 800372c:	5802541c 	.word	0x5802541c
 8003730:	58025430 	.word	0x58025430
 8003734:	58025444 	.word	0x58025444
 8003738:	58025458 	.word	0x58025458
 800373c:	5802546c 	.word	0x5802546c
 8003740:	58025480 	.word	0x58025480
 8003744:	58025494 	.word	0x58025494
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	16009600 	.word	0x16009600
 8003750:	58025880 	.word	0x58025880
 8003754:	aaaaaaab 	.word	0xaaaaaaab
 8003758:	400204b8 	.word	0x400204b8
 800375c:	4002040f 	.word	0x4002040f
 8003760:	10008200 	.word	0x10008200
 8003764:	40020880 	.word	0x40020880

08003768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d04a      	beq.n	8003814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d847      	bhi.n	8003814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a25      	ldr	r2, [pc, #148]	@ (8003820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a24      	ldr	r2, [pc, #144]	@ (8003824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a22      	ldr	r2, [pc, #136]	@ (8003828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a21      	ldr	r2, [pc, #132]	@ (800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4b17      	ldr	r3, [pc, #92]	@ (8003840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80037f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80037f2:	e009      	b.n	8003808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a11      	ldr	r2, [pc, #68]	@ (800384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003806:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3b01      	subs	r3, #1
 800380c:	2201      	movs	r2, #1
 800380e:	409a      	lsls	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	58025408 	.word	0x58025408
 8003824:	5802541c 	.word	0x5802541c
 8003828:	58025430 	.word	0x58025430
 800382c:	58025444 	.word	0x58025444
 8003830:	58025458 	.word	0x58025458
 8003834:	5802546c 	.word	0x5802546c
 8003838:	58025480 	.word	0x58025480
 800383c:	58025494 	.word	0x58025494
 8003840:	1600963f 	.word	0x1600963f
 8003844:	58025940 	.word	0x58025940
 8003848:	1000823f 	.word	0x1000823f
 800384c:	40020940 	.word	0x40020940

08003850 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0e3      	b.n	8003a2a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2223      	movs	r2, #35	@ 0x23
 8003870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd fa6b 	bl	8000d50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387a:	4b6e      	ldr	r3, [pc, #440]	@ (8003a34 <HAL_ETH_Init+0x1e4>)
 800387c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003880:	4a6c      	ldr	r2, [pc, #432]	@ (8003a34 <HAL_ETH_Init+0x1e4>)
 8003882:	f043 0302 	orr.w	r3, r3, #2
 8003886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800388a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a34 <HAL_ETH_Init+0x1e4>)
 800388c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7a1b      	ldrb	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd fdd9 	bl	8001458 <HAL_SYSCFG_ETHInterfaceSelect>
 80038a6:	e003      	b.n	80038b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80038a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80038ac:	f7fd fdd4 	bl	8001458 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80038b0:	4b61      	ldr	r3, [pc, #388]	@ (8003a38 <HAL_ETH_Init+0x1e8>)
 80038b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038cc:	f7fd fd88 	bl	80013e0 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80038d2:	e011      	b.n	80038f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80038d4:	f7fd fd84 	bl	80013e0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80038e2:	d909      	bls.n	80038f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	22e0      	movs	r2, #224	@ 0xe0
 80038f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e098      	b.n	8003a2a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e4      	bne.n	80038d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f89e 	bl	8003a4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003910:	f001 fed4 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8003914:	4603      	mov	r3, r0
 8003916:	4a49      	ldr	r2, [pc, #292]	@ (8003a3c <HAL_ETH_Init+0x1ec>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	0c9a      	lsrs	r2, r3, #18
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3a01      	subs	r2, #1
 8003924:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fa81 	bl	8003e30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003936:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800393a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800394a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	22e0      	movs	r2, #224	@ 0xe0
 8003966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e05d      	b.n	8003a2a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003976:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800397a:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_ETH_Init+0x1f0>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6952      	ldr	r2, [r2, #20]
 8003982:	0051      	lsls	r1, r2, #1
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800398e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fae9 	bl	8003f6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fb2f 	bl	8003ffc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	3305      	adds	r3, #5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4619      	mov	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	3303      	adds	r3, #3
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	061a      	lsls	r2, r3, #24
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	3302      	adds	r3, #2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	3301      	adds	r3, #1
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80039ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <HAL_ETH_Init+0x1f4>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_ETH_Init+0x1f8>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2210      	movs	r2, #16
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	58024400 	.word	0x58024400
 8003a38:	58000400 	.word	0x58000400
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	ffff8001 	.word	0xffff8001
 8003a44:	0c020060 	.word	0x0c020060
 8003a48:	0c20c000 	.word	0x0c20c000

08003a4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a66:	f001 fe29 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8003a6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d804      	bhi.n	8003a7e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e022      	b.n	8003ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <HAL_ETH_SetMDIOClockRange+0x90>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d204      	bcs.n	8003a90 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e019      	b.n	8003ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d915      	bls.n	8003ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d804      	bhi.n	8003aaa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e00c      	b.n	8003ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d804      	bhi.n	8003abc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e003      	b.n	8003ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	02160ebf 	.word	0x02160ebf
 8003adc:	03938700 	.word	0x03938700
 8003ae0:	05f5e0ff 	.word	0x05f5e0ff
 8003ae4:	08f0d17f 	.word	0x08f0d17f
 8003ae8:	0ee6b27f 	.word	0x0ee6b27f

08003aec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	791b      	ldrb	r3, [r3, #4]
 8003b04:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	7b1b      	ldrb	r3, [r3, #12]
 8003b0c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	7b5b      	ldrb	r3, [r3, #13]
 8003b14:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	7b9b      	ldrb	r3, [r3, #14]
 8003b1c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	7bdb      	ldrb	r3, [r3, #15]
 8003b24:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	7c12      	ldrb	r2, [r2, #16]
 8003b2c:	2a00      	cmp	r2, #0
 8003b2e:	d102      	bne.n	8003b36 <ETH_SetMACConfig+0x4a>
 8003b30:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b34:	e000      	b.n	8003b38 <ETH_SetMACConfig+0x4c>
 8003b36:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	7c52      	ldrb	r2, [r2, #17]
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	d102      	bne.n	8003b48 <ETH_SetMACConfig+0x5c>
 8003b42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b46:	e000      	b.n	8003b4a <ETH_SetMACConfig+0x5e>
 8003b48:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	7c9b      	ldrb	r3, [r3, #18]
 8003b50:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b52:	431a      	orrs	r2, r3
               macconf->Speed |
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b58:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003b5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	7f1b      	ldrb	r3, [r3, #28]
 8003b64:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	7f5b      	ldrb	r3, [r3, #29]
 8003b6c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	7f92      	ldrb	r2, [r2, #30]
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	d102      	bne.n	8003b7e <ETH_SetMACConfig+0x92>
 8003b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b7c:	e000      	b.n	8003b80 <ETH_SetMACConfig+0x94>
 8003b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	7fdb      	ldrb	r3, [r3, #31]
 8003b86:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b90:	2a00      	cmp	r2, #0
 8003b92:	d102      	bne.n	8003b9a <ETH_SetMACConfig+0xae>
 8003b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b98:	e000      	b.n	8003b9c <ETH_SetMACConfig+0xb0>
 8003b9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b9c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003baa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003bac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b56      	ldr	r3, [pc, #344]	@ (8003d18 <ETH_SetMACConfig+0x22c>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bd6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003be0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003be2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	d102      	bne.n	8003bfe <ETH_SetMACConfig+0x112>
 8003bf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bfc:	e000      	b.n	8003c00 <ETH_SetMACConfig+0x114>
 8003bfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003c00:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b42      	ldr	r3, [pc, #264]	@ (8003d1c <ETH_SetMACConfig+0x230>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	68f9      	ldr	r1, [r7, #12]
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b3a      	ldr	r3, [pc, #232]	@ (8003d20 <ETH_SetMACConfig+0x234>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	68f9      	ldr	r1, [r7, #12]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	d101      	bne.n	8003c5e <ETH_SetMACConfig+0x172>
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	e000      	b.n	8003c60 <ETH_SetMACConfig+0x174>
 8003c5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003c60:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c72:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003c76:	4013      	ands	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003c88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003c90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f023 0103 	bic.w	r1, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003cb6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	d101      	bne.n	8003cda <ETH_SetMACConfig+0x1ee>
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	e000      	b.n	8003cdc <ETH_SetMACConfig+0x1f0>
 8003cda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003cdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003ce4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003cee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003cfc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	00048083 	.word	0x00048083
 8003d1c:	c0f88000 	.word	0xc0f88000
 8003d20:	fffffef0 	.word	0xfffffef0

08003d24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b38      	ldr	r3, [pc, #224]	@ (8003e1c <ETH_SetDMAConfig+0xf8>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	6811      	ldr	r1, [r2, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d4a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	791b      	ldrb	r3, [r3, #4]
 8003d50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	7b1b      	ldrb	r3, [r3, #12]
 8003d5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <ETH_SetDMAConfig+0xfc>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	68f9      	ldr	r1, [r7, #12]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d7c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	7b5b      	ldrb	r3, [r3, #13]
 8003d82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003d98:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <ETH_SetDMAConfig+0x100>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	68f9      	ldr	r1, [r7, #12]
 8003da2:	430b      	orrs	r3, r1
 8003da4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003da8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	7d1b      	ldrb	r3, [r3, #20]
 8003db4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003db6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	7f5b      	ldrb	r3, [r3, #29]
 8003dbc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003dce:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <ETH_SetDMAConfig+0x104>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dde:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	7f1b      	ldrb	r3, [r3, #28]
 8003de6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <ETH_SetDMAConfig+0x108>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e0c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	ffff87fd 	.word	0xffff87fd
 8003e20:	ffff2ffe 	.word	0xffff2ffe
 8003e24:	fffec000 	.word	0xfffec000
 8003e28:	ffc0efef 	.word	0xffc0efef
 8003e2c:	7fc0ffff 	.word	0x7fc0ffff

08003e30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b0a4      	sub	sp, #144	@ 0x90
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003e88:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e94:	2300      	movs	r3, #0
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003eda:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003eec:	2302      	movs	r3, #2
 8003eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fde6 	bl	8003aec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003f50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fee1 	bl	8003d24 <ETH_SetDMAConfig>
}
 8003f62:	bf00      	nop
 8003f64:	3790      	adds	r7, #144	@ 0x90
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e01d      	b.n	8003fb4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68d9      	ldr	r1, [r3, #12]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	3206      	adds	r2, #6
 8003faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d9de      	bls.n	8003f78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2303      	movs	r3, #3
 8003fcc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fdc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e023      	b.n	8004052 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	3212      	adds	r2, #18
 8004048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3301      	adds	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d9d8      	bls.n	800400a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407e:	461a      	mov	r2, r3
 8004080:	2303      	movs	r3, #3
 8004082:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004092:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	@ 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040c6:	4b89      	ldr	r3, [pc, #548]	@ (80042ec <HAL_GPIO_Init+0x234>)
 80040c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040ca:	e194      	b.n	80043f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8186 	beq.w	80043f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d005      	beq.n	80040fc <HAL_GPIO_Init+0x44>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d130      	bne.n	800415e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004132:	2201      	movs	r2, #1
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 0201 	and.w	r2, r3, #1
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b03      	cmp	r3, #3
 8004168:	d017      	beq.n	800419a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	2203      	movs	r2, #3
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d123      	bne.n	80041ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	08da      	lsrs	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3208      	adds	r2, #8
 80041ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	08da      	lsrs	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3208      	adds	r2, #8
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0203 	and.w	r2, r3, #3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80e0 	beq.w	80043f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004230:	4b2f      	ldr	r3, [pc, #188]	@ (80042f0 <HAL_GPIO_Init+0x238>)
 8004232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004236:	4a2e      	ldr	r2, [pc, #184]	@ (80042f0 <HAL_GPIO_Init+0x238>)
 8004238:	f043 0302 	orr.w	r3, r3, #2
 800423c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004240:	4b2b      	ldr	r3, [pc, #172]	@ (80042f0 <HAL_GPIO_Init+0x238>)
 8004242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800424e:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <HAL_GPIO_Init+0x23c>)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a20      	ldr	r2, [pc, #128]	@ (80042f8 <HAL_GPIO_Init+0x240>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d052      	beq.n	8004320 <HAL_GPIO_Init+0x268>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <HAL_GPIO_Init+0x244>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d031      	beq.n	80042e6 <HAL_GPIO_Init+0x22e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1e      	ldr	r2, [pc, #120]	@ (8004300 <HAL_GPIO_Init+0x248>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02b      	beq.n	80042e2 <HAL_GPIO_Init+0x22a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_GPIO_Init+0x24c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d025      	beq.n	80042de <HAL_GPIO_Init+0x226>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <HAL_GPIO_Init+0x250>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <HAL_GPIO_Init+0x222>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_GPIO_Init+0x254>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d019      	beq.n	80042d6 <HAL_GPIO_Init+0x21e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <HAL_GPIO_Init+0x258>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0x21a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_GPIO_Init+0x25c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00d      	beq.n	80042ce <HAL_GPIO_Init+0x216>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_GPIO_Init+0x260>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <HAL_GPIO_Init+0x212>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <HAL_GPIO_Init+0x264>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_GPIO_Init+0x20e>
 80042c2:	2309      	movs	r3, #9
 80042c4:	e02d      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042c6:	230a      	movs	r3, #10
 80042c8:	e02b      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042ca:	2308      	movs	r3, #8
 80042cc:	e029      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e027      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e025      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e023      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042da:	2304      	movs	r3, #4
 80042dc:	e021      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042de:	2303      	movs	r3, #3
 80042e0:	e01f      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e01d      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e01b      	b.n	8004322 <HAL_GPIO_Init+0x26a>
 80042ea:	bf00      	nop
 80042ec:	58000080 	.word	0x58000080
 80042f0:	58024400 	.word	0x58024400
 80042f4:	58000400 	.word	0x58000400
 80042f8:	58020000 	.word	0x58020000
 80042fc:	58020400 	.word	0x58020400
 8004300:	58020800 	.word	0x58020800
 8004304:	58020c00 	.word	0x58020c00
 8004308:	58021000 	.word	0x58021000
 800430c:	58021400 	.word	0x58021400
 8004310:	58021800 	.word	0x58021800
 8004314:	58021c00 	.word	0x58021c00
 8004318:	58022000 	.word	0x58022000
 800431c:	58022400 	.word	0x58022400
 8004320:	2300      	movs	r3, #0
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	f002 0203 	and.w	r2, r2, #3
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	4093      	lsls	r3, r2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004332:	4938      	ldr	r1, [pc, #224]	@ (8004414 <HAL_GPIO_Init+0x35c>)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	3302      	adds	r3, #2
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	3301      	adds	r3, #1
 80043f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f ae63 	bne.w	80040cc <HAL_GPIO_Init+0x14>
  }
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	3724      	adds	r7, #36	@ 0x24
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	58000400 	.word	0x58000400

08004418 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004420:	4a08      	ldr	r2, [pc, #32]	@ (8004444 <HAL_HSEM_FastTake+0x2c>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3320      	adds	r3, #32
 8004426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442a:	4a07      	ldr	r2, [pc, #28]	@ (8004448 <HAL_HSEM_FastTake+0x30>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	58026400 	.word	0x58026400
 8004448:	80000300 	.word	0x80000300

0800444c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004456:	4906      	ldr	r1, [pc, #24]	@ (8004470 <HAL_HSEM_Release+0x24>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	58026400 	.word	0x58026400

08004474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
 800447a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0fe      	b.n	8004684 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fe2a 	bl	80010f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2203      	movs	r2, #3
 80044a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f005 f98d 	bl	80097cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7c1a      	ldrb	r2, [r3, #16]
 80044ba:	f88d 2000 	strb.w	r2, [sp]
 80044be:	3304      	adds	r3, #4
 80044c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044c2:	f005 f911 	bl	80096e8 <USB_CoreInit>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0d5      	b.n	8004684 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f005 f985 	bl	80097ee <USB_SetCurrentMode>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0c6      	b.n	8004684 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	e04a      	b.n	8004592 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044fc:	7bfa      	ldrb	r2, [r7, #15]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3315      	adds	r3, #21
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3314      	adds	r3, #20
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	b298      	uxth	r0, r3
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	332e      	adds	r3, #46	@ 0x2e
 8004538:	4602      	mov	r2, r0
 800453a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3318      	adds	r3, #24
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004550:	7bfa      	ldrb	r2, [r7, #15]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	331c      	adds	r3, #28
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3320      	adds	r3, #32
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004578:	7bfa      	ldrb	r2, [r7, #15]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3324      	adds	r3, #36	@ 0x24
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	3301      	adds	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	791b      	ldrb	r3, [r3, #4]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	429a      	cmp	r2, r3
 800459a:	d3af      	bcc.n	80044fc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	e044      	b.n	800462c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	3301      	adds	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3b5      	bcc.n	80045a2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7c1a      	ldrb	r2, [r3, #16]
 800463e:	f88d 2000 	strb.w	r2, [sp]
 8004642:	3304      	adds	r3, #4
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	f005 f91f 	bl	8009888 <USB_DevInit>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e013      	b.n	8004684 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7b1b      	ldrb	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f80a 	bl	800468c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f005 fada 	bl	8009c36 <USB_DevDisconnect>

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046ba:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	10000003 	.word	0x10000003

080046d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80046dc:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d00a      	beq.n	80046fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046e8:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e040      	b.n	800477c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e03e      	b.n	800477c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046fe:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004706:	491f      	ldr	r1, [pc, #124]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800470e:	f7fc fe67 	bl	80013e0 <HAL_GetTick>
 8004712:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004714:	e009      	b.n	800472a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004716:	f7fc fe63 	bl	80013e0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004724:	d901      	bls.n	800472a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e028      	b.n	800477c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800472a:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004736:	d1ee      	bne.n	8004716 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b1e      	cmp	r3, #30
 800473c:	d008      	beq.n	8004750 <HAL_PWREx_ConfigSupply+0x7c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b2e      	cmp	r3, #46	@ 0x2e
 8004742:	d005      	beq.n	8004750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b1d      	cmp	r3, #29
 8004748:	d002      	beq.n	8004750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b2d      	cmp	r3, #45	@ 0x2d
 800474e:	d114      	bne.n	800477a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004750:	f7fc fe46 	bl	80013e0 <HAL_GetTick>
 8004754:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004756:	e009      	b.n	800476c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004758:	f7fc fe42 	bl	80013e0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004766:	d901      	bls.n	800476c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_PWREx_ConfigSupply+0xb0>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004778:	d1ee      	bne.n	8004758 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	58024800 	.word	0x58024800

08004788 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004796:	60d3      	str	r3, [r2, #12]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	58024800 	.word	0x58024800

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	@ 0x30
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f000 bc48 	b.w	800504c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8088 	beq.w	80048da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ca:	4b99      	ldr	r3, [pc, #612]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047d4:	4b96      	ldr	r3, [pc, #600]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_OscConfig+0x48>
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	2b18      	cmp	r3, #24
 80047e4:	d111      	bne.n	800480a <HAL_RCC_OscConfig+0x62>
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d10c      	bne.n	800480a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d06d      	beq.n	80048d8 <HAL_RCC_OscConfig+0x130>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d169      	bne.n	80048d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f000 bc21 	b.w	800504c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x7a>
 8004814:	4b86      	ldr	r3, [pc, #536]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a85      	ldr	r2, [pc, #532]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e02e      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x9c>
 800482a:	4b81      	ldr	r3, [pc, #516]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a80      	ldr	r2, [pc, #512]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b7e      	ldr	r3, [pc, #504]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800483c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e01d      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0xc0>
 800484e:	4b78      	ldr	r3, [pc, #480]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a77      	ldr	r2, [pc, #476]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b75      	ldr	r3, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a74      	ldr	r2, [pc, #464]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0xd8>
 8004868:	4b71      	ldr	r3, [pc, #452]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a70      	ldr	r2, [pc, #448]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800486e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b6e      	ldr	r3, [pc, #440]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6d      	ldr	r2, [pc, #436]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800487a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800487e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fc fdaa 	bl	80013e0 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fc fda6 	bl	80013e0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e3d4      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048a2:	4b63      	ldr	r3, [pc, #396]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fc fd96 	bl	80013e0 <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fc fd92 	bl	80013e0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	@ 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e3c0      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ca:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x110>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80ca 	beq.w	8004a7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e8:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_RCC_OscConfig+0x166>
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	2b18      	cmp	r3, #24
 8004902:	d156      	bne.n	80049b2 <HAL_RCC_OscConfig+0x20a>
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d151      	bne.n	80049b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800490e:	4b48      	ldr	r3, [pc, #288]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x17e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e392      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004926:	4b42      	ldr	r3, [pc, #264]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 0219 	bic.w	r2, r3, #25
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	493f      	ldr	r1, [pc, #252]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fc fd52 	bl	80013e0 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fc fd4e 	bl	80013e0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e37c      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	f7fc fd6f 	bl	8001440 <HAL_GetREVID>
 8004962:	4603      	mov	r3, r0
 8004964:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004968:	4293      	cmp	r3, r2
 800496a:	d817      	bhi.n	800499c <HAL_RCC_OscConfig+0x1f4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d108      	bne.n	8004986 <HAL_RCC_OscConfig+0x1de>
 8004974:	4b2e      	ldr	r3, [pc, #184]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800497c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004982:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004984:	e07a      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004986:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	031b      	lsls	r3, r3, #12
 8004994:	4926      	ldr	r1, [pc, #152]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499a:	e06f      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499c:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	061b      	lsls	r3, r3, #24
 80049aa:	4921      	ldr	r1, [pc, #132]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b0:	e064      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d047      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 0219 	bic.w	r2, r3, #25
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	491a      	ldr	r1, [pc, #104]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fc fd08 	bl	80013e0 <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d4:	f7fc fd04 	bl	80013e0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e332      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e6:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	f7fc fd25 	bl	8001440 <HAL_GetREVID>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d819      	bhi.n	8004a34 <HAL_RCC_OscConfig+0x28c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b40      	cmp	r3, #64	@ 0x40
 8004a06:	d108      	bne.n	8004a1a <HAL_RCC_OscConfig+0x272>
 8004a08:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a10:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a16:	6053      	str	r3, [r2, #4]
 8004a18:	e030      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	031b      	lsls	r3, r3, #12
 8004a28:	4901      	ldr	r1, [pc, #4]	@ (8004a30 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
 8004a2e:	e025      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
 8004a30:	58024400 	.word	0x58024400
 8004a34:	4b9a      	ldr	r3, [pc, #616]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	4997      	ldr	r1, [pc, #604]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
 8004a48:	e018      	b.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b95      	ldr	r3, [pc, #596]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a94      	ldr	r2, [pc, #592]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fc fcc3 	bl	80013e0 <HAL_GetTick>
 8004a5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7fc fcbf 	bl	80013e0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e2ed      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a70:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a9 	beq.w	8004bdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8a:	4b85      	ldr	r3, [pc, #532]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a94:	4b82      	ldr	r3, [pc, #520]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d007      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x308>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b18      	cmp	r3, #24
 8004aa4:	d13a      	bne.n	8004b1c <HAL_RCC_OscConfig+0x374>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d135      	bne.n	8004b1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x320>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	2b80      	cmp	r3, #128	@ 0x80
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e2c1      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ac8:	f7fc fcba 	bl	8001440 <HAL_GetREVID>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d817      	bhi.n	8004b06 <HAL_RCC_OscConfig+0x35e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d108      	bne.n	8004af0 <HAL_RCC_OscConfig+0x348>
 8004ade:	4b70      	ldr	r3, [pc, #448]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ae6:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004aec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aee:	e075      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004af0:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	069b      	lsls	r3, r3, #26
 8004afe:	4968      	ldr	r1, [pc, #416]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b04:	e06a      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b06:	4b66      	ldr	r3, [pc, #408]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	4962      	ldr	r1, [pc, #392]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b1a:	e05f      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d042      	beq.n	8004baa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fc fc56 	bl	80013e0 <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b38:	f7fc fc52 	bl	80013e0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e280      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b4a:	4b55      	ldr	r3, [pc, #340]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b56:	f7fc fc73 	bl	8001440 <HAL_GetREVID>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d817      	bhi.n	8004b94 <HAL_RCC_OscConfig+0x3ec>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d108      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3d6>
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b7a:	6053      	str	r3, [r2, #4]
 8004b7c:	e02e      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
 8004b7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	069b      	lsls	r3, r3, #26
 8004b8c:	4944      	ldr	r1, [pc, #272]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
 8004b92:	e023      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
 8004b94:	4b42      	ldr	r3, [pc, #264]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	493f      	ldr	r1, [pc, #252]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60cb      	str	r3, [r1, #12]
 8004ba8:	e018      	b.n	8004bdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004baa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fc fc13 	bl	80013e0 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bbe:	f7fc fc0f 	bl	80013e0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e23d      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bd0:	4b33      	ldr	r3, [pc, #204]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d036      	beq.n	8004c56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d019      	beq.n	8004c24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fc fbf0 	bl	80013e0 <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c04:	f7fc fbec 	bl	80013e0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e21a      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c16:	4b22      	ldr	r3, [pc, #136]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x45c>
 8004c22:	e018      	b.n	8004c56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fc fbd6 	bl	80013e0 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fc fbd2 	bl	80013e0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e200      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d039      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c76:	f7fc fbb3 	bl	80013e0 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c7e:	f7fc fbaf 	bl	80013e0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1dd      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c90:	4b03      	ldr	r3, [pc, #12]	@ (8004ca0 <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x4d6>
 8004c9c:	e01b      	b.n	8004cd6 <HAL_RCC_OscConfig+0x52e>
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ca4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a9a      	ldr	r2, [pc, #616]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cb0:	f7fc fb96 	bl	80013e0 <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cb8:	f7fc fb92 	bl	80013e0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1c0      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cca:	4b92      	ldr	r3, [pc, #584]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8081 	beq.w	8004de6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8004f18 <HAL_RCC_OscConfig+0x770>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a8b      	ldr	r2, [pc, #556]	@ (8004f18 <HAL_RCC_OscConfig+0x770>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf0:	f7fc fb76 	bl	80013e0 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fc fb72 	bl	80013e0 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1a0      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0a:	4b83      	ldr	r3, [pc, #524]	@ (8004f18 <HAL_RCC_OscConfig+0x770>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCC_OscConfig+0x584>
 8004d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	4a7c      	ldr	r2, [pc, #496]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2a:	e02d      	b.n	8004d88 <HAL_RCC_OscConfig+0x5e0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10c      	bne.n	8004d4e <HAL_RCC_OscConfig+0x5a6>
 8004d34:	4b77      	ldr	r3, [pc, #476]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	4a76      	ldr	r2, [pc, #472]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d40:	4b74      	ldr	r3, [pc, #464]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d44:	4a73      	ldr	r2, [pc, #460]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d46:	f023 0304 	bic.w	r3, r3, #4
 8004d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4c:	e01c      	b.n	8004d88 <HAL_RCC_OscConfig+0x5e0>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d10c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5c8>
 8004d56:	4b6f      	ldr	r3, [pc, #444]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	f043 0304 	orr.w	r3, r3, #4
 8004d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d62:	4b6c      	ldr	r3, [pc, #432]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	4a6b      	ldr	r2, [pc, #428]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d6e:	e00b      	b.n	8004d88 <HAL_RCC_OscConfig+0x5e0>
 8004d70:	4b68      	ldr	r3, [pc, #416]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d74:	4a67      	ldr	r2, [pc, #412]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d7c:	4b65      	ldr	r3, [pc, #404]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	4a64      	ldr	r2, [pc, #400]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004d82:	f023 0304 	bic.w	r3, r3, #4
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d015      	beq.n	8004dbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fc fb26 	bl	80013e0 <HAL_GetTick>
 8004d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fc fb22 	bl	80013e0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e14e      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dae:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0ee      	beq.n	8004d98 <HAL_RCC_OscConfig+0x5f0>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fc fb10 	bl	80013e0 <HAL_GetTick>
 8004dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fc fb0c 	bl	80013e0 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e138      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dda:	4b4e      	ldr	r3, [pc, #312]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ee      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 812d 	beq.w	800504a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004df0:	4b48      	ldr	r3, [pc, #288]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004df8:	2b18      	cmp	r3, #24
 8004dfa:	f000 80bd 	beq.w	8004f78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	f040 809e 	bne.w	8004f44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a41      	ldr	r2, [pc, #260]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fc fae4 	bl	80013e0 <HAL_GetTick>
 8004e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fc fae0 	bl	80013e0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e10e      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e2e:	4b39      	ldr	r3, [pc, #228]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3a:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e3e:	4b37      	ldr	r3, [pc, #220]	@ (8004f1c <HAL_RCC_OscConfig+0x774>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4931      	ldr	r1, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e62:	3b01      	subs	r3, #1
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e84:	4923      	ldr	r1, [pc, #140]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e8a:	4b22      	ldr	r3, [pc, #136]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9a:	4b21      	ldr	r3, [pc, #132]	@ (8004f20 <HAL_RCC_OscConfig+0x778>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ea2:	00d2      	lsls	r2, r2, #3
 8004ea4:	491b      	ldr	r1, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	f023 020c 	bic.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	4917      	ldr	r1, [pc, #92]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ebc:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	f023 0202 	bic.w	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	4912      	ldr	r1, [pc, #72]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a10      	ldr	r2, [pc, #64]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eda:	4b0e      	ldr	r3, [pc, #56]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	4a0d      	ldr	r2, [pc, #52]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a0a      	ldr	r2, [pc, #40]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ef2:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efe:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a04      	ldr	r2, [pc, #16]	@ (8004f14 <HAL_RCC_OscConfig+0x76c>)
 8004f04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fc fa69 	bl	80013e0 <HAL_GetTick>
 8004f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f10:	e011      	b.n	8004f36 <HAL_RCC_OscConfig+0x78e>
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	58024800 	.word	0x58024800
 8004f1c:	fffffc0c 	.word	0xfffffc0c
 8004f20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fc fa5c 	bl	80013e0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e08a      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x77c>
 8004f42:	e082      	b.n	800504a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f44:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a42      	ldr	r2, [pc, #264]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fc fa46 	bl	80013e0 <HAL_GetTick>
 8004f54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc fa42 	bl	80013e0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e070      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x7b0>
 8004f76:	e068      	b.n	800504a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f78:	4b36      	ldr	r3, [pc, #216]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f7e:	4b35      	ldr	r3, [pc, #212]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d031      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d12a      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d122      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d11a      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0a5b      	lsrs	r3, r3, #9
 8004fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d111      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d108      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e02b      	b.n	800504c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ff4:	4b17      	ldr	r3, [pc, #92]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ffe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d01f      	beq.n	800504a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800500a:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	4a11      	ldr	r2, [pc, #68]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005016:	f7fc f9e3 	bl	80013e0 <HAL_GetTick>
 800501a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800501c:	bf00      	nop
 800501e:	f7fc f9df 	bl	80013e0 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	4293      	cmp	r3, r2
 8005028:	d0f9      	beq.n	800501e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 800502c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800502e:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <HAL_RCC_OscConfig+0x8b0>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005036:	00d2      	lsls	r2, r2, #3
 8005038:	4906      	ldr	r1, [pc, #24]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 800503a:	4313      	orrs	r3, r2
 800503c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800503e:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	4a04      	ldr	r2, [pc, #16]	@ (8005054 <HAL_RCC_OscConfig+0x8ac>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3730      	adds	r7, #48	@ 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	58024400 	.word	0x58024400
 8005058:	ffff0007 	.word	0xffff0007

0800505c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e19c      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005070:	4b8a      	ldr	r3, [pc, #552]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d910      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b87      	ldr	r3, [pc, #540]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 020f 	bic.w	r2, r3, #15
 8005086:	4985      	ldr	r1, [pc, #532]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b83      	ldr	r3, [pc, #524]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e184      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	4b7b      	ldr	r3, [pc, #492]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d908      	bls.n	80050ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050bc:	4b78      	ldr	r3, [pc, #480]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	4975      	ldr	r1, [pc, #468]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	4b70      	ldr	r3, [pc, #448]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d908      	bls.n	80050fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050ea:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	496a      	ldr	r1, [pc, #424]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d010      	beq.n	800512a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699a      	ldr	r2, [r3, #24]
 800510c:	4b64      	ldr	r3, [pc, #400]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005114:	429a      	cmp	r2, r3
 8005116:	d908      	bls.n	800512a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005118:	4b61      	ldr	r3, [pc, #388]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	495e      	ldr	r1, [pc, #376]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005126:	4313      	orrs	r3, r2
 8005128:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d010      	beq.n	8005158 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69da      	ldr	r2, [r3, #28]
 800513a:	4b59      	ldr	r3, [pc, #356]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005142:	429a      	cmp	r2, r3
 8005144:	d908      	bls.n	8005158 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005146:	4b56      	ldr	r3, [pc, #344]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4953      	ldr	r1, [pc, #332]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005154:	4313      	orrs	r3, r2
 8005156:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d010      	beq.n	8005186 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	4b4d      	ldr	r3, [pc, #308]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	429a      	cmp	r2, r3
 8005172:	d908      	bls.n	8005186 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b4a      	ldr	r3, [pc, #296]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f023 020f 	bic.w	r2, r3, #15
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4947      	ldr	r1, [pc, #284]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005182:	4313      	orrs	r3, r2
 8005184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d055      	beq.n	800523e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005192:	4b43      	ldr	r3, [pc, #268]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4940      	ldr	r1, [pc, #256]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ac:	4b3c      	ldr	r3, [pc, #240]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d121      	bne.n	80051fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0f6      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d115      	bne.n	80051fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0ea      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d107      	bne.n	80051ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051dc:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0de      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ec:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0d6      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051fc:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f023 0207 	bic.w	r2, r3, #7
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4925      	ldr	r1, [pc, #148]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800520a:	4313      	orrs	r3, r2
 800520c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fc f8e7 	bl	80013e0 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	e00a      	b.n	800522c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fc f8e3 	bl	80013e0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0be      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522c:	4b1c      	ldr	r3, [pc, #112]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	429a      	cmp	r2, r3
 800523c:	d1eb      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d010      	beq.n	800526c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	4b14      	ldr	r3, [pc, #80]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	429a      	cmp	r2, r3
 8005258:	d208      	bcs.n	800526c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525a:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f023 020f 	bic.w	r2, r3, #15
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	490e      	ldr	r1, [pc, #56]	@ (80052a0 <HAL_RCC_ClockConfig+0x244>)
 8005268:	4313      	orrs	r3, r2
 800526a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d214      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	4906      	ldr	r1, [pc, #24]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b04      	ldr	r3, [pc, #16]	@ (800529c <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e086      	b.n	80053aa <HAL_RCC_ClockConfig+0x34e>
 800529c:	52002000 	.word	0x52002000
 80052a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d010      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	4b3f      	ldr	r3, [pc, #252]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052bc:	429a      	cmp	r2, r3
 80052be:	d208      	bcs.n	80052d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052c0:	4b3c      	ldr	r3, [pc, #240]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4939      	ldr	r1, [pc, #228]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	4b34      	ldr	r3, [pc, #208]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d208      	bcs.n	8005300 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	492e      	ldr	r1, [pc, #184]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d010      	beq.n	800532e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	4b28      	ldr	r3, [pc, #160]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005318:	429a      	cmp	r2, r3
 800531a:	d208      	bcs.n	800532e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800531c:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	4922      	ldr	r1, [pc, #136]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 800532a:	4313      	orrs	r3, r2
 800532c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69da      	ldr	r2, [r3, #28]
 800533e:	4b1d      	ldr	r3, [pc, #116]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005346:	429a      	cmp	r2, r3
 8005348:	d208      	bcs.n	800535c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800534a:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4917      	ldr	r1, [pc, #92]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 8005358:	4313      	orrs	r3, r2
 800535a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800535c:	f000 f834 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	4912      	ldr	r1, [pc, #72]	@ (80053b8 <HAL_RCC_ClockConfig+0x35c>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800537a:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <HAL_RCC_ClockConfig+0x358>)
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	4a0d      	ldr	r2, [pc, #52]	@ (80053b8 <HAL_RCC_ClockConfig+0x35c>)
 8005384:	5cd3      	ldrb	r3, [r2, r3]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
 8005390:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <HAL_RCC_ClockConfig+0x360>)
 8005392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005394:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <HAL_RCC_ClockConfig+0x364>)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800539a:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <HAL_RCC_ClockConfig+0x368>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fb ffd4 	bl	800134c <HAL_InitTick>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400
 80053b8:	08009d68 	.word	0x08009d68
 80053bc:	24000004 	.word	0x24000004
 80053c0:	24000000 	.word	0x24000000
 80053c4:	240000b4 	.word	0x240000b4

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	@ 0x24
 80053cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ce:	4bb3      	ldr	r3, [pc, #716]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d6:	2b18      	cmp	r3, #24
 80053d8:	f200 8155 	bhi.w	8005686 <HAL_RCC_GetSysClockFreq+0x2be>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005449 	.word	0x08005449
 80053e8:	08005687 	.word	0x08005687
 80053ec:	08005687 	.word	0x08005687
 80053f0:	08005687 	.word	0x08005687
 80053f4:	08005687 	.word	0x08005687
 80053f8:	08005687 	.word	0x08005687
 80053fc:	08005687 	.word	0x08005687
 8005400:	08005687 	.word	0x08005687
 8005404:	0800546f 	.word	0x0800546f
 8005408:	08005687 	.word	0x08005687
 800540c:	08005687 	.word	0x08005687
 8005410:	08005687 	.word	0x08005687
 8005414:	08005687 	.word	0x08005687
 8005418:	08005687 	.word	0x08005687
 800541c:	08005687 	.word	0x08005687
 8005420:	08005687 	.word	0x08005687
 8005424:	08005475 	.word	0x08005475
 8005428:	08005687 	.word	0x08005687
 800542c:	08005687 	.word	0x08005687
 8005430:	08005687 	.word	0x08005687
 8005434:	08005687 	.word	0x08005687
 8005438:	08005687 	.word	0x08005687
 800543c:	08005687 	.word	0x08005687
 8005440:	08005687 	.word	0x08005687
 8005444:	0800547b 	.word	0x0800547b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005448:	4b94      	ldr	r3, [pc, #592]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005454:	4b91      	ldr	r3, [pc, #580]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	4a90      	ldr	r2, [pc, #576]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005466:	e111      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005468:	4b8d      	ldr	r3, [pc, #564]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800546a:	61bb      	str	r3, [r7, #24]
      break;
 800546c:	e10e      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800546e:	4b8d      	ldr	r3, [pc, #564]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005470:	61bb      	str	r3, [r7, #24]
      break;
 8005472:	e10b      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005474:	4b8c      	ldr	r3, [pc, #560]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005476:	61bb      	str	r3, [r7, #24]
      break;
 8005478:	e108      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800547a:	4b88      	ldr	r3, [pc, #544]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005484:	4b85      	ldr	r3, [pc, #532]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800548e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005490:	4b82      	ldr	r3, [pc, #520]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800549a:	4b80      	ldr	r3, [pc, #512]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80e1 	beq.w	8005680 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	f000 8083 	beq.w	80055cc <HAL_RCC_GetSysClockFreq+0x204>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	f200 80a1 	bhi.w	8005610 <HAL_RCC_GetSysClockFreq+0x248>
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x114>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d056      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054da:	e099      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054dc:	4b6f      	ldr	r3, [pc, #444]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02d      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054e8:	4b6c      	ldr	r3, [pc, #432]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	08db      	lsrs	r3, r3, #3
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	4a6b      	ldr	r2, [pc, #428]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
 80054f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b62      	ldr	r3, [pc, #392]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a02 	vldr	s12, [r7, #8]
 8005526:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80056ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005542:	e087      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80056b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005556:	4b51      	ldr	r3, [pc, #324]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005566:	ed97 6a02 	vldr	s12, [r7, #8]
 800556a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80056ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800556e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800557a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005586:	e065      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80056b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559a:	4b40      	ldr	r3, [pc, #256]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80056ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055ca:	e043      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80056b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b2f      	ldr	r3, [pc, #188]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80056ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800560e:	e021      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80056b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a02 	vldr	s12, [r7, #8]
 8005636:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80056ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005652:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005654:	4b11      	ldr	r3, [pc, #68]	@ (800569c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	0a5b      	lsrs	r3, r3, #9
 800565a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800565e:	3301      	adds	r3, #1
 8005660:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800566c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 3a90 	vmov	r3, s15
 800567c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800567e:	e005      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
      break;
 8005684:	e002      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005686:	4b07      	ldr	r3, [pc, #28]	@ (80056a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005688:	61bb      	str	r3, [r7, #24]
      break;
 800568a:	bf00      	nop
  }

  return sysclockfreq;
 800568c:	69bb      	ldr	r3, [r7, #24]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3724      	adds	r7, #36	@ 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400
 80056a0:	03d09000 	.word	0x03d09000
 80056a4:	003d0900 	.word	0x003d0900
 80056a8:	007a1200 	.word	0x007a1200
 80056ac:	46000000 	.word	0x46000000
 80056b0:	4c742400 	.word	0x4c742400
 80056b4:	4a742400 	.word	0x4a742400
 80056b8:	4af42400 	.word	0x4af42400

080056bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056c2:	f7ff fe81 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <HAL_RCC_GetHCLKFreq+0x50>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	490f      	ldr	r1, [pc, #60]	@ (8005710 <HAL_RCC_GetHCLKFreq+0x54>)
 80056d4:	5ccb      	ldrb	r3, [r1, r3]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056e0:	4b0a      	ldr	r3, [pc, #40]	@ (800570c <HAL_RCC_GetHCLKFreq+0x50>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	4a09      	ldr	r2, [pc, #36]	@ (8005710 <HAL_RCC_GetHCLKFreq+0x54>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a07      	ldr	r2, [pc, #28]	@ (8005714 <HAL_RCC_GetHCLKFreq+0x58>)
 80056f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056fa:	4a07      	ldr	r2, [pc, #28]	@ (8005718 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005700:	4b04      	ldr	r3, [pc, #16]	@ (8005714 <HAL_RCC_GetHCLKFreq+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	58024400 	.word	0x58024400
 8005710:	08009d68 	.word	0x08009d68
 8005714:	24000004 	.word	0x24000004
 8005718:	24000000 	.word	0x24000000

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005720:	f7ff ffcc 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4904      	ldr	r1, [pc, #16]	@ (8005744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58024400 	.word	0x58024400
 8005744:	08009d68 	.word	0x08009d68

08005748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800574c:	f7ff ffb6 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b06      	ldr	r3, [pc, #24]	@ (800576c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4904      	ldr	r1, [pc, #16]	@ (8005770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	58024400 	.word	0x58024400
 8005770:	08009d68 	.word	0x08009d68

08005774 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005778:	b0ca      	sub	sp, #296	@ 0x128
 800577a:	af00      	add	r7, sp, #0
 800577c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005786:	2300      	movs	r3, #0
 8005788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005798:	2500      	movs	r5, #0
 800579a:	ea54 0305 	orrs.w	r3, r4, r5
 800579e:	d049      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057aa:	d02f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057b0:	d828      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057b6:	d01a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057bc:	d822      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c6:	d007      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057c8:	e01c      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ca:	4bb8      	ldr	r3, [pc, #736]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4ab7      	ldr	r2, [pc, #732]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057d6:	e01a      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057dc:	3308      	adds	r3, #8
 80057de:	2102      	movs	r1, #2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 fc8f 	bl	8007104 <RCCEx_PLL2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ec:	e00f      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3328      	adds	r3, #40	@ 0x28
 80057f4:	2102      	movs	r1, #2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fd36 	bl	8007268 <RCCEx_PLL3_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005802:	e004      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800580a:	e000      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800580c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005816:	4ba5      	ldr	r3, [pc, #660]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005824:	4aa1      	ldr	r2, [pc, #644]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005826:	430b      	orrs	r3, r1
 8005828:	6513      	str	r3, [r2, #80]	@ 0x50
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005840:	f04f 0900 	mov.w	r9, #0
 8005844:	ea58 0309 	orrs.w	r3, r8, r9
 8005848:	d047      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005850:	2b04      	cmp	r3, #4
 8005852:	d82a      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005854:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005871 	.word	0x08005871
 8005860:	0800587f 	.word	0x0800587f
 8005864:	08005895 	.word	0x08005895
 8005868:	080058b3 	.word	0x080058b3
 800586c:	080058b3 	.word	0x080058b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005870:	4b8e      	ldr	r3, [pc, #568]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	4a8d      	ldr	r2, [pc, #564]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800587c:	e01a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	3308      	adds	r3, #8
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fc3c 	bl	8007104 <RCCEx_PLL2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005892:	e00f      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	3328      	adds	r3, #40	@ 0x28
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f001 fce3 	bl	8007268 <RCCEx_PLL3_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058bc:	4b7b      	ldr	r3, [pc, #492]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c0:	f023 0107 	bic.w	r1, r3, #7
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	4a78      	ldr	r2, [pc, #480]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80058e6:	f04f 0b00 	mov.w	fp, #0
 80058ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80058ee:	d04c      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058fa:	d030      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005900:	d829      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005902:	2bc0      	cmp	r3, #192	@ 0xc0
 8005904:	d02d      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005906:	2bc0      	cmp	r3, #192	@ 0xc0
 8005908:	d825      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d018      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800590e:	2b80      	cmp	r3, #128	@ 0x80
 8005910:	d821      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005916:	2b40      	cmp	r3, #64	@ 0x40
 8005918:	d007      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800591a:	e01c      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591c:	4b63      	ldr	r3, [pc, #396]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a62      	ldr	r2, [pc, #392]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005928:	e01c      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	3308      	adds	r3, #8
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fbe6 	bl	8007104 <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800593e:	e011      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	3328      	adds	r3, #40	@ 0x28
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f001 fc8d 	bl	8007268 <RCCEx_PLL3_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800596c:	4b4f      	ldr	r3, [pc, #316]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597a:	4a4c      	ldr	r2, [pc, #304]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800597c:	430b      	orrs	r3, r1
 800597e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005980:	e003      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005996:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80059a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80059a4:	460b      	mov	r3, r1
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d053      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059b6:	d035      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059bc:	d82e      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059c2:	d031      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059c8:	d828      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059ce:	d01a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80059d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059d4:	d822      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059de:	d007      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059e0:	e01c      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e2:	4b32      	ldr	r3, [pc, #200]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	4a31      	ldr	r2, [pc, #196]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ee:	e01c      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	3308      	adds	r3, #8
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fb83 	bl	8007104 <RCCEx_PLL2_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a04:	e011      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	3328      	adds	r3, #40	@ 0x28
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fc2a 	bl	8007268 <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e006      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a22:	e002      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a24:	bf00      	nop
 8005a26:	e000      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a32:	4b1e      	ldr	r3, [pc, #120]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a42:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a48:	e003      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	d056      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a7e:	d038      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a84:	d831      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a8a:	d034      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a90:	d82b      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a96:	d01d      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a9c:	d825      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005aa8:	e01f      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005aaa:	bf00      	nop
 8005aac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4ba2      	ldr	r3, [pc, #648]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005abc:	e01c      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fb1c 	bl	8007104 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ad2:	e011      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	3328      	adds	r3, #40	@ 0x28
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 fbc3 	bl	8007268 <RCCEx_PLL3_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ae8:	e006      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005af0:	e002      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b00:	4b8e      	ldr	r3, [pc, #568]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b10:	4a8a      	ldr	r2, [pc, #552]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b16:	e003      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d03a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b46:	2b30      	cmp	r3, #48	@ 0x30
 8005b48:	d01f      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b4a:	2b30      	cmp	r3, #48	@ 0x30
 8005b4c:	d819      	bhi.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d00c      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d815      	bhi.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d019      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d111      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5e:	4b77      	ldr	r3, [pc, #476]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	4a76      	ldr	r2, [pc, #472]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b6a:	e011      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	3308      	adds	r3, #8
 8005b72:	2102      	movs	r1, #2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fac5 	bl	8007104 <RCCEx_PLL2_Config>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b80:	e006      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b98:	4b68      	ldr	r3, [pc, #416]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba6:	4a65      	ldr	r2, [pc, #404]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bac:	e003      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	d051      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005be0:	d035      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005be6:	d82e      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005be8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bec:	d031      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005bee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bf2:	d828      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf8:	d01a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfe:	d822      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c08:	d007      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c0a:	e01c      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	4a4a      	ldr	r2, [pc, #296]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c18:	e01c      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fa6e 	bl	8007104 <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c2e:	e011      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	3328      	adds	r3, #40	@ 0x28
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fb15 	bl	8007268 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c44:	e006      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c4c:	e002      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c5c:	4b37      	ldr	r3, [pc, #220]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	4a34      	ldr	r2, [pc, #208]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c70:	e003      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c94:	460b      	mov	r3, r1
 8005c96:	4313      	orrs	r3, r2
 8005c98:	d056      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ca4:	d033      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ca6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005caa:	d82c      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cb0:	d02f      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005cb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cb6:	d826      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cbc:	d02b      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005cbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cc2:	d820      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc8:	d012      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cce:	d81a      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d022      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d115      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	3308      	adds	r3, #8
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 fa0e 	bl	8007104 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cee:	e015      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	3328      	adds	r3, #40	@ 0x28
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 fab5 	bl	8007268 <RCCEx_PLL3_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d04:	e00a      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d32:	4a02      	ldr	r2, [pc, #8]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4313      	orrs	r3, r2
 8005d66:	d055      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d74:	d033      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d7a:	d82c      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d80:	d02f      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d86:	d826      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d8c:	d02b      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d92:	d820      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d98:	d012      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d9e:	d81a      	bhi.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d022      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da8:	d115      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	3308      	adds	r3, #8
 8005db0:	2101      	movs	r1, #1
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 f9a6 	bl	8007104 <RCCEx_PLL2_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dbe:	e015      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	3328      	adds	r3, #40	@ 0x28
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 fa4d 	bl	8007268 <RCCEx_PLL3_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dd4:	e00a      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ddc:	e006      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dde:	bf00      	nop
 8005de0:	e004      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005de2:	bf00      	nop
 8005de4:	e002      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005de6:	bf00      	nop
 8005de8:	e000      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005df4:	4ba3      	ldr	r3, [pc, #652]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e04:	4a9f      	ldr	r2, [pc, #636]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e0a:	e003      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4313      	orrs	r3, r2
 8005e32:	d037      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e3e:	d00e      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e44:	d816      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e4e:	d111      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b8c      	ldr	r3, [pc, #560]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a8b      	ldr	r2, [pc, #556]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f94c 	bl	8007104 <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e86:	4b7f      	ldr	r3, [pc, #508]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	4a7b      	ldr	r2, [pc, #492]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005eba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d039      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d81c      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f11 	.word	0x08005f11
 8005ed8:	08005ee5 	.word	0x08005ee5
 8005edc:	08005ef3 	.word	0x08005ef3
 8005ee0:	08005f11 	.word	0x08005f11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b67      	ldr	r3, [pc, #412]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee8:	4a66      	ldr	r2, [pc, #408]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ef0:	e00f      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	2102      	movs	r1, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f902 	bl	8007104 <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f06:	e004      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	f023 0103 	bic.w	r1, r3, #3
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f28:	4a56      	ldr	r2, [pc, #344]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f000 809f 	beq.w	8006098 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f66:	f7fb fa3b 	bl	80013e0 <HAL_GetTick>
 8005f6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fb fa36 	bl	80013e0 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b64      	cmp	r3, #100	@ 0x64
 8005f7e:	d903      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f88:	4b3f      	ldr	r3, [pc, #252]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0ed      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d179      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f9c:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fa8:	4053      	eors	r3, r2
 8005faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d015      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fb2:	4b34      	ldr	r3, [pc, #208]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fbe:	4b31      	ldr	r3, [pc, #196]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	4a30      	ldr	r2, [pc, #192]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fca:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fea:	d118      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fb f9f8 	bl	80013e0 <HAL_GetTick>
 8005ff0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff4:	e00d      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff6:	f7fb f9f3 	bl	80013e0 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006000:	1ad2      	subs	r2, r2, r3
 8006002:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006006:	429a      	cmp	r2, r3
 8006008:	d903      	bls.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006010:	e005      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006012:	4b1c      	ldr	r3, [pc, #112]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0eb      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	2b00      	cmp	r3, #0
 8006024:	d129      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800602e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006036:	d10e      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006038:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006048:	091a      	lsrs	r2, r3, #4
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800604c:	4013      	ands	r3, r2
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006050:	430b      	orrs	r3, r1
 8006052:	6113      	str	r3, [r2, #16]
 8006054:	e005      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006056:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	4a0a      	ldr	r2, [pc, #40]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006060:	6113      	str	r3, [r2, #16]
 8006062:	4b08      	ldr	r3, [pc, #32]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006064:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800606e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006072:	4a04      	ldr	r2, [pc, #16]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006074:	430b      	orrs	r3, r1
 8006076:	6713      	str	r3, [r2, #112]	@ 0x70
 8006078:	e00e      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006082:	e009      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006084:	58024400 	.word	0x58024400
 8006088:	58024800 	.word	0x58024800
 800608c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f002 0301 	and.w	r3, r2, #1
 80060a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f000 8089 	beq.w	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c0:	2b28      	cmp	r3, #40	@ 0x28
 80060c2:	d86b      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060c4:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080061a5 	.word	0x080061a5
 80060d0:	0800619d 	.word	0x0800619d
 80060d4:	0800619d 	.word	0x0800619d
 80060d8:	0800619d 	.word	0x0800619d
 80060dc:	0800619d 	.word	0x0800619d
 80060e0:	0800619d 	.word	0x0800619d
 80060e4:	0800619d 	.word	0x0800619d
 80060e8:	0800619d 	.word	0x0800619d
 80060ec:	08006171 	.word	0x08006171
 80060f0:	0800619d 	.word	0x0800619d
 80060f4:	0800619d 	.word	0x0800619d
 80060f8:	0800619d 	.word	0x0800619d
 80060fc:	0800619d 	.word	0x0800619d
 8006100:	0800619d 	.word	0x0800619d
 8006104:	0800619d 	.word	0x0800619d
 8006108:	0800619d 	.word	0x0800619d
 800610c:	08006187 	.word	0x08006187
 8006110:	0800619d 	.word	0x0800619d
 8006114:	0800619d 	.word	0x0800619d
 8006118:	0800619d 	.word	0x0800619d
 800611c:	0800619d 	.word	0x0800619d
 8006120:	0800619d 	.word	0x0800619d
 8006124:	0800619d 	.word	0x0800619d
 8006128:	0800619d 	.word	0x0800619d
 800612c:	080061a5 	.word	0x080061a5
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800619d 	.word	0x0800619d
 8006138:	0800619d 	.word	0x0800619d
 800613c:	0800619d 	.word	0x0800619d
 8006140:	0800619d 	.word	0x0800619d
 8006144:	0800619d 	.word	0x0800619d
 8006148:	0800619d 	.word	0x0800619d
 800614c:	080061a5 	.word	0x080061a5
 8006150:	0800619d 	.word	0x0800619d
 8006154:	0800619d 	.word	0x0800619d
 8006158:	0800619d 	.word	0x0800619d
 800615c:	0800619d 	.word	0x0800619d
 8006160:	0800619d 	.word	0x0800619d
 8006164:	0800619d 	.word	0x0800619d
 8006168:	0800619d 	.word	0x0800619d
 800616c:	080061a5 	.word	0x080061a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	3308      	adds	r3, #8
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 ffc3 	bl	8007104 <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006184:	e00f      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	3328      	adds	r3, #40	@ 0x28
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f86a 	bl	8007268 <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80061a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061ae:	4bbf      	ldr	r3, [pc, #764]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061bc:	4abb      	ldr	r2, [pc, #748]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80061c2:	e003      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f002 0302 	and.w	r3, r2, #2
 80061d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d041      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d824      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006215 	.word	0x08006215
 8006204:	0800622b 	.word	0x0800622b
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	3308      	adds	r3, #8
 800621a:	2101      	movs	r1, #1
 800621c:	4618      	mov	r0, r3
 800621e:	f000 ff71 	bl	8007104 <RCCEx_PLL2_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006228:	e00f      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622e:	3328      	adds	r3, #40	@ 0x28
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f818 	bl	8007268 <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006252:	4b96      	ldr	r3, [pc, #600]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006256:	f023 0107 	bic.w	r1, r3, #7
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006260:	4a92      	ldr	r2, [pc, #584]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006262:	430b      	orrs	r3, r1
 8006264:	6553      	str	r3, [r2, #84]	@ 0x54
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f002 0304 	and.w	r3, r2, #4
 800627c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006286:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800628a:	460b      	mov	r3, r1
 800628c:	4313      	orrs	r3, r2
 800628e:	d044      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006298:	2b05      	cmp	r3, #5
 800629a:	d825      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800629c:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062bd 	.word	0x080062bd
 80062ac:	080062d3 	.word	0x080062d3
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f1 	.word	0x080062f1
 80062b8:	080062f1 	.word	0x080062f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c0:	3308      	adds	r3, #8
 80062c2:	2101      	movs	r1, #1
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 ff1d 	bl	8007104 <RCCEx_PLL2_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062d0:	e00f      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d6:	3328      	adds	r3, #40	@ 0x28
 80062d8:	2101      	movs	r1, #1
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ffc4 	bl	8007268 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062e6:	e004      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062fa:	4b6c      	ldr	r3, [pc, #432]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	f023 0107 	bic.w	r1, r3, #7
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630a:	4a68      	ldr	r2, [pc, #416]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800630c:	430b      	orrs	r3, r1
 800630e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 0320 	and.w	r3, r2, #32
 8006326:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800632a:	2300      	movs	r3, #0
 800632c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d055      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006346:	d033      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800634c:	d82c      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006352:	d02f      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006358:	d826      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800635a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800635e:	d02b      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006360:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006364:	d820      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636a:	d012      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800636c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006370:	d81a      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d022      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800637a:	d115      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	3308      	adds	r3, #8
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f000 febd 	bl	8007104 <RCCEx_PLL2_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006390:	e015      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	3328      	adds	r3, #40	@ 0x28
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 ff64 	bl	8007268 <RCCEx_PLL3_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063a6:	e00a      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ae:	e006      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063b0:	bf00      	nop
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063b4:	bf00      	nop
 80063b6:	e002      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c6:	4b39      	ldr	r3, [pc, #228]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	4a35      	ldr	r2, [pc, #212]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	6553      	str	r3, [r2, #84]	@ 0x54
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d058      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800640e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006412:	d033      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006414:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006418:	d82c      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641e:	d02f      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006424:	d826      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006426:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800642a:	d02b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800642c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006430:	d820      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006436:	d012      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d81a      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d022      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006446:	d115      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	3308      	adds	r3, #8
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fe57 	bl	8007104 <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800645c:	e015      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	3328      	adds	r3, #40	@ 0x28
 8006464:	2102      	movs	r1, #2
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fefe 	bl	8007268 <RCCEx_PLL3_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006472:	e00a      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800647a:	e006      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800647c:	bf00      	nop
 800647e:	e004      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006480:	bf00      	nop
 8006482:	e002      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10e      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006492:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006496:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064a2:	4a02      	ldr	r2, [pc, #8]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80064a8:	e006      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064aa:	bf00      	nop
 80064ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80064c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d055      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064e4:	d033      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064ea:	d82c      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064f0:	d02f      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064f6:	d826      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064fc:	d02b      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80064fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006502:	d820      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006504:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006508:	d012      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800650a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800650e:	d81a      	bhi.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d022      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006518:	d115      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	3308      	adds	r3, #8
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fdee 	bl	8007104 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800652e:	e015      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	3328      	adds	r3, #40	@ 0x28
 8006536:	2102      	movs	r1, #2
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fe95 	bl	8007268 <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006544:	e00a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800654c:	e006      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800654e:	bf00      	nop
 8006550:	e004      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006552:	bf00      	nop
 8006554:	e002      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800655a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006564:	4ba1      	ldr	r3, [pc, #644]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006574:	4a9d      	ldr	r2, [pc, #628]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006576:	430b      	orrs	r3, r1
 8006578:	6593      	str	r3, [r2, #88]	@ 0x58
 800657a:	e003      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 0308 	and.w	r3, r2, #8
 8006590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800659a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d01e      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b0:	d10c      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	3328      	adds	r3, #40	@ 0x28
 80065b8:	2102      	movs	r1, #2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fe54 	bl	8007268 <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065cc:	4b87      	ldr	r3, [pc, #540]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065dc:	4a83      	ldr	r2, [pc, #524]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f002 0310 	and.w	r3, r2, #16
 80065ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80065fc:	460b      	mov	r3, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	d01e      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d10c      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	3328      	adds	r3, #40	@ 0x28
 8006616:	2102      	movs	r1, #2
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fe25 	bl	8007268 <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800662a:	4b70      	ldr	r3, [pc, #448]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800663a:	4a6c      	ldr	r2, [pc, #432]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800664c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006656:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d03e      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800666c:	d022      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800666e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006672:	d81b      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800667c:	d00b      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800667e:	e015      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	3308      	adds	r3, #8
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fd3b 	bl	8007104 <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006694:	e00f      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	3328      	adds	r3, #40	@ 0x28
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fde2 	bl	8007268 <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066aa:	e004      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b2:	e000      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80066b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066be:	4b4b      	ldr	r3, [pc, #300]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ce:	4a47      	ldr	r2, [pc, #284]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066ec:	2300      	movs	r3, #0
 80066ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d03b      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006706:	d01f      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800670c:	d818      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800670e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006718:	d007      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800671a:	e011      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4b33      	ldr	r3, [pc, #204]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4a32      	ldr	r2, [pc, #200]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006728:	e00f      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	3328      	adds	r3, #40	@ 0x28
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fd98 	bl	8007268 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800673e:	e004      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006752:	4b26      	ldr	r3, [pc, #152]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006762:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6553      	str	r3, [r2, #84]	@ 0x54
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800677e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006780:	2300      	movs	r3, #0
 8006782:	677b      	str	r3, [r7, #116]	@ 0x74
 8006784:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006788:	460b      	mov	r3, r1
 800678a:	4313      	orrs	r3, r2
 800678c:	d034      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679c:	d007      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800679e:	e011      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a0:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a11      	ldr	r2, [pc, #68]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067ac:	e00e      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	3308      	adds	r3, #8
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fca4 	bl	8007104 <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067c2:	e003      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10d      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e2:	4a02      	ldr	r2, [pc, #8]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067ea:	bf00      	nop
 80067ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006806:	2300      	movs	r3, #0
 8006808:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800680a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d00c      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	3328      	adds	r3, #40	@ 0x28
 800681a:	2102      	movs	r1, #2
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fd23 	bl	8007268 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800683a:	663b      	str	r3, [r7, #96]	@ 0x60
 800683c:	2300      	movs	r3, #0
 800683e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006840:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d038      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006856:	d018      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800685c:	d811      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800685e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006862:	d014      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006868:	d80b      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d106      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006874:	4bc3      	ldr	r3, [pc, #780]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006878:	4ac2      	ldr	r2, [pc, #776]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006880:	e008      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006888:	e004      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800689c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ac:	4ab5      	ldr	r2, [pc, #724]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80068c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068ca:	2300      	movs	r3, #0
 80068cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d009      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068d8:	4baa      	ldr	r3, [pc, #680]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e6:	4aa7      	ldr	r2, [pc, #668]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068fa:	2300      	movs	r3, #0
 80068fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80068fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006908:	4b9e      	ldr	r3, [pc, #632]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006918:	4a9a      	ldr	r2, [pc, #616]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800691a:	430b      	orrs	r3, r1
 800691c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800692a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800692c:	2300      	movs	r3, #0
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006930:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800693a:	4b92      	ldr	r3, [pc, #584]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006948:	4a8e      	ldr	r2, [pc, #568]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800694a:	430b      	orrs	r3, r1
 800694c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800695a:	643b      	str	r3, [r7, #64]	@ 0x40
 800695c:	2300      	movs	r3, #0
 800695e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006960:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006964:	460b      	mov	r3, r1
 8006966:	4313      	orrs	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800696a:	4b86      	ldr	r3, [pc, #536]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	4a85      	ldr	r2, [pc, #532]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006970:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006974:	6113      	str	r3, [r2, #16]
 8006976:	4b83      	ldr	r3, [pc, #524]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006978:	6919      	ldr	r1, [r3, #16]
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006982:	4a80      	ldr	r2, [pc, #512]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006996:	2300      	movs	r3, #0
 8006998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800699a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800699e:	460b      	mov	r3, r1
 80069a0:	4313      	orrs	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069a4:	4b77      	ldr	r3, [pc, #476]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b2:	4a74      	ldr	r2, [pc, #464]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b4:	430b      	orrs	r3, r1
 80069b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80069ce:	460b      	mov	r3, r1
 80069d0:	4313      	orrs	r3, r2
 80069d2:	d00a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e4:	4a67      	ldr	r2, [pc, #412]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	2100      	movs	r1, #0
 80069f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a00:	460b      	mov	r3, r1
 8006a02:	4313      	orrs	r3, r2
 8006a04:	d011      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fb78 	bl	8007104 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	2100      	movs	r1, #0
 8006a34:	6239      	str	r1, [r7, #32]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d011      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fb58 	bl	8007104 <RCCEx_PLL2_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	2100      	movs	r1, #0
 8006a74:	61b9      	str	r1, [r7, #24]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a80:	460b      	mov	r3, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	d011      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fb38 	bl	8007104 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	6139      	str	r1, [r7, #16]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d011      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	3328      	adds	r3, #40	@ 0x28
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fbca 	bl	8007268 <RCCEx_PLL3_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	2100      	movs	r1, #0
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b00:	460b      	mov	r3, r1
 8006b02:	4313      	orrs	r3, r2
 8006b04:	d011      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0a:	3328      	adds	r3, #40	@ 0x28
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fbaa 	bl	8007268 <RCCEx_PLL3_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	2100      	movs	r1, #0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d011      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fb8a 	bl	8007268 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006b6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b84:	58024400 	.word	0x58024400

08006b88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b8c:	f7fe fd96 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4904      	ldr	r1, [pc, #16]	@ (8006bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	08009d68 	.word	0x08009d68

08006bb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b089      	sub	sp, #36	@ 0x24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	0b1b      	lsrs	r3, r3, #12
 8006bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006bde:	4b99      	ldr	r3, [pc, #612]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8111 	beq.w	8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	f000 8083 	beq.w	8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	f200 80a1 	bhi.w	8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d056      	beq.n	8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c1e:	e099      	b.n	8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c20:	4b88      	ldr	r3, [pc, #544]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d02d      	beq.n	8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c2c:	4b85      	ldr	r3, [pc, #532]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	08db      	lsrs	r3, r3, #3
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	4a84      	ldr	r2, [pc, #528]	@ (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	ee07 3a90 	vmov	s15, r3
 8006c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c56:	4b7b      	ldr	r3, [pc, #492]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c86:	e087      	b.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cca:	e065      	b.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cde:	4b59      	ldr	r3, [pc, #356]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d0e:	e043      	b.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d22:	4b48      	ldr	r3, [pc, #288]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d52:	e021      	b.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d66:	4b37      	ldr	r3, [pc, #220]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d98:	4b2a      	ldr	r3, [pc, #168]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	0a5b      	lsrs	r3, r3, #9
 8006d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dbe:	ee17 2a90 	vmov	r2, s15
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dca:	0c1b      	lsrs	r3, r3, #16
 8006dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dec:	ee17 2a90 	vmov	r2, s15
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006df4:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	0e1b      	lsrs	r3, r3, #24
 8006dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1a:	ee17 2a90 	vmov	r2, s15
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e22:	e008      	b.n	8006e36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3724      	adds	r7, #36	@ 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	58024400 	.word	0x58024400
 8006e48:	03d09000 	.word	0x03d09000
 8006e4c:	46000000 	.word	0x46000000
 8006e50:	4c742400 	.word	0x4c742400
 8006e54:	4a742400 	.word	0x4a742400
 8006e58:	4af42400 	.word	0x4af42400

08006e5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	@ 0x24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e64:	4ba1      	ldr	r3, [pc, #644]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e6e:	4b9f      	ldr	r3, [pc, #636]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	0d1b      	lsrs	r3, r3, #20
 8006e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e86:	4b99      	ldr	r3, [pc, #612]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8111 	beq.w	80070cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	f000 8083 	beq.w	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	f200 80a1 	bhi.w	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d056      	beq.n	8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ec6:	e099      	b.n	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec8:	4b88      	ldr	r3, [pc, #544]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d02d      	beq.n	8006f30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed4:	4b85      	ldr	r3, [pc, #532]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	4a84      	ldr	r2, [pc, #528]	@ (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efe:	4b7b      	ldr	r3, [pc, #492]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f2e:	e087      	b.n	8007040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f42:	4b6a      	ldr	r3, [pc, #424]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f72:	e065      	b.n	8007040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f86:	4b59      	ldr	r3, [pc, #356]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb6:	e043      	b.n	8007040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fca:	4b48      	ldr	r3, [pc, #288]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ffa:	e021      	b.n	8007040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b37      	ldr	r3, [pc, #220]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007022:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007040:	4b2a      	ldr	r3, [pc, #168]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800705a:	edd7 6a07 	vldr	s13, [r7, #28]
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800706e:	4b1f      	ldr	r3, [pc, #124]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007088:	edd7 6a07 	vldr	s13, [r7, #28]
 800708c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007094:	ee17 2a90 	vmov	r2, s15
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800709c:	4b13      	ldr	r3, [pc, #76]	@ (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a0:	0e1b      	lsrs	r3, r3, #24
 80070a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c2:	ee17 2a90 	vmov	r2, s15
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070ca:	e008      	b.n	80070de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
}
 80070de:	bf00      	nop
 80070e0:	3724      	adds	r7, #36	@ 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	58024400 	.word	0x58024400
 80070f0:	03d09000 	.word	0x03d09000
 80070f4:	46000000 	.word	0x46000000
 80070f8:	4c742400 	.word	0x4c742400
 80070fc:	4a742400 	.word	0x4a742400
 8007100:	4af42400 	.word	0x4af42400

08007104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007112:	4b53      	ldr	r3, [pc, #332]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d101      	bne.n	8007122 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e099      	b.n	8007256 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007122:	4b4f      	ldr	r3, [pc, #316]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a4e      	ldr	r2, [pc, #312]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007128:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800712c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712e:	f7fa f957 	bl	80013e0 <HAL_GetTick>
 8007132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007134:	e008      	b.n	8007148 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007136:	f7fa f953 	bl	80013e0 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e086      	b.n	8007256 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007148:	4b45      	ldr	r3, [pc, #276]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007154:	4b42      	ldr	r3, [pc, #264]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007158:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	031b      	lsls	r3, r3, #12
 8007162:	493f      	ldr	r1, [pc, #252]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007164:	4313      	orrs	r3, r2
 8007166:	628b      	str	r3, [r1, #40]	@ 0x28
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	3b01      	subs	r3, #1
 800716e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	3b01      	subs	r3, #1
 8007178:	025b      	lsls	r3, r3, #9
 800717a:	b29b      	uxth	r3, r3
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	3b01      	subs	r3, #1
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	3b01      	subs	r3, #1
 8007192:	061b      	lsls	r3, r3, #24
 8007194:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007198:	4931      	ldr	r1, [pc, #196]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800719e:	4b30      	ldr	r3, [pc, #192]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	492d      	ldr	r1, [pc, #180]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	f023 0220 	bic.w	r2, r3, #32
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	4928      	ldr	r1, [pc, #160]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071c2:	4b27      	ldr	r3, [pc, #156]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	4a26      	ldr	r2, [pc, #152]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071c8:	f023 0310 	bic.w	r3, r3, #16
 80071cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071ce:	4b24      	ldr	r3, [pc, #144]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071d2:	4b24      	ldr	r3, [pc, #144]	@ (8007264 <RCCEx_PLL2_Config+0x160>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	69d2      	ldr	r2, [r2, #28]
 80071da:	00d2      	lsls	r2, r2, #3
 80071dc:	4920      	ldr	r1, [pc, #128]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071e8:	f043 0310 	orr.w	r3, r3, #16
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	4a19      	ldr	r2, [pc, #100]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 80071fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007200:	e00f      	b.n	8007222 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007208:	4b15      	ldr	r3, [pc, #84]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	4a14      	ldr	r2, [pc, #80]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800720e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007212:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007214:	e005      	b.n	8007222 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007216:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800721c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007220:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007222:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a0e      	ldr	r2, [pc, #56]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 8007228:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800722c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722e:	f7fa f8d7 	bl	80013e0 <HAL_GetTick>
 8007232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007234:	e008      	b.n	8007248 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007236:	f7fa f8d3 	bl	80013e0 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007248:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <RCCEx_PLL2_Config+0x15c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0f0      	beq.n	8007236 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
 8007264:	ffff0007 	.word	0xffff0007

08007268 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007276:	4b53      	ldr	r3, [pc, #332]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d101      	bne.n	8007286 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e099      	b.n	80073ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007286:	4b4f      	ldr	r3, [pc, #316]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a4e      	ldr	r2, [pc, #312]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800728c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007292:	f7fa f8a5 	bl	80013e0 <HAL_GetTick>
 8007296:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007298:	e008      	b.n	80072ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800729a:	f7fa f8a1 	bl	80013e0 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e086      	b.n	80073ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ac:	4b45      	ldr	r3, [pc, #276]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f0      	bne.n	800729a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072b8:	4b42      	ldr	r3, [pc, #264]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	493f      	ldr	r1, [pc, #252]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	025b      	lsls	r3, r3, #9
 80072de:	b29b      	uxth	r3, r3
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	041b      	lsls	r3, r3, #16
 80072ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	061b      	lsls	r3, r3, #24
 80072f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072fc:	4931      	ldr	r1, [pc, #196]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007302:	4b30      	ldr	r3, [pc, #192]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	492d      	ldr	r1, [pc, #180]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007314:	4b2b      	ldr	r3, [pc, #172]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007318:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	4928      	ldr	r1, [pc, #160]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007326:	4b27      	ldr	r3, [pc, #156]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	4a26      	ldr	r2, [pc, #152]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800732c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007330:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007336:	4b24      	ldr	r3, [pc, #144]	@ (80073c8 <RCCEx_PLL3_Config+0x160>)
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	69d2      	ldr	r2, [r2, #28]
 800733e:	00d2      	lsls	r2, r2, #3
 8007340:	4920      	ldr	r1, [pc, #128]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007342:	4313      	orrs	r3, r2
 8007344:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007346:	4b1f      	ldr	r3, [pc, #124]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	4a1e      	ldr	r2, [pc, #120]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800734c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d106      	bne.n	8007366 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007358:	4b1a      	ldr	r3, [pc, #104]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	4a19      	ldr	r2, [pc, #100]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800735e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007362:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007364:	e00f      	b.n	8007386 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d106      	bne.n	800737a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800736c:	4b15      	ldr	r3, [pc, #84]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	4a14      	ldr	r2, [pc, #80]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007372:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007378:	e005      	b.n	8007386 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800737a:	4b12      	ldr	r3, [pc, #72]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4a11      	ldr	r2, [pc, #68]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007380:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007384:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007386:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a0e      	ldr	r2, [pc, #56]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 800738c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007392:	f7fa f825 	bl	80013e0 <HAL_GetTick>
 8007396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007398:	e008      	b.n	80073ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800739a:	f7fa f821 	bl	80013e0 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e006      	b.n	80073ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <RCCEx_PLL3_Config+0x15c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f0      	beq.n	800739a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	58024400 	.word	0x58024400
 80073c8:	ffff0007 	.word	0xffff0007

080073cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e049      	b.n	8007472 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7f9 fd7a 	bl	8000eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f000 fc60 	bl	8007cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	bf0c      	ite	eq
 80074a0:	2301      	moveq	r3, #1
 80074a2:	2300      	movne	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	e03c      	b.n	8007522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d109      	bne.n	80074c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	e02f      	b.n	8007522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d109      	bne.n	80074dc <HAL_TIM_PWM_Start_DMA+0x60>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	bf0c      	ite	eq
 80074d4:	2301      	moveq	r3, #1
 80074d6:	2300      	movne	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	e022      	b.n	8007522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b0c      	cmp	r3, #12
 80074e0:	d109      	bne.n	80074f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	bf0c      	ite	eq
 80074ee:	2301      	moveq	r3, #1
 80074f0:	2300      	movne	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	e015      	b.n	8007522 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d109      	bne.n	8007510 <HAL_TIM_PWM_Start_DMA+0x94>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	bf0c      	ite	eq
 8007508:	2301      	moveq	r3, #1
 800750a:	2300      	movne	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	e008      	b.n	8007522 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007526:	2302      	movs	r3, #2
 8007528:	e1b0      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	e03c      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x142>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b04      	cmp	r3, #4
 8007548:	d109      	bne.n	800755e <HAL_TIM_PWM_Start_DMA+0xe2>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b01      	cmp	r3, #1
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	e02f      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x142>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d109      	bne.n	8007578 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e022      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x142>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d109      	bne.n	8007592 <HAL_TIM_PWM_Start_DMA+0x116>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	e015      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x142>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b10      	cmp	r3, #16
 8007596:	d109      	bne.n	80075ac <HAL_TIM_PWM_Start_DMA+0x130>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	bf0c      	ite	eq
 80075a4:	2301      	moveq	r3, #1
 80075a6:	2300      	movne	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	e008      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x142>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d034      	beq.n	800762c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_TIM_PWM_Start_DMA+0x152>
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e15c      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start_DMA+0x166>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e0:	e026      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start_DMA+0x176>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075f0:	e01e      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_PWM_Start_DMA+0x186>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007600:	e016      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b0c      	cmp	r3, #12
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Start_DMA+0x196>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007610:	e00e      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b10      	cmp	r3, #16
 8007616:	d104      	bne.n	8007622 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007620:	e006      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800762a:	e001      	b.n	8007630 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e12d      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b0c      	cmp	r3, #12
 8007634:	f200 80ae 	bhi.w	8007794 <HAL_TIM_PWM_Start_DMA+0x318>
 8007638:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007675 	.word	0x08007675
 8007644:	08007795 	.word	0x08007795
 8007648:	08007795 	.word	0x08007795
 800764c:	08007795 	.word	0x08007795
 8007650:	080076bd 	.word	0x080076bd
 8007654:	08007795 	.word	0x08007795
 8007658:	08007795 	.word	0x08007795
 800765c:	08007795 	.word	0x08007795
 8007660:	08007705 	.word	0x08007705
 8007664:	08007795 	.word	0x08007795
 8007668:	08007795 	.word	0x08007795
 800766c:	08007795 	.word	0x08007795
 8007670:	0800774d 	.word	0x0800774d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007678:	4a86      	ldr	r2, [pc, #536]	@ (8007894 <HAL_TIM_PWM_Start_DMA+0x418>)
 800767a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007680:	4a85      	ldr	r2, [pc, #532]	@ (8007898 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007682:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	4a84      	ldr	r2, [pc, #528]	@ (800789c <HAL_TIM_PWM_Start_DMA+0x420>)
 800768a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3334      	adds	r3, #52	@ 0x34
 8007698:	461a      	mov	r2, r3
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	f7fa fb5c 	bl	8001d58 <HAL_DMA_Start_IT>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0f0      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076b8:	60da      	str	r2, [r3, #12]
      break;
 80076ba:	e06e      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	4a74      	ldr	r2, [pc, #464]	@ (8007894 <HAL_TIM_PWM_Start_DMA+0x418>)
 80076c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c8:	4a73      	ldr	r2, [pc, #460]	@ (8007898 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80076ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d0:	4a72      	ldr	r2, [pc, #456]	@ (800789c <HAL_TIM_PWM_Start_DMA+0x420>)
 80076d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80076d8:	6879      	ldr	r1, [r7, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3338      	adds	r3, #56	@ 0x38
 80076e0:	461a      	mov	r2, r3
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	f7fa fb38 	bl	8001d58 <HAL_DMA_Start_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e0cc      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007700:	60da      	str	r2, [r3, #12]
      break;
 8007702:	e04a      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	4a62      	ldr	r2, [pc, #392]	@ (8007894 <HAL_TIM_PWM_Start_DMA+0x418>)
 800770a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4a61      	ldr	r2, [pc, #388]	@ (8007898 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007712:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a60      	ldr	r2, [pc, #384]	@ (800789c <HAL_TIM_PWM_Start_DMA+0x420>)
 800771a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	333c      	adds	r3, #60	@ 0x3c
 8007728:	461a      	mov	r2, r3
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	f7fa fb14 	bl	8001d58 <HAL_DMA_Start_IT>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e0a8      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007748:	60da      	str	r2, [r3, #12]
      break;
 800774a:	e026      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007750:	4a50      	ldr	r2, [pc, #320]	@ (8007894 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007752:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	4a4f      	ldr	r2, [pc, #316]	@ (8007898 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800775a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007760:	4a4e      	ldr	r2, [pc, #312]	@ (800789c <HAL_TIM_PWM_Start_DMA+0x420>)
 8007762:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3340      	adds	r3, #64	@ 0x40
 8007770:	461a      	mov	r2, r3
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	f7fa faf0 	bl	8001d58 <HAL_DMA_Start_IT>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e084      	b.n	800788c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007790:	60da      	str	r2, [r3, #12]
      break;
 8007792:	e002      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
      break;
 8007798:	bf00      	nop
  }

  if (status == HAL_OK)
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d174      	bne.n	800788a <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2201      	movs	r2, #1
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fe0d 	bl	80083c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3b      	ldr	r2, [pc, #236]	@ (80078a0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d013      	beq.n	80077e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a39      	ldr	r2, [pc, #228]	@ (80078a4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00e      	beq.n	80077e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a38      	ldr	r2, [pc, #224]	@ (80078a8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d009      	beq.n	80077e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a36      	ldr	r2, [pc, #216]	@ (80078ac <HAL_TIM_PWM_Start_DMA+0x430>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a35      	ldr	r2, [pc, #212]	@ (80078b0 <HAL_TIM_PWM_Start_DMA+0x434>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_PWM_Start_DMA+0x368>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e000      	b.n	80077e6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80077e4:	2300      	movs	r3, #0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a28      	ldr	r2, [pc, #160]	@ (80078a0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d022      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780c:	d01d      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a28      	ldr	r2, [pc, #160]	@ (80078b4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a26      	ldr	r2, [pc, #152]	@ (80078b8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a25      	ldr	r2, [pc, #148]	@ (80078bc <HAL_TIM_PWM_Start_DMA+0x440>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00e      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1c      	ldr	r2, [pc, #112]	@ (80078a4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a21      	ldr	r2, [pc, #132]	@ (80078c0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a18      	ldr	r2, [pc, #96]	@ (80078a8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d115      	bne.n	8007876 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007852:	4013      	ands	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b06      	cmp	r3, #6
 800785a:	d015      	beq.n	8007888 <HAL_TIM_PWM_Start_DMA+0x40c>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007862:	d011      	beq.n	8007888 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007874:	e008      	b.n	8007888 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0201 	orr.w	r2, r2, #1
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e000      	b.n	800788a <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007888:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08007bbf 	.word	0x08007bbf
 8007898:	08007c67 	.word	0x08007c67
 800789c:	08007b2d 	.word	0x08007b2d
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40010400 	.word	0x40010400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	40000c00 	.word	0x40000c00
 80078c0:	40001800 	.word	0x40001800
 80078c4:	00010007 	.word	0x00010007

080078c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e0ff      	b.n	8007ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b14      	cmp	r3, #20
 80078f2:	f200 80f0 	bhi.w	8007ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078f6:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007951 	.word	0x08007951
 8007900:	08007ad7 	.word	0x08007ad7
 8007904:	08007ad7 	.word	0x08007ad7
 8007908:	08007ad7 	.word	0x08007ad7
 800790c:	08007991 	.word	0x08007991
 8007910:	08007ad7 	.word	0x08007ad7
 8007914:	08007ad7 	.word	0x08007ad7
 8007918:	08007ad7 	.word	0x08007ad7
 800791c:	080079d3 	.word	0x080079d3
 8007920:	08007ad7 	.word	0x08007ad7
 8007924:	08007ad7 	.word	0x08007ad7
 8007928:	08007ad7 	.word	0x08007ad7
 800792c:	08007a13 	.word	0x08007a13
 8007930:	08007ad7 	.word	0x08007ad7
 8007934:	08007ad7 	.word	0x08007ad7
 8007938:	08007ad7 	.word	0x08007ad7
 800793c:	08007a55 	.word	0x08007a55
 8007940:	08007ad7 	.word	0x08007ad7
 8007944:	08007ad7 	.word	0x08007ad7
 8007948:	08007ad7 	.word	0x08007ad7
 800794c:	08007a95 	.word	0x08007a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fa60 	bl	8007e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0208 	orr.w	r2, r2, #8
 800796a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0204 	bic.w	r2, r2, #4
 800797a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6999      	ldr	r1, [r3, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	619a      	str	r2, [r3, #24]
      break;
 800798e:	e0a5      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fad0 	bl	8007f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	021a      	lsls	r2, r3, #8
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	619a      	str	r2, [r3, #24]
      break;
 80079d0:	e084      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fb39 	bl	8008050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0208 	orr.w	r2, r2, #8
 80079ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0204 	bic.w	r2, r2, #4
 80079fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69d9      	ldr	r1, [r3, #28]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	61da      	str	r2, [r3, #28]
      break;
 8007a10:	e064      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fba1 	bl	8008160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69d9      	ldr	r1, [r3, #28]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	021a      	lsls	r2, r3, #8
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	61da      	str	r2, [r3, #28]
      break;
 8007a52:	e043      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fbea 	bl	8008234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0208 	orr.w	r2, r2, #8
 8007a6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0204 	bic.w	r2, r2, #4
 8007a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a92:	e023      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fc2e 	bl	80082fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007abe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	021a      	lsls	r2, r3, #8
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ad4:	e002      	b.n	8007adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d107      	bne.n	8007b54 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b52:	e02a      	b.n	8007baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d107      	bne.n	8007b6e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2202      	movs	r2, #2
 8007b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b6c:	e01d      	b.n	8007baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d107      	bne.n	8007b88 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b86:	e010      	b.n	8007baa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d107      	bne.n	8007ba2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2208      	movs	r2, #8
 8007b96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ba0:	e003      	b.n	8007baa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff ffb4 	bl	8007b18 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	771a      	strb	r2, [r3, #28]
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d10b      	bne.n	8007bee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d136      	bne.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bec:	e031      	b.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d10b      	bne.n	8007c10 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d125      	bne.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c0e:	e020      	b.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d10b      	bne.n	8007c32 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d114      	bne.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c30:	e00f      	b.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d10a      	bne.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff ff4c 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	771a      	strb	r2, [r3, #28]
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d103      	bne.n	8007c86 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	771a      	strb	r2, [r3, #28]
 8007c84:	e019      	b.n	8007cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d103      	bne.n	8007c98 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2202      	movs	r2, #2
 8007c94:	771a      	strb	r2, [r3, #28]
 8007c96:	e010      	b.n	8007cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d103      	bne.n	8007caa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	771a      	strb	r2, [r3, #28]
 8007ca8:	e007      	b.n	8007cba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d102      	bne.n	8007cba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff22 	bl	8007b04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	771a      	strb	r2, [r3, #28]
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a46      	ldr	r2, [pc, #280]	@ (8007dfc <TIM_Base_SetConfig+0x12c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d013      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cee:	d00f      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a43      	ldr	r2, [pc, #268]	@ (8007e00 <TIM_Base_SetConfig+0x130>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00b      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a42      	ldr	r2, [pc, #264]	@ (8007e04 <TIM_Base_SetConfig+0x134>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d007      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a41      	ldr	r2, [pc, #260]	@ (8007e08 <TIM_Base_SetConfig+0x138>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d003      	beq.n	8007d10 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a40      	ldr	r2, [pc, #256]	@ (8007e0c <TIM_Base_SetConfig+0x13c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d108      	bne.n	8007d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a35      	ldr	r2, [pc, #212]	@ (8007dfc <TIM_Base_SetConfig+0x12c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01f      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a32      	ldr	r2, [pc, #200]	@ (8007e00 <TIM_Base_SetConfig+0x130>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a31      	ldr	r2, [pc, #196]	@ (8007e04 <TIM_Base_SetConfig+0x134>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a30      	ldr	r2, [pc, #192]	@ (8007e08 <TIM_Base_SetConfig+0x138>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8007e0c <TIM_Base_SetConfig+0x13c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a2e      	ldr	r2, [pc, #184]	@ (8007e10 <TIM_Base_SetConfig+0x140>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007e14 <TIM_Base_SetConfig+0x144>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0x9a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2c      	ldr	r2, [pc, #176]	@ (8007e18 <TIM_Base_SetConfig+0x148>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a16      	ldr	r2, [pc, #88]	@ (8007dfc <TIM_Base_SetConfig+0x12c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00f      	beq.n	8007dc8 <TIM_Base_SetConfig+0xf8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a18      	ldr	r2, [pc, #96]	@ (8007e0c <TIM_Base_SetConfig+0x13c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00b      	beq.n	8007dc8 <TIM_Base_SetConfig+0xf8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a17      	ldr	r2, [pc, #92]	@ (8007e10 <TIM_Base_SetConfig+0x140>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_Base_SetConfig+0xf8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a16      	ldr	r2, [pc, #88]	@ (8007e14 <TIM_Base_SetConfig+0x144>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_Base_SetConfig+0xf8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <TIM_Base_SetConfig+0x148>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d103      	bne.n	8007dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d105      	bne.n	8007dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f023 0201 	bic.w	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	611a      	str	r2, [r3, #16]
  }
}
 8007dee:	bf00      	nop
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40000400 	.word	0x40000400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40000c00 	.word	0x40000c00
 8007e0c:	40010400 	.word	0x40010400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400
 8007e18:	40014800 	.word	0x40014800

08007e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f023 0201 	bic.w	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4b37      	ldr	r3, [pc, #220]	@ (8007f24 <TIM_OC1_SetConfig+0x108>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f023 0302 	bic.w	r3, r3, #2
 8007e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a2d      	ldr	r2, [pc, #180]	@ (8007f28 <TIM_OC1_SetConfig+0x10c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00f      	beq.n	8007e98 <TIM_OC1_SetConfig+0x7c>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f2c <TIM_OC1_SetConfig+0x110>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <TIM_OC1_SetConfig+0x7c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a2b      	ldr	r2, [pc, #172]	@ (8007f30 <TIM_OC1_SetConfig+0x114>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d007      	beq.n	8007e98 <TIM_OC1_SetConfig+0x7c>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007f34 <TIM_OC1_SetConfig+0x118>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d003      	beq.n	8007e98 <TIM_OC1_SetConfig+0x7c>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a29      	ldr	r2, [pc, #164]	@ (8007f38 <TIM_OC1_SetConfig+0x11c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10c      	bne.n	8007eb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0308 	bic.w	r3, r3, #8
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f023 0304 	bic.w	r3, r3, #4
 8007eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f28 <TIM_OC1_SetConfig+0x10c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00f      	beq.n	8007eda <TIM_OC1_SetConfig+0xbe>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f2c <TIM_OC1_SetConfig+0x110>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00b      	beq.n	8007eda <TIM_OC1_SetConfig+0xbe>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f30 <TIM_OC1_SetConfig+0x114>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <TIM_OC1_SetConfig+0xbe>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a19      	ldr	r2, [pc, #100]	@ (8007f34 <TIM_OC1_SetConfig+0x118>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_OC1_SetConfig+0xbe>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a18      	ldr	r2, [pc, #96]	@ (8007f38 <TIM_OC1_SetConfig+0x11c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	fffeff8f 	.word	0xfffeff8f
 8007f28:	40010000 	.word	0x40010000
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800

08007f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	f023 0210 	bic.w	r2, r3, #16
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4b34      	ldr	r3, [pc, #208]	@ (8008038 <TIM_OC2_SetConfig+0xfc>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 0320 	bic.w	r3, r3, #32
 8007f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a29      	ldr	r2, [pc, #164]	@ (800803c <TIM_OC2_SetConfig+0x100>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_OC2_SetConfig+0x68>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a28      	ldr	r2, [pc, #160]	@ (8008040 <TIM_OC2_SetConfig+0x104>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d10d      	bne.n	8007fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800803c <TIM_OC2_SetConfig+0x100>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00f      	beq.n	8007fe8 <TIM_OC2_SetConfig+0xac>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a1d      	ldr	r2, [pc, #116]	@ (8008040 <TIM_OC2_SetConfig+0x104>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00b      	beq.n	8007fe8 <TIM_OC2_SetConfig+0xac>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008044 <TIM_OC2_SetConfig+0x108>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_OC2_SetConfig+0xac>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a1b      	ldr	r2, [pc, #108]	@ (8008048 <TIM_OC2_SetConfig+0x10c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_OC2_SetConfig+0xac>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800804c <TIM_OC2_SetConfig+0x110>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d113      	bne.n	8008010 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	feff8fff 	.word	0xfeff8fff
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b33      	ldr	r3, [pc, #204]	@ (8008148 <TIM_OC3_SetConfig+0xf8>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a28      	ldr	r2, [pc, #160]	@ (800814c <TIM_OC3_SetConfig+0xfc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_OC3_SetConfig+0x66>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a27      	ldr	r2, [pc, #156]	@ (8008150 <TIM_OC3_SetConfig+0x100>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10d      	bne.n	80080d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a1d      	ldr	r2, [pc, #116]	@ (800814c <TIM_OC3_SetConfig+0xfc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00f      	beq.n	80080fa <TIM_OC3_SetConfig+0xaa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <TIM_OC3_SetConfig+0x100>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00b      	beq.n	80080fa <TIM_OC3_SetConfig+0xaa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <TIM_OC3_SetConfig+0x104>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d007      	beq.n	80080fa <TIM_OC3_SetConfig+0xaa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008158 <TIM_OC3_SetConfig+0x108>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d003      	beq.n	80080fa <TIM_OC3_SetConfig+0xaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a19      	ldr	r2, [pc, #100]	@ (800815c <TIM_OC3_SetConfig+0x10c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d113      	bne.n	8008122 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	fffeff8f 	.word	0xfffeff8f
 800814c:	40010000 	.word	0x40010000
 8008150:	40010400 	.word	0x40010400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800

08008160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4b24      	ldr	r3, [pc, #144]	@ (800821c <TIM_OC4_SetConfig+0xbc>)
 800818c:	4013      	ands	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	031b      	lsls	r3, r3, #12
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a19      	ldr	r2, [pc, #100]	@ (8008220 <TIM_OC4_SetConfig+0xc0>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00f      	beq.n	80081e0 <TIM_OC4_SetConfig+0x80>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a18      	ldr	r2, [pc, #96]	@ (8008224 <TIM_OC4_SetConfig+0xc4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00b      	beq.n	80081e0 <TIM_OC4_SetConfig+0x80>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a17      	ldr	r2, [pc, #92]	@ (8008228 <TIM_OC4_SetConfig+0xc8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d007      	beq.n	80081e0 <TIM_OC4_SetConfig+0x80>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a16      	ldr	r2, [pc, #88]	@ (800822c <TIM_OC4_SetConfig+0xcc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_OC4_SetConfig+0x80>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a15      	ldr	r2, [pc, #84]	@ (8008230 <TIM_OC4_SetConfig+0xd0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d109      	bne.n	80081f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	019b      	lsls	r3, r3, #6
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	621a      	str	r2, [r3, #32]
}
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	feff8fff 	.word	0xfeff8fff
 8008220:	40010000 	.word	0x40010000
 8008224:	40010400 	.word	0x40010400
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800

08008234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4b21      	ldr	r3, [pc, #132]	@ (80082e4 <TIM_OC5_SetConfig+0xb0>)
 8008260:	4013      	ands	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008274:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	041b      	lsls	r3, r3, #16
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4313      	orrs	r3, r2
 8008280:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a18      	ldr	r2, [pc, #96]	@ (80082e8 <TIM_OC5_SetConfig+0xb4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <TIM_OC5_SetConfig+0x76>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a17      	ldr	r2, [pc, #92]	@ (80082ec <TIM_OC5_SetConfig+0xb8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00b      	beq.n	80082aa <TIM_OC5_SetConfig+0x76>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a16      	ldr	r2, [pc, #88]	@ (80082f0 <TIM_OC5_SetConfig+0xbc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <TIM_OC5_SetConfig+0x76>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a15      	ldr	r2, [pc, #84]	@ (80082f4 <TIM_OC5_SetConfig+0xc0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_OC5_SetConfig+0x76>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a14      	ldr	r2, [pc, #80]	@ (80082f8 <TIM_OC5_SetConfig+0xc4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d109      	bne.n	80082be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	021b      	lsls	r3, r3, #8
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	fffeff8f 	.word	0xfffeff8f
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010400 	.word	0x40010400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800

080082fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4b22      	ldr	r3, [pc, #136]	@ (80083b0 <TIM_OC6_SetConfig+0xb4>)
 8008328:	4013      	ands	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800833e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	051b      	lsls	r3, r3, #20
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a19      	ldr	r2, [pc, #100]	@ (80083b4 <TIM_OC6_SetConfig+0xb8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00f      	beq.n	8008374 <TIM_OC6_SetConfig+0x78>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a18      	ldr	r2, [pc, #96]	@ (80083b8 <TIM_OC6_SetConfig+0xbc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00b      	beq.n	8008374 <TIM_OC6_SetConfig+0x78>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a17      	ldr	r2, [pc, #92]	@ (80083bc <TIM_OC6_SetConfig+0xc0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d007      	beq.n	8008374 <TIM_OC6_SetConfig+0x78>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a16      	ldr	r2, [pc, #88]	@ (80083c0 <TIM_OC6_SetConfig+0xc4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d003      	beq.n	8008374 <TIM_OC6_SetConfig+0x78>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a15      	ldr	r2, [pc, #84]	@ (80083c4 <TIM_OC6_SetConfig+0xc8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d109      	bne.n	8008388 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800837a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	029b      	lsls	r3, r3, #10
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	feff8fff 	.word	0xfeff8fff
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40010400 	.word	0x40010400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40014400 	.word	0x40014400
 80083c4:	40014800 	.word	0x40014800

080083c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2201      	movs	r2, #1
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a1a      	ldr	r2, [r3, #32]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	401a      	ands	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a1a      	ldr	r2, [r3, #32]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	431a      	orrs	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008428:	2302      	movs	r3, #2
 800842a:	e06d      	b.n	8008508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a30      	ldr	r2, [pc, #192]	@ (8008514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d004      	beq.n	8008460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a2f      	ldr	r2, [pc, #188]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d108      	bne.n	8008472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a20      	ldr	r2, [pc, #128]	@ (8008514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d022      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849e:	d01d      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1d      	ldr	r2, [pc, #116]	@ (800851c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d018      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00e      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a15      	ldr	r2, [pc, #84]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a16      	ldr	r2, [pc, #88]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a15      	ldr	r2, [pc, #84]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d10c      	bne.n	80084f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	40010000 	.word	0x40010000
 8008518:	40010400 	.word	0x40010400
 800851c:	40000400 	.word	0x40000400
 8008520:	40000800 	.word	0x40000800
 8008524:	40000c00 	.word	0x40000c00
 8008528:	40001800 	.word	0x40001800
 800852c:	40014000 	.word	0x40014000

08008530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e042      	b.n	80085c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7f8 fd63 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2224      	movs	r2, #36	@ 0x24
 800855e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fd90 	bl	80090a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f825 	bl	80085d0 <UART_SetConfig>
 8008586:	4603      	mov	r3, r0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e01b      	b.n	80085c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800859e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fe0f 	bl	80091e4 <UART_CheckIdleState>
 80085c6:	4603      	mov	r3, r0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d4:	b092      	sub	sp, #72	@ 0x48
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4bbe      	ldr	r3, [pc, #760]	@ (80088f8 <UART_SetConfig+0x328>)
 8008600:	4013      	ands	r3, r2
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008608:	430b      	orrs	r3, r1
 800860a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4ab3      	ldr	r2, [pc, #716]	@ (80088fc <UART_SetConfig+0x32c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d004      	beq.n	800863c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008638:	4313      	orrs	r3, r2
 800863a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	4baf      	ldr	r3, [pc, #700]	@ (8008900 <UART_SetConfig+0x330>)
 8008644:	4013      	ands	r3, r2
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800864c:	430b      	orrs	r3, r1
 800864e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008656:	f023 010f 	bic.w	r1, r3, #15
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4aa6      	ldr	r2, [pc, #664]	@ (8008904 <UART_SetConfig+0x334>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d177      	bne.n	8008760 <UART_SetConfig+0x190>
 8008670:	4ba5      	ldr	r3, [pc, #660]	@ (8008908 <UART_SetConfig+0x338>)
 8008672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008674:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008678:	2b28      	cmp	r3, #40	@ 0x28
 800867a:	d86d      	bhi.n	8008758 <UART_SetConfig+0x188>
 800867c:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <UART_SetConfig+0xb4>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	08008729 	.word	0x08008729
 8008688:	08008759 	.word	0x08008759
 800868c:	08008759 	.word	0x08008759
 8008690:	08008759 	.word	0x08008759
 8008694:	08008759 	.word	0x08008759
 8008698:	08008759 	.word	0x08008759
 800869c:	08008759 	.word	0x08008759
 80086a0:	08008759 	.word	0x08008759
 80086a4:	08008731 	.word	0x08008731
 80086a8:	08008759 	.word	0x08008759
 80086ac:	08008759 	.word	0x08008759
 80086b0:	08008759 	.word	0x08008759
 80086b4:	08008759 	.word	0x08008759
 80086b8:	08008759 	.word	0x08008759
 80086bc:	08008759 	.word	0x08008759
 80086c0:	08008759 	.word	0x08008759
 80086c4:	08008739 	.word	0x08008739
 80086c8:	08008759 	.word	0x08008759
 80086cc:	08008759 	.word	0x08008759
 80086d0:	08008759 	.word	0x08008759
 80086d4:	08008759 	.word	0x08008759
 80086d8:	08008759 	.word	0x08008759
 80086dc:	08008759 	.word	0x08008759
 80086e0:	08008759 	.word	0x08008759
 80086e4:	08008741 	.word	0x08008741
 80086e8:	08008759 	.word	0x08008759
 80086ec:	08008759 	.word	0x08008759
 80086f0:	08008759 	.word	0x08008759
 80086f4:	08008759 	.word	0x08008759
 80086f8:	08008759 	.word	0x08008759
 80086fc:	08008759 	.word	0x08008759
 8008700:	08008759 	.word	0x08008759
 8008704:	08008749 	.word	0x08008749
 8008708:	08008759 	.word	0x08008759
 800870c:	08008759 	.word	0x08008759
 8008710:	08008759 	.word	0x08008759
 8008714:	08008759 	.word	0x08008759
 8008718:	08008759 	.word	0x08008759
 800871c:	08008759 	.word	0x08008759
 8008720:	08008759 	.word	0x08008759
 8008724:	08008751 	.word	0x08008751
 8008728:	2301      	movs	r3, #1
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e222      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008730:	2304      	movs	r3, #4
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e21e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008738:	2308      	movs	r3, #8
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e21a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008740:	2310      	movs	r3, #16
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e216      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008748:	2320      	movs	r3, #32
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e212      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008750:	2340      	movs	r3, #64	@ 0x40
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e20e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e20a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a69      	ldr	r2, [pc, #420]	@ (800890c <UART_SetConfig+0x33c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d130      	bne.n	80087cc <UART_SetConfig+0x1fc>
 800876a:	4b67      	ldr	r3, [pc, #412]	@ (8008908 <UART_SetConfig+0x338>)
 800876c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	2b05      	cmp	r3, #5
 8008774:	d826      	bhi.n	80087c4 <UART_SetConfig+0x1f4>
 8008776:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <UART_SetConfig+0x1ac>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	08008795 	.word	0x08008795
 8008780:	0800879d 	.word	0x0800879d
 8008784:	080087a5 	.word	0x080087a5
 8008788:	080087ad 	.word	0x080087ad
 800878c:	080087b5 	.word	0x080087b5
 8008790:	080087bd 	.word	0x080087bd
 8008794:	2300      	movs	r3, #0
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e1ec      	b.n	8008b76 <UART_SetConfig+0x5a6>
 800879c:	2304      	movs	r3, #4
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e1e8      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087a4:	2308      	movs	r3, #8
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e1e4      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e1e0      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087b4:	2320      	movs	r3, #32
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e1dc      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087bc:	2340      	movs	r3, #64	@ 0x40
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e1d8      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e1d4      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a4f      	ldr	r2, [pc, #316]	@ (8008910 <UART_SetConfig+0x340>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d130      	bne.n	8008838 <UART_SetConfig+0x268>
 80087d6:	4b4c      	ldr	r3, [pc, #304]	@ (8008908 <UART_SetConfig+0x338>)
 80087d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	2b05      	cmp	r3, #5
 80087e0:	d826      	bhi.n	8008830 <UART_SetConfig+0x260>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <UART_SetConfig+0x218>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008801 	.word	0x08008801
 80087ec:	08008809 	.word	0x08008809
 80087f0:	08008811 	.word	0x08008811
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008821 	.word	0x08008821
 80087fc:	08008829 	.word	0x08008829
 8008800:	2300      	movs	r3, #0
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e1b6      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e1b2      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e1ae      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e1aa      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008820:	2320      	movs	r3, #32
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e1a6      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008828:	2340      	movs	r3, #64	@ 0x40
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882e:	e1a2      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008830:	2380      	movs	r3, #128	@ 0x80
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008836:	e19e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a35      	ldr	r2, [pc, #212]	@ (8008914 <UART_SetConfig+0x344>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d130      	bne.n	80088a4 <UART_SetConfig+0x2d4>
 8008842:	4b31      	ldr	r3, [pc, #196]	@ (8008908 <UART_SetConfig+0x338>)
 8008844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	2b05      	cmp	r3, #5
 800884c:	d826      	bhi.n	800889c <UART_SetConfig+0x2cc>
 800884e:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <UART_SetConfig+0x284>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	0800886d 	.word	0x0800886d
 8008858:	08008875 	.word	0x08008875
 800885c:	0800887d 	.word	0x0800887d
 8008860:	08008885 	.word	0x08008885
 8008864:	0800888d 	.word	0x0800888d
 8008868:	08008895 	.word	0x08008895
 800886c:	2300      	movs	r3, #0
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e180      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e17c      	b.n	8008b76 <UART_SetConfig+0x5a6>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e178      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e174      	b.n	8008b76 <UART_SetConfig+0x5a6>
 800888c:	2320      	movs	r3, #32
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e170      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008894:	2340      	movs	r3, #64	@ 0x40
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e16c      	b.n	8008b76 <UART_SetConfig+0x5a6>
 800889c:	2380      	movs	r3, #128	@ 0x80
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a2:	e168      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008918 <UART_SetConfig+0x348>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d142      	bne.n	8008934 <UART_SetConfig+0x364>
 80088ae:	4b16      	ldr	r3, [pc, #88]	@ (8008908 <UART_SetConfig+0x338>)
 80088b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d838      	bhi.n	800892c <UART_SetConfig+0x35c>
 80088ba:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <UART_SetConfig+0x2f0>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088d9 	.word	0x080088d9
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	0800891d 	.word	0x0800891d
 80088d4:	08008925 	.word	0x08008925
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e14a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e146      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e142      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e13e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80088f8:	cfff69f3 	.word	0xcfff69f3
 80088fc:	58000c00 	.word	0x58000c00
 8008900:	11fff4ff 	.word	0x11fff4ff
 8008904:	40011000 	.word	0x40011000
 8008908:	58024400 	.word	0x58024400
 800890c:	40004400 	.word	0x40004400
 8008910:	40004800 	.word	0x40004800
 8008914:	40004c00 	.word	0x40004c00
 8008918:	40005000 	.word	0x40005000
 800891c:	2320      	movs	r3, #32
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e128      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008924:	2340      	movs	r3, #64	@ 0x40
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e124      	b.n	8008b76 <UART_SetConfig+0x5a6>
 800892c:	2380      	movs	r3, #128	@ 0x80
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e120      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4acb      	ldr	r2, [pc, #812]	@ (8008c68 <UART_SetConfig+0x698>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d176      	bne.n	8008a2c <UART_SetConfig+0x45c>
 800893e:	4bcb      	ldr	r3, [pc, #812]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008946:	2b28      	cmp	r3, #40	@ 0x28
 8008948:	d86c      	bhi.n	8008a24 <UART_SetConfig+0x454>
 800894a:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <UART_SetConfig+0x380>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	080089f5 	.word	0x080089f5
 8008954:	08008a25 	.word	0x08008a25
 8008958:	08008a25 	.word	0x08008a25
 800895c:	08008a25 	.word	0x08008a25
 8008960:	08008a25 	.word	0x08008a25
 8008964:	08008a25 	.word	0x08008a25
 8008968:	08008a25 	.word	0x08008a25
 800896c:	08008a25 	.word	0x08008a25
 8008970:	080089fd 	.word	0x080089fd
 8008974:	08008a25 	.word	0x08008a25
 8008978:	08008a25 	.word	0x08008a25
 800897c:	08008a25 	.word	0x08008a25
 8008980:	08008a25 	.word	0x08008a25
 8008984:	08008a25 	.word	0x08008a25
 8008988:	08008a25 	.word	0x08008a25
 800898c:	08008a25 	.word	0x08008a25
 8008990:	08008a05 	.word	0x08008a05
 8008994:	08008a25 	.word	0x08008a25
 8008998:	08008a25 	.word	0x08008a25
 800899c:	08008a25 	.word	0x08008a25
 80089a0:	08008a25 	.word	0x08008a25
 80089a4:	08008a25 	.word	0x08008a25
 80089a8:	08008a25 	.word	0x08008a25
 80089ac:	08008a25 	.word	0x08008a25
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a25 	.word	0x08008a25
 80089b8:	08008a25 	.word	0x08008a25
 80089bc:	08008a25 	.word	0x08008a25
 80089c0:	08008a25 	.word	0x08008a25
 80089c4:	08008a25 	.word	0x08008a25
 80089c8:	08008a25 	.word	0x08008a25
 80089cc:	08008a25 	.word	0x08008a25
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a25 	.word	0x08008a25
 80089d8:	08008a25 	.word	0x08008a25
 80089dc:	08008a25 	.word	0x08008a25
 80089e0:	08008a25 	.word	0x08008a25
 80089e4:	08008a25 	.word	0x08008a25
 80089e8:	08008a25 	.word	0x08008a25
 80089ec:	08008a25 	.word	0x08008a25
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e0bc      	b.n	8008b76 <UART_SetConfig+0x5a6>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e0b8      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e0b4      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e0b0      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a14:	2320      	movs	r3, #32
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e0ac      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e0a8      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a24:	2380      	movs	r3, #128	@ 0x80
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e0a4      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a8f      	ldr	r2, [pc, #572]	@ (8008c70 <UART_SetConfig+0x6a0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d130      	bne.n	8008a98 <UART_SetConfig+0x4c8>
 8008a36:	4b8d      	ldr	r3, [pc, #564]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d826      	bhi.n	8008a90 <UART_SetConfig+0x4c0>
 8008a42:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <UART_SetConfig+0x478>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a71 	.word	0x08008a71
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e086      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e082      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e07e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e07a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a80:	2320      	movs	r3, #32
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e076      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a88:	2340      	movs	r3, #64	@ 0x40
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e072      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a90:	2380      	movs	r3, #128	@ 0x80
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e06e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a75      	ldr	r2, [pc, #468]	@ (8008c74 <UART_SetConfig+0x6a4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d130      	bne.n	8008b04 <UART_SetConfig+0x534>
 8008aa2:	4b72      	ldr	r3, [pc, #456]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d826      	bhi.n	8008afc <UART_SetConfig+0x52c>
 8008aae:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <UART_SetConfig+0x4e4>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008acd 	.word	0x08008acd
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008add 	.word	0x08008add
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008aed 	.word	0x08008aed
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e050      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e04c      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e048      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e044      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008aec:	2320      	movs	r3, #32
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e040      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008af4:	2340      	movs	r3, #64	@ 0x40
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e03c      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008afc:	2380      	movs	r3, #128	@ 0x80
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e038      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a5b      	ldr	r2, [pc, #364]	@ (8008c78 <UART_SetConfig+0x6a8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d130      	bne.n	8008b70 <UART_SetConfig+0x5a0>
 8008b0e:	4b57      	ldr	r3, [pc, #348]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d826      	bhi.n	8008b68 <UART_SetConfig+0x598>
 8008b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <UART_SetConfig+0x550>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2302      	movs	r3, #2
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e01a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e016      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e012      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e00e      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e00a      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b60:	2340      	movs	r3, #64	@ 0x40
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e006      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b68:	2380      	movs	r3, #128	@ 0x80
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e002      	b.n	8008b76 <UART_SetConfig+0x5a6>
 8008b70:	2380      	movs	r3, #128	@ 0x80
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c78 <UART_SetConfig+0x6a8>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	f040 80f8 	bne.w	8008d72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	dc46      	bgt.n	8008c18 <UART_SetConfig+0x648>
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	f2c0 8082 	blt.w	8008c94 <UART_SetConfig+0x6c4>
 8008b90:	3b02      	subs	r3, #2
 8008b92:	2b1e      	cmp	r3, #30
 8008b94:	d87e      	bhi.n	8008c94 <UART_SetConfig+0x6c4>
 8008b96:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <UART_SetConfig+0x5cc>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008c1f 	.word	0x08008c1f
 8008ba0:	08008c95 	.word	0x08008c95
 8008ba4:	08008c27 	.word	0x08008c27
 8008ba8:	08008c95 	.word	0x08008c95
 8008bac:	08008c95 	.word	0x08008c95
 8008bb0:	08008c95 	.word	0x08008c95
 8008bb4:	08008c37 	.word	0x08008c37
 8008bb8:	08008c95 	.word	0x08008c95
 8008bbc:	08008c95 	.word	0x08008c95
 8008bc0:	08008c95 	.word	0x08008c95
 8008bc4:	08008c95 	.word	0x08008c95
 8008bc8:	08008c95 	.word	0x08008c95
 8008bcc:	08008c95 	.word	0x08008c95
 8008bd0:	08008c95 	.word	0x08008c95
 8008bd4:	08008c47 	.word	0x08008c47
 8008bd8:	08008c95 	.word	0x08008c95
 8008bdc:	08008c95 	.word	0x08008c95
 8008be0:	08008c95 	.word	0x08008c95
 8008be4:	08008c95 	.word	0x08008c95
 8008be8:	08008c95 	.word	0x08008c95
 8008bec:	08008c95 	.word	0x08008c95
 8008bf0:	08008c95 	.word	0x08008c95
 8008bf4:	08008c95 	.word	0x08008c95
 8008bf8:	08008c95 	.word	0x08008c95
 8008bfc:	08008c95 	.word	0x08008c95
 8008c00:	08008c95 	.word	0x08008c95
 8008c04:	08008c95 	.word	0x08008c95
 8008c08:	08008c95 	.word	0x08008c95
 8008c0c:	08008c95 	.word	0x08008c95
 8008c10:	08008c95 	.word	0x08008c95
 8008c14:	08008c87 	.word	0x08008c87
 8008c18:	2b40      	cmp	r3, #64	@ 0x40
 8008c1a:	d037      	beq.n	8008c8c <UART_SetConfig+0x6bc>
 8008c1c:	e03a      	b.n	8008c94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c1e:	f7fd ffb3 	bl	8006b88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c24:	e03c      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fd ffc2 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c34:	e034      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c36:	f107 0318 	add.w	r3, r7, #24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe f90e 	bl	8006e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c44:	e02c      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c46:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d016      	beq.n	8008c80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <UART_SetConfig+0x69c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	08db      	lsrs	r3, r3, #3
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	4a07      	ldr	r2, [pc, #28]	@ (8008c7c <UART_SetConfig+0x6ac>)
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c64:	e01c      	b.n	8008ca0 <UART_SetConfig+0x6d0>
 8008c66:	bf00      	nop
 8008c68:	40011400 	.word	0x40011400
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	40007800 	.word	0x40007800
 8008c74:	40007c00 	.word	0x40007c00
 8008c78:	58000c00 	.word	0x58000c00
 8008c7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b9d      	ldr	r3, [pc, #628]	@ (8008ef8 <UART_SetConfig+0x928>)
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c84:	e00c      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c86:	4b9d      	ldr	r3, [pc, #628]	@ (8008efc <UART_SetConfig+0x92c>)
 8008c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8a:	e009      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c92:	e005      	b.n	8008ca0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 81de 	beq.w	8009064 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	4a94      	ldr	r2, [pc, #592]	@ (8008f00 <UART_SetConfig+0x930>)
 8008cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d305      	bcc.n	8008cd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d903      	bls.n	8008ce0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cde:	e1c1      	b.n	8009064 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	60fa      	str	r2, [r7, #12]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	4a84      	ldr	r2, [pc, #528]	@ (8008f00 <UART_SetConfig+0x930>)
 8008cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d02:	f7f7 fae9 	bl	80002d8 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	020b      	lsls	r3, r1, #8
 8008d18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d1c:	0202      	lsls	r2, r0, #8
 8008d1e:	6979      	ldr	r1, [r7, #20]
 8008d20:	6849      	ldr	r1, [r1, #4]
 8008d22:	0849      	lsrs	r1, r1, #1
 8008d24:	2000      	movs	r0, #0
 8008d26:	460c      	mov	r4, r1
 8008d28:	4605      	mov	r5, r0
 8008d2a:	eb12 0804 	adds.w	r8, r2, r4
 8008d2e:	eb43 0905 	adc.w	r9, r3, r5
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	469a      	mov	sl, r3
 8008d3a:	4693      	mov	fp, r2
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	465b      	mov	r3, fp
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fac8 	bl	80002d8 <__aeabi_uldivmod>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d56:	d308      	bcc.n	8008d6a <UART_SetConfig+0x79a>
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d5e:	d204      	bcs.n	8008d6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d66:	60da      	str	r2, [r3, #12]
 8008d68:	e17c      	b.n	8009064 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d70:	e178      	b.n	8009064 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d7a:	f040 80c5 	bne.w	8008f08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	dc48      	bgt.n	8008e18 <UART_SetConfig+0x848>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	db7b      	blt.n	8008e82 <UART_SetConfig+0x8b2>
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d879      	bhi.n	8008e82 <UART_SetConfig+0x8b2>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <UART_SetConfig+0x7c4>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008e1f 	.word	0x08008e1f
 8008d98:	08008e27 	.word	0x08008e27
 8008d9c:	08008e83 	.word	0x08008e83
 8008da0:	08008e83 	.word	0x08008e83
 8008da4:	08008e2f 	.word	0x08008e2f
 8008da8:	08008e83 	.word	0x08008e83
 8008dac:	08008e83 	.word	0x08008e83
 8008db0:	08008e83 	.word	0x08008e83
 8008db4:	08008e3f 	.word	0x08008e3f
 8008db8:	08008e83 	.word	0x08008e83
 8008dbc:	08008e83 	.word	0x08008e83
 8008dc0:	08008e83 	.word	0x08008e83
 8008dc4:	08008e83 	.word	0x08008e83
 8008dc8:	08008e83 	.word	0x08008e83
 8008dcc:	08008e83 	.word	0x08008e83
 8008dd0:	08008e83 	.word	0x08008e83
 8008dd4:	08008e4f 	.word	0x08008e4f
 8008dd8:	08008e83 	.word	0x08008e83
 8008ddc:	08008e83 	.word	0x08008e83
 8008de0:	08008e83 	.word	0x08008e83
 8008de4:	08008e83 	.word	0x08008e83
 8008de8:	08008e83 	.word	0x08008e83
 8008dec:	08008e83 	.word	0x08008e83
 8008df0:	08008e83 	.word	0x08008e83
 8008df4:	08008e83 	.word	0x08008e83
 8008df8:	08008e83 	.word	0x08008e83
 8008dfc:	08008e83 	.word	0x08008e83
 8008e00:	08008e83 	.word	0x08008e83
 8008e04:	08008e83 	.word	0x08008e83
 8008e08:	08008e83 	.word	0x08008e83
 8008e0c:	08008e83 	.word	0x08008e83
 8008e10:	08008e83 	.word	0x08008e83
 8008e14:	08008e75 	.word	0x08008e75
 8008e18:	2b40      	cmp	r3, #64	@ 0x40
 8008e1a:	d02e      	beq.n	8008e7a <UART_SetConfig+0x8aa>
 8008e1c:	e031      	b.n	8008e82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e1e:	f7fc fc7d 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8008e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e24:	e033      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e26:	f7fc fc8f 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 8008e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e2c:	e02f      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd febe 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e3c:	e027      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3e:	f107 0318 	add.w	r3, r7, #24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe f80a 	bl	8006e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4c:	e01f      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f04 <UART_SetConfig+0x934>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8008f04 <UART_SetConfig+0x934>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	08db      	lsrs	r3, r3, #3
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	4a24      	ldr	r2, [pc, #144]	@ (8008ef8 <UART_SetConfig+0x928>)
 8008e66:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e6c:	e00f      	b.n	8008e8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e6e:	4b22      	ldr	r3, [pc, #136]	@ (8008ef8 <UART_SetConfig+0x928>)
 8008e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e72:	e00c      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e74:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <UART_SetConfig+0x92c>)
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e78:	e009      	b.n	8008e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e80:	e005      	b.n	8008e8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80e7 	beq.w	8009064 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	4a19      	ldr	r2, [pc, #100]	@ (8008f00 <UART_SetConfig+0x930>)
 8008e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ea8:	005a      	lsls	r2, r3, #1
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	441a      	add	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	2b0f      	cmp	r3, #15
 8008ec0:	d916      	bls.n	8008ef0 <UART_SetConfig+0x920>
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec8:	d212      	bcs.n	8008ef0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f023 030f 	bic.w	r3, r3, #15
 8008ed2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	e0b9      	b.n	8009064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ef6:	e0b5      	b.n	8009064 <UART_SetConfig+0xa94>
 8008ef8:	03d09000 	.word	0x03d09000
 8008efc:	003d0900 	.word	0x003d0900
 8008f00:	08009d80 	.word	0x08009d80
 8008f04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	dc49      	bgt.n	8008fa4 <UART_SetConfig+0x9d4>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	db7c      	blt.n	800900e <UART_SetConfig+0xa3e>
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d87a      	bhi.n	800900e <UART_SetConfig+0xa3e>
 8008f18:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x950>)
 8008f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1e:	bf00      	nop
 8008f20:	08008fab 	.word	0x08008fab
 8008f24:	08008fb3 	.word	0x08008fb3
 8008f28:	0800900f 	.word	0x0800900f
 8008f2c:	0800900f 	.word	0x0800900f
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	0800900f 	.word	0x0800900f
 8008f38:	0800900f 	.word	0x0800900f
 8008f3c:	0800900f 	.word	0x0800900f
 8008f40:	08008fcb 	.word	0x08008fcb
 8008f44:	0800900f 	.word	0x0800900f
 8008f48:	0800900f 	.word	0x0800900f
 8008f4c:	0800900f 	.word	0x0800900f
 8008f50:	0800900f 	.word	0x0800900f
 8008f54:	0800900f 	.word	0x0800900f
 8008f58:	0800900f 	.word	0x0800900f
 8008f5c:	0800900f 	.word	0x0800900f
 8008f60:	08008fdb 	.word	0x08008fdb
 8008f64:	0800900f 	.word	0x0800900f
 8008f68:	0800900f 	.word	0x0800900f
 8008f6c:	0800900f 	.word	0x0800900f
 8008f70:	0800900f 	.word	0x0800900f
 8008f74:	0800900f 	.word	0x0800900f
 8008f78:	0800900f 	.word	0x0800900f
 8008f7c:	0800900f 	.word	0x0800900f
 8008f80:	0800900f 	.word	0x0800900f
 8008f84:	0800900f 	.word	0x0800900f
 8008f88:	0800900f 	.word	0x0800900f
 8008f8c:	0800900f 	.word	0x0800900f
 8008f90:	0800900f 	.word	0x0800900f
 8008f94:	0800900f 	.word	0x0800900f
 8008f98:	0800900f 	.word	0x0800900f
 8008f9c:	0800900f 	.word	0x0800900f
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d02e      	beq.n	8009006 <UART_SetConfig+0xa36>
 8008fa8:	e031      	b.n	800900e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008faa:	f7fc fbb7 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 8008fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb0:	e033      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fb2:	f7fc fbc9 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 8008fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb8:	e02f      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fd fdf8 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e027      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fca:	f107 0318 	add.w	r3, r7, #24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fd ff44 	bl	8006e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd8:	e01f      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fda:	4b2d      	ldr	r3, [pc, #180]	@ (8009090 <UART_SetConfig+0xac0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8009090 <UART_SetConfig+0xac0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	4a28      	ldr	r2, [pc, #160]	@ (8009094 <UART_SetConfig+0xac4>)
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ff8:	e00f      	b.n	800901a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008ffa:	4b26      	ldr	r3, [pc, #152]	@ (8009094 <UART_SetConfig+0xac4>)
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffe:	e00c      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009000:	4b25      	ldr	r3, [pc, #148]	@ (8009098 <UART_SetConfig+0xac8>)
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009004:	e009      	b.n	800901a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e005      	b.n	800901a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009018:	bf00      	nop
    }

    if (pclk != 0U)
 800901a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d021      	beq.n	8009064 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	4a1d      	ldr	r2, [pc, #116]	@ (800909c <UART_SetConfig+0xacc>)
 8009026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800902a:	461a      	mov	r2, r3
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	441a      	add	r2, r3
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009042:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d909      	bls.n	800905e <UART_SetConfig+0xa8e>
 800904a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009050:	d205      	bcs.n	800905e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	b29a      	uxth	r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60da      	str	r2, [r3, #12]
 800905c:	e002      	b.n	8009064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2201      	movs	r2, #1
 8009068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2201      	movs	r2, #1
 8009070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2200      	movs	r2, #0
 8009078:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2200      	movs	r2, #0
 800907e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009080:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009084:	4618      	mov	r0, r3
 8009086:	3748      	adds	r7, #72	@ 0x48
 8009088:	46bd      	mov	sp, r7
 800908a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800908e:	bf00      	nop
 8009090:	58024400 	.word	0x58024400
 8009094:	03d09000 	.word	0x03d09000
 8009098:	003d0900 	.word	0x003d0900
 800909c:	08009d80 	.word	0x08009d80

080090a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ac:	f003 0308 	and.w	r3, r3, #8
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01a      	beq.n	80091b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800919e:	d10a      	bne.n	80091b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	605a      	str	r2, [r3, #4]
  }
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b098      	sub	sp, #96	@ 0x60
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091f4:	f7f8 f8f4 	bl	80013e0 <HAL_GetTick>
 80091f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b08      	cmp	r3, #8
 8009206:	d12f      	bne.n	8009268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009210:	2200      	movs	r2, #0
 8009212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f88e 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d022      	beq.n	8009268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009236:	653b      	str	r3, [r7, #80]	@ 0x50
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009240:	647b      	str	r3, [r7, #68]	@ 0x44
 8009242:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800924e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e6      	bne.n	8009222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e063      	b.n	8009330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b04      	cmp	r3, #4
 8009274:	d149      	bne.n	800930a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800927e:	2200      	movs	r2, #0
 8009280:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f857 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d03c      	beq.n	800930a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	623b      	str	r3, [r7, #32]
   return(result);
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80092b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e2:	61fa      	str	r2, [r7, #28]
 80092e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	69b9      	ldr	r1, [r7, #24]
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	617b      	str	r3, [r7, #20]
   return(result);
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e5      	bne.n	80092c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e012      	b.n	8009330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3758      	adds	r7, #88	@ 0x58
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009348:	e04f      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009350:	d04b      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009352:	f7f8 f845 	bl	80013e0 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	429a      	cmp	r2, r3
 8009360:	d302      	bcc.n	8009368 <UART_WaitOnFlagUntilTimeout+0x30>
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e04e      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d037      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b80      	cmp	r3, #128	@ 0x80
 800937e:	d034      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b40      	cmp	r3, #64	@ 0x40
 8009384:	d031      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b08      	cmp	r3, #8
 8009392:	d110      	bne.n	80093b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2208      	movs	r2, #8
 800939a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f839 	bl	8009414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2208      	movs	r2, #8
 80093a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e029      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c4:	d111      	bne.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f81f 	bl	8009414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e00f      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4013      	ands	r3, r2
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	bf0c      	ite	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	2300      	movne	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	429a      	cmp	r2, r3
 8009406:	d0a0      	beq.n	800934a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b095      	sub	sp, #84	@ 0x54
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800943a:	643b      	str	r3, [r7, #64]	@ 0x40
 800943c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009440:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	61fb      	str	r3, [r7, #28]
   return(result);
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	4b1e      	ldr	r3, [pc, #120]	@ (80094dc <UART_EndRxTransfer+0xc8>)
 8009462:	4013      	ands	r3, r2
 8009464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800946e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d118      	bne.n	80094bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	60bb      	str	r3, [r7, #8]
   return(result);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f023 0310 	bic.w	r3, r3, #16
 800949e:	647b      	str	r3, [r7, #68]	@ 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094a8:	61bb      	str	r3, [r7, #24]
 80094aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	6979      	ldr	r1, [r7, #20]
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	613b      	str	r3, [r7, #16]
   return(result);
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e6      	bne.n	800948a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2220      	movs	r2, #32
 80094c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094d0:	bf00      	nop
 80094d2:	3754      	adds	r7, #84	@ 0x54
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	effffffe 	.word	0xeffffffe

080094e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e027      	b.n	8009546 <HAL_UARTEx_DisableFifoMode+0x66>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	@ 0x24
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009524:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009566:	2302      	movs	r3, #2
 8009568:	e02d      	b.n	80095c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2224      	movs	r2, #36	@ 0x24
 8009576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0201 	bic.w	r2, r2, #1
 8009590:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f850 	bl	800964c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e02d      	b.n	8009642 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2224      	movs	r2, #36	@ 0x24
 80095f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f022 0201 	bic.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f812 	bl	800964c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009658:	2b00      	cmp	r3, #0
 800965a:	d108      	bne.n	800966e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800966c:	e031      	b.n	80096d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800966e:	2310      	movs	r3, #16
 8009670:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009672:	2310      	movs	r3, #16
 8009674:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	0e5b      	lsrs	r3, r3, #25
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	0f5b      	lsrs	r3, r3, #29
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	7b3a      	ldrb	r2, [r7, #12]
 800969a:	4911      	ldr	r1, [pc, #68]	@ (80096e0 <UARTEx_SetNbDataToProcess+0x94>)
 800969c:	5c8a      	ldrb	r2, [r1, r2]
 800969e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096a2:	7b3a      	ldrb	r2, [r7, #12]
 80096a4:	490f      	ldr	r1, [pc, #60]	@ (80096e4 <UARTEx_SetNbDataToProcess+0x98>)
 80096a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	7b7a      	ldrb	r2, [r7, #13]
 80096b8:	4909      	ldr	r1, [pc, #36]	@ (80096e0 <UARTEx_SetNbDataToProcess+0x94>)
 80096ba:	5c8a      	ldrb	r2, [r1, r2]
 80096bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096c0:	7b7a      	ldrb	r2, [r7, #13]
 80096c2:	4908      	ldr	r1, [pc, #32]	@ (80096e4 <UARTEx_SetNbDataToProcess+0x98>)
 80096c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096d2:	bf00      	nop
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	08009d98 	.word	0x08009d98
 80096e4:	08009da0 	.word	0x08009da0

080096e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096e8:	b084      	sub	sp, #16
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	f107 001c 	add.w	r0, r7, #28
 80096f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d121      	bne.n	8009746 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009706:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	4b2c      	ldr	r3, [pc, #176]	@ (80097c4 <USB_CoreInit+0xdc>)
 8009714:	4013      	ands	r3, r2
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800972a:	2b01      	cmp	r3, #1
 800972c:	d105      	bne.n	800973a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 faaa 	bl	8009c94 <USB_CoreReset>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
 8009744:	e01b      	b.n	800977e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fa9e 	bl	8009c94 <USB_CoreReset>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800975c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009760:	2b00      	cmp	r3, #0
 8009762:	d106      	bne.n	8009772 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009770:	e005      	b.n	800977e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800977e:	7fbb      	ldrb	r3, [r7, #30]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d116      	bne.n	80097b2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009792:	4b0d      	ldr	r3, [pc, #52]	@ (80097c8 <USB_CoreInit+0xe0>)
 8009794:	4313      	orrs	r3, r2
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f043 0206 	orr.w	r2, r3, #6
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f043 0220 	orr.w	r2, r3, #32
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097be:	b004      	add	sp, #16
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	ffbdffbf 	.word	0xffbdffbf
 80097c8:	03ee0000 	.word	0x03ee0000

080097cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f023 0201 	bic.w	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d115      	bne.n	800983c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800981c:	200a      	movs	r0, #10
 800981e:	f7f7 fdeb 	bl	80013f8 <HAL_Delay>
      ms += 10U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	330a      	adds	r3, #10
 8009826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fa25 	bl	8009c78 <USB_GetMode>
 800982e:	4603      	mov	r3, r0
 8009830:	2b01      	cmp	r3, #1
 8009832:	d01e      	beq.n	8009872 <USB_SetCurrentMode+0x84>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2bc7      	cmp	r3, #199	@ 0xc7
 8009838:	d9f0      	bls.n	800981c <USB_SetCurrentMode+0x2e>
 800983a:	e01a      	b.n	8009872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d115      	bne.n	800986e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800984e:	200a      	movs	r0, #10
 8009850:	f7f7 fdd2 	bl	80013f8 <HAL_Delay>
      ms += 10U;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	330a      	adds	r3, #10
 8009858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa0c 	bl	8009c78 <USB_GetMode>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <USB_SetCurrentMode+0x84>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2bc7      	cmp	r3, #199	@ 0xc7
 800986a:	d9f0      	bls.n	800984e <USB_SetCurrentMode+0x60>
 800986c:	e001      	b.n	8009872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e005      	b.n	800987e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2bc8      	cmp	r3, #200	@ 0xc8
 8009876:	d101      	bne.n	800987c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e000      	b.n	800987e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009888:	b084      	sub	sp, #16
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	e009      	b.n	80098bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3340      	adds	r3, #64	@ 0x40
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3301      	adds	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	2b0e      	cmp	r3, #14
 80098c0:	d9f2      	bls.n	80098a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d11c      	bne.n	8009904 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098d8:	f043 0302 	orr.w	r3, r3, #2
 80098dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e005      	b.n	8009910 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009916:	461a      	mov	r2, r3
 8009918:	2300      	movs	r3, #0
 800991a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800991c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009920:	2b01      	cmp	r3, #1
 8009922:	d10d      	bne.n	8009940 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009928:	2b00      	cmp	r3, #0
 800992a:	d104      	bne.n	8009936 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f968 	bl	8009c04 <USB_SetDevSpeed>
 8009934:	e008      	b.n	8009948 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009936:	2101      	movs	r1, #1
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f963 	bl	8009c04 <USB_SetDevSpeed>
 800993e:	e003      	b.n	8009948 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009940:	2103      	movs	r1, #3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f95e 	bl	8009c04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009948:	2110      	movs	r1, #16
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f8fa 	bl	8009b44 <USB_FlushTxFifo>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f924 	bl	8009ba8 <USB_FlushRxFifo>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009970:	461a      	mov	r2, r3
 8009972:	2300      	movs	r3, #0
 8009974:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997c:	461a      	mov	r2, r3
 800997e:	2300      	movs	r3, #0
 8009980:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009988:	461a      	mov	r2, r3
 800998a:	2300      	movs	r3, #0
 800998c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800998e:	2300      	movs	r3, #0
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	e043      	b.n	8009a1c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099aa:	d118      	bne.n	80099de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099be:	461a      	mov	r2, r3
 80099c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	e013      	b.n	80099f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d4:	461a      	mov	r2, r3
 80099d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	e008      	b.n	80099f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ea:	461a      	mov	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fc:	461a      	mov	r2, r3
 80099fe:	2300      	movs	r3, #0
 8009a00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a20:	461a      	mov	r2, r3
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d3b5      	bcc.n	8009994 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	e043      	b.n	8009ab6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a44:	d118      	bne.n	8009a78 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	e013      	b.n	8009a8a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e008      	b.n	8009a8a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a84:	461a      	mov	r2, r3
 8009a86:	2300      	movs	r3, #0
 8009a88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a96:	461a      	mov	r2, r3
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009aba:	461a      	mov	r2, r3
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d3b5      	bcc.n	8009a2e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ad4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ae2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d105      	bne.n	8009af8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	f043 0210 	orr.w	r2, r3, #16
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699a      	ldr	r2, [r3, #24]
 8009afc:	4b0f      	ldr	r3, [pc, #60]	@ (8009b3c <USB_DevInit+0x2b4>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	f043 0208 	orr.w	r2, r3, #8
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d105      	bne.n	8009b2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	4b06      	ldr	r3, [pc, #24]	@ (8009b40 <USB_DevInit+0x2b8>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b38:	b004      	add	sp, #16
 8009b3a:	4770      	bx	lr
 8009b3c:	803c3800 	.word	0x803c3800
 8009b40:	40000004 	.word	0x40000004

08009b44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3301      	adds	r3, #1
 8009b56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b5e:	d901      	bls.n	8009b64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e01b      	b.n	8009b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	daf2      	bge.n	8009b52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	019b      	lsls	r3, r3, #6
 8009b74:	f043 0220 	orr.w	r2, r3, #32
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b88:	d901      	bls.n	8009b8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e006      	b.n	8009b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d0f0      	beq.n	8009b7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bc0:	d901      	bls.n	8009bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e018      	b.n	8009bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	daf2      	bge.n	8009bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2210      	movs	r2, #16
 8009bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009be4:	d901      	bls.n	8009bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e006      	b.n	8009bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0310 	and.w	r3, r3, #16
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d0f0      	beq.n	8009bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c24:	4313      	orrs	r3, r2
 8009c26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c50:	f023 0303 	bic.w	r3, r3, #3
 8009c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	f003 0301 	and.w	r3, r3, #1
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cac:	d901      	bls.n	8009cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e01b      	b.n	8009cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	daf2      	bge.n	8009ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f043 0201 	orr.w	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cd6:	d901      	bls.n	8009cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e006      	b.n	8009cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d0f0      	beq.n	8009cca <USB_CoreReset+0x36>

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <memset>:
 8009cf6:	4402      	add	r2, r0
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d100      	bne.n	8009d00 <memset+0xa>
 8009cfe:	4770      	bx	lr
 8009d00:	f803 1b01 	strb.w	r1, [r3], #1
 8009d04:	e7f9      	b.n	8009cfa <memset+0x4>
	...

08009d08 <__libc_init_array>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009d40 <__libc_init_array+0x38>)
 8009d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009d44 <__libc_init_array+0x3c>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	2600      	movs	r6, #0
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	d109      	bne.n	8009d2c <__libc_init_array+0x24>
 8009d18:	4d0b      	ldr	r5, [pc, #44]	@ (8009d48 <__libc_init_array+0x40>)
 8009d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009d4c <__libc_init_array+0x44>)
 8009d1c:	f000 f818 	bl	8009d50 <_init>
 8009d20:	1b64      	subs	r4, r4, r5
 8009d22:	10a4      	asrs	r4, r4, #2
 8009d24:	2600      	movs	r6, #0
 8009d26:	42a6      	cmp	r6, r4
 8009d28:	d105      	bne.n	8009d36 <__libc_init_array+0x2e>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d30:	4798      	blx	r3
 8009d32:	3601      	adds	r6, #1
 8009d34:	e7ee      	b.n	8009d14 <__libc_init_array+0xc>
 8009d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3a:	4798      	blx	r3
 8009d3c:	3601      	adds	r6, #1
 8009d3e:	e7f2      	b.n	8009d26 <__libc_init_array+0x1e>
 8009d40:	08009db0 	.word	0x08009db0
 8009d44:	08009db0 	.word	0x08009db0
 8009d48:	08009db0 	.word	0x08009db0
 8009d4c:	08009db4 	.word	0x08009db4

08009d50 <_init>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	bf00      	nop
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr

08009d5c <_fini>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr
