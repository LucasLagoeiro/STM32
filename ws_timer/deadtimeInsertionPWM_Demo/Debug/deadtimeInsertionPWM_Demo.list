
deadtimeInsertionPWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000356c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003700  08003700  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003700  08003700  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003700  08003700  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003708  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003714  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003714  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f279  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb9  00000000  00000000  000142ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00016268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a78  00000000  00000000  00016fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154cd  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105c1  00000000  00000000  0002ceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aba9  00000000  00000000  0003d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  000c809c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000cb094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800360c 	.word	0x0800360c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800360c 	.word	0x0800360c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fb1e 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f814 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f966 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fc:	f000 f916 	bl	800062c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000400:	f000 f868 	bl	80004d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <main+0x30>)
 8000406:	2100      	movs	r1, #0
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fc75 	bl	8001cf8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800040e:	4b03      	ldr	r3, [pc, #12]	@ (800041c <main+0x30>)
 8000410:	2100      	movs	r1, #0
 8000412:	0018      	movs	r0, r3
 8000414:	f002 f9c0 	bl	8002798 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	e7fd      	b.n	8000418 <main+0x2c>
 800041c:	20000028 	.word	0x20000028

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b093      	sub	sp, #76	@ 0x4c
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	2414      	movs	r4, #20
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2334      	movs	r3, #52	@ 0x34
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 f8bf 	bl	80035b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	2310      	movs	r3, #16
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f003 f8b8 	bl	80035b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000444:	2380      	movs	r3, #128	@ 0x80
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fdc3 	bl	8000fd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	@ 0x80
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800045c:	0021      	movs	r1, r4
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2240      	movs	r2, #64	@ 0x40
 8000468:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2202      	movs	r2, #2
 800046e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2202      	movs	r2, #2
 8000474:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2208      	movs	r2, #8
 8000480:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	0292      	lsls	r2, r2, #10
 8000488:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	0592      	lsls	r2, r2, #22
 8000490:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	187b      	adds	r3, r7, r1
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fde9 	bl	800106c <HAL_RCC_OscConfig>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 f96f 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2202      	movs	r2, #2
 80004ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2102      	movs	r1, #2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 f8e4 	bl	800168c <HAL_RCC_ClockConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004c8:	f000 f95a 	bl	8000780 <Error_Handler>
  }
}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b013      	add	sp, #76	@ 0x4c
 80004d2:	bd90      	pop	{r4, r7, pc}

080004d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b098      	sub	sp, #96	@ 0x60
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004da:	2354      	movs	r3, #84	@ 0x54
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	230c      	movs	r3, #12
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 f865 	bl	80035b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ea:	2338      	movs	r3, #56	@ 0x38
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	231c      	movs	r3, #28
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 f85d 	bl	80035b4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2334      	movs	r3, #52	@ 0x34
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 f856 	bl	80035b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000508:	4b46      	ldr	r3, [pc, #280]	@ (8000624 <MX_TIM1_Init+0x150>)
 800050a:	4a47      	ldr	r2, [pc, #284]	@ (8000628 <MX_TIM1_Init+0x154>)
 800050c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800050e:	4b45      	ldr	r3, [pc, #276]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000510:	223f      	movs	r2, #63	@ 0x3f
 8000512:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b43      	ldr	r3, [pc, #268]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800051a:	4b42      	ldr	r3, [pc, #264]	@ (8000624 <MX_TIM1_Init+0x150>)
 800051c:	22fa      	movs	r2, #250	@ 0xfa
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000522:	4b40      	ldr	r3, [pc, #256]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000528:	4b3e      	ldr	r3, [pc, #248]	@ (8000624 <MX_TIM1_Init+0x150>)
 800052a:	2200      	movs	r2, #0
 800052c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052e:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000534:	4b3b      	ldr	r3, [pc, #236]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fb86 	bl	8001c48 <HAL_TIM_PWM_Init>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 f91e 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000544:	2154      	movs	r1, #84	@ 0x54
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000558:	187a      	adds	r2, r7, r1
 800055a:	4b32      	ldr	r3, [pc, #200]	@ (8000624 <MX_TIM1_Init+0x150>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f002 f9b8 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000568:	f000 f90a 	bl	8000780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056c:	2138      	movs	r1, #56	@ 0x38
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2260      	movs	r2, #96	@ 0x60
 8000572:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22fa      	movs	r2, #250	@ 0xfa
 8000578:	0052      	lsls	r2, r2, #1
 800057a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059a:	1879      	adds	r1, r7, r1
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <MX_TIM1_Init+0x150>)
 800059e:	2200      	movs	r2, #0
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fc8d 	bl	8001ec0 <HAL_TIM_PWM_ConfigChannel>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80005aa:	f000 f8e9 	bl	8000780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 232;
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	22e8      	movs	r2, #232	@ 0xe8
 80005c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	0192      	lsls	r2, r2, #6
 80005d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	0492      	lsls	r2, r2, #18
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f002 f9cc 	bl	80029a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000610:	f000 f8b6 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <MX_TIM1_Init+0x150>)
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f900 	bl	800081c <HAL_TIM_MspPostInit>

}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b018      	add	sp, #96	@ 0x60
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	40012c00 	.word	0x40012c00

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000632:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <MX_USART2_UART_Init+0x98>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000638:	22e1      	movs	r2, #225	@ 0xe1
 800063a:	0252      	lsls	r2, r2, #9
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	0552      	lsls	r2, r2, #21
 8000644:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000654:	220c      	movs	r2, #12
 8000656:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fa53 	bl	8002b24 <HAL_UART_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000682:	f000 f87d 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f002 feb2 	bl	80033f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000694:	f000 f874 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fee9 	bl	8003474 <HAL_UARTEx_SetRxFifoThreshold>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80006a6:	f000 f86b 	bl	8000780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006aa:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <MX_USART2_UART_Init+0x94>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 fe67 	bl	8003380 <HAL_UARTEx_DisableFifoMode>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006b6:	f000 f863 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000074 	.word	0x20000074
 80006c4:	40004400 	.word	0x40004400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b08b      	sub	sp, #44	@ 0x2c
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	2414      	movs	r4, #20
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2314      	movs	r3, #20
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 ff6b 	bl	80035b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b27      	ldr	r3, [pc, #156]	@ (800077c <MX_GPIO_Init+0xb4>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <MX_GPIO_Init+0xb4>)
 80006e4:	2104      	movs	r1, #4
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	4b24      	ldr	r3, [pc, #144]	@ (800077c <MX_GPIO_Init+0xb4>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ee:	2204      	movs	r2, #4
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_GPIO_Init+0xb4>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <MX_GPIO_Init+0xb4>)
 80006fc:	2120      	movs	r1, #32
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_GPIO_Init+0xb4>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000706:	2220      	movs	r2, #32
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_GPIO_Init+0xb4>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_GPIO_Init+0xb4>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_GPIO_Init+0xb4>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_GPIO_Init+0xb4>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_GPIO_Init+0xb4>)
 800072c:	2108      	movs	r1, #8
 800072e:	430a      	orrs	r2, r1
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_GPIO_Init+0xb4>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000736:	2208      	movs	r2, #8
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fc26 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800074c:	0021      	movs	r1, r4
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2220      	movs	r2, #32
 8000752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2202      	movs	r2, #2
 8000764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000766:	187a      	adds	r2, r7, r1
 8000768:	23a0      	movs	r3, #160	@ 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 faae 	bl	8000cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b00b      	add	sp, #44	@ 0x2c
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	641a      	str	r2, [r3, #64]	@ 0x40
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	0549      	lsls	r1, r1, #21
 80007b4:	430a      	orrs	r2, r1
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	055b      	lsls	r3, r3, #21
 80007c0:	4013      	ands	r3, r2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007c6:	23c0      	movs	r3, #192	@ 0xc0
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f9b6 	bl	8000b3c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_TIM_PWM_MspInit+0x38>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d10d      	bne.n	800080a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_TIM_PWM_MspInit+0x3c>)
 80007f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_TIM_PWM_MspInit+0x3c>)
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0109      	lsls	r1, r1, #4
 80007f8:	430a      	orrs	r2, r1
 80007fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_TIM_PWM_MspInit+0x3c>)
 80007fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b004      	add	sp, #16
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	40012c00 	.word	0x40012c00
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08b      	sub	sp, #44	@ 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	2414      	movs	r4, #20
 8000826:	193b      	adds	r3, r7, r4
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f002 fec0 	bl	80035b4 <memset>
  if(htim->Instance==TIM1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a25      	ldr	r2, [pc, #148]	@ (80008d0 <HAL_TIM_MspPostInit+0xb4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d143      	bne.n	80008c6 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 8000844:	2104      	movs	r1, #4
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084e:	2204      	movs	r2, #4
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 800085c:	2108      	movs	r1, #8
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <HAL_TIM_MspPostInit+0xb8>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000866:	2208      	movs	r2, #8
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PD2     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2202      	movs	r2, #2
 800087a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2202      	movs	r2, #2
 800088c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	193b      	adds	r3, r7, r4
 8000890:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <HAL_TIM_MspPostInit+0xbc>)
 8000892:	0019      	movs	r1, r3
 8000894:	0010      	movs	r0, r2
 8000896:	f000 fa1b 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2204      	movs	r2, #4
 80008a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2202      	movs	r2, #2
 80008b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_TIM_MspPostInit+0xc0>)
 80008be:	0019      	movs	r1, r3
 80008c0:	0010      	movs	r0, r2
 80008c2:	f000 fa05 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b00b      	add	sp, #44	@ 0x2c
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	40012c00 	.word	0x40012c00
 80008d4:	40021000 	.word	0x40021000
 80008d8:	50000800 	.word	0x50000800
 80008dc:	50000c00 	.word	0x50000c00

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b091      	sub	sp, #68	@ 0x44
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	232c      	movs	r3, #44	@ 0x2c
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	0018      	movs	r0, r3
 80008ee:	2314      	movs	r3, #20
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f002 fe5e 	bl	80035b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	2410      	movs	r4, #16
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	0018      	movs	r0, r3
 80008fe:	231c      	movs	r3, #28
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f002 fe56 	bl	80035b4 <memset>
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_UART_MspInit+0xb8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d13e      	bne.n	8000990 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2202      	movs	r2, #2
 8000916:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	f001 f85d 	bl	80019e0 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800092a:	f7ff ff29 	bl	8000780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <HAL_UART_MspInit+0xbc>)
 8000930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_UART_MspInit+0xbc>)
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_MspInit+0xbc>)
 800093e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0xbc>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <HAL_UART_MspInit+0xbc>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_UART_MspInit+0xbc>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000962:	212c      	movs	r1, #44	@ 0x2c
 8000964:	187b      	adds	r3, r7, r1
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2202      	movs	r2, #2
 800096e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2201      	movs	r2, #1
 8000974:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2201      	movs	r2, #1
 8000980:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	187a      	adds	r2, r7, r1
 8000984:	23a0      	movs	r3, #160	@ 0xa0
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f9a0 	bl	8000cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b011      	add	sp, #68	@ 0x44
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f89c 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f7ff fff7 	bl	80009d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f002 fddb 	bl	80035c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a0e:	f7ff fced 	bl	80003ec <main>

08000a12 <LoopForever>:

LoopForever:
  b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	08003708 	.word	0x08003708
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	2000010c 	.word	0x2000010c

08000a2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_Init+0x3c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_Init+0x3c>)
 8000a42:	2180      	movs	r1, #128	@ 0x80
 8000a44:	0049      	lsls	r1, r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f810 	bl	8000a70 <HAL_InitTick>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe96 	bl	800078c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <HAL_InitTick+0x88>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d02b      	beq.n	8000ae0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <HAL_InitTick+0x8c>)
 8000a8a:	681c      	ldr	r4, [r3, #0]
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <HAL_InitTick+0x88>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	0019      	movs	r1, r3
 8000a92:	23fa      	movs	r3, #250	@ 0xfa
 8000a94:	0098      	lsls	r0, r3, #2
 8000a96:	f7ff fb33 	bl	8000100 <__udivsi3>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f7ff fb2e 	bl	8000100 <__udivsi3>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f905 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d112      	bne.n	8000ad6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d80a      	bhi.n	8000acc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f8e4 	bl	8000c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_InitTick+0x90>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e00d      	b.n	8000ae8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e008      	b.n	8000ae8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e003      	b.n	8000ae8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	781b      	ldrb	r3, [r3, #0]
}
 8000aee:	0018      	movs	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b005      	add	sp, #20
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	18d2      	adds	r2, r2, r3
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000108 	.word	0x20000108

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	@ (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	20000108 	.word	0x20000108

08000b3c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	40010000 	.word	0x40010000
 8000b64:	fffff9ff 	.word	0xfffff9ff

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7c:	d828      	bhi.n	8000bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <__NVIC_SetPriority+0xd4>)
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	33c0      	adds	r3, #192	@ 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	589b      	ldr	r3, [r3, r2]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	@ 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	@ 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	481f      	ldr	r0, [pc, #124]	@ (8000c3c <__NVIC_SetPriority+0xd4>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	33c0      	adds	r3, #192	@ 0xc0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bce:	e031      	b.n	8000c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	400b      	ands	r3, r1
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3306      	adds	r3, #6
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	3304      	adds	r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	@ 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	@ 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <__NVIC_SetPriority+0xd8>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001c      	movs	r4, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	4023      	ands	r3, r4
 8000c24:	3b08      	subs	r3, #8
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	3306      	adds	r3, #6
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	18c3      	adds	r3, r0, r3
 8000c30:	3304      	adds	r3, #4
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	045b      	lsls	r3, r3, #17
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d301      	bcc.n	8000c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e010      	b.n	8000c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <SysTick_Config+0x44>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3a01      	subs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ff7c 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <SysTick_Config+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <SysTick_Config+0x44>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	210f      	movs	r1, #15
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ffbf 	bl	8000c44 <SysTick_Config>
 8000cc6:	0003      	movs	r3, r0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e147      	b.n	8000f70 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d100      	bne.n	8000cf8 <HAL_GPIO_Init+0x28>
 8000cf6:	e138      	b.n	8000f6a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x40>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4013      	ands	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2107      	movs	r1, #7
 8000de6:	400b      	ands	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	6939      	ldr	r1, [r7, #16]
 8000e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	401a      	ands	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23c0      	movs	r3, #192	@ 0xc0
 8000e3c:	029b      	lsls	r3, r3, #10
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x174>
 8000e42:	e092      	b.n	8000f6a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e44:	4a50      	ldr	r2, [pc, #320]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	589b      	ldr	r3, [r3, r2]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	23a0      	movs	r3, #160	@ 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1ca>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a45      	ldr	r2, [pc, #276]	@ (8000f8c <HAL_GPIO_Init+0x2bc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1c6>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a44      	ldr	r2, [pc, #272]	@ (8000f90 <HAL_GPIO_Init+0x2c0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1c2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a43      	ldr	r2, [pc, #268]	@ (8000f94 <HAL_GPIO_Init+0x2c4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1be>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x1cc>
 8000e8e:	2305      	movs	r3, #5
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x1cc>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x1cc>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x1cc>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eac:	4936      	ldr	r1, [pc, #216]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3318      	adds	r3, #24
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eba:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	035b      	lsls	r3, r3, #13
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	039b      	lsls	r3, r3, #14
 8000efc:	4013      	ands	r3, r2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000f10:	2384      	movs	r3, #132	@ 0x84
 8000f12:	58d3      	ldr	r3, [r2, r3]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	2380      	movs	r3, #128	@ 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f34:	4914      	ldr	r1, [pc, #80]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000f36:	2284      	movs	r2, #132	@ 0x84
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f3c:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	58d3      	ldr	r3, [r2, r3]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f62:	4909      	ldr	r1, [pc, #36]	@ (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	1e13      	subs	r3, r2, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_GPIO_Init+0x2ae>
 8000f7c:	e6b0      	b.n	8000ce0 <HAL_GPIO_Init+0x10>
  }
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	50000400 	.word	0x50000400
 8000f90:	50000800 	.word	0x50000800
 8000f94:	50000c00 	.word	0x50000c00

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	0008      	movs	r0, r1
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	1cbb      	adds	r3, r7, #2
 8000fa6:	1c02      	adds	r2, r0, #0
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	1c7b      	adds	r3, r7, #1
 8000fac:	1c0a      	adds	r2, r1, #0
 8000fae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	1c7b      	adds	r3, r7, #1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb8:	1cbb      	adds	r3, r7, #2
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fc2:	1cbb      	adds	r3, r7, #2
 8000fc4:	881a      	ldrh	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	@ (8001048 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d11f      	bne.n	8001038 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	189b      	adds	r3, r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4912      	ldr	r1, [pc, #72]	@ (8001050 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff f87a 	bl	8000100 <__udivsi3>
 800100c:	0003      	movs	r3, r0
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001012:	e008      	b.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3b01      	subs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e001      	b.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e009      	b.n	800103a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	401a      	ands	r2, r3
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	429a      	cmp	r2, r3
 8001036:	d0ed      	beq.n	8001014 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	40007000 	.word	0x40007000
 8001048:	fffff9ff 	.word	0xfffff9ff
 800104c:	20000000 	.word	0x20000000
 8001050:	000f4240 	.word	0x000f4240

08001054 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <LL_RCC_GetAPB1Prescaler+0x14>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	23e0      	movs	r3, #224	@ 0xe0
 800105e:	01db      	lsls	r3, r3, #7
 8001060:	4013      	ands	r3, r2
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e2f3      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	d100      	bne.n	800108a <HAL_RCC_OscConfig+0x1e>
 8001088:	e07c      	b.n	8001184 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108a:	4bc3      	ldr	r3, [pc, #780]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2238      	movs	r2, #56	@ 0x38
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001094:	4bc0      	ldr	r3, [pc, #768]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2203      	movs	r2, #3
 800109a:	4013      	ands	r3, r2
 800109c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d102      	bne.n	80010aa <HAL_RCC_OscConfig+0x3e>
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d002      	beq.n	80010b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	029b      	lsls	r3, r3, #10
 80010b8:	4013      	ands	r3, r2
 80010ba:	d062      	beq.n	8001182 <HAL_RCC_OscConfig+0x116>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d15e      	bne.n	8001182 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e2ce      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	025b      	lsls	r3, r3, #9
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d107      	bne.n	80010e4 <HAL_RCC_OscConfig+0x78>
 80010d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4baf      	ldr	r3, [pc, #700]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	0249      	lsls	r1, r1, #9
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e020      	b.n	8001126 <HAL_RCC_OscConfig+0xba>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	23a0      	movs	r3, #160	@ 0xa0
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d10e      	bne.n	800110e <HAL_RCC_OscConfig+0xa2>
 80010f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	02c9      	lsls	r1, r1, #11
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	4ba6      	ldr	r3, [pc, #664]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4ba5      	ldr	r3, [pc, #660]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	0249      	lsls	r1, r1, #9
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0xba>
 800110e:	4ba2      	ldr	r3, [pc, #648]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4ba1      	ldr	r3, [pc, #644]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001114:	49a1      	ldr	r1, [pc, #644]	@ (800139c <HAL_RCC_OscConfig+0x330>)
 8001116:	400a      	ands	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	4b9f      	ldr	r3, [pc, #636]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b9e      	ldr	r3, [pc, #632]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001120:	499f      	ldr	r1, [pc, #636]	@ (80013a0 <HAL_RCC_OscConfig+0x334>)
 8001122:	400a      	ands	r2, r1
 8001124:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d014      	beq.n	8001158 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fcfb 	bl	8000b28 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fcf6 	bl	8000b28 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	@ 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e28d      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	4b93      	ldr	r3, [pc, #588]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	2380      	movs	r3, #128	@ 0x80
 8001150:	029b      	lsls	r3, r3, #10
 8001152:	4013      	ands	r3, r2
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xcc>
 8001156:	e015      	b.n	8001184 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fce6 	bl	8000b28 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001162:	f7ff fce1 	bl	8000b28 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	@ 0x64
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e278      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001174:	4b88      	ldr	r3, [pc, #544]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0xf6>
 8001180:	e000      	b.n	8001184 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001182:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d100      	bne.n	8001190 <HAL_RCC_OscConfig+0x124>
 800118e:	e099      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001190:	4b81      	ldr	r3, [pc, #516]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2238      	movs	r2, #56	@ 0x38
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119a:	4b7f      	ldr	r3, [pc, #508]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2203      	movs	r2, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0x144>
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d002      	beq.n	80011b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d135      	bne.n	8001222 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b6:	4b78      	ldr	r3, [pc, #480]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x162>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e24b      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a74      	ldr	r2, [pc, #464]	@ (80013a4 <HAL_RCC_OscConfig+0x338>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0019      	movs	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	021a      	lsls	r2, r3, #8
 80011de:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80011e0:	430a      	orrs	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d112      	bne.n	8001210 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6e      	ldr	r2, [pc, #440]	@ (80013a8 <HAL_RCC_OscConfig+0x33c>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011fe:	4b66      	ldr	r3, [pc, #408]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0adb      	lsrs	r3, r3, #11
 8001204:	2207      	movs	r2, #7
 8001206:	4013      	ands	r3, r2
 8001208:	4a68      	ldr	r2, [pc, #416]	@ (80013ac <HAL_RCC_OscConfig+0x340>)
 800120a:	40da      	lsrs	r2, r3
 800120c:	4b68      	ldr	r3, [pc, #416]	@ (80013b0 <HAL_RCC_OscConfig+0x344>)
 800120e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001210:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <HAL_RCC_OscConfig+0x348>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff fc2b 	bl	8000a70 <HAL_InitTick>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d051      	beq.n	80012c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e221      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d030      	beq.n	800128c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800122a:	4b5b      	ldr	r3, [pc, #364]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a5e      	ldr	r2, [pc, #376]	@ (80013a8 <HAL_RCC_OscConfig+0x33c>)
 8001230:	4013      	ands	r3, r2
 8001232:	0019      	movs	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800123e:	4b56      	ldr	r3, [pc, #344]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	0049      	lsls	r1, r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fc6c 	bl	8000b28 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fc67 	bl	8000b28 <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1fe      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001268:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4013      	ands	r3, r2
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	@ (80013a4 <HAL_RCC_OscConfig+0x338>)
 800127a:	4013      	ands	r3, r2
 800127c:	0019      	movs	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	021a      	lsls	r2, r3, #8
 8001284:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001286:	430a      	orrs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800128c:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001292:	4949      	ldr	r1, [pc, #292]	@ (80013b8 <HAL_RCC_OscConfig+0x34c>)
 8001294:	400a      	ands	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fc46 	bl	8000b28 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fc41 	bl	8000b28 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1d8      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x236>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	4013      	ands	r3, r2
 80012cc:	d047      	beq.n	800135e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2238      	movs	r2, #56	@ 0x38
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b18      	cmp	r3, #24
 80012d8:	d10a      	bne.n	80012f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012da:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d03c      	beq.n	800135e <HAL_RCC_OscConfig+0x2f2>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d138      	bne.n	800135e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e1ba      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d019      	beq.n	800132c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012fc:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fc10 	bl	8000b28 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fc0b 	bl	8000b28 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a2      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001324:	2202      	movs	r2, #2
 8001326:	4013      	ands	r3, r2
 8001328:	d0f1      	beq.n	800130e <HAL_RCC_OscConfig+0x2a2>
 800132a:	e018      	b.n	800135e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 800132e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fbf6 	bl	8000b28 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fbf1 	bl	8000b28 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e188      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d1f1      	bne.n	8001342 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2204      	movs	r2, #4
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x2fe>
 8001368:	e0c6      	b.n	80014f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	231f      	movs	r3, #31
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2238      	movs	r2, #56	@ 0x38
 8001378:	4013      	ands	r3, r2
 800137a:	2b20      	cmp	r3, #32
 800137c:	d11e      	bne.n	80013bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_RCC_OscConfig+0x32c>)
 8001380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d100      	bne.n	800138a <HAL_RCC_OscConfig+0x31e>
 8001388:	e0b6      	b.n	80014f8 <HAL_RCC_OscConfig+0x48c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d000      	beq.n	8001394 <HAL_RCC_OscConfig+0x328>
 8001392:	e0b1      	b.n	80014f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e166      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
 8001398:	40021000 	.word	0x40021000
 800139c:	fffeffff 	.word	0xfffeffff
 80013a0:	fffbffff 	.word	0xfffbffff
 80013a4:	ffff80ff 	.word	0xffff80ff
 80013a8:	ffffc7ff 	.word	0xffffc7ff
 80013ac:	00f42400 	.word	0x00f42400
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013bc:	4bac      	ldr	r3, [pc, #688]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80013be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	055b      	lsls	r3, r3, #21
 80013c4:	4013      	ands	r3, r2
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_OscConfig+0x360>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x362>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d011      	beq.n	80013f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80013d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d6:	4ba6      	ldr	r3, [pc, #664]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	0549      	lsls	r1, r1, #21
 80013dc:	430a      	orrs	r2, r1
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013e0:	4ba3      	ldr	r3, [pc, #652]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80013e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	055b      	lsls	r3, r3, #21
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013ee:	231f      	movs	r3, #31
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001674 <HAL_RCC_OscConfig+0x608>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	d11a      	bne.n	8001438 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001402:	4b9c      	ldr	r3, [pc, #624]	@ (8001674 <HAL_RCC_OscConfig+0x608>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b9b      	ldr	r3, [pc, #620]	@ (8001674 <HAL_RCC_OscConfig+0x608>)
 8001408:	2180      	movs	r1, #128	@ 0x80
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001410:	f7ff fb8a 	bl	8000b28 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fb85 	bl	8000b28 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e11c      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142c:	4b91      	ldr	r3, [pc, #580]	@ (8001674 <HAL_RCC_OscConfig+0x608>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4013      	ands	r3, r2
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x3e2>
 8001440:	4b8b      	ldr	r3, [pc, #556]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001444:	4b8a      	ldr	r3, [pc, #552]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800144c:	e01c      	b.n	8001488 <HAL_RCC_OscConfig+0x41c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x404>
 8001456:	4b86      	ldr	r3, [pc, #536]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001458:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800145a:	4b85      	ldr	r3, [pc, #532]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800145c:	2104      	movs	r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001462:	4b83      	ldr	r3, [pc, #524]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001466:	4b82      	ldr	r3, [pc, #520]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0x41c>
 8001470:	4b7f      	ldr	r3, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001474:	4b7e      	ldr	r3, [pc, #504]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800147c:	4b7c      	ldr	r3, [pc, #496]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800147e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001480:	4b7b      	ldr	r3, [pc, #492]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001482:	2104      	movs	r1, #4
 8001484:	438a      	bics	r2, r1
 8001486:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d014      	beq.n	80014ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb4a 	bl	8000b28 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001498:	e009      	b.n	80014ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fb45 	bl	8000b28 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	4a74      	ldr	r2, [pc, #464]	@ (8001678 <HAL_RCC_OscConfig+0x60c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0db      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ae:	4b70      	ldr	r3, [pc, #448]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80014b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x42e>
 80014b8:	e013      	b.n	80014e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb35 	bl	8000b28 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c2:	e009      	b.n	80014d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb30 	bl	8000b28 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001678 <HAL_RCC_OscConfig+0x60c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e0c6      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d8:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80014da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014e2:	231f      	movs	r3, #31
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014ec:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80014ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80014f2:	4962      	ldr	r1, [pc, #392]	@ (800167c <HAL_RCC_OscConfig+0x610>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d100      	bne.n	8001502 <HAL_RCC_OscConfig+0x496>
 8001500:	e0b0      	b.n	8001664 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001502:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2238      	movs	r2, #56	@ 0x38
 8001508:	4013      	ands	r3, r2
 800150a:	2b10      	cmp	r3, #16
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x4a4>
 800150e:	e078      	b.n	8001602 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d153      	bne.n	80015c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b54      	ldr	r3, [pc, #336]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800151e:	4958      	ldr	r1, [pc, #352]	@ (8001680 <HAL_RCC_OscConfig+0x614>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fb00 	bl	8000b28 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fafb 	bl	8000b28 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e092      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	049b      	lsls	r3, r3, #18
 8001548:	4013      	ands	r3, r2
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154c:	4b48      	ldr	r3, [pc, #288]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a4c      	ldr	r2, [pc, #304]	@ (8001684 <HAL_RCC_OscConfig+0x618>)
 8001552:	4013      	ands	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1a      	ldr	r2, [r3, #32]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	431a      	orrs	r2, r3
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b3c      	ldr	r3, [pc, #240]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	0449      	lsls	r1, r1, #17
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 800158e:	2180      	movs	r1, #128	@ 0x80
 8001590:	0549      	lsls	r1, r1, #21
 8001592:	430a      	orrs	r2, r1
 8001594:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fac7 	bl	8000b28 <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fac2 	bl	8000b28 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e059      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	049b      	lsls	r3, r3, #18
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x534>
 80015be:	e051      	b.n	8001664 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015c6:	492e      	ldr	r1, [pc, #184]	@ (8001680 <HAL_RCC_OscConfig+0x614>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff faac 	bl	8000b28 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff faa7 	bl	8000b28 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e03e      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	049b      	lsls	r3, r3, #18
 80015f0:	4013      	ands	r3, r2
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 80015fa:	4923      	ldr	r1, [pc, #140]	@ (8001688 <HAL_RCC_OscConfig+0x61c>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	e030      	b.n	8001664 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e02b      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_RCC_OscConfig+0x604>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2203      	movs	r2, #3
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	429a      	cmp	r2, r3
 8001620:	d11e      	bne.n	8001660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2270      	movs	r2, #112	@ 0x70
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d117      	bne.n	8001660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	23fe      	movs	r3, #254	@ 0xfe
 8001634:	01db      	lsls	r3, r3, #7
 8001636:	401a      	ands	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d10e      	bne.n	8001660 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	23f8      	movs	r3, #248	@ 0xf8
 8001646:	039b      	lsls	r3, r3, #14
 8001648:	401a      	ands	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	0f5b      	lsrs	r3, r3, #29
 8001656:	075a      	lsls	r2, r3, #29
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b008      	add	sp, #32
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000
 8001678:	00001388 	.word	0x00001388
 800167c:	efffffff 	.word	0xefffffff
 8001680:	feffffff 	.word	0xfeffffff
 8001684:	1fc1808c 	.word	0x1fc1808c
 8001688:	effefffc 	.word	0xeffefffc

0800168c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0e9      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b76      	ldr	r3, [pc, #472]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2207      	movs	r2, #7
 80016a6:	4013      	ands	r3, r2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d91e      	bls.n	80016ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b73      	ldr	r3, [pc, #460]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2207      	movs	r2, #7
 80016b4:	4393      	bics	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	4b70      	ldr	r3, [pc, #448]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fa32 	bl	8000b28 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c8:	e009      	b.n	80016de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff fa2d 	bl	8000b28 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e0ca      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016de:	4b67      	ldr	r3, [pc, #412]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2207      	movs	r2, #7
 80016e4:	4013      	ands	r3, r2
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d006      	beq.n	800170e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001700:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001706:	21e0      	movs	r1, #224	@ 0xe0
 8001708:	01c9      	lsls	r1, r1, #7
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170e:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4a5d      	ldr	r2, [pc, #372]	@ (8001888 <HAL_RCC_ClockConfig+0x1fc>)
 8001714:	4013      	ands	r3, r2
 8001716:	0019      	movs	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d057      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001734:	4b53      	ldr	r3, [pc, #332]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d12b      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e097      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d107      	bne.n	800175c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174c:	4b4d      	ldr	r3, [pc, #308]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	049b      	lsls	r3, r3, #18
 8001754:	4013      	ands	r3, r2
 8001756:	d11f      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e08b      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4013      	ands	r3, r2
 800176e:	d113      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e07f      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d106      	bne.n	800178a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177c:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d108      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e074      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	4b3e      	ldr	r3, [pc, #248]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e06d      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001798:	4b3a      	ldr	r3, [pc, #232]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2207      	movs	r2, #7
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff f9bc 	bl	8000b28 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f9b7 	bl	8000b28 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e054      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	@ 0x38
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1ec      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2207      	movs	r2, #7
 80017e2:	4013      	ands	r3, r2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d21e      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4393      	bics	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017fc:	f7ff f994 	bl	8000b28 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001804:	e009      	b.n	800181a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f98f 	bl	8000b28 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a1b      	ldr	r2, [pc, #108]	@ (8001880 <HAL_RCC_ClockConfig+0x1f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e02c      	b.n	8001874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2207      	movs	r2, #7
 8001820:	4013      	ands	r3, r2
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d1ee      	bne.n	8001806 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4a15      	ldr	r2, [pc, #84]	@ (800188c <HAL_RCC_ClockConfig+0x200>)
 8001838:	4013      	ands	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001846:	f000 f829 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800184a:	0001      	movs	r1, r0
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	220f      	movs	r2, #15
 8001854:	401a      	ands	r2, r3
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_RCC_ClockConfig+0x204>)
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	58d3      	ldr	r3, [r2, r3]
 800185c:	221f      	movs	r2, #31
 800185e:	4013      	ands	r3, r2
 8001860:	000a      	movs	r2, r1
 8001862:	40da      	lsrs	r2, r3
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_ClockConfig+0x208>)
 8001866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_ClockConfig+0x20c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff f8ff 	bl	8000a70 <HAL_InitTick>
 8001872:	0003      	movs	r3, r0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000
 8001880:	00001388 	.word	0x00001388
 8001884:	40021000 	.word	0x40021000
 8001888:	fffff0ff 	.word	0xfffff0ff
 800188c:	ffff8fff 	.word	0xffff8fff
 8001890:	08003624 	.word	0x08003624
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2238      	movs	r2, #56	@ 0x38
 80018a8:	4013      	ands	r3, r2
 80018aa:	d10f      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018ac:	4b39      	ldr	r3, [pc, #228]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0adb      	lsrs	r3, r3, #11
 80018b2:	2207      	movs	r2, #7
 80018b4:	4013      	ands	r3, r2
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	0013      	movs	r3, r2
 80018bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	4835      	ldr	r0, [pc, #212]	@ (8001998 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018c2:	f7fe fc1d 	bl	8000100 <__udivsi3>
 80018c6:	0003      	movs	r3, r0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e05d      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018cc:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2238      	movs	r2, #56	@ 0x38
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d102      	bne.n	80018de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d8:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_RCC_GetSysClockFreq+0x100>)
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	e054      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2238      	movs	r2, #56	@ 0x38
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d138      	bne.n	800195c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2203      	movs	r2, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	3301      	adds	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10d      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	4824      	ldr	r0, [pc, #144]	@ (800199c <HAL_RCC_GetSysClockFreq+0x100>)
 800190c:	f7fe fbf8 	bl	8000100 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	0019      	movs	r1, r3
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	227f      	movs	r2, #127	@ 0x7f
 800191c:	4013      	ands	r3, r2
 800191e:	434b      	muls	r3, r1
 8001920:	617b      	str	r3, [r7, #20]
        break;
 8001922:	e00d      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	481c      	ldr	r0, [pc, #112]	@ (8001998 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001928:	f7fe fbea 	bl	8000100 <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	0019      	movs	r1, r3
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	227f      	movs	r2, #127	@ 0x7f
 8001938:	4013      	ands	r3, r2
 800193a:	434b      	muls	r3, r1
 800193c:	617b      	str	r3, [r7, #20]
        break;
 800193e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0f5b      	lsrs	r3, r3, #29
 8001946:	2207      	movs	r2, #7
 8001948:	4013      	ands	r3, r2
 800194a:	3301      	adds	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7fe fbd5 	bl	8000100 <__udivsi3>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e015      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800195c:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2238      	movs	r2, #56	@ 0x38
 8001962:	4013      	ands	r3, r2
 8001964:	2b20      	cmp	r3, #32
 8001966:	d103      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2238      	movs	r2, #56	@ 0x38
 8001976:	4013      	ands	r3, r2
 8001978:	2b18      	cmp	r3, #24
 800197a:	d103      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800197c:	23fa      	movs	r3, #250	@ 0xfa
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e001      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b02      	ldr	r3, [pc, #8]	@ (80019b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019b8:	f7ff fff2 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019bc:	0004      	movs	r4, r0
 80019be:	f7ff fb49 	bl	8001054 <LL_RCC_GetAPB1Prescaler>
 80019c2:	0003      	movs	r3, r0
 80019c4:	0b1a      	lsrs	r2, r3, #12
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	58d3      	ldr	r3, [r2, r3]
 80019cc:	221f      	movs	r2, #31
 80019ce:	4013      	ands	r3, r2
 80019d0:	40dc      	lsrs	r4, r3
 80019d2:	0023      	movs	r3, r4
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	08003664 	.word	0x08003664

080019e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019e8:	2313      	movs	r3, #19
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019f0:	2312      	movs	r3, #18
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	4013      	ands	r3, r2
 8001a02:	d100      	bne.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a04:	e0a3      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2011      	movs	r0, #17
 8001a08:	183b      	adds	r3, r7, r0
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b86      	ldr	r3, [pc, #536]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	055b      	lsls	r3, r3, #21
 8001a16:	4013      	ands	r3, r2
 8001a18:	d110      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1e:	4b82      	ldr	r3, [pc, #520]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	0549      	lsls	r1, r1, #21
 8001a24:	430a      	orrs	r2, r1
 8001a26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a28:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	055b      	lsls	r3, r3, #21
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a36:	183b      	adds	r3, r7, r0
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b7a      	ldr	r3, [pc, #488]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	0049      	lsls	r1, r1, #1
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a4a:	f7ff f86d 	bl	8000b28 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a52:	e00b      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7ff f868 	bl	8000b28 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d904      	bls.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a62:	2313      	movs	r3, #19
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
        break;
 8001a6a:	e005      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0ed      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a78:	2313      	movs	r3, #19
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d154      	bne.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a82:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a86:	23c0      	movs	r3, #192	@ 0xc0
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d019      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d014      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a9e:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa2:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aac:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aae:	2180      	movs	r1, #128	@ 0x80
 8001ab0:	0249      	lsls	r1, r1, #9
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aba:	4b5b      	ldr	r3, [pc, #364]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001abc:	495d      	ldr	r1, [pc, #372]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001abe:	400a      	ands	r2, r1
 8001ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ac2:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d016      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f82a 	bl	8000b28 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad8:	e00c      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f825 	bl	8000b28 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a54      	ldr	r2, [pc, #336]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d904      	bls.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001aea:	2313      	movs	r3, #19
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2203      	movs	r2, #3
 8001af0:	701a      	strb	r2, [r3, #0]
            break;
 8001af2:	e004      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0ed      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001afe:	2313      	movs	r3, #19
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b08:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	4a48      	ldr	r2, [pc, #288]	@ (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2213      	movs	r2, #19
 8001b24:	18ba      	adds	r2, r7, r2
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e005      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b2c:	2312      	movs	r3, #18
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2213      	movs	r2, #19
 8001b32:	18ba      	adds	r2, r7, r2
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b38:	2311      	movs	r3, #17
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d105      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b48:	493c      	ldr	r1, [pc, #240]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b58:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	01db      	lsls	r3, r3, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	0899      	lsrs	r1, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	0249      	lsls	r1, r1, #9
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4013      	ands	r3, r2
 8001bea:	d016      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	0249      	lsls	r1, r1, #9
 8001c16:	430a      	orrs	r2, r1
 8001c18:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b006      	add	sp, #24
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	fffffcff 	.word	0xfffffcff
 8001c34:	fffeffff 	.word	0xfffeffff
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	efffffff 	.word	0xefffffff
 8001c40:	ffffcfff 	.word	0xffffcfff
 8001c44:	ffff3fff 	.word	0xffff3fff

08001c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e04a      	b.n	8001cf0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223d      	movs	r2, #61	@ 0x3d
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	223c      	movs	r2, #60	@ 0x3c
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7fe fdb3 	bl	80007dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223d      	movs	r2, #61	@ 0x3d
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3304      	adds	r3, #4
 8001c86:	0019      	movs	r1, r3
 8001c88:	0010      	movs	r0, r2
 8001c8a:	f000 fa19 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2248      	movs	r2, #72	@ 0x48
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223e      	movs	r2, #62	@ 0x3e
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223f      	movs	r2, #63	@ 0x3f
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	@ 0x41
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2242      	movs	r2, #66	@ 0x42
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2243      	movs	r2, #67	@ 0x43
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2244      	movs	r2, #68	@ 0x44
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2245      	movs	r2, #69	@ 0x45
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2246      	movs	r2, #70	@ 0x46
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2247      	movs	r2, #71	@ 0x47
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	@ 0x3d
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x22>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	223e      	movs	r2, #62	@ 0x3e
 8001d0c:	5c9b      	ldrb	r3, [r3, r2]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	4193      	sbcs	r3, r2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	e037      	b.n	8001d8a <HAL_TIM_PWM_Start+0x92>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d108      	bne.n	8001d32 <HAL_TIM_PWM_Start+0x3a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	223f      	movs	r2, #63	@ 0x3f
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	4193      	sbcs	r3, r2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e02b      	b.n	8001d8a <HAL_TIM_PWM_Start+0x92>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d108      	bne.n	8001d4a <HAL_TIM_PWM_Start+0x52>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	@ 0x40
 8001d3c:	5c9b      	ldrb	r3, [r3, r2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4193      	sbcs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e01f      	b.n	8001d8a <HAL_TIM_PWM_Start+0x92>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d108      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x6a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2241      	movs	r2, #65	@ 0x41
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4193      	sbcs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e013      	b.n	8001d8a <HAL_TIM_PWM_Start+0x92>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d108      	bne.n	8001d7a <HAL_TIM_PWM_Start+0x82>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2242      	movs	r2, #66	@ 0x42
 8001d6c:	5c9b      	ldrb	r3, [r3, r2]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	1e5a      	subs	r2, r3, #1
 8001d74:	4193      	sbcs	r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	e007      	b.n	8001d8a <HAL_TIM_PWM_Start+0x92>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2243      	movs	r2, #67	@ 0x43
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	4193      	sbcs	r3, r2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e085      	b.n	8001e9e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xaa>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	223e      	movs	r2, #62	@ 0x3e
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	5499      	strb	r1, [r3, r2]
 8001da0:	e023      	b.n	8001dea <HAL_TIM_PWM_Start+0xf2>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d104      	bne.n	8001db2 <HAL_TIM_PWM_Start+0xba>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	223f      	movs	r2, #63	@ 0x3f
 8001dac:	2102      	movs	r1, #2
 8001dae:	5499      	strb	r1, [r3, r2]
 8001db0:	e01b      	b.n	8001dea <HAL_TIM_PWM_Start+0xf2>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_PWM_Start+0xca>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	5499      	strb	r1, [r3, r2]
 8001dc0:	e013      	b.n	8001dea <HAL_TIM_PWM_Start+0xf2>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d104      	bne.n	8001dd2 <HAL_TIM_PWM_Start+0xda>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2241      	movs	r2, #65	@ 0x41
 8001dcc:	2102      	movs	r1, #2
 8001dce:	5499      	strb	r1, [r3, r2]
 8001dd0:	e00b      	b.n	8001dea <HAL_TIM_PWM_Start+0xf2>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_PWM_Start+0xea>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2242      	movs	r2, #66	@ 0x42
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]
 8001de0:	e003      	b.n	8001dea <HAL_TIM_PWM_Start+0xf2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2243      	movs	r2, #67	@ 0x43
 8001de6:	2102      	movs	r1, #2
 8001de8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 fcac 	bl	8002750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <HAL_TIM_PWM_Start+0x1b0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_PWM_Start+0x128>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a29      	ldr	r2, [pc, #164]	@ (8001eac <HAL_TIM_PWM_Start+0x1b4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_PWM_Start+0x128>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a27      	ldr	r2, [pc, #156]	@ (8001eb0 <HAL_TIM_PWM_Start+0x1b8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_PWM_Start+0x128>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <HAL_TIM_PWM_Start+0x1bc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_TIM_PWM_Start+0x12c>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_TIM_PWM_Start+0x12e>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	0209      	lsls	r1, r1, #8
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_TIM_PWM_Start+0x1b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_TIM_PWM_Start+0x162>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_TIM_PWM_Start+0x1c0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_TIM_PWM_Start+0x162>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_TIM_PWM_Start+0x1b4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d116      	bne.n	8001e88 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a16      	ldr	r2, [pc, #88]	@ (8001ebc <HAL_TIM_PWM_Start+0x1c4>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d016      	beq.n	8001e9a <HAL_TIM_PWM_Start+0x1a2>
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d011      	beq.n	8001e9a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	e008      	b.n	8001e9a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e000      	b.n	8001e9c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40014000 	.word	0x40014000
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40014800 	.word	0x40014800
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	00010007 	.word	0x00010007

08001ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2317      	movs	r3, #23
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	223c      	movs	r2, #60	@ 0x3c
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e0e5      	b.n	80020ae <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	223c      	movs	r2, #60	@ 0x3c
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b14      	cmp	r3, #20
 8001eee:	d900      	bls.n	8001ef2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ef0:	e0d1      	b.n	8002096 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	009a      	lsls	r2, r3, #2
 8001ef6:	4b70      	ldr	r3, [pc, #448]	@ (80020b8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f95e 	bl	80021c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2108      	movs	r1, #8
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2104      	movs	r1, #4
 8001f28:	438a      	bics	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6999      	ldr	r1, [r3, #24]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	619a      	str	r2, [r3, #24]
      break;
 8001f3e:	e0af      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	0011      	movs	r1, r2
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 f9c7 	bl	80022dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	0109      	lsls	r1, r1, #4
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4954      	ldr	r1, [pc, #336]	@ (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6999      	ldr	r1, [r3, #24]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	021a      	lsls	r2, r3, #8
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	619a      	str	r2, [r3, #24]
      break;
 8001f84:	e08c      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fa28 	bl	80023e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2104      	movs	r1, #4
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69d9      	ldr	r1, [r3, #28]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
      break;
 8001fc6:	e06b      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	0011      	movs	r1, r2
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fa8f 	bl	80024f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2180      	movs	r1, #128	@ 0x80
 8001fe2:	0109      	lsls	r1, r1, #4
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4932      	ldr	r1, [pc, #200]	@ (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69d9      	ldr	r1, [r3, #28]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	021a      	lsls	r2, r3, #8
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	61da      	str	r2, [r3, #28]
      break;
 800200c:	e048      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	0011      	movs	r1, r2
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fad6 	bl	80025c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2108      	movs	r1, #8
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2104      	movs	r1, #4
 8002038:	438a      	bics	r2, r1
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800204e:	e027      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	0011      	movs	r1, r2
 8002058:	0018      	movs	r0, r3
 800205a:	f000 fb15 	bl	8002688 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0109      	lsls	r1, r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4910      	ldr	r1, [pc, #64]	@ (80020bc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800207c:	400a      	ands	r2, r1
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002094:	e004      	b.n	80020a0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002096:	2317      	movs	r3, #23
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
      break;
 800209e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	223c      	movs	r2, #60	@ 0x3c
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

  return status;
 80020a8:	2317      	movs	r3, #23
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	08003684 	.word	0x08003684
 80020bc:	fffffbff 	.word	0xfffffbff

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <TIM_Base_SetConfig+0xec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0x20>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <TIM_Base_SetConfig+0xf0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2270      	movs	r2, #112	@ 0x70
 80020e4:	4393      	bics	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2d      	ldr	r2, [pc, #180]	@ (80021ac <TIM_Base_SetConfig+0xec>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <TIM_Base_SetConfig+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	@ (80021b0 <TIM_Base_SetConfig+0xf0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00f      	beq.n	8002122 <TIM_Base_SetConfig+0x62>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2b      	ldr	r2, [pc, #172]	@ (80021b4 <TIM_Base_SetConfig+0xf4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00b      	beq.n	8002122 <TIM_Base_SetConfig+0x62>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2a      	ldr	r2, [pc, #168]	@ (80021b8 <TIM_Base_SetConfig+0xf8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <TIM_Base_SetConfig+0x62>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <TIM_Base_SetConfig+0xfc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <TIM_Base_SetConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a28      	ldr	r2, [pc, #160]	@ (80021c0 <TIM_Base_SetConfig+0x100>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d108      	bne.n	8002134 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <TIM_Base_SetConfig+0x104>)
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2280      	movs	r2, #128	@ 0x80
 8002138:	4393      	bics	r3, r2
 800213a:	001a      	movs	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <TIM_Base_SetConfig+0xec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00b      	beq.n	800217a <TIM_Base_SetConfig+0xba>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <TIM_Base_SetConfig+0xf8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <TIM_Base_SetConfig+0xba>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <TIM_Base_SetConfig+0xfc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <TIM_Base_SetConfig+0xba>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <TIM_Base_SetConfig+0x100>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d103      	bne.n	8002182 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2201      	movs	r2, #1
 800219a:	4393      	bics	r3, r2
 800219c:	001a      	movs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
  }
}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40002000 	.word	0x40002000
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	fffffcff 	.word	0xfffffcff

080021c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2201      	movs	r2, #1
 80021de:	4393      	bics	r3, r2
 80021e0:	001a      	movs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <TIM_OC1_SetConfig+0xf8>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2203      	movs	r2, #3
 80021fe:	4393      	bics	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2202      	movs	r2, #2
 8002210:	4393      	bics	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <TIM_OC1_SetConfig+0xfc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_OC1_SetConfig+0x76>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <TIM_OC1_SetConfig+0x100>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <TIM_OC1_SetConfig+0x76>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <TIM_OC1_SetConfig+0x104>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_OC1_SetConfig+0x76>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <TIM_OC1_SetConfig+0x108>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2208      	movs	r2, #8
 8002242:	4393      	bics	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2204      	movs	r2, #4
 8002254:	4393      	bics	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <TIM_OC1_SetConfig+0xfc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00b      	beq.n	8002278 <TIM_OC1_SetConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <TIM_OC1_SetConfig+0x100>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_OC1_SetConfig+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <TIM_OC1_SetConfig+0x104>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_OC1_SetConfig+0xb0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <TIM_OC1_SetConfig+0x108>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d111      	bne.n	800229c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4a16      	ldr	r2, [pc, #88]	@ (80022d4 <TIM_OC1_SetConfig+0x10c>)
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <TIM_OC1_SetConfig+0x110>)
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b006      	add	sp, #24
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	fffeff8f 	.word	0xfffeff8f
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800
 80022d4:	fffffeff 	.word	0xfffffeff
 80022d8:	fffffdff 	.word	0xfffffdff

080022dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	2210      	movs	r2, #16
 80022f2:	4393      	bics	r3, r2
 80022f4:	001a      	movs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <TIM_OC2_SetConfig+0xe8>)
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <TIM_OC2_SetConfig+0xec>)
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2220      	movs	r2, #32
 8002326:	4393      	bics	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a24      	ldr	r2, [pc, #144]	@ (80023cc <TIM_OC2_SetConfig+0xf0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10d      	bne.n	800235a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	4393      	bics	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	4393      	bics	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <TIM_OC2_SetConfig+0xf0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00b      	beq.n	800237a <TIM_OC2_SetConfig+0x9e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <TIM_OC2_SetConfig+0xf4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <TIM_OC2_SetConfig+0x9e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <TIM_OC2_SetConfig+0xf8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d003      	beq.n	800237a <TIM_OC2_SetConfig+0x9e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <TIM_OC2_SetConfig+0xfc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d113      	bne.n	80023a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <TIM_OC2_SetConfig+0x100>)
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <TIM_OC2_SetConfig+0x104>)
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	621a      	str	r2, [r3, #32]
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b006      	add	sp, #24
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	feff8fff 	.word	0xfeff8fff
 80023c8:	fffffcff 	.word	0xfffffcff
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40014000 	.word	0x40014000
 80023d4:	40014400 	.word	0x40014400
 80023d8:	40014800 	.word	0x40014800
 80023dc:	fffffbff 	.word	0xfffffbff
 80023e0:	fffff7ff 	.word	0xfffff7ff

080023e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a33      	ldr	r2, [pc, #204]	@ (80024c8 <TIM_OC3_SetConfig+0xe4>)
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a2f      	ldr	r2, [pc, #188]	@ (80024cc <TIM_OC3_SetConfig+0xe8>)
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2203      	movs	r2, #3
 8002418:	4393      	bics	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4a29      	ldr	r2, [pc, #164]	@ (80024d0 <TIM_OC3_SetConfig+0xec>)
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a25      	ldr	r2, [pc, #148]	@ (80024d4 <TIM_OC3_SetConfig+0xf0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <TIM_OC3_SetConfig+0xf4>)
 8002446:	4013      	ands	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4a20      	ldr	r2, [pc, #128]	@ (80024dc <TIM_OC3_SetConfig+0xf8>)
 800245a:	4013      	ands	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <TIM_OC3_SetConfig+0xf0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00b      	beq.n	800247e <TIM_OC3_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <TIM_OC3_SetConfig+0xfc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <TIM_OC3_SetConfig+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <TIM_OC3_SetConfig+0x100>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d003      	beq.n	800247e <TIM_OC3_SetConfig+0x9a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <TIM_OC3_SetConfig+0x104>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d113      	bne.n	80024a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <TIM_OC3_SetConfig+0x108>)
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <TIM_OC3_SetConfig+0x10c>)
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	621a      	str	r2, [r3, #32]
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b006      	add	sp, #24
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fffffeff 	.word	0xfffffeff
 80024cc:	fffeff8f 	.word	0xfffeff8f
 80024d0:	fffffdff 	.word	0xfffffdff
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	fffff7ff 	.word	0xfffff7ff
 80024dc:	fffffbff 	.word	0xfffffbff
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800
 80024ec:	ffffefff 	.word	0xffffefff
 80024f0:	ffffdfff 	.word	0xffffdfff

080024f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <TIM_OC4_SetConfig+0xb0>)
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <TIM_OC4_SetConfig+0xb4>)
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <TIM_OC4_SetConfig+0xb8>)
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <TIM_OC4_SetConfig+0xbc>)
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	031b      	lsls	r3, r3, #12
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <TIM_OC4_SetConfig+0xc0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00b      	beq.n	800256c <TIM_OC4_SetConfig+0x78>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <TIM_OC4_SetConfig+0xc4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <TIM_OC4_SetConfig+0x78>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <TIM_OC4_SetConfig+0xc8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_OC4_SetConfig+0x78>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <TIM_OC4_SetConfig+0xcc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d109      	bne.n	8002580 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <TIM_OC4_SetConfig+0xd0>)
 8002570:	4013      	ands	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b006      	add	sp, #24
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	ffffefff 	.word	0xffffefff
 80025a8:	feff8fff 	.word	0xfeff8fff
 80025ac:	fffffcff 	.word	0xfffffcff
 80025b0:	ffffdfff 	.word	0xffffdfff
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40014000 	.word	0x40014000
 80025bc:	40014400 	.word	0x40014400
 80025c0:	40014800 	.word	0x40014800
 80025c4:	ffffbfff 	.word	0xffffbfff

080025c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a23      	ldr	r2, [pc, #140]	@ (800266c <TIM_OC5_SetConfig+0xa4>)
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <TIM_OC5_SetConfig+0xa8>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <TIM_OC5_SetConfig+0xac>)
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <TIM_OC5_SetConfig+0xb0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_OC5_SetConfig+0x6e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a16      	ldr	r2, [pc, #88]	@ (800267c <TIM_OC5_SetConfig+0xb4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_OC5_SetConfig+0x6e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <TIM_OC5_SetConfig+0xb8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_OC5_SetConfig+0x6e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <TIM_OC5_SetConfig+0xbc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d109      	bne.n	800264a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	4a0c      	ldr	r2, [pc, #48]	@ (800266c <TIM_OC5_SetConfig+0xa4>)
 800263a:	4013      	ands	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b006      	add	sp, #24
 800266a:	bd80      	pop	{r7, pc}
 800266c:	fffeffff 	.word	0xfffeffff
 8002670:	fffeff8f 	.word	0xfffeff8f
 8002674:	fffdffff 	.word	0xfffdffff
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40014000 	.word	0x40014000
 8002680:	40014400 	.word	0x40014400
 8002684:	40014800 	.word	0x40014800

08002688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <TIM_OC6_SetConfig+0xa8>)
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a20      	ldr	r2, [pc, #128]	@ (8002734 <TIM_OC6_SetConfig+0xac>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <TIM_OC6_SetConfig+0xb0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a18      	ldr	r2, [pc, #96]	@ (800273c <TIM_OC6_SetConfig+0xb4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_OC6_SetConfig+0x70>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <TIM_OC6_SetConfig+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_OC6_SetConfig+0x70>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <TIM_OC6_SetConfig+0xbc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_OC6_SetConfig+0x70>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a15      	ldr	r2, [pc, #84]	@ (8002748 <TIM_OC6_SetConfig+0xc0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d109      	bne.n	800270c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	4a14      	ldr	r2, [pc, #80]	@ (800274c <TIM_OC6_SetConfig+0xc4>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b006      	add	sp, #24
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	ffefffff 	.word	0xffefffff
 8002734:	feff8fff 	.word	0xfeff8fff
 8002738:	ffdfffff 	.word	0xffdfffff
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400
 8002748:	40014800 	.word	0x40014800
 800274c:	fffbffff 	.word	0xfffbffff

08002750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	221f      	movs	r2, #31
 8002760:	4013      	ands	r3, r2
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	43d2      	mvns	r2, r2
 8002772:	401a      	ands	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	211f      	movs	r1, #31
 8002780:	400b      	ands	r3, r1
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d108      	bne.n	80027ba <HAL_TIMEx_PWMN_Start+0x22>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2244      	movs	r2, #68	@ 0x44
 80027ac:	5c9b      	ldrb	r3, [r3, r2]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	4193      	sbcs	r3, r2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	e01f      	b.n	80027fa <HAL_TIMEx_PWMN_Start+0x62>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d108      	bne.n	80027d2 <HAL_TIMEx_PWMN_Start+0x3a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2245      	movs	r2, #69	@ 0x45
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	4193      	sbcs	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	e013      	b.n	80027fa <HAL_TIMEx_PWMN_Start+0x62>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d108      	bne.n	80027ea <HAL_TIMEx_PWMN_Start+0x52>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2246      	movs	r2, #70	@ 0x46
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	4193      	sbcs	r3, r2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	e007      	b.n	80027fa <HAL_TIMEx_PWMN_Start+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2247      	movs	r2, #71	@ 0x47
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	4193      	sbcs	r3, r2
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e05c      	b.n	80028bc <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <HAL_TIMEx_PWMN_Start+0x7a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2244      	movs	r2, #68	@ 0x44
 800280c:	2102      	movs	r1, #2
 800280e:	5499      	strb	r1, [r3, r2]
 8002810:	e013      	b.n	800283a <HAL_TIMEx_PWMN_Start+0xa2>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d104      	bne.n	8002822 <HAL_TIMEx_PWMN_Start+0x8a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2245      	movs	r2, #69	@ 0x45
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]
 8002820:	e00b      	b.n	800283a <HAL_TIMEx_PWMN_Start+0xa2>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d104      	bne.n	8002832 <HAL_TIMEx_PWMN_Start+0x9a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2246      	movs	r2, #70	@ 0x46
 800282c:	2102      	movs	r1, #2
 800282e:	5499      	strb	r1, [r3, r2]
 8002830:	e003      	b.n	800283a <HAL_TIMEx_PWMN_Start+0xa2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2247      	movs	r2, #71	@ 0x47
 8002836:	2102      	movs	r1, #2
 8002838:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f94a 	bl	8002adc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	0209      	lsls	r1, r1, #8
 8002856:	430a      	orrs	r2, r1
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <HAL_TIMEx_PWMN_Start+0x12c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIMEx_PWMN_Start+0xe0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <HAL_TIMEx_PWMN_Start+0x130>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_TIMEx_PWMN_Start+0xe0>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <HAL_TIMEx_PWMN_Start+0x134>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d116      	bne.n	80028a6 <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_TIMEx_PWMN_Start+0x138>)
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b06      	cmp	r3, #6
 8002888:	d016      	beq.n	80028b8 <HAL_TIMEx_PWMN_Start+0x120>
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d011      	beq.n	80028b8 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	e008      	b.n	80028b8 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e000      	b.n	80028ba <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40014000 	.word	0x40014000
 80028d0:	00010007 	.word	0x00010007

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223c      	movs	r2, #60	@ 0x3c
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e04f      	b.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223c      	movs	r2, #60	@ 0x3c
 80028f0:	2101      	movs	r1, #1
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	@ 0x3d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2270      	movs	r2, #112	@ 0x70
 800292c:	4393      	bics	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10c      	bne.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2280      	movs	r2, #128	@ 0x80
 8002964:	4393      	bics	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	223d      	movs	r2, #61	@ 0x3d
 800297e:	2101      	movs	r1, #1
 8002980:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	223c      	movs	r2, #60	@ 0x3c
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012c00 	.word	0x40012c00
 8002998:	ff0fffff 	.word	0xff0fffff
 800299c:	40000400 	.word	0x40000400
 80029a0:	40014000 	.word	0x40014000

080029a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223c      	movs	r2, #60	@ 0x3c
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e06f      	b.n	8002aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223c      	movs	r2, #60	@ 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	22ff      	movs	r2, #255	@ 0xff
 80029cc:	4393      	bics	r3, r2
 80029ce:	001a      	movs	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a33      	ldr	r2, [pc, #204]	@ (8002aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80029dc:	401a      	ands	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a30      	ldr	r2, [pc, #192]	@ (8002aac <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80029ea:	401a      	ands	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80029f8:	401a      	ands	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002a06:	401a      	ands	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a29      	ldr	r2, [pc, #164]	@ (8002ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002a14:	401a      	ands	r2, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a22:	401a      	ands	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002a30:	401a      	ands	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002a40:	401a      	ands	r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d11c      	bne.n	8002a8e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002a58:	401a      	ands	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	051b      	lsls	r3, r3, #20
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002a68:	401a      	ands	r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a17      	ldr	r2, [pc, #92]	@ (8002ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002a76:	401a      	ands	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002a84:	401a      	ands	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223c      	movs	r2, #60	@ 0x3c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	fffffcff 	.word	0xfffffcff
 8002aac:	fffffbff 	.word	0xfffffbff
 8002ab0:	fffff7ff 	.word	0xfffff7ff
 8002ab4:	ffffefff 	.word	0xffffefff
 8002ab8:	ffffdfff 	.word	0xffffdfff
 8002abc:	ffffbfff 	.word	0xffffbfff
 8002ac0:	fff0ffff 	.word	0xfff0ffff
 8002ac4:	efffffff 	.word	0xefffffff
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	ff0fffff 	.word	0xff0fffff
 8002ad0:	feffffff 	.word	0xfeffffff
 8002ad4:	fdffffff 	.word	0xfdffffff
 8002ad8:	dfffffff 	.word	0xdfffffff

08002adc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	220f      	movs	r2, #15
 8002aec:	4013      	ands	r3, r2
 8002aee:	2204      	movs	r2, #4
 8002af0:	409a      	lsls	r2, r3
 8002af2:	0013      	movs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	43d2      	mvns	r2, r2
 8002afe:	401a      	ands	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	210f      	movs	r1, #15
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4099      	lsls	r1, r3
 8002b12:	000b      	movs	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b006      	add	sp, #24
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e046      	b.n	8002bc4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2288      	movs	r2, #136	@ 0x88
 8002b3a:	589b      	ldr	r3, [r3, r2]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2284      	movs	r2, #132	@ 0x84
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7fd fec8 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2288      	movs	r2, #136	@ 0x88
 8002b54:	2124      	movs	r1, #36	@ 0x24
 8002b56:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f000 f9d0 	bl	8002f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f828 	bl	8002bd0 <UART_SetConfig>
 8002b80:	0003      	movs	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01c      	b.n	8002bc4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	490d      	ldr	r1, [pc, #52]	@ (8002bcc <HAL_UART_Init+0xa8>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	212a      	movs	r1, #42	@ 0x2a
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fa5f 	bl	8003080 <UART_CheckIdleState>
 8002bc2:	0003      	movs	r3, r0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	ffffb7ff 	.word	0xffffb7ff

08002bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd8:	231a      	movs	r3, #26
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4abc      	ldr	r2, [pc, #752]	@ (8002ef0 <UART_SetConfig+0x320>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4ab7      	ldr	r2, [pc, #732]	@ (8002ef4 <UART_SetConfig+0x324>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4aae      	ldr	r2, [pc, #696]	@ (8002ef8 <UART_SetConfig+0x328>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	220f      	movs	r2, #15
 8002c54:	4393      	bics	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4aa4      	ldr	r2, [pc, #656]	@ (8002efc <UART_SetConfig+0x32c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d127      	bne.n	8002cbe <UART_SetConfig+0xee>
 8002c6e:	4ba4      	ldr	r3, [pc, #656]	@ (8002f00 <UART_SetConfig+0x330>)
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	2203      	movs	r2, #3
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <UART_SetConfig+0xda>
 8002c7a:	d81b      	bhi.n	8002cb4 <UART_SetConfig+0xe4>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d00a      	beq.n	8002c96 <UART_SetConfig+0xc6>
 8002c80:	d818      	bhi.n	8002cb4 <UART_SetConfig+0xe4>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <UART_SetConfig+0xbc>
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d00a      	beq.n	8002ca0 <UART_SetConfig+0xd0>
 8002c8a:	e013      	b.n	8002cb4 <UART_SetConfig+0xe4>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e058      	b.n	8002d48 <UART_SetConfig+0x178>
 8002c96:	231b      	movs	r3, #27
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e053      	b.n	8002d48 <UART_SetConfig+0x178>
 8002ca0:	231b      	movs	r3, #27
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e04e      	b.n	8002d48 <UART_SetConfig+0x178>
 8002caa:	231b      	movs	r3, #27
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2208      	movs	r2, #8
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e049      	b.n	8002d48 <UART_SetConfig+0x178>
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2210      	movs	r2, #16
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e044      	b.n	8002d48 <UART_SetConfig+0x178>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a90      	ldr	r2, [pc, #576]	@ (8002f04 <UART_SetConfig+0x334>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d127      	bne.n	8002d18 <UART_SetConfig+0x148>
 8002cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8002f00 <UART_SetConfig+0x330>)
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	220c      	movs	r2, #12
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d017      	beq.n	8002d04 <UART_SetConfig+0x134>
 8002cd4:	d81b      	bhi.n	8002d0e <UART_SetConfig+0x13e>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d00a      	beq.n	8002cf0 <UART_SetConfig+0x120>
 8002cda:	d818      	bhi.n	8002d0e <UART_SetConfig+0x13e>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <UART_SetConfig+0x116>
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d00a      	beq.n	8002cfa <UART_SetConfig+0x12a>
 8002ce4:	e013      	b.n	8002d0e <UART_SetConfig+0x13e>
 8002ce6:	231b      	movs	r3, #27
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e02b      	b.n	8002d48 <UART_SetConfig+0x178>
 8002cf0:	231b      	movs	r3, #27
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e026      	b.n	8002d48 <UART_SetConfig+0x178>
 8002cfa:	231b      	movs	r3, #27
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2204      	movs	r2, #4
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e021      	b.n	8002d48 <UART_SetConfig+0x178>
 8002d04:	231b      	movs	r3, #27
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	2208      	movs	r2, #8
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e01c      	b.n	8002d48 <UART_SetConfig+0x178>
 8002d0e:	231b      	movs	r3, #27
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2210      	movs	r2, #16
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e017      	b.n	8002d48 <UART_SetConfig+0x178>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f08 <UART_SetConfig+0x338>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d104      	bne.n	8002d2c <UART_SetConfig+0x15c>
 8002d22:	231b      	movs	r3, #27
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e00d      	b.n	8002d48 <UART_SetConfig+0x178>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a76      	ldr	r2, [pc, #472]	@ (8002f0c <UART_SetConfig+0x33c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d104      	bne.n	8002d40 <UART_SetConfig+0x170>
 8002d36:	231b      	movs	r3, #27
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e003      	b.n	8002d48 <UART_SetConfig+0x178>
 8002d40:	231b      	movs	r3, #27
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2210      	movs	r2, #16
 8002d46:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d000      	beq.n	8002d56 <UART_SetConfig+0x186>
 8002d54:	e065      	b.n	8002e22 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002d56:	231b      	movs	r3, #27
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d015      	beq.n	8002d8c <UART_SetConfig+0x1bc>
 8002d60:	dc18      	bgt.n	8002d94 <UART_SetConfig+0x1c4>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00d      	beq.n	8002d82 <UART_SetConfig+0x1b2>
 8002d66:	dc15      	bgt.n	8002d94 <UART_SetConfig+0x1c4>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <UART_SetConfig+0x1a2>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d005      	beq.n	8002d7c <UART_SetConfig+0x1ac>
 8002d70:	e010      	b.n	8002d94 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d72:	f7fe fe1f 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8002d76:	0003      	movs	r3, r0
 8002d78:	617b      	str	r3, [r7, #20]
        break;
 8002d7a:	e012      	b.n	8002da2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d7c:	4b64      	ldr	r3, [pc, #400]	@ (8002f10 <UART_SetConfig+0x340>)
 8002d7e:	617b      	str	r3, [r7, #20]
        break;
 8002d80:	e00f      	b.n	8002da2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d82:	f7fe fd8b 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8002d86:	0003      	movs	r3, r0
 8002d88:	617b      	str	r3, [r7, #20]
        break;
 8002d8a:	e00a      	b.n	8002da2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	617b      	str	r3, [r7, #20]
        break;
 8002d92:	e006      	b.n	8002da2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d98:	231a      	movs	r3, #26
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
        break;
 8002da0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d100      	bne.n	8002daa <UART_SetConfig+0x1da>
 8002da8:	e08d      	b.n	8002ec6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dae:	4b59      	ldr	r3, [pc, #356]	@ (8002f14 <UART_SetConfig+0x344>)
 8002db0:	0052      	lsls	r2, r2, #1
 8002db2:	5ad3      	ldrh	r3, [r2, r3]
 8002db4:	0019      	movs	r1, r3
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7fd f9a2 	bl	8000100 <__udivsi3>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	005a      	lsls	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	18d2      	adds	r2, r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0019      	movs	r1, r3
 8002dce:	0010      	movs	r0, r2
 8002dd0:	f7fd f996 	bl	8000100 <__udivsi3>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	d91c      	bls.n	8002e18 <UART_SetConfig+0x248>
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d217      	bcs.n	8002e18 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	200e      	movs	r0, #14
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	210f      	movs	r1, #15
 8002df2:	438a      	bics	r2, r1
 8002df4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b299      	uxth	r1, r3
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	183a      	adds	r2, r7, r0
 8002e06:	8812      	ldrh	r2, [r2, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	183a      	adds	r2, r7, r0
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	e056      	b.n	8002ec6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e18:	231a      	movs	r3, #26
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e051      	b.n	8002ec6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e22:	231b      	movs	r3, #27
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d015      	beq.n	8002e58 <UART_SetConfig+0x288>
 8002e2c:	dc18      	bgt.n	8002e60 <UART_SetConfig+0x290>
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d00d      	beq.n	8002e4e <UART_SetConfig+0x27e>
 8002e32:	dc15      	bgt.n	8002e60 <UART_SetConfig+0x290>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <UART_SetConfig+0x26e>
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0x278>
 8002e3c:	e010      	b.n	8002e60 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e3e:	f7fe fdb9 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 8002e42:	0003      	movs	r3, r0
 8002e44:	617b      	str	r3, [r7, #20]
        break;
 8002e46:	e012      	b.n	8002e6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <UART_SetConfig+0x340>)
 8002e4a:	617b      	str	r3, [r7, #20]
        break;
 8002e4c:	e00f      	b.n	8002e6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7fe fd25 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8002e52:	0003      	movs	r3, r0
 8002e54:	617b      	str	r3, [r7, #20]
        break;
 8002e56:	e00a      	b.n	8002e6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	617b      	str	r3, [r7, #20]
        break;
 8002e5e:	e006      	b.n	8002e6e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e64:	231a      	movs	r3, #26
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
        break;
 8002e6c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d028      	beq.n	8002ec6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <UART_SetConfig+0x344>)
 8002e7a:	0052      	lsls	r2, r2, #1
 8002e7c:	5ad3      	ldrh	r3, [r2, r3]
 8002e7e:	0019      	movs	r1, r3
 8002e80:	6978      	ldr	r0, [r7, #20]
 8002e82:	f7fd f93d 	bl	8000100 <__udivsi3>
 8002e86:	0003      	movs	r3, r0
 8002e88:	001a      	movs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	18d2      	adds	r2, r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	0019      	movs	r1, r3
 8002e98:	0010      	movs	r0, r2
 8002e9a:	f7fd f931 	bl	8000100 <__udivsi3>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d90a      	bls.n	8002ebe <UART_SetConfig+0x2ee>
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d205      	bcs.n	8002ebe <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	e003      	b.n	8002ec6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	226a      	movs	r2, #106	@ 0x6a
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2268      	movs	r2, #104	@ 0x68
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ee2:	231a      	movs	r3, #26
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b008      	add	sp, #32
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	cfff69f3 	.word	0xcfff69f3
 8002ef4:	ffffcfff 	.word	0xffffcfff
 8002ef8:	11fff4ff 	.word	0x11fff4ff
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40004400 	.word	0x40004400
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40004c00 	.word	0x40004c00
 8002f10:	00f42400 	.word	0x00f42400
 8002f14:	080036d8 	.word	0x080036d8

08002f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2208      	movs	r2, #8
 8002f26:	4013      	ands	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a4a      	ldr	r2, [pc, #296]	@ (800305c <UART_AdvFeatureConfig+0x144>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	2201      	movs	r2, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a43      	ldr	r2, [pc, #268]	@ (8003060 <UART_AdvFeatureConfig+0x148>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a3b      	ldr	r2, [pc, #236]	@ (8003064 <UART_AdvFeatureConfig+0x14c>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a34      	ldr	r2, [pc, #208]	@ (8003068 <UART_AdvFeatureConfig+0x150>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	2210      	movs	r2, #16
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d00b      	beq.n	8002fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800306c <UART_AdvFeatureConfig+0x154>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <UART_AdvFeatureConfig+0x158>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d01d      	beq.n	8003032 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <UART_AdvFeatureConfig+0x15c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	035b      	lsls	r3, r3, #13
 8003016:	429a      	cmp	r2, r3
 8003018:	d10b      	bne.n	8003032 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <UART_AdvFeatureConfig+0x160>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	4013      	ands	r3, r2
 800303a:	d00b      	beq.n	8003054 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a0e      	ldr	r2, [pc, #56]	@ (800307c <UART_AdvFeatureConfig+0x164>)
 8003044:	4013      	ands	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  }
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}
 800305c:	ffff7fff 	.word	0xffff7fff
 8003060:	fffdffff 	.word	0xfffdffff
 8003064:	fffeffff 	.word	0xfffeffff
 8003068:	fffbffff 	.word	0xfffbffff
 800306c:	ffffefff 	.word	0xffffefff
 8003070:	ffffdfff 	.word	0xffffdfff
 8003074:	ffefffff 	.word	0xffefffff
 8003078:	ff9fffff 	.word	0xff9fffff
 800307c:	fff7ffff 	.word	0xfff7ffff

08003080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b092      	sub	sp, #72	@ 0x48
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2290      	movs	r2, #144	@ 0x90
 800308c:	2100      	movs	r1, #0
 800308e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fd fd4a 	bl	8000b28 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d12d      	bne.n	8003102 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	0391      	lsls	r1, r2, #14
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4a47      	ldr	r2, [pc, #284]	@ (80031cc <UART_CheckIdleState+0x14c>)
 80030b0:	9200      	str	r2, [sp, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f000 f88e 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d022      	beq.n	8003102 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030bc:	f3ef 8310 	mrs	r3, PRIMASK
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c6:	2301      	movs	r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	@ 0x80
 80030de:	438a      	bics	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2288      	movs	r2, #136	@ 0x88
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2284      	movs	r2, #132	@ 0x84
 80030fa:	2100      	movs	r1, #0
 80030fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e060      	b.n	80031c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2204      	movs	r2, #4
 800310a:	4013      	ands	r3, r2
 800310c:	2b04      	cmp	r3, #4
 800310e:	d146      	bne.n	800319e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003112:	2280      	movs	r2, #128	@ 0x80
 8003114:	03d1      	lsls	r1, r2, #15
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4a2c      	ldr	r2, [pc, #176]	@ (80031cc <UART_CheckIdleState+0x14c>)
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	f000 f859 	bl	80031d4 <UART_WaitOnFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d03b      	beq.n	800319e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003126:	f3ef 8310 	mrs	r3, PRIMASK
 800312a:	60fb      	str	r3, [r7, #12]
  return(result);
 800312c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003130:	2301      	movs	r3, #1
 8003132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4922      	ldr	r1, [pc, #136]	@ (80031d0 <UART_CheckIdleState+0x150>)
 8003148:	400a      	ands	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f383 8810 	msr	PRIMASK, r3
}
 8003156:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	61bb      	str	r3, [r7, #24]
  return(result);
 800315e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003160:	633b      	str	r3, [r7, #48]	@ 0x30
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f383 8810 	msr	PRIMASK, r3
}
 8003188:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	228c      	movs	r2, #140	@ 0x8c
 800318e:	2120      	movs	r1, #32
 8003190:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2284      	movs	r2, #132	@ 0x84
 8003196:	2100      	movs	r1, #0
 8003198:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e012      	b.n	80031c4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2288      	movs	r2, #136	@ 0x88
 80031a2:	2120      	movs	r1, #32
 80031a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	228c      	movs	r2, #140	@ 0x8c
 80031aa:	2120      	movs	r1, #32
 80031ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2284      	movs	r2, #132	@ 0x84
 80031be:	2100      	movs	r1, #0
 80031c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b010      	add	sp, #64	@ 0x40
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	01ffffff 	.word	0x01ffffff
 80031d0:	fffffedf 	.word	0xfffffedf

080031d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e4:	e051      	b.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3301      	adds	r3, #1
 80031ea:	d04e      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7fd fc9c 	bl	8000b28 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e051      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2204      	movs	r2, #4
 800320e:	4013      	ands	r3, r2
 8003210:	d03b      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b80      	cmp	r3, #128	@ 0x80
 8003216:	d038      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b40      	cmp	r3, #64	@ 0x40
 800321c:	d035      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	2208      	movs	r2, #8
 8003226:	4013      	ands	r3, r2
 8003228:	2b08      	cmp	r3, #8
 800322a:	d111      	bne.n	8003250 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	0018      	movs	r0, r3
 8003238:	f000 f83c 	bl	80032b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2290      	movs	r2, #144	@ 0x90
 8003240:	2108      	movs	r1, #8
 8003242:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2284      	movs	r2, #132	@ 0x84
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e02c      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	401a      	ands	r2, r3
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	429a      	cmp	r2, r3
 8003262:	d112      	bne.n	800328a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f81f 	bl	80032b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2290      	movs	r2, #144	@ 0x90
 800327a:	2120      	movs	r1, #32
 800327c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2284      	movs	r2, #132	@ 0x84
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e00f      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	425a      	negs	r2, r3
 800329a:	4153      	adcs	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	001a      	movs	r2, r3
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d09e      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08e      	sub	sp, #56	@ 0x38
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	617b      	str	r3, [r7, #20]
  return(result);
 80032c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4926      	ldr	r1, [pc, #152]	@ (8003378 <UART_EndRxTransfer+0xc4>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ee:	f3ef 8310 	mrs	r3, PRIMASK
 80032f2:	623b      	str	r3, [r7, #32]
  return(result);
 80032f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	491b      	ldr	r1, [pc, #108]	@ (800337c <UART_EndRxTransfer+0xc8>)
 8003310:	400a      	ands	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d118      	bne.n	800335a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	60bb      	str	r3, [r7, #8]
  return(result);
 800332e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003332:	2301      	movs	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2110      	movs	r1, #16
 800334a:	438a      	bics	r2, r1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	228c      	movs	r2, #140	@ 0x8c
 800335e:	2120      	movs	r1, #32
 8003360:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b00e      	add	sp, #56	@ 0x38
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	fffffedf 	.word	0xfffffedf
 800337c:	effffffe 	.word	0xeffffffe

08003380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2284      	movs	r2, #132	@ 0x84
 800338c:	5c9b      	ldrb	r3, [r3, r2]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_UARTEx_DisableFifoMode+0x16>
 8003392:	2302      	movs	r3, #2
 8003394:	e027      	b.n	80033e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2284      	movs	r2, #132	@ 0x84
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2288      	movs	r2, #136	@ 0x88
 80033a2:	2124      	movs	r1, #36	@ 0x24
 80033a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	438a      	bics	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a0b      	ldr	r2, [pc, #44]	@ (80033f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2288      	movs	r2, #136	@ 0x88
 80033d8:	2120      	movs	r1, #32
 80033da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2284      	movs	r2, #132	@ 0x84
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b004      	add	sp, #16
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	dfffffff 	.word	0xdfffffff

080033f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2284      	movs	r2, #132	@ 0x84
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e02e      	b.n	800346a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2284      	movs	r2, #132	@ 0x84
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2288      	movs	r2, #136	@ 0x88
 8003418:	2124      	movs	r1, #36	@ 0x24
 800341a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2101      	movs	r1, #1
 8003430:	438a      	bics	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	08d9      	lsrs	r1, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f854 	bl	80034f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2288      	movs	r2, #136	@ 0x88
 800345c:	2120      	movs	r1, #32
 800345e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2284      	movs	r2, #132	@ 0x84
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b004      	add	sp, #16
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2284      	movs	r2, #132	@ 0x84
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e02f      	b.n	80034ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2284      	movs	r2, #132	@ 0x84
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2288      	movs	r2, #136	@ 0x88
 8003498:	2124      	movs	r1, #36	@ 0x24
 800349a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2101      	movs	r1, #1
 80034b0:	438a      	bics	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	@ (80034f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f813 	bl	80034f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2288      	movs	r2, #136	@ 0x88
 80034de:	2120      	movs	r1, #32
 80034e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2284      	movs	r2, #132	@ 0x84
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	f1ffffff 	.word	0xf1ffffff

080034f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	226a      	movs	r2, #106	@ 0x6a
 800350c:	2101      	movs	r1, #1
 800350e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2268      	movs	r2, #104	@ 0x68
 8003514:	2101      	movs	r1, #1
 8003516:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003518:	e043      	b.n	80035a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800351a:	260f      	movs	r6, #15
 800351c:	19bb      	adds	r3, r7, r6
 800351e:	2208      	movs	r2, #8
 8003520:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003522:	200e      	movs	r0, #14
 8003524:	183b      	adds	r3, r7, r0
 8003526:	2208      	movs	r2, #8
 8003528:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	0e5b      	lsrs	r3, r3, #25
 8003532:	b2da      	uxtb	r2, r3
 8003534:	240d      	movs	r4, #13
 8003536:	193b      	adds	r3, r7, r4
 8003538:	2107      	movs	r1, #7
 800353a:	400a      	ands	r2, r1
 800353c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	0f5b      	lsrs	r3, r3, #29
 8003546:	b2da      	uxtb	r2, r3
 8003548:	250c      	movs	r5, #12
 800354a:	197b      	adds	r3, r7, r5
 800354c:	2107      	movs	r1, #7
 800354e:	400a      	ands	r2, r1
 8003550:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003552:	183b      	adds	r3, r7, r0
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	197a      	adds	r2, r7, r5
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	4914      	ldr	r1, [pc, #80]	@ (80035ac <UARTEx_SetNbDataToProcess+0xb4>)
 800355c:	5c8a      	ldrb	r2, [r1, r2]
 800355e:	435a      	muls	r2, r3
 8003560:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003562:	197b      	adds	r3, r7, r5
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	4a12      	ldr	r2, [pc, #72]	@ (80035b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003568:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800356a:	0019      	movs	r1, r3
 800356c:	f7fc fe52 	bl	8000214 <__divsi3>
 8003570:	0003      	movs	r3, r0
 8003572:	b299      	uxth	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	226a      	movs	r2, #106	@ 0x6a
 8003578:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800357a:	19bb      	adds	r3, r7, r6
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	193a      	adds	r2, r7, r4
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <UARTEx_SetNbDataToProcess+0xb4>)
 8003584:	5c8a      	ldrb	r2, [r1, r2]
 8003586:	435a      	muls	r2, r3
 8003588:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800358a:	193b      	adds	r3, r7, r4
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	4a08      	ldr	r2, [pc, #32]	@ (80035b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003592:	0019      	movs	r1, r3
 8003594:	f7fc fe3e 	bl	8000214 <__divsi3>
 8003598:	0003      	movs	r3, r0
 800359a:	b299      	uxth	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2268      	movs	r2, #104	@ 0x68
 80035a0:	5299      	strh	r1, [r3, r2]
}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b005      	add	sp, #20
 80035a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	080036f0 	.word	0x080036f0
 80035b0:	080036f8 	.word	0x080036f8

080035b4 <memset>:
 80035b4:	0003      	movs	r3, r0
 80035b6:	1882      	adds	r2, r0, r2
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d100      	bne.n	80035be <memset+0xa>
 80035bc:	4770      	bx	lr
 80035be:	7019      	strb	r1, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	e7f9      	b.n	80035b8 <memset+0x4>

080035c4 <__libc_init_array>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2600      	movs	r6, #0
 80035c8:	4c0c      	ldr	r4, [pc, #48]	@ (80035fc <__libc_init_array+0x38>)
 80035ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003600 <__libc_init_array+0x3c>)
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	42a6      	cmp	r6, r4
 80035d2:	d109      	bne.n	80035e8 <__libc_init_array+0x24>
 80035d4:	2600      	movs	r6, #0
 80035d6:	f000 f819 	bl	800360c <_init>
 80035da:	4c0a      	ldr	r4, [pc, #40]	@ (8003604 <__libc_init_array+0x40>)
 80035dc:	4d0a      	ldr	r5, [pc, #40]	@ (8003608 <__libc_init_array+0x44>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	42a6      	cmp	r6, r4
 80035e4:	d105      	bne.n	80035f2 <__libc_init_array+0x2e>
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	00b3      	lsls	r3, r6, #2
 80035ea:	58eb      	ldr	r3, [r5, r3]
 80035ec:	4798      	blx	r3
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7ee      	b.n	80035d0 <__libc_init_array+0xc>
 80035f2:	00b3      	lsls	r3, r6, #2
 80035f4:	58eb      	ldr	r3, [r5, r3]
 80035f6:	4798      	blx	r3
 80035f8:	3601      	adds	r6, #1
 80035fa:	e7f2      	b.n	80035e2 <__libc_init_array+0x1e>
 80035fc:	08003700 	.word	0x08003700
 8003600:	08003700 	.word	0x08003700
 8003604:	08003704 	.word	0x08003704
 8003608:	08003700 	.word	0x08003700

0800360c <_init>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr

08003618 <_fini>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr
