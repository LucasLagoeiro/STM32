
UsingTimer_to_TriggerADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1cc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a464  0800a464  0000b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a49c  0800a49c  0000c0d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a49c  0800a49c  0000b49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a4  0800a4a4  0000c0d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a4  0800a4a4  0000b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4a8  0800a4a8  0000b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800a4ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800a4bc  0000c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800a51c  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000073c  240000d0  0800a57c  0000c0d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400080c  0800a57c  0000c80c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022aa4  00000000  00000000  0000c0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003681  00000000  00000000  0002eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001442  00000000  00000000  00033c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dd57  00000000  00000000  0003505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020875  00000000  00000000  00072db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a085f  00000000  00000000  00093626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00233e85  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000071f8  00000000  00000000  00233ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  0023b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a44c 	.word	0x0800a44c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800a44c 	.word	0x0800a44c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b34      	ldr	r3, [pc, #208]	@ (80007d4 <main+0xe0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fb55 	bl	8000dcc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fe39 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f85b 	bl	80007e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <main+0xe0>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <main+0xe0>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <main+0xe0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f003 fc9b 	bl	8004084 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f003 fcb1 	bl	80040b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <main+0xe0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fb27 	bl	8000dcc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa7d 	bl	8000c7c <MX_GPIO_Init>
  MX_ETH_Init();
 8000782:	f000 f925 	bl	80009d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000786:	f000 f9fb 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078a:	f000 fa45 	bl	8000c18 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800078e:	f000 f8a3 	bl	80008d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000792:	f000 f969 	bl	8000a68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // calibrate ADC for better accuracy and start it w/ interrupt
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000796:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800079a:	2100      	movs	r1, #0
 800079c:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <main+0xe4>)
 800079e:	f002 fbd5 	bl	8002f4c <HAL_ADCEx_Calibration_Start>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <main+0xb8>
	  Error_Handler();
 80007a8:	f000 fb10 	bl	8000dcc <Error_Handler>

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 80007ac:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <main+0xe4>)
 80007ae:	f001 fa87 	bl	8001cc0 <HAL_ADC_Start_IT>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <main+0xc8>
	  Error_Handler();
 80007b8:	f000 fb08 	bl	8000dcc <Error_Handler>

  // start pwm generation
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0xe8>)
 80007c0:	f007 fb64 	bl	8007e8c <HAL_TIM_PWM_Start>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <main+0xdc>
	  Error_Handler();
 80007ca:	f000 faff 	bl	8000dcc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <main+0xdc>
 80007d4:	58024400 	.word	0x58024400
 80007d8:	24000124 	.word	0x24000124
 80007dc:	24000238 	.word	0x24000238

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	@ 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ea:	224c      	movs	r2, #76	@ 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 fdff 	bl	800a3f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f009 fdf9 	bl	800a3f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f003 fd9d 	bl	8004340 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b31      	ldr	r3, [pc, #196]	@ (80008d0 <SystemClock_Config+0xf0>)
 800080c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080e:	4a30      	ldr	r2, [pc, #192]	@ (80008d0 <SystemClock_Config+0xf0>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <SystemClock_Config+0xf0>)
 8000818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <SystemClock_Config+0xf4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000828:	4a2a      	ldr	r2, [pc, #168]	@ (80008d4 <SystemClock_Config+0xf4>)
 800082a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <SystemClock_Config+0xf4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <SystemClock_Config+0xf4>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000862:	234b      	movs	r3, #75	@ 0x4b
 8000864:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000872:	230c      	movs	r3, #12
 8000874:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000876:	2300      	movs	r3, #0
 8000878:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fdc6 	bl	8004414 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800088e:	f000 fa9d 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	233f      	movs	r3, #63	@ 0x3f
 8000894:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2303      	movs	r3, #3
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800089e:	2308      	movs	r3, #8
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a2:	2340      	movs	r3, #64	@ 0x40
 80008a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b0:	2340      	movs	r3, #64	@ 0x40
 80008b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2102      	movs	r1, #2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fa05 	bl	8004cc8 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008c4:	f000 fa82 	bl	8000dcc <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3770      	adds	r7, #112	@ 0x70
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	58000400 	.word	0x58000400
 80008d4:	58024800 	.word	0x58024800

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fc:	4b31      	ldr	r3, [pc, #196]	@ (80009c4 <MX_ADC1_Init+0xec>)
 80008fe:	4a32      	ldr	r2, [pc, #200]	@ (80009c8 <MX_ADC1_Init+0xf0>)
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000902:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000904:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800090a:	4b2e      	ldr	r3, [pc, #184]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000918:	2204      	movs	r2, #4
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800091e:	2200      	movs	r2, #0
 8000920:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000928:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800092a:	2201      	movs	r2, #1
 800092c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000936:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800093e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000942:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000946:	2200      	movs	r2, #0
 8000948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800094a:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	4819      	ldr	r0, [pc, #100]	@ (80009c4 <MX_ADC1_Init+0xec>)
 8000960:	f001 f80c 	bl	800197c <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 fa2f 	bl	8000dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800097a:	f002 fb7d 	bl	8003078 <HAL_ADCEx_MultiModeConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000984:	f000 fa22 	bl	8000dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_ADC1_Init+0xf4>)
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000998:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099a:	2304      	movs	r3, #4
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <MX_ADC1_Init+0xec>)
 80009ac:	f001 fd22 	bl	80023f4 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80009b6:	f000 fa09 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000124 	.word	0x24000124
 80009c8:	40022000 	.word	0x40022000
 80009cc:	08600004 	.word	0x08600004

080009d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <MX_ETH_Init+0x80>)
 80009d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a54 <MX_ETH_Init+0x84>)
 80009d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009e8:	22e1      	movs	r2, #225	@ 0xe1
 80009ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_ETH_Init+0x88>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a00:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <MX_ETH_Init+0x88>)
 8000a02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <MX_ETH_Init+0x8c>)
 8000a0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <MX_ETH_Init+0x90>)
 8000a14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a18:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a1e:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_ETH_Init+0x80>)
 8000a20:	f002 fd18 	bl	8003454 <HAL_ETH_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 f9cf 	bl	8000dcc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a2e:	2238      	movs	r2, #56	@ 0x38
 8000a30:	2100      	movs	r1, #0
 8000a32:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_ETH_Init+0x94>)
 8000a34:	f009 fcdd 	bl	800a3f2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <MX_ETH_Init+0x94>)
 8000a3a:	2221      	movs	r2, #33	@ 0x21
 8000a3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_ETH_Init+0x94>)
 8000a40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MX_ETH_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000188 	.word	0x24000188
 8000a54:	40028000 	.word	0x40028000
 8000a58:	24000800 	.word	0x24000800
 8000a5c:	24000070 	.word	0x24000070
 8000a60:	24000010 	.word	0x24000010
 8000a64:	240000ec 	.word	0x240000ec

08000a68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	@ 0x58
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	222c      	movs	r2, #44	@ 0x2c
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f009 fcac 	bl	800a3f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000a9c:	4a37      	ldr	r2, [pc, #220]	@ (8000b7c <MX_TIM1_Init+0x114>)
 8000a9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa0:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000aac:	4b32      	ldr	r3, [pc, #200]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000aae:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8000ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac6:	482c      	ldr	r0, [pc, #176]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000ac8:	f007 f988 	bl	8007ddc <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f97b 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4823      	ldr	r0, [pc, #140]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000aea:	f007 ff93 	bl	8008a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000af4:	f000 f96a 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af8:	2360      	movs	r3, #96	@ 0x60
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4816      	ldr	r0, [pc, #88]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000b1e:	f007 fac3 	bl	80080a8 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b28:	f000 f950 	bl	8000dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM1_Init+0x110>)
 8000b62:	f007 ffe5 	bl	8008b30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b6c:	f000 f92e 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3758      	adds	r7, #88	@ 0x58
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	24000238 	.word	0x24000238
 8000b7c:	40010000 	.word	0x40010000

08000b80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <MX_USART3_UART_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bca:	f008 f82f 	bl	8008c2c <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f8fa 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bdc:	f009 f837 	bl	8009c4e <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f8f1 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bee:	f009 f86c 	bl	8009cca <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f8e8 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bfe:	f008 ffed 	bl	8009bdc <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f8e0 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000284 	.word	0x24000284
 8000c14:	40004800 	.word	0x40004800

08000c18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1e:	4a16      	ldr	r2, [pc, #88]	@ (8000c78 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c24:	2209      	movs	r2, #9
 8000c26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c60:	f003 fa3e 	bl	80040e0 <HAL_PCD_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c6a:	f000 f8af 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	24000318 	.word	0x24000318
 8000c78:	40080000 	.word	0x40080000

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	@ 0x30
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b40      	ldr	r3, [pc, #256]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a3e      	ldr	r2, [pc, #248]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
 8000cae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb0:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	4a37      	ldr	r2, [pc, #220]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc0:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_GPIO_Init+0x118>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_GPIO_Init+0x11c>)
 8000d6a:	f003 f957 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <MX_GPIO_Init+0x11c>)
 8000d86:	f002 ff99 	bl	8003cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	@ 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020400 	.word	0x58020400

08000d9c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0x24>)
 8000da6:	f001 f8c9 	bl	8001f3c <HAL_ADC_GetValue>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000dae:	6013      	str	r3, [r2, #0]
	// Toggle the Green LED
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000db0:	2101      	movs	r1, #1
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000db4:	f003 f94b 	bl	800404e <HAL_GPIO_TogglePin>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24000124 	.word	0x24000124
 8000dc4:	240007fc 	.word	0x240007fc
 8000dc8:	58020400 	.word	0x58020400

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <Error_Handler+0x8>

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de4:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <HAL_MspInit+0x30>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_MspInit+0x30>)
 8000df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	58024400 	.word	0x58024400

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	22c0      	movs	r2, #192	@ 0xc0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f009 fae0 	bl	800a3f2 <memset>
  if(hadc->Instance==ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a30      	ldr	r2, [pc, #192]	@ (8000ef8 <HAL_ADC_MspInit+0xec>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d159      	bne.n	8000ef0 <HAL_ADC_MspInit+0xe4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e5c:	23c0      	movs	r3, #192	@ 0xc0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e60:	2320      	movs	r3, #32
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8000e64:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 fab3 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000e80:	f7ff ffa4 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_ADC_MspInit+0xf0>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000edc:	f002 feee 	bl	8003cbc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2012      	movs	r0, #18
 8000ee6:	f002 fa80 	bl	80033ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eea:	2012      	movs	r0, #18
 8000eec:	f002 fa97 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	37e8      	adds	r7, #232	@ 0xe8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40022000 	.word	0x40022000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58021400 	.word	0x58021400

08000f04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <HAL_ETH_MspInit+0x184>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80ab 	bne.w	800107e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f28:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f2e:	4a57      	ldr	r2, [pc, #348]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f38:	4b54      	ldr	r3, [pc, #336]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f64:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f6a:	4a48      	ldr	r2, [pc, #288]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f74:	4b45      	ldr	r3, [pc, #276]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b42      	ldr	r3, [pc, #264]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2332      	movs	r3, #50	@ 0x32
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	@ (8001090 <HAL_ETH_MspInit+0x18c>)
 8001016:	f002 fe51 	bl	8003cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800101a:	2386      	movs	r3, #134	@ 0x86
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <HAL_ETH_MspInit+0x190>)
 8001036:	f002 fe41 	bl	8003cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <HAL_ETH_MspInit+0x194>)
 8001058:	f002 fe30 	bl	8003cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	@ (800109c <HAL_ETH_MspInit+0x198>)
 800107a:	f002 fe1f 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	58021800 	.word	0x58021800

080010a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_TIM_PWM_MspInit+0x3c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10e      	bne.n	80010d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x40>)
 80010b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b8:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x40>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <HAL_TIM_PWM_MspInit+0x40>)
 80010c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40010000 	.word	0x40010000
 80010e0:	58024400 	.word	0x58024400

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ba      	sub	sp, #232	@ 0xe8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	22c0      	movs	r2, #192	@ 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f009 f974 	bl	800a3f2 <memset>
  if(huart->Instance==USART3)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d146      	bne.n	80011a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001114:	f04f 0202 	mov.w	r2, #2
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f958 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001136:	f7ff fe49 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800113c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 8001142:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001146:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800114c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800117a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <HAL_UART_MspInit+0xd0>)
 800119e:	f002 fd8d 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	37e8      	adds	r7, #232	@ 0xe8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0ba      	sub	sp, #232	@ 0xe8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	22c0      	movs	r2, #192	@ 0xc0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f009 f90a 	bl	800a3f2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a38      	ldr	r2, [pc, #224]	@ (80012c4 <HAL_PCD_MspInit+0x10c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d169      	bne.n	80012bc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011f8:	2312      	movs	r3, #18
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001200:	2303      	movs	r3, #3
 8001202:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 800120e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001212:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001214:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f8dd 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800122c:	f7ff fdce 	bl	8000dcc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001230:	f003 f8e0 	bl	80043f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001252:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800126c:	230a      	movs	r3, #10
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001276:	4619      	mov	r1, r3
 8001278:	4814      	ldr	r0, [pc, #80]	@ (80012cc <HAL_PCD_MspInit+0x114>)
 800127a:	f002 fd1f 	bl	8003cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <HAL_PCD_MspInit+0x114>)
 800129a:	f002 fd0f 	bl	8003cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 80012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012a4:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 80012a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_PCD_MspInit+0x110>)
 80012b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	37e8      	adds	r7, #232	@ 0xe8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40080000 	.word	0x40080000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020000 	.word	0x58020000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <NMI_Handler+0x4>

080012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <MemManage_Handler+0x4>

080012e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f8a9 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <ADC_IRQHandler+0x10>)
 8001336:	f000 fe0f 	bl	8001f58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000124 	.word	0x24000124

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff f93e 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f009 f847 	bl	800a404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff f9bd 	bl	80006f4 <main>
  bx  lr
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001380:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001384:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001388:	0800a4ac 	.word	0x0800a4ac
  ldr r2, =_sbss
 800138c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001390:	2400080c 	.word	0x2400080c

08001394 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC3_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139e:	2003      	movs	r0, #3
 80013a0:	f002 f818 	bl	80033d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a4:	f003 fe46 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4913      	ldr	r1, [pc, #76]	@ (8001404 <HAL_Init+0x6c>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_Init+0x6c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_Init+0x70>)
 80013da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_Init+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f814 	bl	8001410 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e002      	b.n	80013f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f2:	f7ff fcf1 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400
 8001404:	0800a464 	.word	0x0800a464
 8001408:	24000004 	.word	0x24000004
 800140c:	24000000 	.word	0x24000000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_InitTick+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e021      	b.n	8001468 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_InitTick+0x64>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_InitTick+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fffd 	bl	800343a <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f001 ffc7 	bl	80033ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <HAL_InitTick+0x68>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2400000c 	.word	0x2400000c
 8001474:	24000000 	.word	0x24000000
 8001478:	24000008 	.word	0x24000008

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2400000c 	.word	0x2400000c
 80014a0:	24000808 	.word	0x24000808

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	24000808 	.word	0x24000808

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2400000c 	.word	0x2400000c

08001504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <HAL_GetREVID+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	5c001000 	.word	0x5c001000

0800151c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800152c:	4904      	ldr	r1, [pc, #16]	@ (8001540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	58000400 	.word	0x58000400

08001544 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3360      	adds	r3, #96	@ 0x60
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	430b      	orrs	r3, r1
 80015da:	431a      	orrs	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	611a      	str	r2, [r3, #16]
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3360      	adds	r3, #96	@ 0x60
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	431a      	orrs	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	601a      	str	r2, [r3, #0]
  }
}
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3330      	adds	r3, #48	@ 0x30
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	211f      	movs	r1, #31
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0e9b      	lsrs	r3, r3, #26
 80016b2:	f003 011f 	and.w	r1, r3, #31
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3314      	adds	r3, #20
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	0e5b      	lsrs	r3, r3, #25
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0d1b      	lsrs	r3, r3, #20
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2107      	movs	r1, #7
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	0d1b      	lsrs	r3, r3, #20
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0318 	and.w	r3, r3, #24
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001774:	40d9      	lsrs	r1, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	400b      	ands	r3, r1
 800177a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	000fffff 	.word	0x000fffff

08001798 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 031f 	and.w	r3, r3, #31
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	5fffffc0 	.word	0x5fffffc0

080017f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001808:	d101      	bne.n	800180e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <LL_ADC_EnableInternalRegulator+0x24>)
 800182a:	4013      	ands	r3, r2
 800182c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	6fffffc0 	.word	0x6fffffc0

08001844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001858:	d101      	bne.n	800185e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <LL_ADC_Enable+0x24>)
 800187a:	4013      	ands	r3, r2
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	7fffffc0 	.word	0x7fffffc0

08001894 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <LL_ADC_Disable+0x24>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	f043 0202 	orr.w	r2, r3, #2
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	7fffffc0 	.word	0x7fffffc0

080018bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <LL_ADC_IsEnabled+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_ADC_IsEnabled+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d101      	bne.n	80018fa <LL_ADC_IsDisableOngoing+0x18>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_IsDisableOngoing+0x1a>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <LL_ADC_REG_StartConversion+0x24>)
 8001916:	4013      	ands	r3, r2
 8001918:	f043 0204 	orr.w	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	7fffffc0 	.word	0x7fffffc0

08001930 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b04      	cmp	r3, #4
 8001942:	d101      	bne.n	8001948 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d101      	bne.n	800196e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e18f      	b.n	8001cb6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fa31 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff19 	bl	80017f4 <LL_ADC_IsDeepPowerDownEnabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff feff 	bl	80017d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff34 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d114      	bne.n	8001a0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff18 	bl	800181c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019ec:	4b87      	ldr	r3, [pc, #540]	@ (8001c0c <HAL_ADC_Init+0x290>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	4a87      	ldr	r2, [pc, #540]	@ (8001c10 <HAL_ADC_Init+0x294>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019fe:	e002      	b.n	8001a06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f9      	bne.n	8001a00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff17 	bl	8001844 <LL_ADC_IsInternalRegulatorEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff77 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 8001a42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 8129 	bne.w	8001ca4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 8125 	bne.w	8001ca4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a62:	f043 0202 	orr.w	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff24 	bl	80018bc <LL_ADC_IsEnabled>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d136      	bne.n	8001ae8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a65      	ldr	r2, [pc, #404]	@ (8001c14 <HAL_ADC_Init+0x298>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_ADC_Init+0x112>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a63      	ldr	r2, [pc, #396]	@ (8001c18 <HAL_ADC_Init+0x29c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10e      	bne.n	8001aac <HAL_ADC_Init+0x130>
 8001a8e:	4861      	ldr	r0, [pc, #388]	@ (8001c14 <HAL_ADC_Init+0x298>)
 8001a90:	f7ff ff14 	bl	80018bc <LL_ADC_IsEnabled>
 8001a94:	4604      	mov	r4, r0
 8001a96:	4860      	ldr	r0, [pc, #384]	@ (8001c18 <HAL_ADC_Init+0x29c>)
 8001a98:	f7ff ff10 	bl	80018bc <LL_ADC_IsEnabled>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e008      	b.n	8001abe <HAL_ADC_Init+0x142>
 8001aac:	485b      	ldr	r0, [pc, #364]	@ (8001c1c <HAL_ADC_Init+0x2a0>)
 8001aae:	f7ff ff05 	bl	80018bc <LL_ADC_IsEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d012      	beq.n	8001ae8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a53      	ldr	r2, [pc, #332]	@ (8001c14 <HAL_ADC_Init+0x298>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_Init+0x15a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	@ (8001c18 <HAL_ADC_Init+0x29c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x15e>
 8001ad6:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_ADC_Init+0x2a4>)
 8001ad8:	e000      	b.n	8001adc <HAL_ADC_Init+0x160>
 8001ada:	4a52      	ldr	r2, [pc, #328]	@ (8001c24 <HAL_ADC_Init+0x2a8>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f7ff fd2e 	bl	8001544 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ae8:	f7ff fd0c 	bl	8001504 <HAL_GetREVID>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d914      	bls.n	8001b20 <HAL_ADC_Init+0x1a4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d110      	bne.n	8001b20 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7d5b      	ldrb	r3, [r3, #21]
 8001b02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b08:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7f1b      	ldrb	r3, [r3, #28]
 8001b14:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b16:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b18:	f043 030c 	orr.w	r3, r3, #12
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	e00d      	b.n	8001b3c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7d5b      	ldrb	r3, [r3, #21]
 8001b24:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b2a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b30:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7f1b      	ldrb	r3, [r3, #28]
 8001b36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7f1b      	ldrb	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	045b      	lsls	r3, r3, #17
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_ADC_Init+0x2ac>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fed2 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 8001b8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fedf 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 8001b98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d15f      	bne.n	8001c60 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d15c      	bne.n	8001c60 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7d1b      	ldrb	r3, [r3, #20]
 8001baa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_ADC_Init+0x2b0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d130      	bne.n	8001c34 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_ADC_Init+0x2b4>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0411      	lsls	r1, r2, #16
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	e01c      	b.n	8001c44 <HAL_ADC_Init+0x2c8>
 8001c0a:	bf00      	nop
 8001c0c:	24000000 	.word	0x24000000
 8001c10:	053e2d63 	.word	0x053e2d63
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40022100 	.word	0x40022100
 8001c1c:	58026000 	.word	0x58026000
 8001c20:	40022300 	.word	0x40022300
 8001c24:	58026300 	.word	0x58026300
 8001c28:	fff0c003 	.word	0xfff0c003
 8001c2c:	ffffbffc 	.word	0xffffbffc
 8001c30:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f001 f810 	bl	8002c80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10c      	bne.n	8001c82 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f023 010f 	bic.w	r1, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c80:	e007      	b.n	8001c92 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 020f 	bic.w	r2, r2, #15
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca8:	f043 0210 	orr.w	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a92      	ldr	r2, [pc, #584]	@ (8001f18 <HAL_ADC_Start_IT+0x258>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_Start_IT+0x1c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a91      	ldr	r2, [pc, #580]	@ (8001f1c <HAL_ADC_Start_IT+0x25c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_Start_IT+0x20>
 8001cdc:	4b90      	ldr	r3, [pc, #576]	@ (8001f20 <HAL_ADC_Start_IT+0x260>)
 8001cde:	e000      	b.n	8001ce2 <HAL_ADC_Start_IT+0x22>
 8001ce0:	4b90      	ldr	r3, [pc, #576]	@ (8001f24 <HAL_ADC_Start_IT+0x264>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fd58 	bl	8001798 <LL_ADC_GetMultimode>
 8001ce8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fe1e 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8118 	bne.w	8001f2c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Start_IT+0x4a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e113      	b.n	8001f32 <HAL_ADC_Start_IT+0x272>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 feca 	bl	8002aac <ADC_Enable>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80f5 	bne.w	8001f0e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d28:	4b7f      	ldr	r3, [pc, #508]	@ (8001f28 <HAL_ADC_Start_IT+0x268>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a78      	ldr	r2, [pc, #480]	@ (8001f1c <HAL_ADC_Start_IT+0x25c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d002      	beq.n	8001d44 <HAL_ADC_Start_IT+0x84>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_Start_IT+0x86>
 8001d44:	4b74      	ldr	r3, [pc, #464]	@ (8001f18 <HAL_ADC_Start_IT+0x258>)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d002      	beq.n	8001d54 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f023 0206 	bic.w	r2, r3, #6
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	221c      	movs	r2, #28
 8001d86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 021c 	bic.w	r2, r2, #28
 8001d9e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d108      	bne.n	8001dba <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0208 	orr.w	r2, r2, #8
 8001db6:	605a      	str	r2, [r3, #4]
          break;
 8001db8:	e008      	b.n	8001dcc <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0204 	orr.w	r2, r2, #4
 8001dc8:	605a      	str	r2, [r3, #4]
          break;
 8001dca:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0210 	orr.w	r2, r2, #16
 8001de2:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f1c <HAL_ADC_Start_IT+0x25c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d002      	beq.n	8001df4 <HAL_ADC_Start_IT+0x134>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	e000      	b.n	8001df6 <HAL_ADC_Start_IT+0x136>
 8001df4:	4b48      	ldr	r3, [pc, #288]	@ (8001f18 <HAL_ADC_Start_IT+0x258>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d008      	beq.n	8001e10 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d002      	beq.n	8001e10 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d13a      	bne.n	8001e86 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02d      	beq.n	8001e7a <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d110      	bne.n	8001e58 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0220 	bic.w	r2, r2, #32
 8001e44:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e54:	605a      	str	r2, [r3, #4]
              break;
 8001e56:	e010      	b.n	8001e7a <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e66:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	605a      	str	r2, [r3, #4]
              break;
 8001e78:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd42 	bl	8001908 <LL_ADC_REG_StartConversion>
 8001e84:	e054      	b.n	8001f30 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <HAL_ADC_Start_IT+0x25c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d002      	beq.n	8001ea2 <HAL_ADC_Start_IT+0x1e2>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_Start_IT+0x1e4>
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_ADC_Start_IT+0x258>)
 8001ea4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03e      	beq.n	8001f30 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d110      	bne.n	8001eec <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0220 	bic.w	r2, r2, #32
 8001ed8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ee8:	605a      	str	r2, [r3, #4]
              break;
 8001eea:	e021      	b.n	8001f30 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001efa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	605a      	str	r2, [r3, #4]
              break;
 8001f0c:	e010      	b.n	8001f30 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f16:	e00b      	b.n	8001f30 <HAL_ADC_Start_IT+0x270>
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022100 	.word	0x40022100
 8001f20:	40022300 	.word	0x40022300
 8001f24:	58026300 	.word	0x58026300
 8001f28:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop

08001f3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a87      	ldr	r2, [pc, #540]	@ (8002198 <HAL_ADC_IRQHandler+0x240>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x30>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a86      	ldr	r2, [pc, #536]	@ (800219c <HAL_ADC_IRQHandler+0x244>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x34>
 8001f88:	4b85      	ldr	r3, [pc, #532]	@ (80021a0 <HAL_ADC_IRQHandler+0x248>)
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_IRQHandler+0x36>
 8001f8c:	4b85      	ldr	r3, [pc, #532]	@ (80021a4 <HAL_ADC_IRQHandler+0x24c>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fc02 	bl	8001798 <LL_ADC_GetMultimode>
 8001f94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x78>
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f001 f84e 	bl	8003064 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x8c>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8083 	beq.w	80020f6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d07d      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d105      	bne.n	8002012 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb1c 	bl	8001654 <LL_ADC_REG_IsTriggerSourceSWStart>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d062      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5d      	ldr	r2, [pc, #372]	@ (800219c <HAL_ADC_IRQHandler+0x244>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d002      	beq.n	8002032 <HAL_ADC_IRQHandler+0xda>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e000      	b.n	8002034 <HAL_ADC_IRQHandler+0xdc>
 8002032:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_ADC_IRQHandler+0x240>)
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4293      	cmp	r3, r2
 800203a:	d008      	beq.n	800204e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d002      	beq.n	800204e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b09      	cmp	r3, #9
 800204c:	d104      	bne.n	8002058 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	e00c      	b.n	8002072 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4f      	ldr	r2, [pc, #316]	@ (800219c <HAL_ADC_IRQHandler+0x244>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d002      	beq.n	8002068 <HAL_ADC_IRQHandler+0x110>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e000      	b.n	800206a <HAL_ADC_IRQHandler+0x112>
 8002068:	4b4b      	ldr	r3, [pc, #300]	@ (8002198 <HAL_ADC_IRQHandler+0x240>)
 800206a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d135      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d12e      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fc4e 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11a      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 020c 	bic.w	r2, r2, #12
 80020a8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80020ce:	e00b      	b.n	80020e8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fe57 	bl	8000d9c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_ADC_IRQHandler+0x1b2>
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a0 	beq.w	8002256 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 809a 	beq.w	8002256 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fac7 	bl	80016d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002144:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fa82 	bl	8001654 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002150:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_ADC_IRQHandler+0x244>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d002      	beq.n	8002162 <HAL_ADC_IRQHandler+0x20a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e000      	b.n	8002164 <HAL_ADC_IRQHandler+0x20c>
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_ADC_IRQHandler+0x240>)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d008      	beq.n	800217e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d002      	beq.n	800217e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b07      	cmp	r3, #7
 800217c:	d104      	bne.n	8002188 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	623b      	str	r3, [r7, #32]
 8002186:	e014      	b.n	80021b2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a03      	ldr	r2, [pc, #12]	@ (800219c <HAL_ADC_IRQHandler+0x244>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00a      	beq.n	80021a8 <HAL_ADC_IRQHandler+0x250>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	e008      	b.n	80021aa <HAL_ADC_IRQHandler+0x252>
 8002198:	40022000 	.word	0x40022000
 800219c:	40022100 	.word	0x40022100
 80021a0:	40022300 	.word	0x40022300
 80021a4:	58026300 	.word	0x58026300
 80021a8:	4b84      	ldr	r3, [pc, #528]	@ (80023bc <HAL_ADC_IRQHandler+0x464>)
 80021aa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d047      	beq.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x27a>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03f      	beq.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d13a      	bne.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021dc:	2b40      	cmp	r3, #64	@ 0x40
 80021de:	d133      	bne.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d12e      	bne.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fbb1 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11a      	bne.n	8002230 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002208:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d112      	bne.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
 800222e:	e00b      	b.n	8002248 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fee3 	bl	8003014 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2260      	movs	r2, #96	@ 0x60
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <HAL_ADC_IRQHandler+0x32c>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8a8 	bl	80023cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2280      	movs	r2, #128	@ 0x80
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d012      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x35c>
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fec9 	bl	800303c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x38c>
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 febb 	bl	8003050 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d043      	beq.n	8002376 <HAL_ADC_IRQHandler+0x41e>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03e      	beq.n	8002376 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002300:	2301      	movs	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
 8002304:	e021      	b.n	800234a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_ADC_IRQHandler+0x464>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_ADC_IRQHandler+0x3c8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <HAL_ADC_IRQHandler+0x468>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_ADC_IRQHandler+0x3cc>
 8002320:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <HAL_ADC_IRQHandler+0x46c>)
 8002322:	e000      	b.n	8002326 <HAL_ADC_IRQHandler+0x3ce>
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_ADC_IRQHandler+0x470>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fa44 	bl	80017b4 <LL_ADC_GetMultiDMATransfer>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
 8002336:	e008      	b.n	800234a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002346:	2301      	movs	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10e      	bne.n	800236e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002354:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f839 	bl	80023e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2210      	movs	r2, #16
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d018      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x45a>
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d013      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	f043 0208 	orr.w	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fe3b 	bl	8003028 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	@ 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022100 	.word	0x40022100
 80023c4:	40022300 	.word	0x40022300
 80023c8:	58026300 	.word	0x58026300

080023cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b0a1      	sub	sp, #132	@ 0x84
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a65      	ldr	r2, [pc, #404]	@ (80025a4 <HAL_ADC_ConfigChannel+0x1b0>)
 800240e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x2a>
 800241a:	2302      	movs	r3, #2
 800241c:	e32e      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x688>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fa80 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8313 	bne.w	8002a5e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db2c      	blt.n	800249a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <HAL_ADC_ConfigChannel+0x6a>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2201      	movs	r2, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	e016      	b.n	800248c <HAL_ADC_ConfigChannel+0x98>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800246c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800247a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2201      	movs	r2, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	69d1      	ldr	r1, [r2, #28]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	430b      	orrs	r3, r1
 8002498:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff f8e7 	bl	800167a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa3d 	bl	8001930 <LL_ADC_REG_IsConversionOngoing>
 80024b6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fa4a 	bl	8001956 <LL_ADC_INJ_IsConversionOngoing>
 80024c2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80b8 	bne.w	800263c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80b4 	bne.w	800263c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f7ff f909 	bl	80016f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024e6:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <HAL_ADC_ConfigChannel+0x1b4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_ConfigChannel+0x118>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	e01d      	b.n	8002548 <HAL_ADC_ConfigChannel+0x154>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x13e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	e00a      	b.n	8002548 <HAL_ADC_ConfigChannel+0x154>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b04      	cmp	r3, #4
 8002550:	d02c      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6919      	ldr	r1, [r3, #16]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002560:	f7ff f824 	bl	80015ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7e5b      	ldrb	r3, [r3, #25]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_ADC_ConfigChannel+0x186>
 8002574:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002578:	e000      	b.n	800257c <HAL_ADC_ConfigChannel+0x188>
 800257a:	2300      	movs	r3, #0
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff f84e 	bl	800161e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7e1b      	ldrb	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1a4>
 8002592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002596:	e000      	b.n	800259a <HAL_ADC_ConfigChannel+0x1a6>
 8002598:	2300      	movs	r3, #0
 800259a:	461a      	mov	r2, r3
 800259c:	f7ff f826 	bl	80015ec <LL_ADC_SetDataRightShift>
 80025a0:	e04c      	b.n	800263c <HAL_ADC_ConfigChannel+0x248>
 80025a2:	bf00      	nop
 80025a4:	47ff0000 	.word	0x47ff0000
 80025a8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	069b      	lsls	r3, r3, #26
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025f2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002616:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	069b      	lsls	r3, r3, #26
 8002628:	429a      	cmp	r2, r3
 800262a:	d107      	bne.n	800263c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800263a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f93b 	bl	80018bc <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 8211 	bne.w	8002a70 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f7ff f878 	bl	8001750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4aa1      	ldr	r2, [pc, #644]	@ (80028ec <HAL_ADC_ConfigChannel+0x4f8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	f040 812e 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x2a0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b09      	cmp	r3, #9
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e019      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x2d4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80026b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b09      	cmp	r3, #9
 80026c0:	bf94      	ite	ls
 80026c2:	2301      	movls	r3, #1
 80026c4:	2300      	movhi	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d079      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x2f4>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	3301      	adds	r3, #1
 80026e0:	069b      	lsls	r3, r3, #26
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e6:	e015      	b.n	8002714 <HAL_ADC_ConfigChannel+0x320>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	069b      	lsls	r3, r3, #26
 8002710:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x340>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	3301      	adds	r3, #1
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	e017      	b.n	8002764 <HAL_ADC_ConfigChannel+0x370>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002744:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e003      	b.n	8002758 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	ea42 0103 	orr.w	r1, r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x396>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0e9b      	lsrs	r3, r3, #26
 800277a:	3301      	adds	r3, #1
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	051b      	lsls	r3, r3, #20
 8002788:	e018      	b.n	80027bc <HAL_ADC_ConfigChannel+0x3c8>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e003      	b.n	80027ae <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80027a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027bc:	430b      	orrs	r3, r1
 80027be:	e07e      	b.n	80028be <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x3e8>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	069b      	lsls	r3, r3, #26
 80027d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027da:	e015      	b.n	8002808 <HAL_ADC_ConfigChannel+0x414>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e003      	b.n	8002800 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80027f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x434>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	3301      	adds	r3, #1
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	e017      	b.n	8002858 <HAL_ADC_ConfigChannel+0x464>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	61bb      	str	r3, [r7, #24]
  return result;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e003      	b.n	800284c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	ea42 0103 	orr.w	r1, r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x490>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	3b1e      	subs	r3, #30
 800287c:	051b      	lsls	r3, r3, #20
 800287e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002882:	e01b      	b.n	80028bc <HAL_ADC_ConfigChannel+0x4c8>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	60fb      	str	r3, [r7, #12]
  return result;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e003      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	3b1e      	subs	r3, #30
 80028b6:	051b      	lsls	r3, r3, #20
 80028b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028bc:	430b      	orrs	r3, r1
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe ff18 	bl	80016f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f280 80cf 	bge.w	8002a70 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a06      	ldr	r2, [pc, #24]	@ (80028f0 <HAL_ADC_ConfigChannel+0x4fc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_ConfigChannel+0x4f2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a04      	ldr	r2, [pc, #16]	@ (80028f4 <HAL_ADC_ConfigChannel+0x500>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x508>
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <HAL_ADC_ConfigChannel+0x504>)
 80028e8:	e009      	b.n	80028fe <HAL_ADC_ConfigChannel+0x50a>
 80028ea:	bf00      	nop
 80028ec:	47ff0000 	.word	0x47ff0000
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40022100 	.word	0x40022100
 80028f8:	40022300 	.word	0x40022300
 80028fc:	4b61      	ldr	r3, [pc, #388]	@ (8002a84 <HAL_ADC_ConfigChannel+0x690>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fe46 	bl	8001590 <LL_ADC_GetCommonPathInternalCh>
 8002904:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5f      	ldr	r2, [pc, #380]	@ (8002a88 <HAL_ADC_ConfigChannel+0x694>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_ADC_ConfigChannel+0x526>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5d      	ldr	r2, [pc, #372]	@ (8002a8c <HAL_ADC_ConfigChannel+0x698>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10e      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x544>
 800291a:	485b      	ldr	r0, [pc, #364]	@ (8002a88 <HAL_ADC_ConfigChannel+0x694>)
 800291c:	f7fe ffce 	bl	80018bc <LL_ADC_IsEnabled>
 8002920:	4604      	mov	r4, r0
 8002922:	485a      	ldr	r0, [pc, #360]	@ (8002a8c <HAL_ADC_ConfigChannel+0x698>)
 8002924:	f7fe ffca 	bl	80018bc <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	4323      	orrs	r3, r4
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e008      	b.n	800294a <HAL_ADC_ConfigChannel+0x556>
 8002938:	4855      	ldr	r0, [pc, #340]	@ (8002a90 <HAL_ADC_ConfigChannel+0x69c>)
 800293a:	f7fe ffbf 	bl	80018bc <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d07d      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a50      	ldr	r2, [pc, #320]	@ (8002a94 <HAL_ADC_ConfigChannel+0x6a0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d130      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x5c6>
 8002958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800295a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12b      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a4a      	ldr	r2, [pc, #296]	@ (8002a90 <HAL_ADC_ConfigChannel+0x69c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	f040 8081 	bne.w	8002a70 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <HAL_ADC_ConfigChannel+0x694>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x58e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a43      	ldr	r2, [pc, #268]	@ (8002a8c <HAL_ADC_ConfigChannel+0x698>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x592>
 8002982:	4a45      	ldr	r2, [pc, #276]	@ (8002a98 <HAL_ADC_ConfigChannel+0x6a4>)
 8002984:	e000      	b.n	8002988 <HAL_ADC_ConfigChannel+0x594>
 8002986:	4a3f      	ldr	r2, [pc, #252]	@ (8002a84 <HAL_ADC_ConfigChannel+0x690>)
 8002988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800298a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f7fe fdea 	bl	800156a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002996:	4b41      	ldr	r3, [pc, #260]	@ (8002a9c <HAL_ADC_ConfigChannel+0x6a8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	4a40      	ldr	r2, [pc, #256]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x6ac>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	3301      	adds	r3, #1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b8:	e05a      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a39      	ldr	r2, [pc, #228]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x6b0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d11e      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x60e>
 80029c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <HAL_ADC_ConfigChannel+0x69c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d14b      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <HAL_ADC_ConfigChannel+0x694>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x5f8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <HAL_ADC_ConfigChannel+0x698>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x5fc>
 80029ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <HAL_ADC_ConfigChannel+0x6a4>)
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x5fe>
 80029f0:	4a24      	ldr	r2, [pc, #144]	@ (8002a84 <HAL_ADC_ConfigChannel+0x690>)
 80029f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f7fe fdb5 	bl	800156a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a00:	e036      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a28      	ldr	r2, [pc, #160]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x6b4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d131      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
 8002a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d12c      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_ADC_ConfigChannel+0x69c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d127      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_ADC_ConfigChannel+0x694>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x640>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a17      	ldr	r2, [pc, #92]	@ (8002a8c <HAL_ADC_ConfigChannel+0x698>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x644>
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_ADC_ConfigChannel+0x6a4>)
 8002a36:	e000      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x646>
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <HAL_ADC_ConfigChannel+0x690>)
 8002a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f7fe fd91 	bl	800156a <LL_ADC_SetCommonPathInternalCh>
 8002a48:	e012      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a5c:	e008      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3784      	adds	r7, #132	@ 0x84
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	58026300 	.word	0x58026300
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40022100 	.word	0x40022100
 8002a90:	58026000 	.word	0x58026000
 8002a94:	cb840000 	.word	0xcb840000
 8002a98:	40022300 	.word	0x40022300
 8002a9c:	24000000 	.word	0x24000000
 8002aa0:	053e2d63 	.word	0x053e2d63
 8002aa4:	c7520000 	.word	0xc7520000
 8002aa8:	cfb80000 	.word	0xcfb80000

08002aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe feff 	bl	80018bc <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d16e      	bne.n	8002ba2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <ADC_Enable+0x100>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e05a      	b.n	8002ba4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe feba 	bl	800186c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af8:	f7fe fcd4 	bl	80014a4 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb0 <ADC_Enable+0x104>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <ADC_Enable+0x66>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <ADC_Enable+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <ADC_Enable+0x6a>
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <ADC_Enable+0x10c>)
 8002b14:	e000      	b.n	8002b18 <ADC_Enable+0x6c>
 8002b16:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <ADC_Enable+0x110>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fe3d 	bl	8001798 <LL_ADC_GetMultimode>
 8002b1e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <ADC_Enable+0x108>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d002      	beq.n	8002b30 <ADC_Enable+0x84>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e000      	b.n	8002b32 <ADC_Enable+0x86>
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <ADC_Enable+0x104>)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d130      	bne.n	8002ba2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b40:	e028      	b.n	8002b94 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe feb8 	bl	80018bc <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fe88 	bl	800186c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5c:	f7fe fca2 	bl	80014a4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d914      	bls.n	8002b94 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00d      	beq.n	8002b94 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f043 0210 	orr.w	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d1cf      	bne.n	8002b42 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	8000003f 	.word	0x8000003f
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40022100 	.word	0x40022100
 8002bb8:	40022300 	.word	0x40022300
 8002bbc:	58026300 	.word	0x58026300

08002bc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fe88 	bl	80018e2 <LL_ADC_IsDisableOngoing>
 8002bd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fe6f 	bl	80018bc <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d047      	beq.n	8002c74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d144      	bne.n	8002c74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030d 	and.w	r3, r3, #13
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fe49 	bl	8001894 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2203      	movs	r2, #3
 8002c08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fc4b 	bl	80014a4 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c10:	e029      	b.n	8002c66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e023      	b.n	8002c76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2e:	f7fe fc39 	bl	80014a4 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1dc      	bne.n	8002c2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8002e78 <ADC_ConfigureBoostMode+0x1f8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <ADC_ConfigureBoostMode+0x1c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a79      	ldr	r2, [pc, #484]	@ (8002e7c <ADC_ConfigureBoostMode+0x1fc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <ADC_ConfigureBoostMode+0x30>
 8002c9c:	4b78      	ldr	r3, [pc, #480]	@ (8002e80 <ADC_ConfigureBoostMode+0x200>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x42>
 8002cb0:	4b74      	ldr	r3, [pc, #464]	@ (8002e84 <ADC_ConfigureBoostMode+0x204>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01c      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cc6:	f002 fb2f 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8002cca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cd4:	d010      	beq.n	8002cf8 <ADC_ConfigureBoostMode+0x78>
 8002cd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002cda:	d873      	bhi.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce0:	d002      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x68>
 8002ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ce6:	d16d      	bne.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
        break;
 8002cf6:	e068      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
        break;
 8002cfe:	e064      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d00:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	f003 fd74 	bl	80067f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d16:	d051      	beq.n	8002dbc <ADC_ConfigureBoostMode+0x13c>
 8002d18:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d1c:	d854      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d1e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d22:	d047      	beq.n	8002db4 <ADC_ConfigureBoostMode+0x134>
 8002d24:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d28:	d84e      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d2a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d2e:	d03d      	beq.n	8002dac <ADC_ConfigureBoostMode+0x12c>
 8002d30:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d34:	d848      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d3a:	d033      	beq.n	8002da4 <ADC_ConfigureBoostMode+0x124>
 8002d3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d40:	d842      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d42:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d46:	d029      	beq.n	8002d9c <ADC_ConfigureBoostMode+0x11c>
 8002d48:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002d4c:	d83c      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d4e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d52:	d01a      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d54:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002d58:	d836      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d5a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d5e:	d014      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d60:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002d64:	d830      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d6a:	d00e      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d70:	d82a      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d76:	d008      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d7c:	d824      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d82:	d002      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d88:	d11e      	bne.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	60fb      	str	r3, [r7, #12]
        break;
 8002d9a:	e016      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
        break;
 8002da2:	e012      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	60fb      	str	r3, [r7, #12]
        break;
 8002daa:	e00e      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	60fb      	str	r3, [r7, #12]
        break;
 8002db2:	e00a      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	e006      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
        break;
 8002dc2:	e002      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002dc8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002dca:	f7fe fb9b 	bl	8001504 <HAL_GetREVID>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d815      	bhi.n	8002e04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a2b      	ldr	r2, [pc, #172]	@ (8002e88 <ADC_ConfigureBoostMode+0x208>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d908      	bls.n	8002df2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002df0:	e03e      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	e035      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <ADC_ConfigureBoostMode+0x20c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d808      	bhi.n	8002e24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	e025      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	@ (8002e90 <ADC_ConfigureBoostMode+0x210>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d80a      	bhi.n	8002e42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	e016      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <ADC_ConfigureBoostMode+0x214>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d80a      	bhi.n	8002e60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	e007      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40022100 	.word	0x40022100
 8002e80:	40022300 	.word	0x40022300
 8002e84:	58026300 	.word	0x58026300
 8002e88:	01312d00 	.word	0x01312d00
 8002e8c:	005f5e10 	.word	0x005f5e10
 8002e90:	00bebc20 	.word	0x00bebc20
 8002e94:	017d7840 	.word	0x017d7840

08002e98 <LL_ADC_IsEnabled>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <LL_ADC_IsEnabled+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_ADC_IsEnabled+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <LL_ADC_StartCalibration>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <LL_ADC_StartCalibration+0x38>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	3ffeffc0 	.word	0x3ffeffc0

08002efc <LL_ADC_IsCalibrationOnGoing>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f10:	d101      	bne.n	8002f16 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d101      	bne.n	8002f3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_ADCEx_Calibration_Start+0x1e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e04c      	b.n	8003004 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fe24 	bl	8002bc0 <ADC_Disable>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d135      	bne.n	8002fee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff90 	bl	8002ec0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fa0:	e014      	b.n	8002fcc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4a19      	ldr	r2, [pc, #100]	@ (8003010 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d30d      	bcc.n	8002fcc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	f023 0312 	bic.w	r3, r3, #18
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e01b      	b.n	8003004 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff93 	bl	8002efc <LL_ADC_IsCalibrationOnGoing>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e2      	bne.n	8002fa2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe0:	f023 0303 	bic.w	r3, r3, #3
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fec:	e005      	b.n	8002ffa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003002:	7dfb      	ldrb	r3, [r7, #23]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	ffffeefd 	.word	0xffffeefd
 8003010:	25c3f800 	.word	0x25c3f800

08003014 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b09f      	sub	sp, #124	@ 0x7c
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003092:	2302      	movs	r3, #2
 8003094:	e0be      	b.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5c      	ldr	r2, [pc, #368]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d102      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	e001      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e09d      	b.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff22 	bl	8002f24 <LL_ADC_REG_IsConversionOngoing>
 80030e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff1c 	bl	8002f24 <LL_ADC_REG_IsConversionOngoing>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d17f      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d17c      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a47      	ldr	r2, [pc, #284]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a46      	ldr	r2, [pc, #280]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800310c:	4b45      	ldr	r3, [pc, #276]	@ (8003224 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800310e:	e000      	b.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003110:	4b45      	ldr	r3, [pc, #276]	@ (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003112:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d039      	beq.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800311c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	431a      	orrs	r2, r3
 800312a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800312c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3a      	ldr	r2, [pc, #232]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a38      	ldr	r2, [pc, #224]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10e      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003142:	4836      	ldr	r0, [pc, #216]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003144:	f7ff fea8 	bl	8002e98 <LL_ADC_IsEnabled>
 8003148:	4604      	mov	r4, r0
 800314a:	4835      	ldr	r0, [pc, #212]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800314c:	f7ff fea4 	bl	8002e98 <LL_ADC_IsEnabled>
 8003150:	4603      	mov	r3, r0
 8003152:	4323      	orrs	r3, r4
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e008      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003160:	4832      	ldr	r0, [pc, #200]	@ (800322c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003162:	f7ff fe99 	bl	8002e98 <LL_ADC_IsEnabled>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d047      	beq.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	4b2d      	ldr	r3, [pc, #180]	@ (8003230 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800317c:	4013      	ands	r3, r2
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800318e:	e03a      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10e      	bne.n	80031ce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80031b0:	481a      	ldr	r0, [pc, #104]	@ (800321c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031b2:	f7ff fe71 	bl	8002e98 <LL_ADC_IsEnabled>
 80031b6:	4604      	mov	r4, r0
 80031b8:	4819      	ldr	r0, [pc, #100]	@ (8003220 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031ba:	f7ff fe6d 	bl	8002e98 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	4323      	orrs	r3, r4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf0c      	ite	eq
 80031c6:	2301      	moveq	r3, #1
 80031c8:	2300      	movne	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e008      	b.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031ce:	4817      	ldr	r0, [pc, #92]	@ (800322c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031d0:	f7ff fe62 	bl	8002e98 <LL_ADC_IsEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f0:	e009      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003204:	e000      	b.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003206:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003210:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003214:	4618      	mov	r0, r3
 8003216:	377c      	adds	r7, #124	@ 0x7c
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	40022000 	.word	0x40022000
 8003220:	40022100 	.word	0x40022100
 8003224:	40022300 	.word	0x40022300
 8003228:	58026300 	.word	0x58026300
 800322c:	58026000 	.word	0x58026000
 8003230:	fffff0e0 	.word	0xfffff0e0

08003234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <__NVIC_SetPriorityGrouping+0x40>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003262:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <__NVIC_SetPriorityGrouping+0x40>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60d3      	str	r3, [r2, #12]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00
 8003278:	05fa0000 	.word	0x05fa0000

0800327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <__NVIC_GetPriorityGrouping+0x18>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0307 	and.w	r3, r3, #7
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db0b      	blt.n	80032c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	4907      	ldr	r1, [pc, #28]	@ (80032d0 <__NVIC_EnableIRQ+0x38>)
 80032b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db0a      	blt.n	80032fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	490c      	ldr	r1, [pc, #48]	@ (8003320 <__NVIC_SetPriority+0x4c>)
 80032ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f2:	0112      	lsls	r2, r2, #4
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	440b      	add	r3, r1
 80032f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032fc:	e00a      	b.n	8003314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4908      	ldr	r1, [pc, #32]	@ (8003324 <__NVIC_SetPriority+0x50>)
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	3b04      	subs	r3, #4
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	440b      	add	r3, r1
 8003312:	761a      	strb	r2, [r3, #24]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f1c3 0307 	rsb	r3, r3, #7
 8003342:	2b04      	cmp	r3, #4
 8003344:	bf28      	it	cs
 8003346:	2304      	movcs	r3, #4
 8003348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3304      	adds	r3, #4
 800334e:	2b06      	cmp	r3, #6
 8003350:	d902      	bls.n	8003358 <NVIC_EncodePriority+0x30>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3b03      	subs	r3, #3
 8003356:	e000      	b.n	800335a <NVIC_EncodePriority+0x32>
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003370:	f04f 31ff 	mov.w	r1, #4294967295
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43d9      	mvns	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	4313      	orrs	r3, r2
         );
}
 8003382:	4618      	mov	r0, r3
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a0:	d301      	bcc.n	80033a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00f      	b.n	80033c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033a6:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <SysTick_Config+0x40>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ae:	210f      	movs	r1, #15
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f7ff ff8e 	bl	80032d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <SysTick_Config+0x40>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033be:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <SysTick_Config+0x40>)
 80033c0:	2207      	movs	r2, #7
 80033c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010

080033d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff29 	bl	8003234 <__NVIC_SetPriorityGrouping>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033f8:	f7ff ff40 	bl	800327c <__NVIC_GetPriorityGrouping>
 80033fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f7ff ff90 	bl	8003328 <NVIC_EncodePriority>
 8003408:	4602      	mov	r2, r0
 800340a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff5f 	bl	80032d4 <__NVIC_SetPriority>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff33 	bl	8003298 <__NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffa4 	bl	8003390 <SysTick_Config>
 8003448:	4603      	mov	r3, r0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0e3      	b.n	800362e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2223      	movs	r2, #35	@ 0x23
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7fd fd43 	bl	8000f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b6e      	ldr	r3, [pc, #440]	@ (8003638 <HAL_ETH_Init+0x1e4>)
 8003480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003484:	4a6c      	ldr	r2, [pc, #432]	@ (8003638 <HAL_ETH_Init+0x1e4>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800348e:	4b6a      	ldr	r3, [pc, #424]	@ (8003638 <HAL_ETH_Init+0x1e4>)
 8003490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7a1b      	ldrb	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fe f839 	bl	800151c <HAL_SYSCFG_ETHInterfaceSelect>
 80034aa:	e003      	b.n	80034b4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80034ac:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80034b0:	f7fe f834 	bl	800151c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80034b4:	4b61      	ldr	r3, [pc, #388]	@ (800363c <HAL_ETH_Init+0x1e8>)
 80034b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d0:	f7fd ffe8 	bl	80014a4 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034d6:	e011      	b.n	80034fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034d8:	f7fd ffe4 	bl	80014a4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80034e6:	d909      	bls.n	80034fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	22e0      	movs	r2, #224	@ 0xe0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e098      	b.n	800362e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e4      	bne.n	80034d8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f89e 	bl	8003650 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003514:	f001 ff08 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8003518:	4603      	mov	r3, r0
 800351a:	4a49      	ldr	r2, [pc, #292]	@ (8003640 <HAL_ETH_Init+0x1ec>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9a      	lsrs	r2, r3, #18
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3a01      	subs	r2, #1
 8003528:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fa81 	bl	8003a34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800353e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800354a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800354e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	22e0      	movs	r2, #224	@ 0xe0
 800356a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e05d      	b.n	800362e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800357e:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <HAL_ETH_Init+0x1f0>)
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6952      	ldr	r2, [r2, #20]
 8003586:	0051      	lsls	r1, r2, #1
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003592:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fae9 	bl	8003b6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb2f 	bl	8003c00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	3305      	adds	r3, #5
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	3303      	adds	r3, #3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	061a      	lsls	r2, r3, #24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	3302      	adds	r3, #2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80035ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80035f0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_ETH_Init+0x1f4>)
 8003602:	430b      	orrs	r3, r1
 8003604:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <HAL_ETH_Init+0x1f8>)
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2210      	movs	r2, #16
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
 800363c:	58000400 	.word	0x58000400
 8003640:	431bde83 	.word	0x431bde83
 8003644:	ffff8001 	.word	0xffff8001
 8003648:	0c020060 	.word	0x0c020060
 800364c:	0c20c000 	.word	0x0c20c000

08003650 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003660:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003668:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800366a:	f001 fe5d 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 800366e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a1a      	ldr	r2, [pc, #104]	@ (80036dc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d804      	bhi.n	8003682 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e022      	b.n	80036c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a16      	ldr	r2, [pc, #88]	@ (80036e0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d204      	bcs.n	8003694 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e019      	b.n	80036c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d915      	bls.n	80036c8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <HAL_ETH_SetMDIOClockRange+0x98>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d804      	bhi.n	80036ae <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00c      	b.n	80036c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d804      	bhi.n	80036c0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e003      	b.n	80036c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	02160ebf 	.word	0x02160ebf
 80036e0:	03938700 	.word	0x03938700
 80036e4:	05f5e0ff 	.word	0x05f5e0ff
 80036e8:	08f0d17f 	.word	0x08f0d17f
 80036ec:	0ee6b27f 	.word	0x0ee6b27f

080036f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	791b      	ldrb	r3, [r3, #4]
 8003708:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800370a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	7b1b      	ldrb	r3, [r3, #12]
 8003710:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003712:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	7b5b      	ldrb	r3, [r3, #13]
 8003718:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800371a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	7b9b      	ldrb	r3, [r3, #14]
 8003720:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	7bdb      	ldrb	r3, [r3, #15]
 8003728:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800372a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	7c12      	ldrb	r2, [r2, #16]
 8003730:	2a00      	cmp	r2, #0
 8003732:	d102      	bne.n	800373a <ETH_SetMACConfig+0x4a>
 8003734:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003738:	e000      	b.n	800373c <ETH_SetMACConfig+0x4c>
 800373a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800373c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	7c52      	ldrb	r2, [r2, #17]
 8003742:	2a00      	cmp	r2, #0
 8003744:	d102      	bne.n	800374c <ETH_SetMACConfig+0x5c>
 8003746:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800374a:	e000      	b.n	800374e <ETH_SetMACConfig+0x5e>
 800374c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800374e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	7c9b      	ldrb	r3, [r3, #18]
 8003754:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003756:	431a      	orrs	r2, r3
               macconf->Speed |
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800375c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	7f1b      	ldrb	r3, [r3, #28]
 8003768:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800376a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	7f5b      	ldrb	r3, [r3, #29]
 8003770:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003772:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	7f92      	ldrb	r2, [r2, #30]
 8003778:	2a00      	cmp	r2, #0
 800377a:	d102      	bne.n	8003782 <ETH_SetMACConfig+0x92>
 800377c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003780:	e000      	b.n	8003784 <ETH_SetMACConfig+0x94>
 8003782:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003784:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	7fdb      	ldrb	r3, [r3, #31]
 800378a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800378c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003794:	2a00      	cmp	r2, #0
 8003796:	d102      	bne.n	800379e <ETH_SetMACConfig+0xae>
 8003798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800379c:	e000      	b.n	80037a0 <ETH_SetMACConfig+0xb0>
 800379e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80037a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80037a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80037b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b56      	ldr	r3, [pc, #344]	@ (800391c <ETH_SetMACConfig+0x22c>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80037dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80037e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80037ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80037f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d102      	bne.n	8003802 <ETH_SetMACConfig+0x112>
 80037fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003800:	e000      	b.n	8003804 <ETH_SetMACConfig+0x114>
 8003802:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003804:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4b42      	ldr	r3, [pc, #264]	@ (8003920 <ETH_SetMACConfig+0x230>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	430b      	orrs	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003828:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4b3a      	ldr	r3, [pc, #232]	@ (8003924 <ETH_SetMACConfig+0x234>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	430b      	orrs	r3, r1
 8003844:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800384c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003852:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800385a:	2a00      	cmp	r2, #0
 800385c:	d101      	bne.n	8003862 <ETH_SetMACConfig+0x172>
 800385e:	2280      	movs	r2, #128	@ 0x80
 8003860:	e000      	b.n	8003864 <ETH_SetMACConfig+0x174>
 8003862:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003864:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003876:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	430b      	orrs	r3, r1
 8003884:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800388c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003894:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	f023 0103 	bic.w	r1, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80038ba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	d101      	bne.n	80038de <ETH_SetMACConfig+0x1ee>
 80038da:	2240      	movs	r2, #64	@ 0x40
 80038dc:	e000      	b.n	80038e0 <ETH_SetMACConfig+0x1f0>
 80038de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80038e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80038e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80038ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80038f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003900:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	430a      	orrs	r2, r1
 800390c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	00048083 	.word	0x00048083
 8003920:	c0f88000 	.word	0xc0f88000
 8003924:	fffffef0 	.word	0xfffffef0

08003928 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b38      	ldr	r3, [pc, #224]	@ (8003a20 <ETH_SetDMAConfig+0xf8>)
 800393e:	4013      	ands	r3, r2
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	6811      	ldr	r1, [r2, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800394e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	791b      	ldrb	r3, [r3, #4]
 8003954:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800395a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
 8003960:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <ETH_SetDMAConfig+0xfc>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	430b      	orrs	r3, r1
 800397c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003980:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	7b5b      	ldrb	r3, [r3, #13]
 8003986:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003998:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800399c:	4b22      	ldr	r3, [pc, #136]	@ (8003a28 <ETH_SetDMAConfig+0x100>)
 800399e:	4013      	ands	r3, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	430b      	orrs	r3, r1
 80039a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039ac:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	7d1b      	ldrb	r3, [r3, #20]
 80039b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80039ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	7f5b      	ldrb	r3, [r3, #29]
 80039c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <ETH_SetDMAConfig+0x104>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	430b      	orrs	r3, r1
 80039de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039e2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7f1b      	ldrb	r3, [r3, #28]
 80039ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003a00:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <ETH_SetDMAConfig+0x108>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	68f9      	ldr	r1, [r7, #12]
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a10:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	ffff87fd 	.word	0xffff87fd
 8003a24:	ffff2ffe 	.word	0xffff2ffe
 8003a28:	fffec000 	.word	0xfffec000
 8003a2c:	ffc0efef 	.word	0xffc0efef
 8003a30:	7fc0ffff 	.word	0x7fc0ffff

08003a34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b0a4      	sub	sp, #144	@ 0x90
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a42:	2300      	movs	r3, #0
 8003a44:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003a8c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003acc:	2320      	movs	r3, #32
 8003ace:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003ade:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ae4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ae8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003af0:	2302      	movs	r3, #2
 8003af2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fde6 	bl	80036f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003b54:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fee1 	bl	8003928 <ETH_SetDMAConfig>
}
 8003b66:	bf00      	nop
 8003b68:	3790      	adds	r7, #144	@ 0x90
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e01d      	b.n	8003bb8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68d9      	ldr	r1, [r3, #12]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	3206      	adds	r2, #6
 8003bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d9de      	bls.n	8003b7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2303      	movs	r3, #3
 8003bd0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003be0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e023      	b.n	8003c56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6919      	ldr	r1, [r3, #16]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	3212      	adds	r2, #18
 8003c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3301      	adds	r3, #1
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d9d8      	bls.n	8003c0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c82:	461a      	mov	r2, r3
 8003c84:	2303      	movs	r3, #3
 8003c86:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c96:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003caa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	@ 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cca:	4b89      	ldr	r3, [pc, #548]	@ (8003ef0 <HAL_GPIO_Init+0x234>)
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cce:	e194      	b.n	8003ffa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8186 	beq.w	8003ff4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x44>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80e0 	beq.w	8003ff4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <HAL_GPIO_Init+0x238>)
 8003e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef4 <HAL_GPIO_Init+0x238>)
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_GPIO_Init+0x238>)
 8003e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e52:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <HAL_GPIO_Init+0x23c>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_GPIO_Init+0x240>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d052      	beq.n	8003f24 <HAL_GPIO_Init+0x268>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_GPIO_Init+0x244>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_GPIO_Init+0x22e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <HAL_GPIO_Init+0x248>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_GPIO_Init+0x22a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <HAL_GPIO_Init+0x24c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_Init+0x226>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_GPIO_Init+0x250>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_Init+0x222>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f10 <HAL_GPIO_Init+0x254>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_Init+0x21e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f14 <HAL_GPIO_Init+0x258>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0x21a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_GPIO_Init+0x25c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_Init+0x216>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <HAL_GPIO_Init+0x260>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x212>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <HAL_GPIO_Init+0x264>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_Init+0x20e>
 8003ec6:	2309      	movs	r3, #9
 8003ec8:	e02d      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003eca:	230a      	movs	r3, #10
 8003ecc:	e02b      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	e029      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ed2:	2307      	movs	r3, #7
 8003ed4:	e027      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ed6:	2306      	movs	r3, #6
 8003ed8:	e025      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003eda:	2305      	movs	r3, #5
 8003edc:	e023      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ede:	2304      	movs	r3, #4
 8003ee0:	e021      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e01f      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e01d      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e01b      	b.n	8003f26 <HAL_GPIO_Init+0x26a>
 8003eee:	bf00      	nop
 8003ef0:	58000080 	.word	0x58000080
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	58000400 	.word	0x58000400
 8003efc:	58020000 	.word	0x58020000
 8003f00:	58020400 	.word	0x58020400
 8003f04:	58020800 	.word	0x58020800
 8003f08:	58020c00 	.word	0x58020c00
 8003f0c:	58021000 	.word	0x58021000
 8003f10:	58021400 	.word	0x58021400
 8003f14:	58021800 	.word	0x58021800
 8003f18:	58021c00 	.word	0x58021c00
 8003f1c:	58022000 	.word	0x58022000
 8003f20:	58022400 	.word	0x58022400
 8003f24:	2300      	movs	r3, #0
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	f002 0203 	and.w	r2, r2, #3
 8003f2c:	0092      	lsls	r2, r2, #2
 8003f2e:	4093      	lsls	r3, r2
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f36:	4938      	ldr	r1, [pc, #224]	@ (8004018 <HAL_GPIO_Init+0x35c>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f ae63 	bne.w	8003cd0 <HAL_GPIO_Init+0x14>
  }
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	3724      	adds	r7, #36	@ 0x24
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	58000400 	.word	0x58000400

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	041a      	lsls	r2, r3, #16
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43d9      	mvns	r1, r3
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	400b      	ands	r3, r1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800408c:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <HAL_HSEM_FastTake+0x2c>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3320      	adds	r3, #32
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	4a07      	ldr	r2, [pc, #28]	@ (80040b4 <HAL_HSEM_FastTake+0x30>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	58026400 	.word	0x58026400
 80040b4:	80000300 	.word	0x80000300

080040b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80040c2:	4906      	ldr	r1, [pc, #24]	@ (80040dc <HAL_HSEM_Release+0x24>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	58026400 	.word	0x58026400

080040e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0fe      	b.n	80042f0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd f856 	bl	80011b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f005 fed5 	bl	8009ec8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7c1a      	ldrb	r2, [r3, #16]
 8004126:	f88d 2000 	strb.w	r2, [sp]
 800412a:	3304      	adds	r3, #4
 800412c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412e:	f005 fe59 	bl	8009de4 <USB_CoreInit>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0d5      	b.n	80042f0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f005 fecd 	bl	8009eea <USB_SetCurrentMode>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0c6      	b.n	80042f0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e04a      	b.n	80041fe <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3315      	adds	r3, #21
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3314      	adds	r3, #20
 800418c:	7bfa      	ldrb	r2, [r7, #15]
 800418e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	b298      	uxth	r0, r3
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	332e      	adds	r3, #46	@ 0x2e
 80041a4:	4602      	mov	r2, r0
 80041a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3318      	adds	r3, #24
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	331c      	adds	r3, #28
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3320      	adds	r3, #32
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3324      	adds	r3, #36	@ 0x24
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	3301      	adds	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	429a      	cmp	r2, r3
 8004206:	d3af      	bcc.n	8004168 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e044      	b.n	8004298 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	3301      	adds	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d3b5      	bcc.n	800420e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7c1a      	ldrb	r2, [r3, #16]
 80042aa:	f88d 2000 	strb.w	r2, [sp]
 80042ae:	3304      	adds	r3, #4
 80042b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b2:	f005 fe67 	bl	8009f84 <USB_DevInit>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e013      	b.n	80042f0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7b1b      	ldrb	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f80a 	bl	80042f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f006 f822 	bl	800a332 <USB_DevDisconnect>

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_PCDEx_ActivateLPM+0x44>)
 8004328:	4313      	orrs	r3, r2
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	10000003 	.word	0x10000003

08004340 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004348:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	2b06      	cmp	r3, #6
 8004352:	d00a      	beq.n	800436a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004354:	4b26      	ldr	r3, [pc, #152]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d001      	beq.n	8004366 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e040      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e03e      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004372:	491f      	ldr	r1, [pc, #124]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4313      	orrs	r3, r2
 8004378:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800437a:	f7fd f893 	bl	80014a4 <HAL_GetTick>
 800437e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004380:	e009      	b.n	8004396 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004382:	f7fd f88f 	bl	80014a4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004390:	d901      	bls.n	8004396 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e028      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004396:	4b16      	ldr	r3, [pc, #88]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a2:	d1ee      	bne.n	8004382 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b1e      	cmp	r3, #30
 80043a8:	d008      	beq.n	80043bc <HAL_PWREx_ConfigSupply+0x7c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ae:	d005      	beq.n	80043bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b1d      	cmp	r3, #29
 80043b4:	d002      	beq.n	80043bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b2d      	cmp	r3, #45	@ 0x2d
 80043ba:	d114      	bne.n	80043e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043bc:	f7fd f872 	bl	80014a4 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043c4:	f7fd f86e 	bl	80014a4 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043d2:	d901      	bls.n	80043d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e4:	d1ee      	bne.n	80043c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024800 	.word	0x58024800

080043f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a04      	ldr	r2, [pc, #16]	@ (8004410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004402:	60d3      	str	r3, [r2, #12]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	58024800 	.word	0x58024800

08004414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	@ 0x30
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f000 bc48 	b.w	8004cb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8088 	beq.w	8004546 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004436:	4b99      	ldr	r3, [pc, #612]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004440:	4b96      	ldr	r3, [pc, #600]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	2b10      	cmp	r3, #16
 800444a:	d007      	beq.n	800445c <HAL_RCC_OscConfig+0x48>
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	2b18      	cmp	r3, #24
 8004450:	d111      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d10c      	bne.n	8004476 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	4b8f      	ldr	r3, [pc, #572]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d06d      	beq.n	8004544 <HAL_RCC_OscConfig+0x130>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d169      	bne.n	8004544 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f000 bc21 	b.w	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x7a>
 8004480:	4b86      	ldr	r3, [pc, #536]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a85      	ldr	r2, [pc, #532]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e02e      	b.n	80044ec <HAL_RCC_OscConfig+0xd8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x9c>
 8004496:	4b81      	ldr	r3, [pc, #516]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a80      	ldr	r2, [pc, #512]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b7e      	ldr	r3, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7d      	ldr	r2, [pc, #500]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e01d      	b.n	80044ec <HAL_RCC_OscConfig+0xd8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0xc0>
 80044ba:	4b78      	ldr	r3, [pc, #480]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a77      	ldr	r2, [pc, #476]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b75      	ldr	r3, [pc, #468]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a74      	ldr	r2, [pc, #464]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xd8>
 80044d4:	4b71      	ldr	r3, [pc, #452]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a70      	ldr	r2, [pc, #448]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b6e      	ldr	r3, [pc, #440]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6d      	ldr	r2, [pc, #436]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fc ffd6 	bl	80014a4 <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fc ffd2 	bl	80014a4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e3d4      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800450e:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0xe8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fc ffc2 	bl	80014a4 <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fc ffbe 	bl	80014a4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e3c0      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004536:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x110>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80ca 	beq.w	80046e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004554:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800455e:	4b4f      	ldr	r3, [pc, #316]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004562:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_RCC_OscConfig+0x166>
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2b18      	cmp	r3, #24
 800456e:	d156      	bne.n	800461e <HAL_RCC_OscConfig+0x20a>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d151      	bne.n	800461e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457a:	4b48      	ldr	r3, [pc, #288]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x17e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e392      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004592:	4b42      	ldr	r3, [pc, #264]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 0219 	bic.w	r2, r3, #25
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	493f      	ldr	r1, [pc, #252]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fc ff7e 	bl	80014a4 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ac:	f7fc ff7a 	bl	80014a4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e37c      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045be:	4b37      	ldr	r3, [pc, #220]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ca:	f7fc ff9b 	bl	8001504 <HAL_GetREVID>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d817      	bhi.n	8004608 <HAL_RCC_OscConfig+0x1f4>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b40      	cmp	r3, #64	@ 0x40
 80045de:	d108      	bne.n	80045f2 <HAL_RCC_OscConfig+0x1de>
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045e8:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f0:	e07a      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	031b      	lsls	r3, r3, #12
 8004600:	4926      	ldr	r1, [pc, #152]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004606:	e06f      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4921      	ldr	r1, [pc, #132]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	e064      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d047      	beq.n	80046b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 0219 	bic.w	r2, r3, #25
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	491a      	ldr	r1, [pc, #104]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fc ff34 	bl	80014a4 <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fc ff30 	bl	80014a4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e332      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004652:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	f7fc ff51 	bl	8001504 <HAL_GetREVID>
 8004662:	4603      	mov	r3, r0
 8004664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004668:	4293      	cmp	r3, r2
 800466a:	d819      	bhi.n	80046a0 <HAL_RCC_OscConfig+0x28c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d108      	bne.n	8004686 <HAL_RCC_OscConfig+0x272>
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800467c:	4a07      	ldr	r2, [pc, #28]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	e030      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
 8004686:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	031b      	lsls	r3, r3, #12
 8004694:	4901      	ldr	r1, [pc, #4]	@ (800469c <HAL_RCC_OscConfig+0x288>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
 800469a:	e025      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
 800469c:	58024400 	.word	0x58024400
 80046a0:	4b9a      	ldr	r3, [pc, #616]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	4997      	ldr	r1, [pc, #604]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e018      	b.n	80046e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b95      	ldr	r3, [pc, #596]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a94      	ldr	r2, [pc, #592]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fc feef 	bl	80014a4 <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fc feeb 	bl	80014a4 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e2ed      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046dc:	4b8b      	ldr	r3, [pc, #556]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a9 	beq.w	8004848 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004700:	4b82      	ldr	r3, [pc, #520]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d007      	beq.n	800471c <HAL_RCC_OscConfig+0x308>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b18      	cmp	r3, #24
 8004710:	d13a      	bne.n	8004788 <HAL_RCC_OscConfig+0x374>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d135      	bne.n	8004788 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800471c:	4b7b      	ldr	r3, [pc, #492]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_OscConfig+0x320>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e2c1      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004734:	f7fc fee6 	bl	8001504 <HAL_GetREVID>
 8004738:	4603      	mov	r3, r0
 800473a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800473e:	4293      	cmp	r3, r2
 8004740:	d817      	bhi.n	8004772 <HAL_RCC_OscConfig+0x35e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	2b20      	cmp	r3, #32
 8004748:	d108      	bne.n	800475c <HAL_RCC_OscConfig+0x348>
 800474a:	4b70      	ldr	r3, [pc, #448]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004752:	4a6e      	ldr	r2, [pc, #440]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004758:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800475a:	e075      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800475c:	4b6b      	ldr	r3, [pc, #428]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	069b      	lsls	r3, r3, #26
 800476a:	4968      	ldr	r1, [pc, #416]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004770:	e06a      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004772:	4b66      	ldr	r3, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	4962      	ldr	r1, [pc, #392]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004786:	e05f      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d042      	beq.n	8004816 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004790:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a5d      	ldr	r2, [pc, #372]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800479a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fc fe82 	bl	80014a4 <HAL_GetTick>
 80047a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047a4:	f7fc fe7e 	bl	80014a4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e280      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b6:	4b55      	ldr	r3, [pc, #340]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047c2:	f7fc fe9f 	bl	8001504 <HAL_GetREVID>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d817      	bhi.n	8004800 <HAL_RCC_OscConfig+0x3ec>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d108      	bne.n	80047ea <HAL_RCC_OscConfig+0x3d6>
 80047d8:	4b4c      	ldr	r3, [pc, #304]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047e0:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80047e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047e6:	6053      	str	r3, [r2, #4]
 80047e8:	e02e      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
 80047ea:	4b48      	ldr	r3, [pc, #288]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	4944      	ldr	r1, [pc, #272]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
 80047fe:	e023      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
 8004800:	4b42      	ldr	r3, [pc, #264]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	493f      	ldr	r1, [pc, #252]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
 8004814:	e018      	b.n	8004848 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004816:	4b3d      	ldr	r3, [pc, #244]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3c      	ldr	r2, [pc, #240]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800481c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fc fe3f 	bl	80014a4 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800482a:	f7fc fe3b 	bl	80014a4 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e23d      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800483c:	4b33      	ldr	r3, [pc, #204]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d036      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d019      	beq.n	8004890 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	4a2a      	ldr	r2, [pc, #168]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fc fe1c 	bl	80014a4 <HAL_GetTick>
 800486c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7fc fe18 	bl	80014a4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e21a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004882:	4b22      	ldr	r3, [pc, #136]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x45c>
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004890:	4b1e      	ldr	r3, [pc, #120]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fc fe02 	bl	80014a4 <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fc fdfe 	bl	80014a4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e200      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048b6:	4b15      	ldr	r3, [pc, #84]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d039      	beq.n	8004942 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01c      	beq.n	8004910 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0c      	ldr	r2, [pc, #48]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048e2:	f7fc fddf 	bl	80014a4 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ea:	f7fc fddb 	bl	80014a4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e1dd      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x4d6>
 8004908:	e01b      	b.n	8004942 <HAL_RCC_OscConfig+0x52e>
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004910:	4b9b      	ldr	r3, [pc, #620]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a9a      	ldr	r2, [pc, #616]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800491a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800491c:	f7fc fdc2 	bl	80014a4 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004924:	f7fc fdbe 	bl	80014a4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1c0      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004936:	4b92      	ldr	r3, [pc, #584]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8081 	beq.w	8004a52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004950:	4b8c      	ldr	r3, [pc, #560]	@ (8004b84 <HAL_RCC_OscConfig+0x770>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a8b      	ldr	r2, [pc, #556]	@ (8004b84 <HAL_RCC_OscConfig+0x770>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495c:	f7fc fda2 	bl	80014a4 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fc fd9e 	bl	80014a4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1a0      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004976:	4b83      	ldr	r3, [pc, #524]	@ (8004b84 <HAL_RCC_OscConfig+0x770>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d106      	bne.n	8004998 <HAL_RCC_OscConfig+0x584>
 800498a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
 8004996:	e02d      	b.n	80049f4 <HAL_RCC_OscConfig+0x5e0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10c      	bne.n	80049ba <HAL_RCC_OscConfig+0x5a6>
 80049a0:	4b77      	ldr	r3, [pc, #476]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a4:	4a76      	ldr	r2, [pc, #472]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ac:	4b74      	ldr	r3, [pc, #464]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	4a73      	ldr	r2, [pc, #460]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049b2:	f023 0304 	bic.w	r3, r3, #4
 80049b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b8:	e01c      	b.n	80049f4 <HAL_RCC_OscConfig+0x5e0>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x5c8>
 80049c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0x5e0>
 80049dc:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e0:	4a67      	ldr	r2, [pc, #412]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e8:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a64      	ldr	r2, [pc, #400]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 80049ee:	f023 0304 	bic.w	r3, r3, #4
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fc fd52 	bl	80014a4 <HAL_GetTick>
 8004a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fc fd4e 	bl	80014a4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e14e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1a:	4b59      	ldr	r3, [pc, #356]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ee      	beq.n	8004a04 <HAL_RCC_OscConfig+0x5f0>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fc fd3c 	bl	80014a4 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fc fd38 	bl	80014a4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e138      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a46:	4b4e      	ldr	r3, [pc, #312]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ee      	bne.n	8004a30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 812d 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a5c:	4b48      	ldr	r3, [pc, #288]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a64:	2b18      	cmp	r3, #24
 8004a66:	f000 80bd 	beq.w	8004be4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	f040 809e 	bne.w	8004bb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a74:	4b42      	ldr	r3, [pc, #264]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a41      	ldr	r2, [pc, #260]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fc fd10 	bl	80014a4 <HAL_GetTick>
 8004a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc fd0c 	bl	80014a4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e10e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a9a:	4b39      	ldr	r3, [pc, #228]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aaa:	4b37      	ldr	r3, [pc, #220]	@ (8004b88 <HAL_RCC_OscConfig+0x774>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	4931      	ldr	r1, [pc, #196]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	025b      	lsls	r3, r3, #9
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	3b01      	subs	r3, #1
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004af0:	4923      	ldr	r1, [pc, #140]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004af6:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	4a21      	ldr	r2, [pc, #132]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b02:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b06:	4b21      	ldr	r3, [pc, #132]	@ (8004b8c <HAL_RCC_OscConfig+0x778>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b0e:	00d2      	lsls	r2, r2, #3
 8004b10:	491b      	ldr	r1, [pc, #108]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b16:	4b1a      	ldr	r3, [pc, #104]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	f023 020c 	bic.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4917      	ldr	r1, [pc, #92]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b28:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	f023 0202 	bic.w	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b34:	4912      	ldr	r1, [pc, #72]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b3a:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b46:	4b0e      	ldr	r3, [pc, #56]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b5e:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	4a07      	ldr	r2, [pc, #28]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a04      	ldr	r2, [pc, #16]	@ (8004b80 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fc fc95 	bl	80014a4 <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b7c:	e011      	b.n	8004ba2 <HAL_RCC_OscConfig+0x78e>
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400
 8004b84:	58024800 	.word	0x58024800
 8004b88:	fffffc0c 	.word	0xfffffc0c
 8004b8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fc fc88 	bl	80014a4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e08a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x77c>
 8004bae:	e082      	b.n	8004cb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb0:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a42      	ldr	r2, [pc, #264]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fc72 	bl	80014a4 <HAL_GetTick>
 8004bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fc fc6e 	bl	80014a4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e070      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x7b0>
 8004be2:	e068      	b.n	8004cb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004be4:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bea:	4b35      	ldr	r3, [pc, #212]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d031      	beq.n	8004c5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d12a      	bne.n	8004c5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d122      	bne.n	8004c5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d11a      	bne.n	8004c5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0a5b      	lsrs	r3, r3, #9
 8004c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d111      	bne.n	8004c5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	0c1b      	lsrs	r3, r3, #16
 8004c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d108      	bne.n	8004c5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e02b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c60:	4b17      	ldr	r3, [pc, #92]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d01f      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c82:	f7fc fc0f 	bl	80014a4 <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c88:	bf00      	nop
 8004c8a:	f7fc fc0b 	bl	80014a4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d0f9      	beq.n	8004c8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c96:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <HAL_RCC_OscConfig+0x8b0>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ca2:	00d2      	lsls	r2, r2, #3
 8004ca4:	4906      	ldr	r1, [pc, #24]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <HAL_RCC_OscConfig+0x8ac>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3730      	adds	r7, #48	@ 0x30
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	ffff0007 	.word	0xffff0007

08004cc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e19c      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d910      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b87      	ldr	r3, [pc, #540]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 020f 	bic.w	r2, r3, #15
 8004cf2:	4985      	ldr	r1, [pc, #532]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b83      	ldr	r3, [pc, #524]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e184      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d908      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d28:	4b78      	ldr	r3, [pc, #480]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	4975      	ldr	r1, [pc, #468]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d010      	beq.n	8004d68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	4b70      	ldr	r3, [pc, #448]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d908      	bls.n	8004d68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d56:	4b6d      	ldr	r3, [pc, #436]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	496a      	ldr	r1, [pc, #424]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	4b64      	ldr	r3, [pc, #400]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d908      	bls.n	8004d96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d84:	4b61      	ldr	r3, [pc, #388]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	495e      	ldr	r1, [pc, #376]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d010      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69da      	ldr	r2, [r3, #28]
 8004da6:	4b59      	ldr	r3, [pc, #356]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d908      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004db2:	4b56      	ldr	r3, [pc, #344]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	4953      	ldr	r1, [pc, #332]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d908      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de0:	4b4a      	ldr	r3, [pc, #296]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f023 020f 	bic.w	r2, r3, #15
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4947      	ldr	r1, [pc, #284]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d055      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dfe:	4b43      	ldr	r3, [pc, #268]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	4940      	ldr	r1, [pc, #256]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e18:	4b3c      	ldr	r3, [pc, #240]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d121      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0f6      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e30:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d115      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0ea      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e48:	4b30      	ldr	r3, [pc, #192]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0de      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e58:	4b2c      	ldr	r3, [pc, #176]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0d6      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e68:	4b28      	ldr	r3, [pc, #160]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f023 0207 	bic.w	r2, r3, #7
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4925      	ldr	r1, [pc, #148]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fb13 	bl	80014a4 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e82:	f7fc fb0f 	bl	80014a4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e0be      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e98:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d1eb      	bne.n	8004e82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4b14      	ldr	r3, [pc, #80]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d208      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec6:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f023 020f 	bic.w	r2, r3, #15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d214      	bcs.n	8004f10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 020f 	bic.w	r2, r3, #15
 8004eee:	4906      	ldr	r1, [pc, #24]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b04      	ldr	r3, [pc, #16]	@ (8004f08 <HAL_RCC_ClockConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e086      	b.n	8005016 <HAL_RCC_ClockConfig+0x34e>
 8004f08:	52002000 	.word	0x52002000
 8004f0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d208      	bcs.n	8004f3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4939      	ldr	r1, [pc, #228]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	4b34      	ldr	r3, [pc, #208]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d208      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f5a:	4b31      	ldr	r3, [pc, #196]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	492e      	ldr	r1, [pc, #184]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d208      	bcs.n	8004f9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f88:	4b25      	ldr	r3, [pc, #148]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	4922      	ldr	r1, [pc, #136]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d208      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4917      	ldr	r1, [pc, #92]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fc8:	f000 f834 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	4912      	ldr	r1, [pc, #72]	@ (8005024 <HAL_RCC_ClockConfig+0x35c>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8005020 <HAL_RCC_ClockConfig+0x358>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	4a0d      	ldr	r2, [pc, #52]	@ (8005024 <HAL_RCC_ClockConfig+0x35c>)
 8004ff0:	5cd3      	ldrb	r3, [r2, r3]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8005028 <HAL_RCC_ClockConfig+0x360>)
 8004ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005000:	4a0a      	ldr	r2, [pc, #40]	@ (800502c <HAL_RCC_ClockConfig+0x364>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005006:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x368>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fc fa00 	bl	8001410 <HAL_InitTick>
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400
 8005024:	0800a464 	.word	0x0800a464
 8005028:	24000004 	.word	0x24000004
 800502c:	24000000 	.word	0x24000000
 8005030:	24000008 	.word	0x24000008

08005034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	@ 0x24
 8005038:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503a:	4bb3      	ldr	r3, [pc, #716]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005042:	2b18      	cmp	r3, #24
 8005044:	f200 8155 	bhi.w	80052f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_RCC_GetSysClockFreq+0x1c>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080052f3 	.word	0x080052f3
 8005058:	080052f3 	.word	0x080052f3
 800505c:	080052f3 	.word	0x080052f3
 8005060:	080052f3 	.word	0x080052f3
 8005064:	080052f3 	.word	0x080052f3
 8005068:	080052f3 	.word	0x080052f3
 800506c:	080052f3 	.word	0x080052f3
 8005070:	080050db 	.word	0x080050db
 8005074:	080052f3 	.word	0x080052f3
 8005078:	080052f3 	.word	0x080052f3
 800507c:	080052f3 	.word	0x080052f3
 8005080:	080052f3 	.word	0x080052f3
 8005084:	080052f3 	.word	0x080052f3
 8005088:	080052f3 	.word	0x080052f3
 800508c:	080052f3 	.word	0x080052f3
 8005090:	080050e1 	.word	0x080050e1
 8005094:	080052f3 	.word	0x080052f3
 8005098:	080052f3 	.word	0x080052f3
 800509c:	080052f3 	.word	0x080052f3
 80050a0:	080052f3 	.word	0x080052f3
 80050a4:	080052f3 	.word	0x080052f3
 80050a8:	080052f3 	.word	0x080052f3
 80050ac:	080052f3 	.word	0x080052f3
 80050b0:	080050e7 	.word	0x080050e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b4:	4b94      	ldr	r3, [pc, #592]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c0:	4b91      	ldr	r3, [pc, #580]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	4a90      	ldr	r2, [pc, #576]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050d2:	e111      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050d4:	4b8d      	ldr	r3, [pc, #564]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050d6:	61bb      	str	r3, [r7, #24]
      break;
 80050d8:	e10e      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050da:	4b8d      	ldr	r3, [pc, #564]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050dc:	61bb      	str	r3, [r7, #24]
      break;
 80050de:	e10b      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005314 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050e2:	61bb      	str	r3, [r7, #24]
      break;
 80050e4:	e108      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050e6:	4b88      	ldr	r3, [pc, #544]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050f0:	4b85      	ldr	r3, [pc, #532]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050fc:	4b82      	ldr	r3, [pc, #520]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005106:	4b80      	ldr	r3, [pc, #512]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510a:	08db      	lsrs	r3, r3, #3
 800510c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80e1 	beq.w	80052ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b02      	cmp	r3, #2
 800512e:	f000 8083 	beq.w	8005238 <HAL_RCC_GetSysClockFreq+0x204>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b02      	cmp	r3, #2
 8005136:	f200 80a1 	bhi.w	800527c <HAL_RCC_GetSysClockFreq+0x248>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x114>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d056      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005146:	e099      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005148:	4b6f      	ldr	r3, [pc, #444]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d02d      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005154:	4b6c      	ldr	r3, [pc, #432]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	08db      	lsrs	r3, r3, #3
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	4a6b      	ldr	r2, [pc, #428]	@ (800530c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b62      	ldr	r3, [pc, #392]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005192:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051ae:	e087      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800531c <HAL_RCC_GetSysClockFreq+0x2e8>
 80051be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c2:	4b51      	ldr	r3, [pc, #324]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051f2:	e065      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005206:	4b40      	ldr	r3, [pc, #256]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005216:	ed97 6a02 	vldr	s12, [r7, #8]
 800521a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005318 <HAL_RCC_GetSysClockFreq+0x2e4>
 800521e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005236:	e043      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005324 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a02 	vldr	s12, [r7, #8]
 800525e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800527a:	e021      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005320 <HAL_RCC_GetSysClockFreq+0x2ec>
 800528a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528e:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529e:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052c0:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	0a5b      	lsrs	r3, r3, #9
 80052c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ca:	3301      	adds	r3, #1
 80052cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e4:	ee17 3a90 	vmov	r3, s15
 80052e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052ea:	e005      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
      break;
 80052f0:	e002      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052f2:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052f4:	61bb      	str	r3, [r7, #24]
      break;
 80052f6:	bf00      	nop
  }

  return sysclockfreq;
 80052f8:	69bb      	ldr	r3, [r7, #24]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	@ 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	58024400 	.word	0x58024400
 800530c:	03d09000 	.word	0x03d09000
 8005310:	003d0900 	.word	0x003d0900
 8005314:	007a1200 	.word	0x007a1200
 8005318:	46000000 	.word	0x46000000
 800531c:	4c742400 	.word	0x4c742400
 8005320:	4a742400 	.word	0x4a742400
 8005324:	4af42400 	.word	0x4af42400

08005328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800532e:	f7ff fe81 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8005332:	4602      	mov	r2, r0
 8005334:	4b10      	ldr	r3, [pc, #64]	@ (8005378 <HAL_RCC_GetHCLKFreq+0x50>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	490f      	ldr	r1, [pc, #60]	@ (800537c <HAL_RCC_GetHCLKFreq+0x54>)
 8005340:	5ccb      	ldrb	r3, [r1, r3]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	fa22 f303 	lsr.w	r3, r2, r3
 800534a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <HAL_RCC_GetHCLKFreq+0x50>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	4a09      	ldr	r2, [pc, #36]	@ (800537c <HAL_RCC_GetHCLKFreq+0x54>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a07      	ldr	r2, [pc, #28]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x58>)
 8005364:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005366:	4a07      	ldr	r2, [pc, #28]	@ (8005384 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800536c:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x58>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	58024400 	.word	0x58024400
 800537c:	0800a464 	.word	0x0800a464
 8005380:	24000004 	.word	0x24000004
 8005384:	24000000 	.word	0x24000000

08005388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800538c:	f7ff ffcc 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	58024400 	.word	0x58024400
 80053b0:	0800a464 	.word	0x0800a464

080053b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053b8:	f7ff ffb6 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	58024400 	.word	0x58024400
 80053dc:	0800a464 	.word	0x0800a464

080053e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e4:	b0ca      	sub	sp, #296	@ 0x128
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005404:	2500      	movs	r5, #0
 8005406:	ea54 0305 	orrs.w	r3, r4, r5
 800540a:	d049      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005412:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005416:	d02f      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005418:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800541c:	d828      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800541e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005422:	d01a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005428:	d822      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005432:	d007      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005434:	e01c      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005436:	4bb8      	ldr	r3, [pc, #736]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	4ab7      	ldr	r2, [pc, #732]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005442:	e01a      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	3308      	adds	r3, #8
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f002 fb61 	bl	8007b14 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005458:	e00f      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3328      	adds	r3, #40	@ 0x28
 8005460:	2102      	movs	r1, #2
 8005462:	4618      	mov	r0, r3
 8005464:	f002 fc08 	bl	8007c78 <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800546e:	e004      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005482:	4ba5      	ldr	r3, [pc, #660]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005490:	4aa1      	ldr	r2, [pc, #644]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005492:	430b      	orrs	r3, r1
 8005494:	6513      	str	r3, [r2, #80]	@ 0x50
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80054ac:	f04f 0900 	mov.w	r9, #0
 80054b0:	ea58 0309 	orrs.w	r3, r8, r9
 80054b4:	d047      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d82a      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054c0:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	080054dd 	.word	0x080054dd
 80054cc:	080054eb 	.word	0x080054eb
 80054d0:	08005501 	.word	0x08005501
 80054d4:	0800551f 	.word	0x0800551f
 80054d8:	0800551f 	.word	0x0800551f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4a8d      	ldr	r2, [pc, #564]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054e8:	e01a      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	3308      	adds	r3, #8
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f002 fb0e 	bl	8007b14 <RCCEx_PLL2_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054fe:	e00f      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	3328      	adds	r3, #40	@ 0x28
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f002 fbb5 	bl	8007c78 <RCCEx_PLL3_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800551e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005528:	4b7b      	ldr	r3, [pc, #492]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800552a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552c:	f023 0107 	bic.w	r1, r3, #7
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	4a78      	ldr	r2, [pc, #480]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005538:	430b      	orrs	r3, r1
 800553a:	6513      	str	r3, [r2, #80]	@ 0x50
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005552:	f04f 0b00 	mov.w	fp, #0
 8005556:	ea5a 030b 	orrs.w	r3, sl, fp
 800555a:	d04c      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005566:	d030      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556c:	d829      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800556e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005570:	d02d      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005572:	2bc0      	cmp	r3, #192	@ 0xc0
 8005574:	d825      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d018      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d821      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d007      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005586:	e01c      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005588:	4b63      	ldr	r3, [pc, #396]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4a62      	ldr	r2, [pc, #392]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800558e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005594:	e01c      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559a:	3308      	adds	r3, #8
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f002 fab8 	bl	8007b14 <RCCEx_PLL2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055aa:	e011      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	3328      	adds	r3, #40	@ 0x28
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f002 fb5f 	bl	8007c78 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80055d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ec:	e003      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005602:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005606:	2300      	movs	r3, #0
 8005608:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800560c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d053      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800561e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005622:	d035      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005624:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005628:	d82e      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800562a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800562e:	d031      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005630:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005634:	d828      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800563a:	d01a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800563c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005640:	d822      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800564a:	d007      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800564c:	e01c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4b32      	ldr	r3, [pc, #200]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	4a31      	ldr	r2, [pc, #196]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005658:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800565a:	e01c      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	3308      	adds	r3, #8
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fa55 	bl	8007b14 <RCCEx_PLL2_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005670:	e011      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	3328      	adds	r3, #40	@ 0x28
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f002 fafc 	bl	8007c78 <RCCEx_PLL3_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005686:	e006      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800568e:	e002      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10b      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800569e:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b0:	430b      	orrs	r3, r1
 80056b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b4:	e003      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80056ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056ce:	2300      	movs	r3, #0
 80056d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80056d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80056d8:	460b      	mov	r3, r1
 80056da:	4313      	orrs	r3, r2
 80056dc:	d056      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ea:	d038      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f0:	d831      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056f6:	d034      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80056f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80056fc:	d82b      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80056fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005702:	d01d      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005708:	d825      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800570e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005714:	e01f      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005716:	bf00      	nop
 8005718:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571c:	4ba2      	ldr	r3, [pc, #648]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	4aa1      	ldr	r2, [pc, #644]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005728:	e01c      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	3308      	adds	r3, #8
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f002 f9ee 	bl	8007b14 <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800573e:	e011      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005744:	3328      	adds	r3, #40	@ 0x28
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f002 fa95 	bl	8007c78 <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005754:	e006      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800576c:	4b8e      	ldr	r3, [pc, #568]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800577c:	4a8a      	ldr	r2, [pc, #552]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800577e:	430b      	orrs	r3, r1
 8005780:	6593      	str	r3, [r2, #88]	@ 0x58
 8005782:	e003      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005798:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d03a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b2:	2b30      	cmp	r3, #48	@ 0x30
 80057b4:	d01f      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057b6:	2b30      	cmp	r3, #48	@ 0x30
 80057b8:	d819      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d00c      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d815      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d019      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d111      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ca:	4b77      	ldr	r3, [pc, #476]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a76      	ldr	r2, [pc, #472]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057d6:	e011      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057dc:	3308      	adds	r3, #8
 80057de:	2102      	movs	r1, #2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f002 f997 	bl	8007b14 <RCCEx_PLL2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005804:	4b68      	ldr	r3, [pc, #416]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005808:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005812:	4a65      	ldr	r2, [pc, #404]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005814:	430b      	orrs	r3, r1
 8005816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800582e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005832:	2300      	movs	r3, #0
 8005834:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005838:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d051      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800584c:	d035      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800584e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005852:	d82e      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005854:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005858:	d031      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800585a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800585e:	d828      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005864:	d01a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586a:	d822      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	d007      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005876:	e01c      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b4b      	ldr	r3, [pc, #300]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	4a4a      	ldr	r2, [pc, #296]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005884:	e01c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3308      	adds	r3, #8
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f002 f940 	bl	8007b14 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800589a:	e011      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	3328      	adds	r3, #40	@ 0x28
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 f9e7 	bl	8007c78 <RCCEx_PLL3_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058c8:	4b37      	ldr	r3, [pc, #220]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d6:	4a34      	ldr	r2, [pc, #208]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	6513      	str	r3, [r2, #80]	@ 0x50
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80058f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d056      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005910:	d033      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005916:	d82c      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800591c:	d02f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800591e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005922:	d826      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005924:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005928:	d02b      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800592a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800592e:	d820      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005934:	d012      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593a:	d81a      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d022      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005944:	d115      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3308      	adds	r3, #8
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f002 f8e0 	bl	8007b14 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800595a:	e015      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f002 f987 	bl	8007c78 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005970:	e00a      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800597a:	bf00      	nop
 800597c:	e004      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005990:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005994:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800599e:	4a02      	ldr	r2, [pc, #8]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059a6:	bf00      	nop
 80059a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	d055      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e0:	d033      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80059e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e6:	d82c      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d02f      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d826      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80059f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f8:	d02b      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80059fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059fe:	d820      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a04:	d012      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0a:	d81a      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d022      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a14:	d115      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 f878 	bl	8007b14 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a2a:	e015      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	3328      	adds	r3, #40	@ 0x28
 8005a32:	2101      	movs	r1, #1
 8005a34:	4618      	mov	r0, r3
 8005a36:	f002 f91f 	bl	8007c78 <RCCEx_PLL3_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a40:	e00a      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e004      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a60:	4ba3      	ldr	r3, [pc, #652]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a70:	4a9f      	ldr	r2, [pc, #636]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a72:	430b      	orrs	r3, r1
 8005a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a76:	e003      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d037      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aaa:	d00e      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab0:	d816      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d018      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aba:	d111      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4b8c      	ldr	r3, [pc, #560]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	4a8b      	ldr	r2, [pc, #556]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ac8:	e00f      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	3308      	adds	r3, #8
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f002 f81e 	bl	8007b14 <RCCEx_PLL2_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ade:	e004      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005af2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b00:	4a7b      	ldr	r2, [pc, #492]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b20:	2300      	movs	r3, #0
 8005b22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	d039      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d81c      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b7d 	.word	0x08005b7d
 8005b44:	08005b51 	.word	0x08005b51
 8005b48:	08005b5f 	.word	0x08005b5f
 8005b4c:	08005b7d 	.word	0x08005b7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b50:	4b67      	ldr	r3, [pc, #412]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	4a66      	ldr	r2, [pc, #408]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b5c:	e00f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	3308      	adds	r3, #8
 8005b64:	2102      	movs	r1, #2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 ffd4 	bl	8007b14 <RCCEx_PLL2_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b72:	e004      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b86:	4b5a      	ldr	r3, [pc, #360]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8a:	f023 0103 	bic.w	r1, r3, #3
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b94:	4a56      	ldr	r2, [pc, #344]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f000 809f 	beq.w	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bd2:	f7fb fc67 	bl	80014a4 <HAL_GetTick>
 8005bd6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bdc:	f7fb fc62 	bl	80014a4 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b64      	cmp	r3, #100	@ 0x64
 8005bea:	d903      	bls.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf2:	e005      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0ed      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d179      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c08:	4b39      	ldr	r3, [pc, #228]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c14:	4053      	eors	r3, r2
 8005c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d015      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c1e:	4b34      	ldr	r3, [pc, #208]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2a:	4b31      	ldr	r3, [pc, #196]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2e:	4a30      	ldr	r2, [pc, #192]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c36:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c42:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c56:	d118      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fb fc24 	bl	80014a4 <HAL_GetTick>
 8005c5c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c60:	e00d      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fb fc1f 	bl	80014a4 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c6c:	1ad2      	subs	r2, r2, r3
 8005c6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d903      	bls.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0eb      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d129      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ca4:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cb4:	091a      	lsrs	r2, r3, #4
 8005cb6:	4b10      	ldr	r3, [pc, #64]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6113      	str	r3, [r2, #16]
 8005cc0:	e005      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cde:	4a04      	ldr	r2, [pc, #16]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce4:	e00e      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005cee:	e009      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	58024800 	.word	0x58024800
 8005cf8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f002 0301 	and.w	r3, r2, #1
 8005d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f000 8089 	beq.w	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d2c:	2b28      	cmp	r3, #40	@ 0x28
 8005d2e:	d86b      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d30:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005e11 	.word	0x08005e11
 8005d3c:	08005e09 	.word	0x08005e09
 8005d40:	08005e09 	.word	0x08005e09
 8005d44:	08005e09 	.word	0x08005e09
 8005d48:	08005e09 	.word	0x08005e09
 8005d4c:	08005e09 	.word	0x08005e09
 8005d50:	08005e09 	.word	0x08005e09
 8005d54:	08005e09 	.word	0x08005e09
 8005d58:	08005ddd 	.word	0x08005ddd
 8005d5c:	08005e09 	.word	0x08005e09
 8005d60:	08005e09 	.word	0x08005e09
 8005d64:	08005e09 	.word	0x08005e09
 8005d68:	08005e09 	.word	0x08005e09
 8005d6c:	08005e09 	.word	0x08005e09
 8005d70:	08005e09 	.word	0x08005e09
 8005d74:	08005e09 	.word	0x08005e09
 8005d78:	08005df3 	.word	0x08005df3
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e09 	.word	0x08005e09
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e09 	.word	0x08005e09
 8005d8c:	08005e09 	.word	0x08005e09
 8005d90:	08005e09 	.word	0x08005e09
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e11 	.word	0x08005e11
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e09 	.word	0x08005e09
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e11 	.word	0x08005e11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	3308      	adds	r3, #8
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fe95 	bl	8007b14 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005df0:	e00f      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	3328      	adds	r3, #40	@ 0x28
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 ff3c 	bl	8007c78 <RCCEx_PLL3_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e06:	e004      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e0e:	e000      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e1a:	4bbf      	ldr	r3, [pc, #764]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e28:	4abb      	ldr	r2, [pc, #748]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e2e:	e003      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f002 0302 	and.w	r3, r2, #2
 8005e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e52:	460b      	mov	r3, r1
 8005e54:	4313      	orrs	r3, r2
 8005e56:	d041      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d824      	bhi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e62:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005eb5 	.word	0x08005eb5
 8005e6c:	08005e81 	.word	0x08005e81
 8005e70:	08005e97 	.word	0x08005e97
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005eb5 	.word	0x08005eb5
 8005e7c:	08005eb5 	.word	0x08005eb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	3308      	adds	r3, #8
 8005e86:	2101      	movs	r1, #1
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fe43 	bl	8007b14 <RCCEx_PLL2_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e94:	e00f      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	3328      	adds	r3, #40	@ 0x28
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 feea 	bl	8007c78 <RCCEx_PLL3_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ebe:	4b96      	ldr	r3, [pc, #600]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec2:	f023 0107 	bic.w	r1, r3, #7
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ecc:	4a92      	ldr	r2, [pc, #584]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ed2:	e003      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f002 0304 	and.w	r3, r2, #4
 8005ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d044      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d825      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f5d 	.word	0x08005f5d
 8005f14:	08005f29 	.word	0x08005f29
 8005f18:	08005f3f 	.word	0x08005f3f
 8005f1c:	08005f5d 	.word	0x08005f5d
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f5d 	.word	0x08005f5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fdef 	bl	8007b14 <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f3c:	e00f      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	3328      	adds	r3, #40	@ 0x28
 8005f44:	2101      	movs	r1, #1
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 fe96 	bl	8007c78 <RCCEx_PLL3_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f52:	e004      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f5a:	e000      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f66:	4b6c      	ldr	r3, [pc, #432]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	f023 0107 	bic.w	r1, r3, #7
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f76:	4a68      	ldr	r2, [pc, #416]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f002 0320 	and.w	r3, r2, #32
 8005f92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	d055      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fb2:	d033      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fb8:	d82c      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbe:	d02f      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc4:	d826      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fca:	d02b      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005fcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd0:	d820      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd6:	d012      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fdc:	d81a      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d022      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe6:	d115      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	3308      	adds	r3, #8
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fd8f 	bl	8007b14 <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e015      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	3328      	adds	r3, #40	@ 0x28
 8006004:	2102      	movs	r1, #2
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fe36 	bl	8007c78 <RCCEx_PLL3_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006012:	e00a      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601a:	e006      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800601c:	bf00      	nop
 800601e:	e004      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006020:	bf00      	nop
 8006022:	e002      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006024:	bf00      	nop
 8006026:	e000      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006032:	4b39      	ldr	r3, [pc, #228]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006042:	4a35      	ldr	r2, [pc, #212]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006044:	430b      	orrs	r3, r1
 8006046:	6553      	str	r3, [r2, #84]	@ 0x54
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006068:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d058      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800607a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800607e:	d033      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006080:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006084:	d82c      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608a:	d02f      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006090:	d826      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006092:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006096:	d02b      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609c:	d820      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a2:	d012      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a8:	d81a      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d022      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b2:	d115      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	3308      	adds	r3, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fd29 	bl	8007b14 <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060c8:	e015      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	3328      	adds	r3, #40	@ 0x28
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fdd0 	bl	8007c78 <RCCEx_PLL3_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060de:	e00a      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e6:	e006      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060e8:	bf00      	nop
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10e      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060fe:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800610e:	4a02      	ldr	r2, [pc, #8]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006110:	430b      	orrs	r3, r1
 8006112:	6593      	str	r3, [r2, #88]	@ 0x58
 8006114:	e006      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800613a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d055      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800614c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006150:	d033      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006152:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006156:	d82c      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800615c:	d02f      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006162:	d826      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006164:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006168:	d02b      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800616a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800616e:	d820      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006174:	d012      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617a:	d81a      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006184:	d115      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	3308      	adds	r3, #8
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fcc0 	bl	8007b14 <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800619a:	e015      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	3328      	adds	r3, #40	@ 0x28
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fd67 	bl	8007c78 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061b0:	e00a      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b8:	e006      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ba:	bf00      	nop
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061e0:	4a9d      	ldr	r2, [pc, #628]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 0308 	and.w	r3, r2, #8
 80061fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006206:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	d01e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621c:	d10c      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f001 fd26 	bl	8007c78 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006238:	4b87      	ldr	r3, [pc, #540]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006248:	4a83      	ldr	r2, [pc, #524]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624a:	430b      	orrs	r3, r1
 800624c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f002 0310 	and.w	r3, r2, #16
 800625a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006264:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d01e      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627a:	d10c      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	3328      	adds	r3, #40	@ 0x28
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fcf7 	bl	8007c78 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006296:	4b70      	ldr	r3, [pc, #448]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d03e      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062d8:	d022      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80062da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062de:	d81b      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e8:	d00b      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80062ea:	e015      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f0:	3308      	adds	r3, #8
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fc0d 	bl	8007b14 <RCCEx_PLL2_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006300:	e00f      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	3328      	adds	r3, #40	@ 0x28
 8006308:	2102      	movs	r1, #2
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fcb4 	bl	8007c78 <RCCEx_PLL3_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800632a:	4b4b      	ldr	r3, [pc, #300]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800633a:	4a47      	ldr	r2, [pc, #284]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633c:	430b      	orrs	r3, r1
 800633e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006356:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006358:	2300      	movs	r3, #0
 800635a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800635c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006360:	460b      	mov	r3, r1
 8006362:	4313      	orrs	r3, r2
 8006364:	d03b      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006372:	d01f      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006378:	d818      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800637e:	d003      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006384:	d007      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006386:	e011      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006388:	4b33      	ldr	r3, [pc, #204]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	4a32      	ldr	r2, [pc, #200]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006394:	e00f      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639a:	3328      	adds	r3, #40	@ 0x28
 800639c:	2101      	movs	r1, #1
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fc6a 	bl	8007c78 <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063aa:	e004      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063b2:	e000      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063be:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	4a22      	ldr	r2, [pc, #136]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80063ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80063ec:	2300      	movs	r3, #0
 80063ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80063f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063f4:	460b      	mov	r3, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	d034      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006408:	d007      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800640a:	e011      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006418:	e00e      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641e:	3308      	adds	r3, #8
 8006420:	2102      	movs	r1, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fb76 	bl	8007b14 <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10d      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006444:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644e:	4a02      	ldr	r2, [pc, #8]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006450:	430b      	orrs	r3, r1
 8006452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006454:	e006      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006456:	bf00      	nop
 8006458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006472:	2300      	movs	r3, #0
 8006474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006476:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800647a:	460b      	mov	r3, r1
 800647c:	4313      	orrs	r3, r2
 800647e:	d00c      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006484:	3328      	adds	r3, #40	@ 0x28
 8006486:	2102      	movs	r1, #2
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fbf5 	bl	8007c78 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80064a8:	2300      	movs	r3, #0
 80064aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d038      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c2:	d018      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c8:	d811      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ce:	d014      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d4:	d80b      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d011      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80064da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064de:	d106      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e0:	4bc3      	ldr	r3, [pc, #780]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e4:	4ac2      	ldr	r2, [pc, #776]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80064ec:	e008      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f4:	e004      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80064fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006508:	4bb9      	ldr	r3, [pc, #740]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006518:	4ab5      	ldr	r2, [pc, #724]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651a:	430b      	orrs	r3, r1
 800651c:	6553      	str	r3, [r2, #84]	@ 0x54
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006536:	2300      	movs	r3, #0
 8006538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800653a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800653e:	460b      	mov	r3, r1
 8006540:	4313      	orrs	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006544:	4baa      	ldr	r3, [pc, #680]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006548:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006552:	4aa7      	ldr	r2, [pc, #668]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006554:	430b      	orrs	r3, r1
 8006556:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006564:	653b      	str	r3, [r7, #80]	@ 0x50
 8006566:	2300      	movs	r3, #0
 8006568:	657b      	str	r3, [r7, #84]	@ 0x54
 800656a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800656e:	460b      	mov	r3, r1
 8006570:	4313      	orrs	r3, r2
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006574:	4b9e      	ldr	r3, [pc, #632]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006584:	4a9a      	ldr	r2, [pc, #616]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006586:	430b      	orrs	r3, r1
 8006588:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006598:	2300      	movs	r3, #0
 800659a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800659c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065a0:	460b      	mov	r3, r1
 80065a2:	4313      	orrs	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065a6:	4b92      	ldr	r3, [pc, #584]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065b4:	4a8e      	ldr	r2, [pc, #568]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b6:	430b      	orrs	r3, r1
 80065b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c8:	2300      	movs	r3, #0
 80065ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80065cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80065d0:	460b      	mov	r3, r1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065d6:	4b86      	ldr	r3, [pc, #536]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	4a85      	ldr	r2, [pc, #532]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065e0:	6113      	str	r3, [r2, #16]
 80065e2:	4b83      	ldr	r3, [pc, #524]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e4:	6919      	ldr	r1, [r3, #16]
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065ee:	4a80      	ldr	r2, [pc, #512]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006600:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006602:	2300      	movs	r3, #0
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006606:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006610:	4b77      	ldr	r3, [pc, #476]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006614:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	4a74      	ldr	r2, [pc, #464]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006620:	430b      	orrs	r3, r1
 8006622:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30
 8006632:	2300      	movs	r3, #0
 8006634:	637b      	str	r3, [r7, #52]	@ 0x34
 8006636:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006640:	4b6b      	ldr	r3, [pc, #428]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006644:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006650:	4a67      	ldr	r2, [pc, #412]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	2100      	movs	r1, #0
 8006660:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006668:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800666c:	460b      	mov	r3, r1
 800666e:	4313      	orrs	r3, r2
 8006670:	d011      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	3308      	adds	r3, #8
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fa4a 	bl	8007b14 <RCCEx_PLL2_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	2100      	movs	r1, #0
 80066a0:	6239      	str	r1, [r7, #32]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066ac:	460b      	mov	r3, r1
 80066ae:	4313      	orrs	r3, r2
 80066b0:	d011      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	3308      	adds	r3, #8
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fa2a 	bl	8007b14 <RCCEx_PLL2_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	2100      	movs	r1, #0
 80066e0:	61b9      	str	r1, [r7, #24]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d011      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	3308      	adds	r3, #8
 80066f8:	2102      	movs	r1, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 fa0a 	bl	8007b14 <RCCEx_PLL2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	2100      	movs	r1, #0
 8006720:	6139      	str	r1, [r7, #16]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d011      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	3328      	adds	r3, #40	@ 0x28
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fa9c 	bl	8007c78 <RCCEx_PLL3_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	2100      	movs	r1, #0
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d011      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3328      	adds	r3, #40	@ 0x28
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fa7c 	bl	8007c78 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	2100      	movs	r1, #0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d011      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	3328      	adds	r3, #40	@ 0x28
 80067b8:	2102      	movs	r1, #2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fa5c 	bl	8007c78 <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80067d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80067ea:	46bd      	mov	sp, r7
 80067ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f0:	58024400 	.word	0x58024400

080067f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b090      	sub	sp, #64	@ 0x40
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006802:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006806:	430b      	orrs	r3, r1
 8006808:	f040 8094 	bne.w	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800680c:	4b9e      	ldr	r3, [pc, #632]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	2b04      	cmp	r3, #4
 800681a:	f200 8087 	bhi.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800681e:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006839 	.word	0x08006839
 8006828:	08006861 	.word	0x08006861
 800682c:	08006889 	.word	0x08006889
 8006830:	08006925 	.word	0x08006925
 8006834:	080068b1 	.word	0x080068b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006838:	4b93      	ldr	r3, [pc, #588]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006844:	d108      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f810 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006854:	f000 bd45 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800685c:	f000 bd41 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006860:	4b89      	ldr	r3, [pc, #548]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686c:	d108      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686e:	f107 0318 	add.w	r3, r7, #24
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fd54 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800687c:	f000 bd31 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006884:	f000 bd2d 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006888:	4b7f      	ldr	r3, [pc, #508]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006894:	d108      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fe94 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a4:	f000 bd1d 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ac:	f000 bd19 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b0:	4b75      	ldr	r3, [pc, #468]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068ba:	4b73      	ldr	r3, [pc, #460]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	4a6d      	ldr	r2, [pc, #436]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068de:	e01f      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e0:	4b69      	ldr	r3, [pc, #420]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ec:	d106      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f4:	d102      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068f6:	4b66      	ldr	r3, [pc, #408]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fa:	e011      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068fc:	4b62      	ldr	r3, [pc, #392]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006908:	d106      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006910:	d102      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006912:	4b60      	ldr	r3, [pc, #384]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006916:	e003      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800691c:	f000 bce1 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006920:	f000 bcdf 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006924:	4b5c      	ldr	r3, [pc, #368]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006928:	f000 bcdb 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006930:	f000 bcd7 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006938:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800693c:	430b      	orrs	r3, r1
 800693e:	f040 80ad 	bne.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006942:	4b51      	ldr	r3, [pc, #324]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006946:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800694a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006952:	d056      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695a:	f200 8090 	bhi.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	2bc0      	cmp	r3, #192	@ 0xc0
 8006962:	f000 8088 	beq.w	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2bc0      	cmp	r3, #192	@ 0xc0
 800696a:	f200 8088 	bhi.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	2b80      	cmp	r3, #128	@ 0x80
 8006972:	d032      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	2b80      	cmp	r3, #128	@ 0x80
 8006978:	f200 8081 	bhi.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	d014      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006988:	e079      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800698a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006996:	d108      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800699c:	4618      	mov	r0, r3
 800699e:	f000 ff67 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a6:	f000 bc9c 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ae:	f000 bc98 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b2:	4b35      	ldr	r3, [pc, #212]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069be:	d108      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c0:	f107 0318 	add.w	r3, r7, #24
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fcab 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ce:	f000 bc88 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d6:	f000 bc84 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069da:	4b2b      	ldr	r3, [pc, #172]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069e6:	d108      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fdeb 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f6:	f000 bc74 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069fe:	f000 bc70 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a02:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d10c      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	4a18      	ldr	r2, [pc, #96]	@ (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a30:	e01f      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a32:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a48:	4b11      	ldr	r3, [pc, #68]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4c:	e011      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5a:	d106      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a62:	d102      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a64:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a68:	e003      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a6e:	f000 bc38 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a72:	f000 bc36 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a76:	4b08      	ldr	r3, [pc, #32]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7a:	f000 bc32 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a82:	f000 bc2e 	b.w	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a86:	bf00      	nop
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	03d09000 	.word	0x03d09000
 8006a90:	003d0900 	.word	0x003d0900
 8006a94:	007a1200 	.word	0x007a1200
 8006a98:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	f040 809c 	bne.w	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006ab2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aba:	d054      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ac2:	f200 808b 	bhi.w	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006acc:	f000 8083 	beq.w	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ad6:	f200 8081 	bhi.w	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae0:	d02f      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae8:	d878      	bhi.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af6:	d012      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006af8:	e070      	b.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006afa:	4b8a      	ldr	r3, [pc, #552]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b06:	d107      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 feaf 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b16:	e3e4      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b1c:	e3e1      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b1e:	4b81      	ldr	r3, [pc, #516]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b2c:	f107 0318 	add.w	r3, r7, #24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fbf5 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b3a:	e3d2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b40:	e3cf      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b42:	4b78      	ldr	r3, [pc, #480]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fd37 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	e3c0      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b64:	e3bd      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b66:	4b6f      	ldr	r3, [pc, #444]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b70:	4b6c      	ldr	r3, [pc, #432]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d10c      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b82:	4b68      	ldr	r3, [pc, #416]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	08db      	lsrs	r3, r3, #3
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	4a66      	ldr	r2, [pc, #408]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b94:	e01e      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b96:	4b63      	ldr	r3, [pc, #396]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006baa:	d102      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bac:	4b5f      	ldr	r3, [pc, #380]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb0:	e010      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bbe:	d106      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc6:	d102      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bc8:	4b59      	ldr	r3, [pc, #356]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bcc:	e002      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bd2:	e386      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd4:	e385      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bd6:	4b57      	ldr	r3, [pc, #348]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bda:	e382      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be0:	e37f      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006bea:	430b      	orrs	r3, r1
 8006bec:	f040 80a7 	bne.w	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c00:	d055      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c08:	f200 8096 	bhi.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c12:	f000 8084 	beq.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c1c:	f200 808c 	bhi.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c26:	d030      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c2e:	f200 8083 	bhi.w	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c3e:	d012      	beq.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c40:	e07a      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c42:	4b38      	ldr	r3, [pc, #224]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fe0b 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5e:	e340      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c64:	e33d      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c66:	4b2f      	ldr	r3, [pc, #188]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c72:	d107      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c74:	f107 0318 	add.w	r3, r7, #24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fb51 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c82:	e32e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c88:	e32b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c8a:	4b26      	ldr	r3, [pc, #152]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fc93 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca6:	e31c      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cac:	e319      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cae:	4b1d      	ldr	r3, [pc, #116]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d10c      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cca:	4b16      	ldr	r3, [pc, #88]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cdc:	e01e      	b.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cde:	4b11      	ldr	r3, [pc, #68]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cea:	d106      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf2:	d102      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf8:	e010      	b.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d06:	d106      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0e:	d102      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d10:	4b07      	ldr	r3, [pc, #28]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d14:	e002      	b.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d1a:	e2e2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d1c:	e2e1      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d1e:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d22:	e2de      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d24:	58024400 	.word	0x58024400
 8006d28:	03d09000 	.word	0x03d09000
 8006d2c:	003d0900 	.word	0x003d0900
 8006d30:	007a1200 	.word	0x007a1200
 8006d34:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3c:	e2d1      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d42:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006d46:	430b      	orrs	r3, r1
 8006d48:	f040 809c 	bne.w	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d4c:	4b93      	ldr	r3, [pc, #588]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d50:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d5c:	d054      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d64:	f200 808b 	bhi.w	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d6e:	f000 8083 	beq.w	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d78:	f200 8081 	bhi.w	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d82:	d02f      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d8a:	d878      	bhi.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d98:	d012      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006d9a:	e070      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fd5e 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db8:	e293      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	e290      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc0:	4b76      	ldr	r3, [pc, #472]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dce:	f107 0318 	add.w	r3, r7, #24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 faa4 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ddc:	e281      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de2:	e27e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006de4:	4b6d      	ldr	r3, [pc, #436]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fbe6 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e00:	e26f      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e06:	e26c      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e08:	4b64      	ldr	r3, [pc, #400]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e12:	4b62      	ldr	r3, [pc, #392]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e24:	4b5d      	ldr	r3, [pc, #372]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
 8006e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e36:	e01e      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e38:	4b58      	ldr	r3, [pc, #352]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e44:	d106      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e4c:	d102      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e4e:	4b55      	ldr	r3, [pc, #340]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e52:	e010      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e54:	4b51      	ldr	r3, [pc, #324]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e60:	d106      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e68:	d102      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e6e:	e002      	b.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e74:	e235      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e76:	e234      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e78:	4b4c      	ldr	r3, [pc, #304]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e7c:	e231      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e82:	e22e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e88:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	f040 808f 	bne.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e92:	4b42      	ldr	r3, [pc, #264]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e96:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea2:	d06b      	beq.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eaa:	d874      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eb2:	d056      	beq.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eba:	d86c      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ec2:	d03b      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006eca:	d864      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed2:	d021      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eda:	d85c      	bhi.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006eea:	e054      	b.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fe fa4c 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ef2:	e1f6      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ef4:	4b29      	ldr	r3, [pc, #164]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f00:	d107      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f02:	f107 0318 	add.w	r3, r7, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fa0a 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f10:	e1e7      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f16:	e1e4      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f18:	4b20      	ldr	r3, [pc, #128]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f24:	d107      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fb4c 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f34:	e1d5      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3a:	e1d2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f3c:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d109      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f48:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	4a13      	ldr	r2, [pc, #76]	@ (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5a:	e1c2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f60:	e1bf      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f62:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6e:	d102      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006f70:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f74:	e1b5      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7a:	e1b2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f7c:	4b07      	ldr	r3, [pc, #28]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f88:	d102      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006f8a:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f8e:	e1a8      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f94:	e1a5      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9a:	e1a2      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	03d09000 	.word	0x03d09000
 8006fa4:	003d0900 	.word	0x003d0900
 8006fa8:	007a1200 	.word	0x007a1200
 8006fac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	d173      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fbc:	4b9c      	ldr	r3, [pc, #624]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fcc:	d02f      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd4:	d863      	bhi.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe2:	d012      	beq.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006fe4:	e05b      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fe6:	4b92      	ldr	r3, [pc, #584]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff2:	d107      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff4:	f107 0318 	add.w	r3, r7, #24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f991 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007002:	e16e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007008:	e16b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800700a:	4b89      	ldr	r3, [pc, #548]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007016:	d107      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007018:	f107 030c 	add.w	r3, r7, #12
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fad3 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007026:	e15c      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702c:	e159      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800702e:	4b80      	ldr	r3, [pc, #512]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007032:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007038:	4b7d      	ldr	r3, [pc, #500]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b04      	cmp	r3, #4
 8007042:	d10c      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800704a:	4b79      	ldr	r3, [pc, #484]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	4a77      	ldr	r2, [pc, #476]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800705c:	e01e      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800705e:	4b74      	ldr	r3, [pc, #464]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706a:	d106      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800706c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007072:	d102      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007074:	4b70      	ldr	r3, [pc, #448]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007078:	e010      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800707a:	4b6d      	ldr	r3, [pc, #436]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007086:	d106      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800708e:	d102      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007090:	4b6a      	ldr	r3, [pc, #424]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007094:	e002      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800709a:	e122      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800709c:	e121      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a2:	e11e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80070ac:	430b      	orrs	r3, r1
 80070ae:	d133      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80070b0:	4b5f      	ldr	r3, [pc, #380]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c6:	d012      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80070c8:	e023      	b.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ca:	4b59      	ldr	r3, [pc, #356]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d6:	d107      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fbc7 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e6:	e0fc      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ec:	e0f9      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ee:	4b50      	ldr	r3, [pc, #320]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070fa:	d107      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070fc:	f107 0318 	add.w	r3, r7, #24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f90d 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710a:	e0ea      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007110:	e0e7      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007116:	e0e4      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007120:	430b      	orrs	r3, r1
 8007122:	f040 808d 	bne.w	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007126:	4b42      	ldr	r3, [pc, #264]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800712e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007136:	d06b      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713e:	d874      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007146:	d056      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d86c      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007156:	d03b      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715e:	d864      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007166:	d021      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716e:	d85c      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800717c:	d004      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800717e:	e054      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007180:	f000 f8b8 	bl	80072f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007184:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007186:	e0ac      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007188:	4b29      	ldr	r3, [pc, #164]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007194:	d107      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007196:	f107 0318 	add.w	r3, r7, #24
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f8c0 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a4:	e09d      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071aa:	e09a      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071ac:	4b20      	ldr	r3, [pc, #128]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071b8:	d107      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ba:	f107 030c 	add.w	r3, r7, #12
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fa02 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c8:	e08b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ce:	e088      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071d0:	4b17      	ldr	r3, [pc, #92]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d109      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071dc:	4b14      	ldr	r3, [pc, #80]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a13      	ldr	r2, [pc, #76]	@ (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ee:	e078      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e075      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007202:	d102      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007208:	e06b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800720e:	e068      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007210:	4b07      	ldr	r3, [pc, #28]	@ (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800721c:	d102      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800721e:	4b07      	ldr	r3, [pc, #28]	@ (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007222:	e05e      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007228:	e05b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722e:	e058      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007230:	58024400 	.word	0x58024400
 8007234:	03d09000 	.word	0x03d09000
 8007238:	003d0900 	.word	0x003d0900
 800723c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007244:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007248:	430b      	orrs	r3, r1
 800724a:	d148      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800724c:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800724e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007250:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007254:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725c:	d02a      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007264:	d838      	bhi.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d004      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007272:	d00d      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007274:	e030      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007276:	4b1d      	ldr	r3, [pc, #116]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007284:	4b1a      	ldr	r3, [pc, #104]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007288:	e02b      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728e:	e028      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007290:	4b16      	ldr	r3, [pc, #88]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800729c:	d107      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fae4 	bl	8007870 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ac:	e019      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b2:	e016      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b4:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072c0:	d107      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0318 	add.w	r3, r7, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f82a 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d0:	e007      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d6:	e004      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072dc:	e001      	b.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80072e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3740      	adds	r7, #64	@ 0x40
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	58024400 	.word	0x58024400
 80072f0:	007a1200 	.word	0x007a1200

080072f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072f8:	f7fe f816 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	091b      	lsrs	r3, r3, #4
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	@ (800731c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	58024400 	.word	0x58024400
 800731c:	0800a464 	.word	0x0800a464

08007320 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	@ 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007328:	4ba1      	ldr	r3, [pc, #644]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007332:	4b9f      	ldr	r3, [pc, #636]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	0b1b      	lsrs	r3, r3, #12
 8007338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800733c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800733e:	4b9c      	ldr	r3, [pc, #624]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	091b      	lsrs	r3, r3, #4
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800734a:	4b99      	ldr	r3, [pc, #612]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	08db      	lsrs	r3, r3, #3
 8007350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8111 	beq.w	8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b02      	cmp	r3, #2
 8007372:	f000 8083 	beq.w	800747c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b02      	cmp	r3, #2
 800737a:	f200 80a1 	bhi.w	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d056      	beq.n	8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800738a:	e099      	b.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800738c:	4b88      	ldr	r3, [pc, #544]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02d      	beq.n	80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007398:	4b85      	ldr	r3, [pc, #532]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	08db      	lsrs	r3, r3, #3
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	4a84      	ldr	r2, [pc, #528]	@ (80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
 80073a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b7b      	ldr	r3, [pc, #492]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073f2:	e087      	b.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b6a      	ldr	r3, [pc, #424]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	ed97 6a03 	vldr	s12, [r7, #12]
 800741a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007436:	e065      	b.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b59      	ldr	r3, [pc, #356]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a03 	vldr	s12, [r7, #12]
 800745e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747a:	e043      	b.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b48      	ldr	r3, [pc, #288]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074be:	e021      	b.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b37      	ldr	r3, [pc, #220]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007504:	4b2a      	ldr	r3, [pc, #168]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007508:	0a5b      	lsrs	r3, r3, #9
 800750a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800751a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	ee17 2a90 	vmov	r2, s15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007532:	4b1f      	ldr	r3, [pc, #124]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800754c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007558:	ee17 2a90 	vmov	r2, s15
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007560:	4b13      	ldr	r3, [pc, #76]	@ (80075b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007564:	0e1b      	lsrs	r3, r3, #24
 8007566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757a:	edd7 6a07 	vldr	s13, [r7, #28]
 800757e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007586:	ee17 2a90 	vmov	r2, s15
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800758e:	e008      	b.n	80075a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	609a      	str	r2, [r3, #8]
}
 80075a2:	bf00      	nop
 80075a4:	3724      	adds	r7, #36	@ 0x24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
 80075b4:	03d09000 	.word	0x03d09000
 80075b8:	46000000 	.word	0x46000000
 80075bc:	4c742400 	.word	0x4c742400
 80075c0:	4a742400 	.word	0x4a742400
 80075c4:	4af42400 	.word	0x4af42400

080075c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b089      	sub	sp, #36	@ 0x24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d0:	4ba1      	ldr	r3, [pc, #644]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075da:	4b9f      	ldr	r3, [pc, #636]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075de:	0d1b      	lsrs	r3, r3, #20
 80075e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075e6:	4b9c      	ldr	r3, [pc, #624]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075f2:	4b99      	ldr	r3, [pc, #612]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8111 	beq.w	8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f000 8083 	beq.w	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b02      	cmp	r3, #2
 8007622:	f200 80a1 	bhi.w	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d056      	beq.n	80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007632:	e099      	b.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007634:	4b88      	ldr	r3, [pc, #544]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02d      	beq.n	800769c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007640:	4b85      	ldr	r3, [pc, #532]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	08db      	lsrs	r3, r3, #3
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	4a84      	ldr	r2, [pc, #528]	@ (800785c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b7b      	ldr	r3, [pc, #492]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a03 	vldr	s12, [r7, #12]
 800767e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800769a:	e087      	b.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076de:	e065      	b.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b59      	ldr	r3, [pc, #356]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a03 	vldr	s12, [r7, #12]
 8007706:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007722:	e043      	b.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800786c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b48      	ldr	r3, [pc, #288]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a03 	vldr	s12, [r7, #12]
 800774a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007766:	e021      	b.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b37      	ldr	r3, [pc, #220]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d2:	ee17 2a90 	vmov	r2, s15
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077da:	4b1f      	ldr	r3, [pc, #124]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007800:	ee17 2a90 	vmov	r2, s15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007808:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	0e1b      	lsrs	r3, r3, #24
 800780e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800781e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007822:	edd7 6a07 	vldr	s13, [r7, #28]
 8007826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782e:	ee17 2a90 	vmov	r2, s15
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007836:	e008      	b.n	800784a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
}
 800784a:	bf00      	nop
 800784c:	3724      	adds	r7, #36	@ 0x24
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400
 800785c:	03d09000 	.word	0x03d09000
 8007860:	46000000 	.word	0x46000000
 8007864:	4c742400 	.word	0x4c742400
 8007868:	4a742400 	.word	0x4a742400
 800786c:	4af42400 	.word	0x4af42400

08007870 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007870:	b480      	push	{r7}
 8007872:	b089      	sub	sp, #36	@ 0x24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007878:	4ba0      	ldr	r3, [pc, #640]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007882:	4b9e      	ldr	r3, [pc, #632]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800788c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800788e:	4b9b      	ldr	r3, [pc, #620]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007898:	4b98      	ldr	r3, [pc, #608]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789c:	08db      	lsrs	r3, r3, #3
 800789e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	fb02 f303 	mul.w	r3, r2, r3
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8111 	beq.w	8007ade <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	f000 8083 	beq.w	80079ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	f200 80a1 	bhi.w	8007a0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d056      	beq.n	8007986 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078d8:	e099      	b.n	8007a0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078da:	4b88      	ldr	r3, [pc, #544]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d02d      	beq.n	8007942 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078e6:	4b85      	ldr	r3, [pc, #532]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	4a83      	ldr	r2, [pc, #524]	@ (8007b00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078f2:	fa22 f303 	lsr.w	r3, r2, r3
 80078f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007910:	4b7a      	ldr	r3, [pc, #488]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007920:	ed97 6a03 	vldr	s12, [r7, #12]
 8007924:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007940:	e087      	b.n	8007a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007954:	4b69      	ldr	r3, [pc, #420]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	ed97 6a03 	vldr	s12, [r7, #12]
 8007968:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800796c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007984:	e065      	b.n	8007a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	ee07 3a90 	vmov	s15, r3
 800798c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007990:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007b0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007998:	4b58      	ldr	r3, [pc, #352]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c8:	e043      	b.n	8007a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007b10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079dc:	4b47      	ldr	r3, [pc, #284]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a0c:	e021      	b.n	8007a52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a18:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007b08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a20:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a34:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007b04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a52:	4b2a      	ldr	r3, [pc, #168]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	0a5b      	lsrs	r3, r3, #9
 8007a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5c:	ee07 3a90 	vmov	s15, r3
 8007a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a78:	ee17 2a90 	vmov	r2, s15
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a80:	4b1e      	ldr	r3, [pc, #120]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa6:	ee17 2a90 	vmov	r2, s15
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007aae:	4b13      	ldr	r3, [pc, #76]	@ (8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab2:	0e1b      	lsrs	r3, r3, #24
 8007ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad4:	ee17 2a90 	vmov	r2, s15
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007adc:	e008      	b.n	8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	3724      	adds	r7, #36	@ 0x24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	58024400 	.word	0x58024400
 8007b00:	03d09000 	.word	0x03d09000
 8007b04:	46000000 	.word	0x46000000
 8007b08:	4c742400 	.word	0x4c742400
 8007b0c:	4a742400 	.word	0x4a742400
 8007b10:	4af42400 	.word	0x4af42400

08007b14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b22:	4b53      	ldr	r3, [pc, #332]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d101      	bne.n	8007b32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e099      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b32:	4b4f      	ldr	r3, [pc, #316]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a4e      	ldr	r2, [pc, #312]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3e:	f7f9 fcb1 	bl	80014a4 <HAL_GetTick>
 8007b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b44:	e008      	b.n	8007b58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b46:	f7f9 fcad 	bl	80014a4 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e086      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b58:	4b45      	ldr	r3, [pc, #276]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1f0      	bne.n	8007b46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b64:	4b42      	ldr	r3, [pc, #264]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	031b      	lsls	r3, r3, #12
 8007b72:	493f      	ldr	r1, [pc, #252]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	025b      	lsls	r3, r3, #9
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	061b      	lsls	r3, r3, #24
 8007ba4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ba8:	4931      	ldr	r1, [pc, #196]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bae:	4b30      	ldr	r3, [pc, #192]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	492d      	ldr	r1, [pc, #180]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	f023 0220 	bic.w	r2, r3, #32
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	4928      	ldr	r1, [pc, #160]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bd2:	4b27      	ldr	r3, [pc, #156]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	f023 0310 	bic.w	r3, r3, #16
 8007bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bde:	4b24      	ldr	r3, [pc, #144]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007be2:	4b24      	ldr	r3, [pc, #144]	@ (8007c74 <RCCEx_PLL2_Config+0x160>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	69d2      	ldr	r2, [r2, #28]
 8007bea:	00d2      	lsls	r2, r2, #3
 8007bec:	4920      	ldr	r1, [pc, #128]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	f043 0310 	orr.w	r3, r3, #16
 8007bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d106      	bne.n	8007c12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c04:	4b1a      	ldr	r3, [pc, #104]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a19      	ldr	r2, [pc, #100]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c10:	e00f      	b.n	8007c32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d106      	bne.n	8007c26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c18:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1c:	4a14      	ldr	r2, [pc, #80]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c24:	e005      	b.n	8007c32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c26:	4b12      	ldr	r3, [pc, #72]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2a:	4a11      	ldr	r2, [pc, #68]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c32:	4b0f      	ldr	r3, [pc, #60]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a0e      	ldr	r2, [pc, #56]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3e:	f7f9 fc31 	bl	80014a4 <HAL_GetTick>
 8007c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c44:	e008      	b.n	8007c58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c46:	f7f9 fc2d 	bl	80014a4 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e006      	b.n	8007c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c58:	4b05      	ldr	r3, [pc, #20]	@ (8007c70 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400
 8007c74:	ffff0007 	.word	0xffff0007

08007c78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c86:	4b53      	ldr	r3, [pc, #332]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d101      	bne.n	8007c96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e099      	b.n	8007dca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c96:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca2:	f7f9 fbff 	bl	80014a4 <HAL_GetTick>
 8007ca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca8:	e008      	b.n	8007cbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007caa:	f7f9 fbfb 	bl	80014a4 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e086      	b.n	8007dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cbc:	4b45      	ldr	r3, [pc, #276]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f0      	bne.n	8007caa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cc8:	4b42      	ldr	r3, [pc, #264]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ccc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	051b      	lsls	r3, r3, #20
 8007cd6:	493f      	ldr	r1, [pc, #252]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	025b      	lsls	r3, r3, #9
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	061b      	lsls	r3, r3, #24
 8007d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d0c:	4931      	ldr	r1, [pc, #196]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d12:	4b30      	ldr	r3, [pc, #192]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	492d      	ldr	r1, [pc, #180]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d24:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	4928      	ldr	r1, [pc, #160]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d36:	4b27      	ldr	r3, [pc, #156]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	4a26      	ldr	r2, [pc, #152]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d42:	4b24      	ldr	r3, [pc, #144]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d46:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <RCCEx_PLL3_Config+0x160>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	69d2      	ldr	r2, [r2, #28]
 8007d4e:	00d2      	lsls	r2, r2, #3
 8007d50:	4920      	ldr	r1, [pc, #128]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d56:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d106      	bne.n	8007d76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6c:	4a19      	ldr	r2, [pc, #100]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d74:	e00f      	b.n	8007d96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d106      	bne.n	8007d8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d7c:	4b15      	ldr	r3, [pc, #84]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	4a14      	ldr	r2, [pc, #80]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d88:	e005      	b.n	8007d96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d8a:	4b12      	ldr	r3, [pc, #72]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	4a11      	ldr	r2, [pc, #68]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d96:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da2:	f7f9 fb7f 	bl	80014a4 <HAL_GetTick>
 8007da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da8:	e008      	b.n	8007dbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007daa:	f7f9 fb7b 	bl	80014a4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e006      	b.n	8007dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	ffff0007 	.word	0xffff0007

08007ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e049      	b.n	8007e82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 f94c 	bl	80010a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f000 fa58 	bl	80082d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x24>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf14      	ite	ne
 8007ea8:	2301      	movne	r3, #1
 8007eaa:	2300      	moveq	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e03c      	b.n	8007f2a <HAL_TIM_PWM_Start+0x9e>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d109      	bne.n	8007eca <HAL_TIM_PWM_Start+0x3e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	bf14      	ite	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	2300      	moveq	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	e02f      	b.n	8007f2a <HAL_TIM_PWM_Start+0x9e>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d109      	bne.n	8007ee4 <HAL_TIM_PWM_Start+0x58>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e022      	b.n	8007f2a <HAL_TIM_PWM_Start+0x9e>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b0c      	cmp	r3, #12
 8007ee8:	d109      	bne.n	8007efe <HAL_TIM_PWM_Start+0x72>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e015      	b.n	8007f2a <HAL_TIM_PWM_Start+0x9e>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d109      	bne.n	8007f18 <HAL_TIM_PWM_Start+0x8c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	bf14      	ite	ne
 8007f10:	2301      	movne	r3, #1
 8007f12:	2300      	moveq	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	e008      	b.n	8007f2a <HAL_TIM_PWM_Start+0x9e>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf14      	ite	ne
 8007f24:	2301      	movne	r3, #1
 8007f26:	2300      	moveq	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e0a1      	b.n	8008076 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_PWM_Start+0xb6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f40:	e023      	b.n	8007f8a <HAL_TIM_PWM_Start+0xfe>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d104      	bne.n	8007f52 <HAL_TIM_PWM_Start+0xc6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f50:	e01b      	b.n	8007f8a <HAL_TIM_PWM_Start+0xfe>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d104      	bne.n	8007f62 <HAL_TIM_PWM_Start+0xd6>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f60:	e013      	b.n	8007f8a <HAL_TIM_PWM_Start+0xfe>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	d104      	bne.n	8007f72 <HAL_TIM_PWM_Start+0xe6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f70:	e00b      	b.n	8007f8a <HAL_TIM_PWM_Start+0xfe>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start+0xf6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f80:	e003      	b.n	8007f8a <HAL_TIM_PWM_Start+0xfe>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fd18 	bl	80089c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a38      	ldr	r2, [pc, #224]	@ (8008080 <HAL_TIM_PWM_Start+0x1f4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <HAL_TIM_PWM_Start+0x13e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a37      	ldr	r2, [pc, #220]	@ (8008084 <HAL_TIM_PWM_Start+0x1f8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00e      	beq.n	8007fca <HAL_TIM_PWM_Start+0x13e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a35      	ldr	r2, [pc, #212]	@ (8008088 <HAL_TIM_PWM_Start+0x1fc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_TIM_PWM_Start+0x13e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a34      	ldr	r2, [pc, #208]	@ (800808c <HAL_TIM_PWM_Start+0x200>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <HAL_TIM_PWM_Start+0x13e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <HAL_TIM_PWM_Start+0x204>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <HAL_TIM_PWM_Start+0x142>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <HAL_TIM_PWM_Start+0x144>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d007      	beq.n	8007fe4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a25      	ldr	r2, [pc, #148]	@ (8008080 <HAL_TIM_PWM_Start+0x1f4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d022      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff6:	d01d      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a25      	ldr	r2, [pc, #148]	@ (8008094 <HAL_TIM_PWM_Start+0x208>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a24      	ldr	r2, [pc, #144]	@ (8008098 <HAL_TIM_PWM_Start+0x20c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a22      	ldr	r2, [pc, #136]	@ (800809c <HAL_TIM_PWM_Start+0x210>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1a      	ldr	r2, [pc, #104]	@ (8008084 <HAL_TIM_PWM_Start+0x1f8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a1e      	ldr	r2, [pc, #120]	@ (80080a0 <HAL_TIM_PWM_Start+0x214>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_TIM_PWM_Start+0x1a8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <HAL_TIM_PWM_Start+0x1fc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d115      	bne.n	8008060 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	4b1a      	ldr	r3, [pc, #104]	@ (80080a4 <HAL_TIM_PWM_Start+0x218>)
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b06      	cmp	r3, #6
 8008044:	d015      	beq.n	8008072 <HAL_TIM_PWM_Start+0x1e6>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800804c:	d011      	beq.n	8008072 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805e:	e008      	b.n	8008072 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e000      	b.n	8008074 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000
 8008084:	40010400 	.word	0x40010400
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40001800 	.word	0x40001800
 80080a4:	00010007 	.word	0x00010007

080080a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e0ff      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b14      	cmp	r3, #20
 80080d2:	f200 80f0 	bhi.w	80082b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080d6:	a201      	add	r2, pc, #4	@ (adr r2, 80080dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	08008131 	.word	0x08008131
 80080e0:	080082b7 	.word	0x080082b7
 80080e4:	080082b7 	.word	0x080082b7
 80080e8:	080082b7 	.word	0x080082b7
 80080ec:	08008171 	.word	0x08008171
 80080f0:	080082b7 	.word	0x080082b7
 80080f4:	080082b7 	.word	0x080082b7
 80080f8:	080082b7 	.word	0x080082b7
 80080fc:	080081b3 	.word	0x080081b3
 8008100:	080082b7 	.word	0x080082b7
 8008104:	080082b7 	.word	0x080082b7
 8008108:	080082b7 	.word	0x080082b7
 800810c:	080081f3 	.word	0x080081f3
 8008110:	080082b7 	.word	0x080082b7
 8008114:	080082b7 	.word	0x080082b7
 8008118:	080082b7 	.word	0x080082b7
 800811c:	08008235 	.word	0x08008235
 8008120:	080082b7 	.word	0x080082b7
 8008124:	080082b7 	.word	0x080082b7
 8008128:	080082b7 	.word	0x080082b7
 800812c:	08008275 	.word	0x08008275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f970 	bl	800841c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0208 	orr.w	r2, r2, #8
 800814a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0204 	bic.w	r2, r2, #4
 800815a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6999      	ldr	r1, [r3, #24]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	691a      	ldr	r2, [r3, #16]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	619a      	str	r2, [r3, #24]
      break;
 800816e:	e0a5      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f9e0 	bl	800853c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800818a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800819a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6999      	ldr	r1, [r3, #24]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	021a      	lsls	r2, r3, #8
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	619a      	str	r2, [r3, #24]
      break;
 80081b0:	e084      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fa49 	bl	8008650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0208 	orr.w	r2, r2, #8
 80081cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0204 	bic.w	r2, r2, #4
 80081dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69d9      	ldr	r1, [r3, #28]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	61da      	str	r2, [r3, #28]
      break;
 80081f0:	e064      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fab1 	bl	8008760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800820c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800821c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69d9      	ldr	r1, [r3, #28]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	021a      	lsls	r2, r3, #8
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	61da      	str	r2, [r3, #28]
      break;
 8008232:	e043      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fafa 	bl	8008834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0208 	orr.w	r2, r2, #8
 800824e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0204 	bic.w	r2, r2, #4
 800825e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008272:	e023      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fb3e 	bl	80088fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800828e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082b4:	e002      	b.n	80082bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a46      	ldr	r2, [pc, #280]	@ (80083fc <TIM_Base_SetConfig+0x12c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d013      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ee:	d00f      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a43      	ldr	r2, [pc, #268]	@ (8008400 <TIM_Base_SetConfig+0x130>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a42      	ldr	r2, [pc, #264]	@ (8008404 <TIM_Base_SetConfig+0x134>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a41      	ldr	r2, [pc, #260]	@ (8008408 <TIM_Base_SetConfig+0x138>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a40      	ldr	r2, [pc, #256]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d108      	bne.n	8008322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a35      	ldr	r2, [pc, #212]	@ (80083fc <TIM_Base_SetConfig+0x12c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01f      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008330:	d01b      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a32      	ldr	r2, [pc, #200]	@ (8008400 <TIM_Base_SetConfig+0x130>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d017      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a31      	ldr	r2, [pc, #196]	@ (8008404 <TIM_Base_SetConfig+0x134>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d013      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a30      	ldr	r2, [pc, #192]	@ (8008408 <TIM_Base_SetConfig+0x138>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2f      	ldr	r2, [pc, #188]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2e      	ldr	r2, [pc, #184]	@ (8008410 <TIM_Base_SetConfig+0x140>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2d      	ldr	r2, [pc, #180]	@ (8008414 <TIM_Base_SetConfig+0x144>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_Base_SetConfig+0x9a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a2c      	ldr	r2, [pc, #176]	@ (8008418 <TIM_Base_SetConfig+0x148>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d108      	bne.n	800837c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <TIM_Base_SetConfig+0x12c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0xf8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a18      	ldr	r2, [pc, #96]	@ (800840c <TIM_Base_SetConfig+0x13c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0xf8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a17      	ldr	r2, [pc, #92]	@ (8008410 <TIM_Base_SetConfig+0x140>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0xf8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a16      	ldr	r2, [pc, #88]	@ (8008414 <TIM_Base_SetConfig+0x144>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0xf8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a15      	ldr	r2, [pc, #84]	@ (8008418 <TIM_Base_SetConfig+0x148>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d103      	bne.n	80083d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d105      	bne.n	80083ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f023 0201 	bic.w	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	611a      	str	r2, [r3, #16]
  }
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800
 8008408:	40000c00 	.word	0x40000c00
 800840c:	40010400 	.word	0x40010400
 8008410:	40014000 	.word	0x40014000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800

0800841c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	f023 0201 	bic.w	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4b37      	ldr	r3, [pc, #220]	@ (8008524 <TIM_OC1_SetConfig+0x108>)
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 0302 	bic.w	r3, r3, #2
 8008464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a2d      	ldr	r2, [pc, #180]	@ (8008528 <TIM_OC1_SetConfig+0x10c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00f      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a2c      	ldr	r2, [pc, #176]	@ (800852c <TIM_OC1_SetConfig+0x110>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a2b      	ldr	r2, [pc, #172]	@ (8008530 <TIM_OC1_SetConfig+0x114>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a2a      	ldr	r2, [pc, #168]	@ (8008534 <TIM_OC1_SetConfig+0x118>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a29      	ldr	r2, [pc, #164]	@ (8008538 <TIM_OC1_SetConfig+0x11c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d10c      	bne.n	80084b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f023 0308 	bic.w	r3, r3, #8
 800849e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 0304 	bic.w	r3, r3, #4
 80084b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <TIM_OC1_SetConfig+0x10c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1b      	ldr	r2, [pc, #108]	@ (800852c <TIM_OC1_SetConfig+0x110>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008530 <TIM_OC1_SetConfig+0x114>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <TIM_OC1_SetConfig+0x118>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a18      	ldr	r2, [pc, #96]	@ (8008538 <TIM_OC1_SetConfig+0x11c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d111      	bne.n	80084fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	fffeff8f 	.word	0xfffeff8f
 8008528:	40010000 	.word	0x40010000
 800852c:	40010400 	.word	0x40010400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f023 0210 	bic.w	r2, r3, #16
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4b34      	ldr	r3, [pc, #208]	@ (8008638 <TIM_OC2_SetConfig+0xfc>)
 8008568:	4013      	ands	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 0320 	bic.w	r3, r3, #32
 8008586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a29      	ldr	r2, [pc, #164]	@ (800863c <TIM_OC2_SetConfig+0x100>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC2_SetConfig+0x68>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a28      	ldr	r2, [pc, #160]	@ (8008640 <TIM_OC2_SetConfig+0x104>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d10d      	bne.n	80085c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a1e      	ldr	r2, [pc, #120]	@ (800863c <TIM_OC2_SetConfig+0x100>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00f      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008640 <TIM_OC2_SetConfig+0x104>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <TIM_OC2_SetConfig+0x108>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d007      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <TIM_OC2_SetConfig+0x10c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1a      	ldr	r2, [pc, #104]	@ (800864c <TIM_OC2_SetConfig+0x110>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d113      	bne.n	8008610 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	feff8fff 	.word	0xfeff8fff
 800863c:	40010000 	.word	0x40010000
 8008640:	40010400 	.word	0x40010400
 8008644:	40014000 	.word	0x40014000
 8008648:	40014400 	.word	0x40014400
 800864c:	40014800 	.word	0x40014800

08008650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4b33      	ldr	r3, [pc, #204]	@ (8008748 <TIM_OC3_SetConfig+0xf8>)
 800867c:	4013      	ands	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0303 	bic.w	r3, r3, #3
 8008686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a28      	ldr	r2, [pc, #160]	@ (800874c <TIM_OC3_SetConfig+0xfc>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_OC3_SetConfig+0x66>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a27      	ldr	r2, [pc, #156]	@ (8008750 <TIM_OC3_SetConfig+0x100>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d10d      	bne.n	80086d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a1d      	ldr	r2, [pc, #116]	@ (800874c <TIM_OC3_SetConfig+0xfc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00f      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008750 <TIM_OC3_SetConfig+0x100>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00b      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008754 <TIM_OC3_SetConfig+0x104>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d007      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008758 <TIM_OC3_SetConfig+0x108>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a19      	ldr	r2, [pc, #100]	@ (800875c <TIM_OC3_SetConfig+0x10c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d113      	bne.n	8008722 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	621a      	str	r2, [r3, #32]
}
 800873c:	bf00      	nop
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	fffeff8f 	.word	0xfffeff8f
 800874c:	40010000 	.word	0x40010000
 8008750:	40010400 	.word	0x40010400
 8008754:	40014000 	.word	0x40014000
 8008758:	40014400 	.word	0x40014400
 800875c:	40014800 	.word	0x40014800

08008760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4b24      	ldr	r3, [pc, #144]	@ (800881c <TIM_OC4_SetConfig+0xbc>)
 800878c:	4013      	ands	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	031b      	lsls	r3, r3, #12
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a19      	ldr	r2, [pc, #100]	@ (8008820 <TIM_OC4_SetConfig+0xc0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00f      	beq.n	80087e0 <TIM_OC4_SetConfig+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a18      	ldr	r2, [pc, #96]	@ (8008824 <TIM_OC4_SetConfig+0xc4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <TIM_OC4_SetConfig+0x80>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a17      	ldr	r2, [pc, #92]	@ (8008828 <TIM_OC4_SetConfig+0xc8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d007      	beq.n	80087e0 <TIM_OC4_SetConfig+0x80>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a16      	ldr	r2, [pc, #88]	@ (800882c <TIM_OC4_SetConfig+0xcc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d003      	beq.n	80087e0 <TIM_OC4_SetConfig+0x80>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a15      	ldr	r2, [pc, #84]	@ (8008830 <TIM_OC4_SetConfig+0xd0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d109      	bne.n	80087f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	019b      	lsls	r3, r3, #6
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	feff8fff 	.word	0xfeff8fff
 8008820:	40010000 	.word	0x40010000
 8008824:	40010400 	.word	0x40010400
 8008828:	40014000 	.word	0x40014000
 800882c:	40014400 	.word	0x40014400
 8008830:	40014800 	.word	0x40014800

08008834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4b21      	ldr	r3, [pc, #132]	@ (80088e4 <TIM_OC5_SetConfig+0xb0>)
 8008860:	4013      	ands	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a18      	ldr	r2, [pc, #96]	@ (80088e8 <TIM_OC5_SetConfig+0xb4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00f      	beq.n	80088aa <TIM_OC5_SetConfig+0x76>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a17      	ldr	r2, [pc, #92]	@ (80088ec <TIM_OC5_SetConfig+0xb8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_OC5_SetConfig+0x76>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a16      	ldr	r2, [pc, #88]	@ (80088f0 <TIM_OC5_SetConfig+0xbc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d007      	beq.n	80088aa <TIM_OC5_SetConfig+0x76>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a15      	ldr	r2, [pc, #84]	@ (80088f4 <TIM_OC5_SetConfig+0xc0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_OC5_SetConfig+0x76>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a14      	ldr	r2, [pc, #80]	@ (80088f8 <TIM_OC5_SetConfig+0xc4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d109      	bne.n	80088be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	621a      	str	r2, [r3, #32]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	fffeff8f 	.word	0xfffeff8f
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800

080088fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4b22      	ldr	r3, [pc, #136]	@ (80089b0 <TIM_OC6_SetConfig+0xb4>)
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800893e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	051b      	lsls	r3, r3, #20
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a19      	ldr	r2, [pc, #100]	@ (80089b4 <TIM_OC6_SetConfig+0xb8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00f      	beq.n	8008974 <TIM_OC6_SetConfig+0x78>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a18      	ldr	r2, [pc, #96]	@ (80089b8 <TIM_OC6_SetConfig+0xbc>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00b      	beq.n	8008974 <TIM_OC6_SetConfig+0x78>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a17      	ldr	r2, [pc, #92]	@ (80089bc <TIM_OC6_SetConfig+0xc0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d007      	beq.n	8008974 <TIM_OC6_SetConfig+0x78>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a16      	ldr	r2, [pc, #88]	@ (80089c0 <TIM_OC6_SetConfig+0xc4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_OC6_SetConfig+0x78>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a15      	ldr	r2, [pc, #84]	@ (80089c4 <TIM_OC6_SetConfig+0xc8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d109      	bne.n	8008988 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800897a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	029b      	lsls	r3, r3, #10
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	621a      	str	r2, [r3, #32]
}
 80089a2:	bf00      	nop
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	feff8fff 	.word	0xfeff8fff
 80089b4:	40010000 	.word	0x40010000
 80089b8:	40010400 	.word	0x40010400
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40014400 	.word	0x40014400
 80089c4:	40014800 	.word	0x40014800

080089c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	2201      	movs	r2, #1
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	43db      	mvns	r3, r3
 80089ea:	401a      	ands	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a1a      	ldr	r2, [r3, #32]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e06d      	b.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a30      	ldr	r2, [pc, #192]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d108      	bne.n	8008a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a20      	ldr	r2, [pc, #128]	@ (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d022      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9e:	d01d      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d018      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1c      	ldr	r2, [pc, #112]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00e      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d009      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a16      	ldr	r2, [pc, #88]	@ (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d004      	beq.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a15      	ldr	r2, [pc, #84]	@ (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d10c      	bne.n	8008af6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40010400 	.word	0x40010400
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	40001800 	.word	0x40001800
 8008b2c:	40014000 	.word	0x40014000

08008b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e065      	b.n	8008c18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a16      	ldr	r2, [pc, #88]	@ (8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d004      	beq.n	8008bda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d115      	bne.n	8008c06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	051b      	lsls	r3, r3, #20
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	40010000 	.word	0x40010000
 8008c28:	40010400 	.word	0x40010400

08008c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e042      	b.n	8008cc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7f8 fa47 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2224      	movs	r2, #36	@ 0x24
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fd90 	bl	800979c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f825 	bl	8008ccc <UART_SetConfig>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e01b      	b.n	8008cc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fe0f 	bl	80098e0 <UART_CheckIdleState>
 8008cc2:	4603      	mov	r3, r0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cd0:	b092      	sub	sp, #72	@ 0x48
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4bbe      	ldr	r3, [pc, #760]	@ (8008ff4 <UART_SetConfig+0x328>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4ab3      	ldr	r2, [pc, #716]	@ (8008ff8 <UART_SetConfig+0x32c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d34:	4313      	orrs	r3, r2
 8008d36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	4baf      	ldr	r3, [pc, #700]	@ (8008ffc <UART_SetConfig+0x330>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d52:	f023 010f 	bic.w	r1, r3, #15
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4aa6      	ldr	r2, [pc, #664]	@ (8009000 <UART_SetConfig+0x334>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d177      	bne.n	8008e5c <UART_SetConfig+0x190>
 8008d6c:	4ba5      	ldr	r3, [pc, #660]	@ (8009004 <UART_SetConfig+0x338>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d74:	2b28      	cmp	r3, #40	@ 0x28
 8008d76:	d86d      	bhi.n	8008e54 <UART_SetConfig+0x188>
 8008d78:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0xb4>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008e25 	.word	0x08008e25
 8008d84:	08008e55 	.word	0x08008e55
 8008d88:	08008e55 	.word	0x08008e55
 8008d8c:	08008e55 	.word	0x08008e55
 8008d90:	08008e55 	.word	0x08008e55
 8008d94:	08008e55 	.word	0x08008e55
 8008d98:	08008e55 	.word	0x08008e55
 8008d9c:	08008e55 	.word	0x08008e55
 8008da0:	08008e2d 	.word	0x08008e2d
 8008da4:	08008e55 	.word	0x08008e55
 8008da8:	08008e55 	.word	0x08008e55
 8008dac:	08008e55 	.word	0x08008e55
 8008db0:	08008e55 	.word	0x08008e55
 8008db4:	08008e55 	.word	0x08008e55
 8008db8:	08008e55 	.word	0x08008e55
 8008dbc:	08008e55 	.word	0x08008e55
 8008dc0:	08008e35 	.word	0x08008e35
 8008dc4:	08008e55 	.word	0x08008e55
 8008dc8:	08008e55 	.word	0x08008e55
 8008dcc:	08008e55 	.word	0x08008e55
 8008dd0:	08008e55 	.word	0x08008e55
 8008dd4:	08008e55 	.word	0x08008e55
 8008dd8:	08008e55 	.word	0x08008e55
 8008ddc:	08008e55 	.word	0x08008e55
 8008de0:	08008e3d 	.word	0x08008e3d
 8008de4:	08008e55 	.word	0x08008e55
 8008de8:	08008e55 	.word	0x08008e55
 8008dec:	08008e55 	.word	0x08008e55
 8008df0:	08008e55 	.word	0x08008e55
 8008df4:	08008e55 	.word	0x08008e55
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e55 	.word	0x08008e55
 8008e00:	08008e45 	.word	0x08008e45
 8008e04:	08008e55 	.word	0x08008e55
 8008e08:	08008e55 	.word	0x08008e55
 8008e0c:	08008e55 	.word	0x08008e55
 8008e10:	08008e55 	.word	0x08008e55
 8008e14:	08008e55 	.word	0x08008e55
 8008e18:	08008e55 	.word	0x08008e55
 8008e1c:	08008e55 	.word	0x08008e55
 8008e20:	08008e4d 	.word	0x08008e4d
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e222      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e21e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e34:	2308      	movs	r3, #8
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e21a      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e216      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e44:	2320      	movs	r3, #32
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e212      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e4c:	2340      	movs	r3, #64	@ 0x40
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e20e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e54:	2380      	movs	r3, #128	@ 0x80
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e20a      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a69      	ldr	r2, [pc, #420]	@ (8009008 <UART_SetConfig+0x33c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d130      	bne.n	8008ec8 <UART_SetConfig+0x1fc>
 8008e66:	4b67      	ldr	r3, [pc, #412]	@ (8009004 <UART_SetConfig+0x338>)
 8008e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e6a:	f003 0307 	and.w	r3, r3, #7
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d826      	bhi.n	8008ec0 <UART_SetConfig+0x1f4>
 8008e72:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <UART_SetConfig+0x1ac>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e91 	.word	0x08008e91
 8008e7c:	08008e99 	.word	0x08008e99
 8008e80:	08008ea1 	.word	0x08008ea1
 8008e84:	08008ea9 	.word	0x08008ea9
 8008e88:	08008eb1 	.word	0x08008eb1
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e1ec      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e1e8      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e1e4      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e1e0      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e1dc      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008eb8:	2340      	movs	r3, #64	@ 0x40
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e1d8      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e1d4      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800900c <UART_SetConfig+0x340>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d130      	bne.n	8008f34 <UART_SetConfig+0x268>
 8008ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8009004 <UART_SetConfig+0x338>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	d826      	bhi.n	8008f2c <UART_SetConfig+0x260>
 8008ede:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee4 <UART_SetConfig+0x218>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008efd 	.word	0x08008efd
 8008ee8:	08008f05 	.word	0x08008f05
 8008eec:	08008f0d 	.word	0x08008f0d
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f25 	.word	0x08008f25
 8008efc:	2300      	movs	r3, #0
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e1b6      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f04:	2304      	movs	r3, #4
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e1b2      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e1ae      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f14:	2310      	movs	r3, #16
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e1aa      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e1a6      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f24:	2340      	movs	r3, #64	@ 0x40
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e1a2      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f2c:	2380      	movs	r3, #128	@ 0x80
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e19e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a35      	ldr	r2, [pc, #212]	@ (8009010 <UART_SetConfig+0x344>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d130      	bne.n	8008fa0 <UART_SetConfig+0x2d4>
 8008f3e:	4b31      	ldr	r3, [pc, #196]	@ (8009004 <UART_SetConfig+0x338>)
 8008f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	d826      	bhi.n	8008f98 <UART_SetConfig+0x2cc>
 8008f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f50 <UART_SetConfig+0x284>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	08008f79 	.word	0x08008f79
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008f89 	.word	0x08008f89
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e180      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e17c      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e178      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e174      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f88:	2320      	movs	r3, #32
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e170      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f90:	2340      	movs	r3, #64	@ 0x40
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e16c      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008f98:	2380      	movs	r3, #128	@ 0x80
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e168      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8009014 <UART_SetConfig+0x348>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d142      	bne.n	8009030 <UART_SetConfig+0x364>
 8008faa:	4b16      	ldr	r3, [pc, #88]	@ (8009004 <UART_SetConfig+0x338>)
 8008fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d838      	bhi.n	8009028 <UART_SetConfig+0x35c>
 8008fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fbc <UART_SetConfig+0x2f0>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	08008fe5 	.word	0x08008fe5
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08009019 	.word	0x08009019
 8008fd0:	08009021 	.word	0x08009021
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e14a      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e146      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e142      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008fec:	2310      	movs	r3, #16
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e13e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8008ff4:	cfff69f3 	.word	0xcfff69f3
 8008ff8:	58000c00 	.word	0x58000c00
 8008ffc:	11fff4ff 	.word	0x11fff4ff
 8009000:	40011000 	.word	0x40011000
 8009004:	58024400 	.word	0x58024400
 8009008:	40004400 	.word	0x40004400
 800900c:	40004800 	.word	0x40004800
 8009010:	40004c00 	.word	0x40004c00
 8009014:	40005000 	.word	0x40005000
 8009018:	2320      	movs	r3, #32
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e128      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009020:	2340      	movs	r3, #64	@ 0x40
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e124      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009028:	2380      	movs	r3, #128	@ 0x80
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e120      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4acb      	ldr	r2, [pc, #812]	@ (8009364 <UART_SetConfig+0x698>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d176      	bne.n	8009128 <UART_SetConfig+0x45c>
 800903a:	4bcb      	ldr	r3, [pc, #812]	@ (8009368 <UART_SetConfig+0x69c>)
 800903c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009042:	2b28      	cmp	r3, #40	@ 0x28
 8009044:	d86c      	bhi.n	8009120 <UART_SetConfig+0x454>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <UART_SetConfig+0x380>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	080090f1 	.word	0x080090f1
 8009050:	08009121 	.word	0x08009121
 8009054:	08009121 	.word	0x08009121
 8009058:	08009121 	.word	0x08009121
 800905c:	08009121 	.word	0x08009121
 8009060:	08009121 	.word	0x08009121
 8009064:	08009121 	.word	0x08009121
 8009068:	08009121 	.word	0x08009121
 800906c:	080090f9 	.word	0x080090f9
 8009070:	08009121 	.word	0x08009121
 8009074:	08009121 	.word	0x08009121
 8009078:	08009121 	.word	0x08009121
 800907c:	08009121 	.word	0x08009121
 8009080:	08009121 	.word	0x08009121
 8009084:	08009121 	.word	0x08009121
 8009088:	08009121 	.word	0x08009121
 800908c:	08009101 	.word	0x08009101
 8009090:	08009121 	.word	0x08009121
 8009094:	08009121 	.word	0x08009121
 8009098:	08009121 	.word	0x08009121
 800909c:	08009121 	.word	0x08009121
 80090a0:	08009121 	.word	0x08009121
 80090a4:	08009121 	.word	0x08009121
 80090a8:	08009121 	.word	0x08009121
 80090ac:	08009109 	.word	0x08009109
 80090b0:	08009121 	.word	0x08009121
 80090b4:	08009121 	.word	0x08009121
 80090b8:	08009121 	.word	0x08009121
 80090bc:	08009121 	.word	0x08009121
 80090c0:	08009121 	.word	0x08009121
 80090c4:	08009121 	.word	0x08009121
 80090c8:	08009121 	.word	0x08009121
 80090cc:	08009111 	.word	0x08009111
 80090d0:	08009121 	.word	0x08009121
 80090d4:	08009121 	.word	0x08009121
 80090d8:	08009121 	.word	0x08009121
 80090dc:	08009121 	.word	0x08009121
 80090e0:	08009121 	.word	0x08009121
 80090e4:	08009121 	.word	0x08009121
 80090e8:	08009121 	.word	0x08009121
 80090ec:	08009119 	.word	0x08009119
 80090f0:	2301      	movs	r3, #1
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e0bc      	b.n	8009272 <UART_SetConfig+0x5a6>
 80090f8:	2304      	movs	r3, #4
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e0b8      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009100:	2308      	movs	r3, #8
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e0b4      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009108:	2310      	movs	r3, #16
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e0b0      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009110:	2320      	movs	r3, #32
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e0ac      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009118:	2340      	movs	r3, #64	@ 0x40
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e0a8      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009120:	2380      	movs	r3, #128	@ 0x80
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e0a4      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a8f      	ldr	r2, [pc, #572]	@ (800936c <UART_SetConfig+0x6a0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d130      	bne.n	8009194 <UART_SetConfig+0x4c8>
 8009132:	4b8d      	ldr	r3, [pc, #564]	@ (8009368 <UART_SetConfig+0x69c>)
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2b05      	cmp	r3, #5
 800913c:	d826      	bhi.n	800918c <UART_SetConfig+0x4c0>
 800913e:	a201      	add	r2, pc, #4	@ (adr r2, 8009144 <UART_SetConfig+0x478>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	0800915d 	.word	0x0800915d
 8009148:	08009165 	.word	0x08009165
 800914c:	0800916d 	.word	0x0800916d
 8009150:	08009175 	.word	0x08009175
 8009154:	0800917d 	.word	0x0800917d
 8009158:	08009185 	.word	0x08009185
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e086      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009164:	2304      	movs	r3, #4
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e082      	b.n	8009272 <UART_SetConfig+0x5a6>
 800916c:	2308      	movs	r3, #8
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e07e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009174:	2310      	movs	r3, #16
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e07a      	b.n	8009272 <UART_SetConfig+0x5a6>
 800917c:	2320      	movs	r3, #32
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e076      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009184:	2340      	movs	r3, #64	@ 0x40
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e072      	b.n	8009272 <UART_SetConfig+0x5a6>
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e06e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a75      	ldr	r2, [pc, #468]	@ (8009370 <UART_SetConfig+0x6a4>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d130      	bne.n	8009200 <UART_SetConfig+0x534>
 800919e:	4b72      	ldr	r3, [pc, #456]	@ (8009368 <UART_SetConfig+0x69c>)
 80091a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	d826      	bhi.n	80091f8 <UART_SetConfig+0x52c>
 80091aa:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <UART_SetConfig+0x4e4>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091c9 	.word	0x080091c9
 80091b4:	080091d1 	.word	0x080091d1
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e9 	.word	0x080091e9
 80091c4:	080091f1 	.word	0x080091f1
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e050      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091d0:	2304      	movs	r3, #4
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e04c      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091d8:	2308      	movs	r3, #8
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e048      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091e0:	2310      	movs	r3, #16
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e044      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091e8:	2320      	movs	r3, #32
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e040      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091f0:	2340      	movs	r3, #64	@ 0x40
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e03c      	b.n	8009272 <UART_SetConfig+0x5a6>
 80091f8:	2380      	movs	r3, #128	@ 0x80
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e038      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a5b      	ldr	r2, [pc, #364]	@ (8009374 <UART_SetConfig+0x6a8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d130      	bne.n	800926c <UART_SetConfig+0x5a0>
 800920a:	4b57      	ldr	r3, [pc, #348]	@ (8009368 <UART_SetConfig+0x69c>)
 800920c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	2b05      	cmp	r3, #5
 8009214:	d826      	bhi.n	8009264 <UART_SetConfig+0x598>
 8009216:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <UART_SetConfig+0x550>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009235 	.word	0x08009235
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009245 	.word	0x08009245
 8009228:	0800924d 	.word	0x0800924d
 800922c:	08009255 	.word	0x08009255
 8009230:	0800925d 	.word	0x0800925d
 8009234:	2302      	movs	r3, #2
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e01a      	b.n	8009272 <UART_SetConfig+0x5a6>
 800923c:	2304      	movs	r3, #4
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e016      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009244:	2308      	movs	r3, #8
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e012      	b.n	8009272 <UART_SetConfig+0x5a6>
 800924c:	2310      	movs	r3, #16
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e00e      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009254:	2320      	movs	r3, #32
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e00a      	b.n	8009272 <UART_SetConfig+0x5a6>
 800925c:	2340      	movs	r3, #64	@ 0x40
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e006      	b.n	8009272 <UART_SetConfig+0x5a6>
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926a:	e002      	b.n	8009272 <UART_SetConfig+0x5a6>
 800926c:	2380      	movs	r3, #128	@ 0x80
 800926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a3f      	ldr	r2, [pc, #252]	@ (8009374 <UART_SetConfig+0x6a8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	f040 80f8 	bne.w	800946e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800927e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009282:	2b20      	cmp	r3, #32
 8009284:	dc46      	bgt.n	8009314 <UART_SetConfig+0x648>
 8009286:	2b02      	cmp	r3, #2
 8009288:	f2c0 8082 	blt.w	8009390 <UART_SetConfig+0x6c4>
 800928c:	3b02      	subs	r3, #2
 800928e:	2b1e      	cmp	r3, #30
 8009290:	d87e      	bhi.n	8009390 <UART_SetConfig+0x6c4>
 8009292:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <UART_SetConfig+0x5cc>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	0800931b 	.word	0x0800931b
 800929c:	08009391 	.word	0x08009391
 80092a0:	08009323 	.word	0x08009323
 80092a4:	08009391 	.word	0x08009391
 80092a8:	08009391 	.word	0x08009391
 80092ac:	08009391 	.word	0x08009391
 80092b0:	08009333 	.word	0x08009333
 80092b4:	08009391 	.word	0x08009391
 80092b8:	08009391 	.word	0x08009391
 80092bc:	08009391 	.word	0x08009391
 80092c0:	08009391 	.word	0x08009391
 80092c4:	08009391 	.word	0x08009391
 80092c8:	08009391 	.word	0x08009391
 80092cc:	08009391 	.word	0x08009391
 80092d0:	08009343 	.word	0x08009343
 80092d4:	08009391 	.word	0x08009391
 80092d8:	08009391 	.word	0x08009391
 80092dc:	08009391 	.word	0x08009391
 80092e0:	08009391 	.word	0x08009391
 80092e4:	08009391 	.word	0x08009391
 80092e8:	08009391 	.word	0x08009391
 80092ec:	08009391 	.word	0x08009391
 80092f0:	08009391 	.word	0x08009391
 80092f4:	08009391 	.word	0x08009391
 80092f8:	08009391 	.word	0x08009391
 80092fc:	08009391 	.word	0x08009391
 8009300:	08009391 	.word	0x08009391
 8009304:	08009391 	.word	0x08009391
 8009308:	08009391 	.word	0x08009391
 800930c:	08009391 	.word	0x08009391
 8009310:	08009383 	.word	0x08009383
 8009314:	2b40      	cmp	r3, #64	@ 0x40
 8009316:	d037      	beq.n	8009388 <UART_SetConfig+0x6bc>
 8009318:	e03a      	b.n	8009390 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800931a:	f7fd ffeb 	bl	80072f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800931e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009320:	e03c      	b.n	800939c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	f7fd fffa 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009330:	e034      	b.n	800939c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009332:	f107 0318 	add.w	r3, r7, #24
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe f946 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009340:	e02c      	b.n	800939c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009342:	4b09      	ldr	r3, [pc, #36]	@ (8009368 <UART_SetConfig+0x69c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d016      	beq.n	800937c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800934e:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <UART_SetConfig+0x69c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	08db      	lsrs	r3, r3, #3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	4a07      	ldr	r2, [pc, #28]	@ (8009378 <UART_SetConfig+0x6ac>)
 800935a:	fa22 f303 	lsr.w	r3, r2, r3
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009360:	e01c      	b.n	800939c <UART_SetConfig+0x6d0>
 8009362:	bf00      	nop
 8009364:	40011400 	.word	0x40011400
 8009368:	58024400 	.word	0x58024400
 800936c:	40007800 	.word	0x40007800
 8009370:	40007c00 	.word	0x40007c00
 8009374:	58000c00 	.word	0x58000c00
 8009378:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800937c:	4b9d      	ldr	r3, [pc, #628]	@ (80095f4 <UART_SetConfig+0x928>)
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e00c      	b.n	800939c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009382:	4b9d      	ldr	r3, [pc, #628]	@ (80095f8 <UART_SetConfig+0x92c>)
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009386:	e009      	b.n	800939c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800938e:	e005      	b.n	800939c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800939a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800939c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 81de 	beq.w	8009760 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a8:	4a94      	ldr	r2, [pc, #592]	@ (80095fc <UART_SetConfig+0x930>)
 80093aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	4413      	add	r3, r2
 80093c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d305      	bcc.n	80093d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d903      	bls.n	80093dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093da:	e1c1      	b.n	8009760 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	2200      	movs	r2, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	60fa      	str	r2, [r7, #12]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	4a84      	ldr	r2, [pc, #528]	@ (80095fc <UART_SetConfig+0x930>)
 80093ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2200      	movs	r2, #0
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093fe:	f7f6 ff6b 	bl	80002d8 <__aeabi_uldivmod>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	020b      	lsls	r3, r1, #8
 8009414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009418:	0202      	lsls	r2, r0, #8
 800941a:	6979      	ldr	r1, [r7, #20]
 800941c:	6849      	ldr	r1, [r1, #4]
 800941e:	0849      	lsrs	r1, r1, #1
 8009420:	2000      	movs	r0, #0
 8009422:	460c      	mov	r4, r1
 8009424:	4605      	mov	r5, r0
 8009426:	eb12 0804 	adds.w	r8, r2, r4
 800942a:	eb43 0905 	adc.w	r9, r3, r5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	469a      	mov	sl, r3
 8009436:	4693      	mov	fp, r2
 8009438:	4652      	mov	r2, sl
 800943a:	465b      	mov	r3, fp
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f6 ff4a 	bl	80002d8 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4613      	mov	r3, r2
 800944a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800944c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009452:	d308      	bcc.n	8009466 <UART_SetConfig+0x79a>
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800945a:	d204      	bcs.n	8009466 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009462:	60da      	str	r2, [r3, #12]
 8009464:	e17c      	b.n	8009760 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800946c:	e178      	b.n	8009760 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009476:	f040 80c5 	bne.w	8009604 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800947a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800947e:	2b20      	cmp	r3, #32
 8009480:	dc48      	bgt.n	8009514 <UART_SetConfig+0x848>
 8009482:	2b00      	cmp	r3, #0
 8009484:	db7b      	blt.n	800957e <UART_SetConfig+0x8b2>
 8009486:	2b20      	cmp	r3, #32
 8009488:	d879      	bhi.n	800957e <UART_SetConfig+0x8b2>
 800948a:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <UART_SetConfig+0x7c4>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	0800951b 	.word	0x0800951b
 8009494:	08009523 	.word	0x08009523
 8009498:	0800957f 	.word	0x0800957f
 800949c:	0800957f 	.word	0x0800957f
 80094a0:	0800952b 	.word	0x0800952b
 80094a4:	0800957f 	.word	0x0800957f
 80094a8:	0800957f 	.word	0x0800957f
 80094ac:	0800957f 	.word	0x0800957f
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	0800957f 	.word	0x0800957f
 80094b8:	0800957f 	.word	0x0800957f
 80094bc:	0800957f 	.word	0x0800957f
 80094c0:	0800957f 	.word	0x0800957f
 80094c4:	0800957f 	.word	0x0800957f
 80094c8:	0800957f 	.word	0x0800957f
 80094cc:	0800957f 	.word	0x0800957f
 80094d0:	0800954b 	.word	0x0800954b
 80094d4:	0800957f 	.word	0x0800957f
 80094d8:	0800957f 	.word	0x0800957f
 80094dc:	0800957f 	.word	0x0800957f
 80094e0:	0800957f 	.word	0x0800957f
 80094e4:	0800957f 	.word	0x0800957f
 80094e8:	0800957f 	.word	0x0800957f
 80094ec:	0800957f 	.word	0x0800957f
 80094f0:	0800957f 	.word	0x0800957f
 80094f4:	0800957f 	.word	0x0800957f
 80094f8:	0800957f 	.word	0x0800957f
 80094fc:	0800957f 	.word	0x0800957f
 8009500:	0800957f 	.word	0x0800957f
 8009504:	0800957f 	.word	0x0800957f
 8009508:	0800957f 	.word	0x0800957f
 800950c:	0800957f 	.word	0x0800957f
 8009510:	08009571 	.word	0x08009571
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d02e      	beq.n	8009576 <UART_SetConfig+0x8aa>
 8009518:	e031      	b.n	800957e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800951a:	f7fb ff35 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 800951e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009520:	e033      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009522:	f7fb ff47 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 8009526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009528:	e02f      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800952e:	4618      	mov	r0, r3
 8009530:	f7fd fef6 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009538:	e027      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953a:	f107 0318 	add.w	r3, r7, #24
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe f842 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009548:	e01f      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800954a:	4b2d      	ldr	r3, [pc, #180]	@ (8009600 <UART_SetConfig+0x934>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009556:	4b2a      	ldr	r3, [pc, #168]	@ (8009600 <UART_SetConfig+0x934>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	08db      	lsrs	r3, r3, #3
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	4a24      	ldr	r2, [pc, #144]	@ (80095f4 <UART_SetConfig+0x928>)
 8009562:	fa22 f303 	lsr.w	r3, r2, r3
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009568:	e00f      	b.n	800958a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800956a:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <UART_SetConfig+0x928>)
 800956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956e:	e00c      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009570:	4b21      	ldr	r3, [pc, #132]	@ (80095f8 <UART_SetConfig+0x92c>)
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009574:	e009      	b.n	800958a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957c:	e005      	b.n	800958a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800958a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80e7 	beq.w	8009760 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009596:	4a19      	ldr	r2, [pc, #100]	@ (80095fc <UART_SetConfig+0x930>)
 8009598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800959c:	461a      	mov	r2, r3
 800959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095a4:	005a      	lsls	r2, r3, #1
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	441a      	add	r2, r3
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	2b0f      	cmp	r3, #15
 80095bc:	d916      	bls.n	80095ec <UART_SetConfig+0x920>
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095c4:	d212      	bcs.n	80095ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f023 030f 	bic.w	r3, r3, #15
 80095ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	b29a      	uxth	r2, r3
 80095dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095de:	4313      	orrs	r3, r2
 80095e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e0b9      	b.n	8009760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095f2:	e0b5      	b.n	8009760 <UART_SetConfig+0xa94>
 80095f4:	03d09000 	.word	0x03d09000
 80095f8:	003d0900 	.word	0x003d0900
 80095fc:	0800a474 	.word	0x0800a474
 8009600:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009604:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009608:	2b20      	cmp	r3, #32
 800960a:	dc49      	bgt.n	80096a0 <UART_SetConfig+0x9d4>
 800960c:	2b00      	cmp	r3, #0
 800960e:	db7c      	blt.n	800970a <UART_SetConfig+0xa3e>
 8009610:	2b20      	cmp	r3, #32
 8009612:	d87a      	bhi.n	800970a <UART_SetConfig+0xa3e>
 8009614:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <UART_SetConfig+0x950>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	080096a7 	.word	0x080096a7
 8009620:	080096af 	.word	0x080096af
 8009624:	0800970b 	.word	0x0800970b
 8009628:	0800970b 	.word	0x0800970b
 800962c:	080096b7 	.word	0x080096b7
 8009630:	0800970b 	.word	0x0800970b
 8009634:	0800970b 	.word	0x0800970b
 8009638:	0800970b 	.word	0x0800970b
 800963c:	080096c7 	.word	0x080096c7
 8009640:	0800970b 	.word	0x0800970b
 8009644:	0800970b 	.word	0x0800970b
 8009648:	0800970b 	.word	0x0800970b
 800964c:	0800970b 	.word	0x0800970b
 8009650:	0800970b 	.word	0x0800970b
 8009654:	0800970b 	.word	0x0800970b
 8009658:	0800970b 	.word	0x0800970b
 800965c:	080096d7 	.word	0x080096d7
 8009660:	0800970b 	.word	0x0800970b
 8009664:	0800970b 	.word	0x0800970b
 8009668:	0800970b 	.word	0x0800970b
 800966c:	0800970b 	.word	0x0800970b
 8009670:	0800970b 	.word	0x0800970b
 8009674:	0800970b 	.word	0x0800970b
 8009678:	0800970b 	.word	0x0800970b
 800967c:	0800970b 	.word	0x0800970b
 8009680:	0800970b 	.word	0x0800970b
 8009684:	0800970b 	.word	0x0800970b
 8009688:	0800970b 	.word	0x0800970b
 800968c:	0800970b 	.word	0x0800970b
 8009690:	0800970b 	.word	0x0800970b
 8009694:	0800970b 	.word	0x0800970b
 8009698:	0800970b 	.word	0x0800970b
 800969c:	080096fd 	.word	0x080096fd
 80096a0:	2b40      	cmp	r3, #64	@ 0x40
 80096a2:	d02e      	beq.n	8009702 <UART_SetConfig+0xa36>
 80096a4:	e031      	b.n	800970a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a6:	f7fb fe6f 	bl	8005388 <HAL_RCC_GetPCLK1Freq>
 80096aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096ac:	e033      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096ae:	f7fb fe81 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 80096b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096b4:	e02f      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fd fe30 	bl	8007320 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c4:	e027      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c6:	f107 0318 	add.w	r3, r7, #24
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fd ff7c 	bl	80075c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d4:	e01f      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d6:	4b2d      	ldr	r3, [pc, #180]	@ (800978c <UART_SetConfig+0xac0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096e2:	4b2a      	ldr	r3, [pc, #168]	@ (800978c <UART_SetConfig+0xac0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	08db      	lsrs	r3, r3, #3
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	4a28      	ldr	r2, [pc, #160]	@ (8009790 <UART_SetConfig+0xac4>)
 80096ee:	fa22 f303 	lsr.w	r3, r2, r3
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096f4:	e00f      	b.n	8009716 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80096f6:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <UART_SetConfig+0xac4>)
 80096f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fa:	e00c      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096fc:	4b25      	ldr	r3, [pc, #148]	@ (8009794 <UART_SetConfig+0xac8>)
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009700:	e009      	b.n	8009716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e005      	b.n	8009716 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009714:	bf00      	nop
    }

    if (pclk != 0U)
 8009716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d021      	beq.n	8009760 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009720:	4a1d      	ldr	r2, [pc, #116]	@ (8009798 <UART_SetConfig+0xacc>)
 8009722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009726:	461a      	mov	r2, r3
 8009728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972a:	fbb3 f2f2 	udiv	r2, r3, r2
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	085b      	lsrs	r3, r3, #1
 8009734:	441a      	add	r2, r3
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	fbb2 f3f3 	udiv	r3, r2, r3
 800973e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d909      	bls.n	800975a <UART_SetConfig+0xa8e>
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800974c:	d205      	bcs.n	800975a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	b29a      	uxth	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60da      	str	r2, [r3, #12]
 8009758:	e002      	b.n	8009760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2201      	movs	r2, #1
 8009764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2201      	movs	r2, #1
 800976c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2200      	movs	r2, #0
 8009774:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2200      	movs	r2, #0
 800977a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800977c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009780:	4618      	mov	r0, r3
 8009782:	3748      	adds	r7, #72	@ 0x48
 8009784:	46bd      	mov	sp, r7
 8009786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800978a:	bf00      	nop
 800978c:	58024400 	.word	0x58024400
 8009790:	03d09000 	.word	0x03d09000
 8009794:	003d0900 	.word	0x003d0900
 8009798:	0800a474 	.word	0x0800a474

0800979c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01a      	beq.n	80098b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800989a:	d10a      	bne.n	80098b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	605a      	str	r2, [r3, #4]
  }
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b098      	sub	sp, #96	@ 0x60
 80098e4:	af02      	add	r7, sp, #8
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098f0:	f7f7 fdd8 	bl	80014a4 <HAL_GetTick>
 80098f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b08      	cmp	r3, #8
 8009902:	d12f      	bne.n	8009964 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800990c:	2200      	movs	r2, #0
 800990e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f88e 	bl	8009a34 <UART_WaitOnFlagUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d022      	beq.n	8009964 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800992c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009932:	653b      	str	r3, [r7, #80]	@ 0x50
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800993c:	647b      	str	r3, [r7, #68]	@ 0x44
 800993e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800994a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e6      	bne.n	800991e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2220      	movs	r2, #32
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e063      	b.n	8009a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b04      	cmp	r3, #4
 8009970:	d149      	bne.n	8009a06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009972:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800997a:	2200      	movs	r2, #0
 800997c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f857 	bl	8009a34 <UART_WaitOnFlagUntilTimeout>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d03c      	beq.n	8009a06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	623b      	str	r3, [r7, #32]
   return(result);
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80099ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e6      	bne.n	800998c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3308      	adds	r3, #8
 80099c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 0301 	bic.w	r3, r3, #1
 80099d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3308      	adds	r3, #8
 80099dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099de:	61fa      	str	r2, [r7, #28]
 80099e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	69b9      	ldr	r1, [r7, #24]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	617b      	str	r3, [r7, #20]
   return(result);
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e5      	bne.n	80099be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e012      	b.n	8009a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3758      	adds	r7, #88	@ 0x58
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a44:	e04f      	b.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4c:	d04b      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4e:	f7f7 fd29 	bl	80014a4 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d302      	bcc.n	8009a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e04e      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d037      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b80      	cmp	r3, #128	@ 0x80
 8009a7a:	d034      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b40      	cmp	r3, #64	@ 0x40
 8009a80:	d031      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f003 0308 	and.w	r3, r3, #8
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d110      	bne.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2208      	movs	r2, #8
 8009a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f839 	bl	8009b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e029      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ac0:	d111      	bne.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f81f 	bl	8009b10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e00f      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4013      	ands	r3, r2
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d0a0      	beq.n	8009a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b095      	sub	sp, #84	@ 0x54
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b36:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e6      	bne.n	8009b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd8 <UART_EndRxTransfer+0xc8>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3308      	adds	r3, #8
 8009b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e5      	bne.n	8009b4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d118      	bne.n	8009bb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6979      	ldr	r1, [r7, #20]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e6      	bne.n	8009b86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bcc:	bf00      	nop
 8009bce:	3754      	adds	r7, #84	@ 0x54
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	effffffe 	.word	0xeffffffe

08009bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e027      	b.n	8009c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2224      	movs	r2, #36	@ 0x24
 8009bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e02d      	b.n	8009cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	@ 0x24
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f850 	bl	8009d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e02d      	b.n	8009d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2224      	movs	r2, #36	@ 0x24
 8009cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0201 	bic.w	r2, r2, #1
 8009d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f812 	bl	8009d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d108      	bne.n	8009d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d68:	e031      	b.n	8009dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d6a:	2310      	movs	r3, #16
 8009d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d6e:	2310      	movs	r3, #16
 8009d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	0e5b      	lsrs	r3, r3, #25
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	0f5b      	lsrs	r3, r3, #29
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	f003 0307 	and.w	r3, r3, #7
 8009d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	7b3a      	ldrb	r2, [r7, #12]
 8009d96:	4911      	ldr	r1, [pc, #68]	@ (8009ddc <UARTEx_SetNbDataToProcess+0x94>)
 8009d98:	5c8a      	ldrb	r2, [r1, r2]
 8009d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d9e:	7b3a      	ldrb	r2, [r7, #12]
 8009da0:	490f      	ldr	r1, [pc, #60]	@ (8009de0 <UARTEx_SetNbDataToProcess+0x98>)
 8009da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	7b7a      	ldrb	r2, [r7, #13]
 8009db4:	4909      	ldr	r1, [pc, #36]	@ (8009ddc <UARTEx_SetNbDataToProcess+0x94>)
 8009db6:	5c8a      	ldrb	r2, [r1, r2]
 8009db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dbc:	7b7a      	ldrb	r2, [r7, #13]
 8009dbe:	4908      	ldr	r1, [pc, #32]	@ (8009de0 <UARTEx_SetNbDataToProcess+0x98>)
 8009dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	0800a48c 	.word	0x0800a48c
 8009de0:	0800a494 	.word	0x0800a494

08009de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009de4:	b084      	sub	sp, #16
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	f107 001c 	add.w	r0, r7, #28
 8009df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009df6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d121      	bne.n	8009e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ec0 <USB_CoreInit+0xdc>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d105      	bne.n	8009e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 faaa 	bl	800a390 <USB_CoreReset>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
 8009e40:	e01b      	b.n	8009e7a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa9e 	bl	800a390 <USB_CoreReset>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e6c:	e005      	b.n	8009e7a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e7a:	7fbb      	ldrb	r3, [r7, #30]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d116      	bne.n	8009eae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <USB_CoreInit+0xe0>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f043 0206 	orr.w	r2, r3, #6
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f043 0220 	orr.w	r2, r3, #32
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009eba:	b004      	add	sp, #16
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	ffbdffbf 	.word	0xffbdffbf
 8009ec4:	03ee0000 	.word	0x03ee0000

08009ec8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f023 0201 	bic.w	r2, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d115      	bne.n	8009f38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f18:	200a      	movs	r0, #10
 8009f1a:	f7f7 facf 	bl	80014bc <HAL_Delay>
      ms += 10U;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	330a      	adds	r3, #10
 8009f22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fa25 	bl	800a374 <USB_GetMode>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d01e      	beq.n	8009f6e <USB_SetCurrentMode+0x84>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f34:	d9f0      	bls.n	8009f18 <USB_SetCurrentMode+0x2e>
 8009f36:	e01a      	b.n	8009f6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d115      	bne.n	8009f6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f4a:	200a      	movs	r0, #10
 8009f4c:	f7f7 fab6 	bl	80014bc <HAL_Delay>
      ms += 10U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	330a      	adds	r3, #10
 8009f54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa0c 	bl	800a374 <USB_GetMode>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <USB_SetCurrentMode+0x84>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f66:	d9f0      	bls.n	8009f4a <USB_SetCurrentMode+0x60>
 8009f68:	e001      	b.n	8009f6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e005      	b.n	8009f7a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2bc8      	cmp	r3, #200	@ 0xc8
 8009f72:	d101      	bne.n	8009f78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e000      	b.n	8009f7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f84:	b084      	sub	sp, #16
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b086      	sub	sp, #24
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	e009      	b.n	8009fb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3340      	adds	r3, #64	@ 0x40
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2b0e      	cmp	r3, #14
 8009fbc:	d9f2      	bls.n	8009fa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d11c      	bne.n	800a000 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fde:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	e005      	b.n	800a00c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a004:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a012:	461a      	mov	r2, r3
 800a014:	2300      	movs	r3, #0
 800a016:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a018:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d10d      	bne.n	800a03c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a024:	2b00      	cmp	r3, #0
 800a026:	d104      	bne.n	800a032 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a028:	2100      	movs	r1, #0
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f968 	bl	800a300 <USB_SetDevSpeed>
 800a030:	e008      	b.n	800a044 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a032:	2101      	movs	r1, #1
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f963 	bl	800a300 <USB_SetDevSpeed>
 800a03a:	e003      	b.n	800a044 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a03c:	2103      	movs	r1, #3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f95e 	bl	800a300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a044:	2110      	movs	r1, #16
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f8fa 	bl	800a240 <USB_FlushTxFifo>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f924 	bl	800a2a4 <USB_FlushRxFifo>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06c:	461a      	mov	r2, r3
 800a06e:	2300      	movs	r3, #0
 800a070:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a078:	461a      	mov	r2, r3
 800a07a:	2300      	movs	r3, #0
 800a07c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a084:	461a      	mov	r2, r3
 800a086:	2300      	movs	r3, #0
 800a088:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a08a:	2300      	movs	r3, #0
 800a08c:	613b      	str	r3, [r7, #16]
 800a08e:	e043      	b.n	800a118 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0a6:	d118      	bne.n	800a0da <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	e013      	b.n	800a0ec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	e008      	b.n	800a0ec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10a:	461a      	mov	r2, r3
 800a10c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	3301      	adds	r3, #1
 800a116:	613b      	str	r3, [r7, #16]
 800a118:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a11c:	461a      	mov	r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	4293      	cmp	r3, r2
 800a122:	d3b5      	bcc.n	800a090 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a124:	2300      	movs	r3, #0
 800a126:	613b      	str	r3, [r7, #16]
 800a128:	e043      	b.n	800a1b2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a13c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a140:	d118      	bne.n	800a174 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a154:	461a      	mov	r2, r3
 800a156:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	e013      	b.n	800a186 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16a:	461a      	mov	r2, r3
 800a16c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	e008      	b.n	800a186 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a180:	461a      	mov	r2, r3
 800a182:	2300      	movs	r3, #0
 800a184:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a192:	461a      	mov	r2, r3
 800a194:	2300      	movs	r3, #0
 800a196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d3b5      	bcc.n	800a12a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a1de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f043 0210 	orr.w	r2, r3, #16
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a238 <USB_DevInit+0x2b4>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a200:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	f043 0208 	orr.w	r2, r3, #8
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a214:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d105      	bne.n	800a228 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699a      	ldr	r2, [r3, #24]
 800a220:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <USB_DevInit+0x2b8>)
 800a222:	4313      	orrs	r3, r2
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a234:	b004      	add	sp, #16
 800a236:	4770      	bx	lr
 800a238:	803c3800 	.word	0x803c3800
 800a23c:	40000004 	.word	0x40000004

0800a240 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a25a:	d901      	bls.n	800a260 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e01b      	b.n	800a298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	daf2      	bge.n	800a24e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	019b      	lsls	r3, r3, #6
 800a270:	f043 0220 	orr.w	r2, r3, #32
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a284:	d901      	bls.n	800a28a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e006      	b.n	800a298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b20      	cmp	r3, #32
 800a294:	d0f0      	beq.n	800a278 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2bc:	d901      	bls.n	800a2c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e018      	b.n	800a2f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	daf2      	bge.n	800a2b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2210      	movs	r2, #16
 800a2d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2e0:	d901      	bls.n	800a2e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e006      	b.n	800a2f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0310 	and.w	r3, r3, #16
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d0f0      	beq.n	800a2d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a320:	4313      	orrs	r3, r2
 800a322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a34c:	f023 0303 	bic.w	r3, r3, #3
 800a350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a360:	f043 0302 	orr.w	r3, r3, #2
 800a364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	f003 0301 	and.w	r3, r3, #1
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3a8:	d901      	bls.n	800a3ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e01b      	b.n	800a3e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	daf2      	bge.n	800a39c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	f043 0201 	orr.w	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3d2:	d901      	bls.n	800a3d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e006      	b.n	800a3e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d0f0      	beq.n	800a3c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <memset>:
 800a3f2:	4402      	add	r2, r0
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d100      	bne.n	800a3fc <memset+0xa>
 800a3fa:	4770      	bx	lr
 800a3fc:	f803 1b01 	strb.w	r1, [r3], #1
 800a400:	e7f9      	b.n	800a3f6 <memset+0x4>
	...

0800a404 <__libc_init_array>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	4d0d      	ldr	r5, [pc, #52]	@ (800a43c <__libc_init_array+0x38>)
 800a408:	4c0d      	ldr	r4, [pc, #52]	@ (800a440 <__libc_init_array+0x3c>)
 800a40a:	1b64      	subs	r4, r4, r5
 800a40c:	10a4      	asrs	r4, r4, #2
 800a40e:	2600      	movs	r6, #0
 800a410:	42a6      	cmp	r6, r4
 800a412:	d109      	bne.n	800a428 <__libc_init_array+0x24>
 800a414:	4d0b      	ldr	r5, [pc, #44]	@ (800a444 <__libc_init_array+0x40>)
 800a416:	4c0c      	ldr	r4, [pc, #48]	@ (800a448 <__libc_init_array+0x44>)
 800a418:	f000 f818 	bl	800a44c <_init>
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2600      	movs	r6, #0
 800a422:	42a6      	cmp	r6, r4
 800a424:	d105      	bne.n	800a432 <__libc_init_array+0x2e>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42c:	4798      	blx	r3
 800a42e:	3601      	adds	r6, #1
 800a430:	e7ee      	b.n	800a410 <__libc_init_array+0xc>
 800a432:	f855 3b04 	ldr.w	r3, [r5], #4
 800a436:	4798      	blx	r3
 800a438:	3601      	adds	r6, #1
 800a43a:	e7f2      	b.n	800a422 <__libc_init_array+0x1e>
 800a43c:	0800a4a4 	.word	0x0800a4a4
 800a440:	0800a4a4 	.word	0x0800a4a4
 800a444:	0800a4a4 	.word	0x0800a4a4
 800a448:	0800a4a8 	.word	0x0800a4a8

0800a44c <_init>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr

0800a458 <_fini>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr
